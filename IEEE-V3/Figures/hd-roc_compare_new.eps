%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: hd-roc_compare_new.eps-3481.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/16/2022, 10:57:58 AM
%%BoundingBox: 0 0 405 291
%%HiResBoundingBox: 0 0 404.6778 290.5328
%%CropBox: 0 0 404.6778 290.5328
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1014 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-16T10:57:33+08:00"
   xmp:CreateDate="2022-08-16T10:57:33+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.9.0.1467703 \(R2020b\). Operating System: Linux)"
   xmpMM:DocumentID="uuid:acbd8aea-1f6a-11ed-0000-344ebfd38d9b"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/zhenyuzhou/Desktop/finger-knuckle/deep-learning/codekevin/fknet/test/version-2/hd/hd-roc_compare_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -290.533 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 290.533 li
404.678 290.533 li
404.678 0 li
cp
clp
-15.8503 290.533 mo
434.15 290.533 li
434.15 -3.46725 li
-15.8503 -3.46725 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
-15.8503 290.533 mo
434.15 290.533 li
434.15 -3.46725 li
-15.8503 -3.46725 li
cp
f
42.6497 250.783 mo
391.4 250.783 li
391.4 18.2827 li
42.6497 18.2827 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
43.0247 250.783 mo
43.0247 18.2827 li
1 /0 /CSD get_res sepcs
.224609 sep
@
63.9985 250.783 mo
63.9985 18.2827 li
@
76.2677 250.783 mo
76.2677 18.2827 li
@
84.9727 250.783 mo
84.9727 18.2827 li
@
91.7247 250.783 mo
91.7247 18.2827 li
@
97.2427 250.783 mo
97.2427 18.2827 li
@
101.907 250.783 mo
101.907 18.2827 li
@
105.948 250.783 mo
105.948 18.2827 li
@
109.512 250.783 mo
109.512 18.2827 li
@
112.7 250.783 mo
112.7 18.2827 li
@
133.675 250.783 mo
133.675 18.2827 li
@
145.943 250.783 mo
145.943 18.2827 li
@
154.648 250.783 mo
154.648 18.2827 li
@
161.4 250.783 mo
161.4 18.2827 li
@
166.918 250.783 mo
166.918 18.2827 li
@
171.582 250.783 mo
171.582 18.2827 li
@
175.623 250.783 mo
175.623 18.2827 li
@
179.187 250.783 mo
179.187 18.2827 li
@
182.375 250.783 mo
182.375 18.2827 li
@
203.35 250.783 mo
203.35 18.2827 li
@
215.618 250.783 mo
215.618 18.2827 li
@
224.323 250.783 mo
224.323 18.2827 li
@
231.075 250.783 mo
231.075 18.2827 li
@
236.593 250.783 mo
236.593 18.2827 li
@
241.257 250.783 mo
241.257 18.2827 li
@
245.298 250.783 mo
245.298 18.2827 li
@
248.862 250.783 mo
248.862 18.2827 li
@
273.025 250.783 mo
273.025 18.2827 li
@
285.294 250.783 mo
285.294 18.2827 li
@
293.998 250.783 mo
293.998 18.2827 li
@
300.75 250.783 mo
300.75 18.2827 li
@
306.268 250.783 mo
306.268 18.2827 li
@
310.932 250.783 mo
310.932 18.2827 li
@
314.973 250.783 mo
314.973 18.2827 li
@
318.537 250.783 mo
318.537 18.2827 li
@
321.725 250.783 mo
321.725 18.2827 li
@
342.7 250.783 mo
342.7 18.2827 li
@
354.969 250.783 mo
354.969 18.2827 li
@
363.673 250.783 mo
363.673 18.2827 li
@
370.425 250.783 mo
370.425 18.2827 li
@
375.943 250.783 mo
375.943 18.2827 li
@
380.607 250.783 mo
380.607 18.2827 li
@
384.648 250.783 mo
384.648 18.2827 li
@
388.212 250.783 mo
388.212 18.2827 li
@
1 lj
[] 0 dsh
112.7 250.783 mo
112.7 18.2827 li
1 /0 /CSD get_res sepcs
.126953 sep
@
252.05 250.783 mo
252.05 18.2827 li
@
391.4 250.783 mo
391.4 18.2827 li
@
391.4 250.783 mo
42.6497 250.783 li
@
391.4 217.568 mo
42.6497 217.568 li
@
391.4 184.355 mo
42.6497 184.355 li
@
391.4 151.14 mo
42.6497 151.14 li
@
391.4 117.926 mo
42.6497 117.926 li
@
391.4 84.7107 mo
42.6497 84.7107 li
@
391.4 51.4967 mo
42.6497 51.4967 li
@
391.4 18.2827 mo
42.6497 18.2827 li
@
2 lc
42.6497 250.783 mo
391.4 250.783 li
1 /0 /CSD get_res sepcs
.851074 sep
@
42.6497 18.2827 mo
391.4 18.2827 li
@
112.7 250.783 mo
112.7 247.295 li
@
252.05 250.783 mo
252.05 247.295 li
@
391.4 250.783 mo
391.4 247.295 li
@
112.7 18.2827 mo
112.7 21.7697 li
@
252.05 18.2827 mo
252.05 21.7697 li
@
391.4 18.2827 mo
391.4 21.7697 li
@
43.0247 250.783 mo
43.0247 249.039 li
@
63.9985 250.783 mo
63.9985 249.039 li
@
76.2677 250.783 mo
76.2677 249.039 li
@
84.9727 250.783 mo
84.9727 249.039 li
@
91.7247 250.783 mo
91.7247 249.039 li
@
97.2427 250.783 mo
97.2427 249.039 li
@
101.907 250.783 mo
101.907 249.039 li
@
105.948 250.783 mo
105.948 249.039 li
@
109.512 250.783 mo
109.512 249.039 li
@
112.7 250.783 mo
112.7 249.039 li
@
112.7 250.783 mo
112.7 249.039 li
@
133.675 250.783 mo
133.675 249.039 li
@
145.943 250.783 mo
145.943 249.039 li
@
154.648 250.783 mo
154.648 249.039 li
@
161.4 250.783 mo
161.4 249.039 li
@
166.918 250.783 mo
166.918 249.039 li
@
171.582 250.783 mo
171.582 249.039 li
@
175.623 250.783 mo
175.623 249.039 li
@
179.187 250.783 mo
179.187 249.039 li
@
182.375 250.783 mo
182.375 249.039 li
@
203.35 250.783 mo
203.35 249.039 li
@
215.618 250.783 mo
215.618 249.039 li
@
224.323 250.783 mo
224.323 249.039 li
@
231.075 250.783 mo
231.075 249.039 li
@
236.593 250.783 mo
236.593 249.039 li
@
241.257 250.783 mo
241.257 249.039 li
@
245.298 250.783 mo
245.298 249.039 li
@
248.862 250.783 mo
248.862 249.039 li
@
252.05 250.783 mo
252.05 249.039 li
@
273.025 250.783 mo
273.025 249.039 li
@
285.294 250.783 mo
285.294 249.039 li
@
293.998 250.783 mo
293.998 249.039 li
@
300.75 250.783 mo
300.75 249.039 li
@
306.268 250.783 mo
306.268 249.039 li
@
310.932 250.783 mo
310.932 249.039 li
@
314.973 250.783 mo
314.973 249.039 li
@
318.537 250.783 mo
318.537 249.039 li
@
321.725 250.783 mo
321.725 249.039 li
@
342.7 250.783 mo
342.7 249.039 li
@
354.969 250.783 mo
354.969 249.039 li
@
363.673 250.783 mo
363.673 249.039 li
@
370.425 250.783 mo
370.425 249.039 li
@
375.943 250.783 mo
375.943 249.039 li
@
380.607 250.783 mo
380.607 249.039 li
@
384.648 250.783 mo
384.648 249.039 li
@
388.212 250.783 mo
388.212 249.039 li
@
391.4 250.783 mo
391.4 249.039 li
@
43.0247 18.2827 mo
43.0247 20.0267 li
@
63.9985 18.2827 mo
63.9985 20.0267 li
@
76.2677 18.2827 mo
76.2677 20.0267 li
@
84.9727 18.2827 mo
84.9727 20.0267 li
@
91.7247 18.2827 mo
91.7247 20.0267 li
@
97.2427 18.2827 mo
97.2427 20.0267 li
@
101.907 18.2827 mo
101.907 20.0267 li
@
105.948 18.2827 mo
105.948 20.0267 li
@
109.512 18.2827 mo
109.512 20.0267 li
@
112.7 18.2827 mo
112.7 20.0267 li
@
112.7 18.2827 mo
112.7 20.0267 li
@
133.675 18.2827 mo
133.675 20.0267 li
@
145.943 18.2827 mo
145.943 20.0267 li
@
154.648 18.2827 mo
154.648 20.0267 li
@
161.4 18.2827 mo
161.4 20.0267 li
@
166.918 18.2827 mo
166.918 20.0267 li
@
171.582 18.2827 mo
171.582 20.0267 li
@
175.623 18.2827 mo
175.623 20.0267 li
@
179.187 18.2827 mo
179.187 20.0267 li
@
182.375 18.2827 mo
182.375 20.0267 li
@
203.35 18.2827 mo
203.35 20.0267 li
@
215.618 18.2827 mo
215.618 20.0267 li
@
224.323 18.2827 mo
224.323 20.0267 li
@
231.075 18.2827 mo
231.075 20.0267 li
@
236.593 18.2827 mo
236.593 20.0267 li
@
241.257 18.2827 mo
241.257 20.0267 li
@
245.298 18.2827 mo
245.298 20.0267 li
@
248.862 18.2827 mo
248.862 20.0267 li
@
252.05 18.2827 mo
252.05 20.0267 li
@
273.025 18.2827 mo
273.025 20.0267 li
@
285.294 18.2827 mo
285.294 20.0267 li
@
293.998 18.2827 mo
293.998 20.0267 li
@
300.75 18.2827 mo
300.75 20.0267 li
@
306.268 18.2827 mo
306.268 20.0267 li
@
310.932 18.2827 mo
310.932 20.0267 li
@
314.973 18.2827 mo
314.973 20.0267 li
@
318.537 18.2827 mo
318.537 20.0267 li
@
321.725 18.2827 mo
321.725 20.0267 li
@
342.7 18.2827 mo
342.7 20.0267 li
@
354.969 18.2827 mo
354.969 20.0267 li
@
363.673 18.2827 mo
363.673 20.0267 li
@
370.425 18.2827 mo
370.425 20.0267 li
@
375.943 18.2827 mo
375.943 20.0267 li
@
380.607 18.2827 mo
380.607 20.0267 li
@
384.648 18.2827 mo
384.648 20.0267 li
@
388.212 18.2827 mo
388.212 20.0267 li
@
391.4 18.2827 mo
391.4 20.0267 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/CPYTWR+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/CPYTWR+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/.notdef /four 12{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t 139{/.notdef}rp]
CPYTWR+Helvetica nf
CPYTWR+Helvetica*1 [12 0 0 -12 0 0 ]msf
99.6497 270.283 mo
(10)
[6.672 0 ]xsh
CPYTWR+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
115.4 264.283 mo
(-4)
[3.19673 0 ]xsh
CPYTWR+Helvetica*1 [12 0 0 -12 0 0 ]msf
239.15 270.283 mo
(10)
[6.672 0 ]xsh
CPYTWR+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
254.9 264.283 mo
(-2)
[3.19672 0 ]xsh
CPYTWR+Helvetica*1 [12 0 0 -12 0 0 ]msf
380.15 270.283 mo
(10)
[6.672 0 ]xsh
CPYTWR+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
395.9 264.283 mo
(0)sh
CPYTWR+Helvetica*1 [13.2 0 0 -13.2 0 0 ]msf
141.65 286.933 mo
(Fal)sh
159.984 286.933 mo
(se Acceptance R)sh
259.763 286.933 mo
(ate)sh
42.6497 250.783 mo
42.6497 18.2827 li
@
391.4 250.783 mo
391.4 18.2827 li
@
42.6497 250.783 mo
46.1372 250.783 li
@
42.6497 217.568 mo
46.1372 217.568 li
@
42.6497 184.355 mo
46.1372 184.355 li
@
42.6497 151.14 mo
46.1372 151.14 li
@
42.6497 117.926 mo
46.1372 117.926 li
@
42.6497 84.7107 mo
46.1372 84.7107 li
@
42.6497 51.4967 mo
46.1372 51.4967 li
@
42.6497 18.2827 mo
46.1372 18.2827 li
@
391.4 250.783 mo
387.913 250.783 li
@
391.4 217.568 mo
387.913 217.568 li
@
391.4 184.355 mo
387.913 184.355 li
@
391.4 151.14 mo
387.913 151.14 li
@
391.4 117.926 mo
387.913 117.926 li
@
391.4 84.7107 mo
387.913 84.7107 li
@
391.4 51.4967 mo
387.913 51.4967 li
@
391.4 18.2827 mo
387.913 18.2827 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
CPYTWR+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3
518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE7
19F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E5897699
5550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77
D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFF
C73DA426D2C4> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPYTWR+Helvetica /Encoding get
dup 46 /period put
dup 51 /three put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/CPYTWR+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /three /four /five /six /seven /eight /nine 
7{/.notdef}rp /A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
CPYTWR+Helvetica nf
CPYTWR+Helvetica*1 [12 0 0 -12 0 0 ]msf
18.7497 254.908 mo
(0.3)sh
18.7497 221.693 mo
(0.4)sh
18.7497 188.479 mo
(0.5)sh
18.7497 155.265 mo
(0.6)sh
18.7497 122.051 mo
(0.7)sh
18.7497 88.8361 mo
(0.8)sh
18.7497 55.622 mo
(0.9)sh
29.9997 22.4075 mo
(1)sh
CPYTWR+Helvetica*1 [0 -13.2 -13.2 0 0 0 ]msf
11.9997 220.408 mo
(Genuine Acceptance Rate)
[-10.2696 -7.3392 -7.3392 -7.33919 -2.9304 -7.3392 -7.33919 -3.6696 -8.8045 -6.59999 -6.59999 -7.3392 
-7.3392 -3.66959 -7.3392 -7.3392 -6.60001 -7.33919 -3.6696 -9.5304 -7.3392 -3.6696 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/CPYTWS+Helvetica-Bold /JAAAAA+Helvetica-Bold findfont ct_VMDictPut
/CPYTWS+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
CPYTWS+Helvetica-Bold nf
CPYTWS+Helvetica-Bold*1 [13.2 0 0 -13.2 0 0 ]msf
86.8997 12.0577 mo
(Receiver Operating Characteristics)
[9.5304 7.3392 7.3392 7.3392 3.6696 7.3392 7.33919 5.1349 3.6696 10.2696 8.06511 7.33919 
5.1349 7.3392 4.39549 3.6696 8.06509 8.06509 3.66962 9.5304 8.06509 7.3392 5.13489 7.3392 
7.3392 4.39551 7.33917 5.13492 3.66959 7.3392 4.39551 3.66959 7.3392 0 ]xsh
0 lc
42.6083 127.331 mo
81.4106 111.581 li
111.868 102.835 li
146.61 93.9717 li
181.909 90.8217 li
217.007 86.6237 li
252.121 78.2277 li
286.884 62.0168 li
321.722 39.0417 li
356.563 23.0638 li
391.399 18.2827 li
@
0 lj
81.4102 108.581 mo
81.4102 114.581 li
@
111.868 99.8347 mo
111.868 105.835 li
@
146.609 90.9707 mo
146.609 96.9707 li
@
181.909 87.8217 mo
181.909 93.8217 li
@
217.007 83.6237 mo
217.007 89.6237 li
@
252.121 75.2267 mo
252.121 81.2267 li
@
286.885 59.0168 mo
286.885 65.0168 li
@
321.722 36.0417 mo
321.722 42.0417 li
@
356.563 20.0648 mo
356.563 26.0648 li
@
391.399 15.2827 mo
391.399 21.2827 li
@
1 lj
42.6083 241.854 mo
44.1259 240.1 li
44.1259 228.787 li
45.5333 224.356 li
51.7306 220.041 li
53.8931 216.076 li
53.8931 212.11 li
55.911 209.195 li
55.911 203.947 li
57.8028 198.349 li
57.8028 193.917 li
58.7063 191.351 li
62.0716 188.319 li
62.8575 185.171 li
62.8575 183.188 li
62.8575 178.99 li
64.3712 176.54 li
64.3712 173.159 li
66.5079 169.893 li
68.5036 166.511 li
68.5036 162.313 li
68.5036 160.097 li
68.5036 156.715 li
70.9759 154.032 li
70.9759 150.651 li
71.563 147.851 li
72.1395 146.219 li
72.1395 144.119 li
73.2602 141.67 li
74.3411 139.804 li
75.8935 135.956 li
75.8935 134.207 li
75.8935 132.69 li
76.3931 129.775 li
78.3153 125.926 li
80.9868 124.06 li
81.8274 122.427 li
81.8274 119.978 li
82.6458 117.179 li
84.2177 114.381 li
87.1367 112.631 li
87.8247 111.348 li
88.8267 110.182 li
89.1547 107.616 li
89.1547 104.934 li
90.7387 103.418 li
93.1137 100.852 li
94.2347 98.8697 li
96.3587 96.4197 li
97.1187 95.1377 li
98.1027 94.6707 li
99.7517 93.2717 li
101.532 91.6387 li
103.417 90.7057 li
104.612 89.4238 li
105.573 88.2567 li
107.05 87.4397 li
107.407 85.4577 li
109.137 83.7077 li
109.637 82.6587 li
111.403 81.2598 li
113.366 80.3267 li
113.657 79.2767 li
113.657 78.2277 li
114.088 76.5948 li
115.619 75.8948 li
117.205 75.5448 li
117.968 74.3777 li
118.589 73.2117 li
120.726 72.2787 li
122.506 71.6967 li
123.148 69.9467 li
124.895 68.7807 li
125.684 67.6138 li
126.262 66.5647 li
127.57 65.5157 li
128.293 64.1158 li
130.279 63.6497 li
131.986 63.0658 li
133.525 62.1327 li
134.632 60.7337 li
135.205 60.0337 li
136.525 59.3337 li
137.66 58.9847 li
139.502 58.5177 li
140.352 57.8188 li
141.297 56.7688 li
142.098 56.4187 li
143.046 55.6017 li
144.016 55.0188 li
145.009 54.3197 li
146.168 53.8527 li
147.093 53.5027 li
147.568 51.8698 li
148.177 51.8698 li
148.817 51.0537 li
150.016 50.8207 li
150.874 50.3537 li
152.118 50.1207 li
153.157 49.5378 li
154.686 49.1877 li
156.568 48.7217 li
158.072 48.2547 li
159.089 47.7887 li
160.229 47.5557 li
162.066 46.8557 li
163.158 46.3887 li
164.157 46.1557 li
164.884 45.6897 li
165.802 45.5717 li
166.919 44.9897 li
167.923 44.6398 li
168.614 44.1727 li
169.197 43.8237 li
170.419 43.8237 li
171.077 43.3567 li
171.955 42.8898 li
172.786 42.1908 li
174.072 41.6077 li
175.286 41.2577 li
176.143 41.1418 li
176.975 40.7908 li
177.907 40.3247 li
178.963 40.2077 li
179.853 39.2757 li
180.907 38.8087 li
182.166 38.6918 li
183.084 38.5757 li
183.849 38.2257 li
184.829 38.1087 li
185.739 37.9917 li
186.712 37.6427 li
187.605 37.0587 li
188.399 36.9427 li
189.173 36.8257 li
190.378 36.5928 li
191.215 36.4757 li
192.149 36.1257 li
193.212 36.0098 li
193.975 35.7767 li
194.938 35.7767 li
195.832 35.6597 li
196.663 35.4257 li
197.608 35.1927 li
198.56 34.8438 li
199.311 34.4937 li
200.087 34.2597 li
200.787 34.0267 li
201.55 33.9107 li
202.371 33.5598 li
203.14 33.0938 li
204.074 33.0938 li
204.844 33.0938 li
205.623 32.7437 li
206.39 32.6277 li
207.335 32.5107 li
208.117 32.3937 li
208.973 32.2777 li
209.854 31.9277 li
210.797 31.8117 li
211.501 31.6938 li
212.323 31.5777 li
213.064 31.5777 li
213.988 31.5777 li
214.827 31.3448 li
215.484 30.9948 li
216.207 30.9948 li
217.04 30.8777 li
217.782 30.5277 li
218.492 30.5277 li
219.226 30.4117 li
220.024 30.4117 li
220.588 30.2947 li
221.347 29.9448 li
222.201 29.7117 li
222.976 29.3618 li
223.652 29.3618 li
224.291 29.2457 li
224.971 29.0128 li
225.723 28.8947 li
226.351 28.8947 li
227.034 28.7787 li
227.83 28.7787 li
228.541 28.7787 li
229.216 28.6617 li
229.975 28.6617 li
230.655 28.4287 li
231.297 28.4287 li
231.995 28.4287 li
232.732 28.3127 li
233.436 28.1957 li
234.068 28.1957 li
234.745 28.0787 li
235.345 27.9627 li
235.939 27.9627 li
236.609 27.9627 li
237.298 27.9627 li
237.9 27.7287 li
238.523 27.7287 li
239.12 27.7287 li
239.8 27.7287 li
240.46 27.7287 li
241.113 27.7287 li
241.787 27.7287 li
242.408 27.7287 li
242.96 27.7287 li
243.561 27.4957 li
244.186 27.3797 li
244.79 27.3797 li
245.392 27.3797 li
245.995 27.3797 li
246.588 27.3797 li
247.168 27.3797 li
247.764 27.3797 li
248.342 27.3797 li
248.858 27.2628 li
249.437 26.9128 li
250.039 26.9128 li
250.633 26.7957 li
251.2 26.7957 li
251.77 26.6797 li
252.352 26.5627 li
252.923 26.4467 li
253.468 26.0967 li
254.07 26.0967 li
254.606 26.0967 li
255.151 25.9797 li
255.661 25.9797 li
256.21 25.8627 li
256.747 25.8627 li
257.279 25.8627 li
257.854 25.8627 li
258.403 25.8627 li
258.925 25.8627 li
259.498 25.8627 li
260.016 25.8627 li
260.536 25.6297 li
261.083 25.6297 li
261.613 25.6297 li
262.166 25.5137 li
262.686 25.3967 li
263.185 25.3967 li
263.721 25.3967 li
264.188 25.2807 li
264.703 25.2807 li
265.183 25.1628 li
265.704 25.0467 li
266.272 25.0467 li
266.777 25.0467 li
267.318 25.0467 li
267.799 24.9297 li
268.302 24.8138 li
268.773 24.4637 li
269.243 24.4637 li
269.755 24.4637 li
270.217 24.3467 li
270.714 24.3467 li
271.225 24.3467 li
271.73 24.2307 li
272.183 24.2307 li
272.668 24.2307 li
273.195 24.2307 li
273.688 24.2307 li
274.159 24.2307 li
274.621 24.1137 li
275.111 24.1137 li
275.565 23.9967 li
276.008 23.9967 li
276.426 23.8807 li
276.895 23.7637 li
277.38 23.7637 li
277.808 23.7637 li
278.256 23.6477 li
278.71 23.6477 li
279.15 23.5307 li
279.6 23.5307 li
280.022 23.5307 li
280.451 23.5307 li
280.895 23.5307 li
281.336 23.5307 li
281.78 23.5307 li
282.208 23.5307 li
282.649 23.4147 li
283.084 23.2967 li
283.52 23.2967 li
283.948 23.2967 li
284.372 23.1807 li
284.782 23.1807 li
285.196 23.1807 li
285.571 22.9477 li
285.954 22.9477 li
286.356 22.9477 li
286.741 22.9477 li
287.167 22.8307 li
287.574 22.8307 li
287.996 22.8307 li
288.389 22.7148 li
288.793 22.7148 li
289.174 22.7148 li
289.591 22.7148 li
289.999 22.7148 li
290.406 22.7148 li
290.811 22.7148 li
291.203 22.5977 li
291.642 22.5977 li
292.057 22.5977 li
292.455 22.5977 li
292.857 22.5977 li
293.241 22.5977 li
293.631 22.5977 li
294 22.5977 li
294.394 22.5977 li
294.779 22.5977 li
295.153 22.5977 li
295.548 22.5977 li
295.935 22.5977 li
296.298 22.3647 li
296.691 22.3647 li
297.057 22.3647 li
297.432 22.3647 li
297.806 22.3647 li
298.156 22.2477 li
298.525 22.2477 li
298.884 22.2477 li
299.246 22.2477 li
299.625 22.2477 li
299.968 22.2477 li
300.343 22.2477 li
300.679 22.2477 li
301.048 22.2477 li
301.395 22.2477 li
301.738 22.2477 li
302.096 22.2477 li
302.455 22.2477 li
302.8 22.2477 li
303.153 22.2477 li
303.501 22.2477 li
303.845 22.2477 li
304.19 22.2477 li
304.53 22.2477 li
304.882 22.2477 li
305.214 22.2477 li
305.582 22.2477 li
305.926 22.2477 li
306.273 22.2477 li
306.58 22.2477 li
306.926 22.1307 li
307.252 22.1307 li
307.582 22.0147 li
307.902 22.0147 li
308.236 22.0147 li
308.551 22.0147 li
308.865 22.0147 li
309.196 22.0147 li
309.496 22.0147 li
309.832 22.0147 li
310.174 22.0147 li
310.501 22.0147 li
310.825 22.0147 li
311.159 21.8977 li
311.502 21.8977 li
311.823 21.8977 li
312.152 21.8977 li
312.468 21.8977 li
312.797 21.8977 li
313.121 21.8977 li
313.452 21.8977 li
313.773 21.8977 li
314.089 21.8977 li
314.385 21.8977 li
314.697 21.8977 li
315 21.8977 li
315.322 21.8977 li
315.642 21.8977 li
315.955 21.8977 li
316.26 21.8977 li
316.566 21.8977 li
316.873 21.6647 li
317.186 21.6647 li
317.488 21.6647 li
317.804 21.6647 li
318.098 21.5487 li
318.41 21.5487 li
318.715 21.5487 li
319.027 21.5487 li
319.328 21.5487 li
319.639 21.5487 li
319.931 21.4307 li
320.222 21.4307 li
320.511 21.4307 li
320.801 21.4307 li
321.099 21.4307 li
321.4 21.4307 li
321.682 21.4307 li
321.963 21.4307 li
322.248 21.4307 li
322.552 21.4307 li
322.845 21.3148 li
323.127 21.3148 li
323.414 21.3148 li
323.694 21.3148 li
323.978 21.3148 li
324.264 21.3148 li
324.55 21.3148 li
324.829 21.3148 li
325.105 21.3148 li
325.38 21.3148 li
325.667 21.3148 li
325.937 21.3148 li
326.223 21.3148 li
326.497 21.3148 li
326.77 21.3148 li
327.034 21.3148 li
327.316 21.1977 li
327.591 21.1977 li
327.859 21.1977 li
328.121 21.1977 li
328.386 21.1977 li
328.658 20.9648 li
328.927 20.9648 li
329.191 20.9648 li
329.463 20.9648 li
329.727 20.9648 li
330.001 20.9648 li
330.264 20.9648 li
330.521 20.9648 li
330.786 20.8487 li
331.038 20.8487 li
331.282 20.8487 li
331.539 20.7318 li
331.799 20.7318 li
332.05 20.7318 li
332.296 20.7318 li
332.545 20.7318 li
332.8 20.7318 li
333.059 20.7318 li
333.32 20.7318 li
333.569 20.7318 li
333.817 20.7318 li
334.062 20.7318 li
334.314 20.7318 li
334.568 20.7318 li
334.823 20.7318 li
335.086 20.7318 li
335.333 20.7318 li
335.579 20.7318 li
335.826 20.7318 li
336.08 20.7318 li
336.336 20.7318 li
336.582 20.6147 li
336.837 20.6147 li
337.075 20.6147 li
337.311 20.6147 li
337.549 20.6147 li
337.789 20.4987 li
338.025 20.4987 li
338.258 20.4987 li
338.49 20.3817 li
338.722 20.3817 li
338.96 20.3817 li
339.2 20.3817 li
339.429 20.3817 li
339.656 20.3817 li
339.898 20.3817 li
340.136 20.3817 li
340.37 20.3817 li
340.6 20.3817 li
340.823 20.3817 li
341.053 20.3817 li
341.279 20.3817 li
341.501 20.2647 li
341.717 20.1487 li
341.947 20.1487 li
342.17 20.1487 li
342.397 20.1487 li
342.623 19.9157 li
342.848 19.9157 li
343.066 19.9157 li
343.295 19.9157 li
343.5 19.9157 li
343.721 19.9157 li
343.941 19.9157 li
344.166 19.9157 li
344.389 19.9157 li
344.617 19.9157 li
344.837 19.9157 li
345.052 19.9157 li
345.268 19.9157 li
345.48 19.9157 li
345.698 19.9157 li
345.908 19.9157 li
346.123 19.7987 li
346.336 19.7987 li
346.541 19.7987 li
346.751 19.6827 li
346.968 19.6827 li
347.175 19.6827 li
347.382 19.6827 li
347.589 19.6827 li
347.8 19.6827 li
348.006 19.6827 li
348.218 19.6827 li
348.427 19.6827 li
348.628 19.6827 li
348.829 19.6827 li
349.032 19.5648 li
349.243 19.5648 li
349.452 19.5648 li
349.655 19.5648 li
349.853 19.5648 li
350.06 19.5648 li
350.253 19.5648 li
350.456 19.5648 li
350.655 19.5648 li
350.847 19.5648 li
351.039 19.5648 li
351.24 19.5648 li
351.436 19.5648 li
351.627 19.5648 li
351.82 19.5648 li
352.008 19.5648 li
352.199 19.5648 li
352.393 19.5648 li
352.584 19.5648 li
352.776 19.5648 li
352.963 19.5648 li
353.152 19.5648 li
353.335 19.5648 li
353.527 19.5648 li
353.714 19.5648 li
353.906 19.5648 li
354.091 19.5648 li
354.286 19.5648 li
354.473 19.5648 li
354.662 19.5648 li
354.846 19.5648 li
355.025 19.5648 li
355.211 19.5648 li
355.393 19.5648 li
355.581 19.5648 li
355.767 19.5648 li
355.945 19.5648 li
356.119 19.5648 li
356.302 19.5648 li
356.483 19.5648 li
356.659 19.5648 li
356.839 19.4487 li
357.013 19.4487 li
357.188 19.4487 li
357.36 19.4487 li
357.532 19.4487 li
357.709 19.4487 li
357.88 19.4487 li
358.051 19.4487 li
358.222 19.4487 li
358.393 19.4487 li
358.566 19.4487 li
358.734 19.4487 li
358.906 19.4487 li
359.078 19.4487 li
359.243 19.4487 li
359.412 19.4487 li
359.571 19.4487 li
359.739 19.4487 li
359.906 19.4487 li
360.071 19.3317 li
360.235 19.3317 li
360.398 19.3317 li
360.56 19.3317 li
360.721 19.2158 li
360.88 19.2158 li
361.045 19.2158 li
361.205 19.2158 li
361.368 19.2158 li
361.521 19.0987 li
361.68 19.0987 li
361.837 19.0987 li
361.992 19.0987 li
362.146 19.0987 li
362.305 19.0987 li
362.457 19.0987 li
362.611 19.0987 li
362.766 19.0987 li
362.919 19.0987 li
363.07 19.0987 li
363.225 19.0987 li
363.375 19.0987 li
363.529 19.0987 li
363.674 19.0987 li
363.823 19.0987 li
363.973 19.0987 li
364.123 19.0987 li
364.271 19.0987 li
364.418 19.0987 li
364.566 19.0987 li
364.712 19.0987 li
364.861 19.0987 li
365.003 19.0987 li
365.143 19.0987 li
365.287 18.9827 li
365.428 18.9827 li
365.574 18.8658 li
365.716 18.8658 li
365.856 18.8658 li
365.999 18.8658 li
366.145 18.8658 li
366.289 18.8658 li
366.434 18.8658 li
366.573 18.8658 li
366.709 18.8658 li
366.846 18.8658 li
366.988 18.8658 li
367.117 18.8658 li
367.25 18.8658 li
367.384 18.8658 li
367.517 18.8658 li
367.655 18.8658 li
367.789 18.8658 li
367.92 18.8658 li
368.05 18.8658 li
368.183 18.7487 li
368.314 18.7487 li
368.448 18.7487 li
368.579 18.7487 li
368.709 18.7487 li
368.84 18.7487 li
368.97 18.7487 li
369.095 18.7487 li
369.22 18.7487 li
369.346 18.7487 li
369.474 18.7487 li
369.598 18.7487 li
369.723 18.7487 li
369.849 18.7487 li
369.97 18.7487 li
370.093 18.7487 li
370.216 18.7487 li
370.341 18.7487 li
370.461 18.7487 li
370.583 18.7487 li
370.704 18.7487 li
370.826 18.7487 li
370.945 18.7487 li
371.064 18.7487 li
371.184 18.7487 li
371.297 18.7487 li
371.413 18.7487 li
371.532 18.7487 li
371.645 18.7487 li
371.757 18.7487 li
371.872 18.7487 li
371.988 18.7487 li
372.1 18.7487 li
372.212 18.7487 li
372.326 18.7487 li
372.436 18.7487 li
372.549 18.7487 li
372.658 18.7487 li
372.768 18.7487 li
372.877 18.7487 li
372.985 18.7487 li
373.096 18.7487 li
373.206 18.7487 li
373.316 18.7487 li
373.423 18.7487 li
373.527 18.7487 li
373.631 18.7487 li
373.737 18.7487 li
373.843 18.7487 li
373.945 18.7487 li
374.049 18.7487 li
374.147 18.7487 li
374.248 18.7487 li
374.352 18.7487 li
374.455 18.7487 li
374.554 18.7487 li
374.655 18.7487 li
374.758 18.7487 li
374.86 18.7487 li
374.964 18.7487 li
375.062 18.7487 li
375.16 18.7487 li
375.256 18.7487 li
375.352 18.7487 li
375.451 18.7487 li
375.545 18.7487 li
375.639 18.7487 li
375.735 18.7487 li
375.828 18.7487 li
375.924 18.7487 li
376.018 18.7487 li
376.114 18.6328 li
376.208 18.6328 li
376.302 18.6328 li
376.396 18.6328 li
376.486 18.6328 li
376.578 18.6328 li
376.67 18.6328 li
376.762 18.6328 li
376.853 18.6328 li
376.941 18.6328 li
377.03 18.6328 li
377.117 18.6328 li
377.205 18.6328 li
377.294 18.6328 li
377.383 18.6328 li
377.473 18.6328 li
377.558 18.6328 li
377.646 18.6328 li
377.73 18.6328 li
377.816 18.6328 li
377.904 18.6328 li
377.989 18.6328 li
378.076 18.6328 li
378.162 18.6328 li
378.243 18.6328 li
378.324 18.6328 li
378.408 18.6328 li
378.487 18.6328 li
378.571 18.6328 li
378.652 18.6328 li
378.735 18.6328 li
378.814 18.6328 li
378.895 18.6328 li
378.975 18.6328 li
379.053 18.6328 li
379.131 18.6328 li
379.209 18.6328 li
379.287 18.6328 li
379.363 18.6328 li
379.441 18.6328 li
379.516 18.6328 li
379.593 18.6328 li
379.668 18.6328 li
379.743 18.6328 li
379.815 18.6328 li
379.89 18.6328 li
379.965 18.6328 li
380.038 18.6328 li
380.114 18.6328 li
380.188 18.6328 li
380.257 18.6328 li
380.328 18.6328 li
380.4 18.6328 li
380.47 18.6328 li
380.541 18.6328 li
380.612 18.6328 li
380.68 18.6328 li
380.749 18.6328 li
380.818 18.6328 li
380.888 18.6328 li
380.955 18.6328 li
381.024 18.6328 li
381.093 18.6328 li
381.162 18.6328 li
381.229 18.6328 li
381.294 18.6328 li
381.361 18.6328 li
381.428 18.6328 li
381.495 18.6328 li
381.559 18.6328 li
381.626 18.6328 li
381.69 18.6328 li
381.754 18.6328 li
381.818 18.6328 li
381.882 18.6328 li
381.945 18.6328 li
382.009 18.6328 li
382.071 18.6328 li
382.134 18.6328 li
382.195 18.6328 li
382.261 18.6328 li
382.321 18.6328 li
382.38 18.6328 li
382.441 18.6328 li
382.502 18.6328 li
382.559 18.6328 li
382.618 18.6328 li
382.677 18.6328 li
382.738 18.6328 li
382.795 18.6328 li
382.854 18.6328 li
382.909 18.6328 li
382.966 18.6328 li
383.021 18.6328 li
383.077 18.6328 li
383.135 18.6328 li
383.189 18.6328 li
383.243 18.6328 li
383.296 18.6328 li
383.352 18.6328 li
383.408 18.6328 li
383.461 18.6328 li
383.513 18.6328 li
383.567 18.6328 li
383.62 18.6328 li
383.674 18.6328 li
383.727 18.5157 li
383.78 18.5157 li
383.831 18.5157 li
383.883 18.5157 li
383.936 18.5157 li
383.986 18.5157 li
384.038 18.5157 li
384.091 18.5157 li
384.14 18.5157 li
384.189 18.5157 li
384.24 18.5157 li
384.288 18.5157 li
384.336 18.5157 li
384.385 18.3997 li
384.434 18.3997 li
384.482 18.3997 li
384.531 18.3997 li
384.577 18.3997 li
384.625 18.3997 li
384.672 18.3997 li
384.718 18.3997 li
384.766 18.3997 li
384.814 18.3997 li
384.861 18.2827 li
384.909 18.2827 li
384.956 18.2827 li
385.002 18.2827 li
385.047 18.2827 li
385.091 18.2827 li
385.134 18.2827 li
385.178 18.2827 li
385.22 18.2827 li
385.263 18.2827 li
385.305 18.2827 li
385.349 18.2827 li
385.393 18.2827 li
385.435 18.2827 li
385.48 18.2827 li
385.521 18.2827 li
385.561 18.2827 li
385.602 18.2827 li
385.643 18.2827 li
385.684 18.2827 li
385.725 18.2827 li
385.764 18.2827 li
385.804 18.2827 li
385.844 18.2827 li
385.884 18.2827 li
385.923 18.2827 li
385.963 18.2827 li
386.002 18.2827 li
386.04 18.2827 li
386.079 18.2827 li
386.117 18.2827 li
386.156 18.2827 li
386.193 18.2827 li
386.23 18.2827 li
386.266 18.2827 li
386.304 18.2827 li
386.34 18.2827 li
386.376 18.2827 li
386.411 18.2827 li
386.448 18.2827 li
386.484 18.2827 li
386.521 18.2827 li
386.554 18.2827 li
386.591 18.2827 li
386.625 18.2827 li
386.661 18.2827 li
386.694 18.2827 li
386.728 18.2827 li
386.764 18.2827 li
386.797 18.2827 li
386.831 18.2827 li
386.865 18.2827 li
386.898 18.2827 li
386.93 18.2827 li
386.963 18.2827 li
386.996 18.2827 li
387.028 18.2827 li
387.061 18.2827 li
387.093 18.2827 li
387.123 18.2827 li
387.154 18.2827 li
387.188 18.2827 li
387.219 18.2827 li
387.25 18.2827 li
387.281 18.2827 li
387.312 18.2827 li
387.343 18.2827 li
387.373 18.2827 li
387.403 18.2827 li
387.435 18.2827 li
387.464 18.2827 li
387.495 18.2827 li
387.525 18.2827 li
387.554 18.2827 li
387.582 18.2827 li
387.612 18.2827 li
387.639 18.2827 li
387.669 18.2827 li
387.696 18.2827 li
387.726 18.2827 li
387.753 18.2827 li
387.779 18.2827 li
387.805 18.2827 li
387.833 18.2827 li
387.86 18.2827 li
387.887 18.2827 li
387.914 18.2827 li
387.939 18.2827 li
387.966 18.2827 li
387.992 18.2827 li
388.019 18.2827 li
388.045 18.2827 li
388.07 18.2827 li
388.096 18.2827 li
388.122 18.2827 li
388.146 18.2827 li
388.172 18.2827 li
388.196 18.2827 li
388.22 18.2827 li
388.246 18.2827 li
388.269 18.2827 li
388.293 18.2827 li
388.317 18.2827 li
388.34 18.2827 li
388.363 18.2827 li
388.386 18.2827 li
388.41 18.2827 li
388.432 18.2827 li
388.455 18.2827 li
388.479 18.2827 li
388.5 18.2827 li
388.523 18.2827 li
388.546 18.2827 li
388.567 18.2827 li
388.591 18.2827 li
388.613 18.2827 li
388.634 18.2827 li
388.656 18.2827 li
388.677 18.2827 li
388.698 18.2827 li
388.72 18.2827 li
388.74 18.2827 li
388.76 18.2827 li
388.781 18.2827 li
388.801 18.2827 li
388.822 18.2827 li
388.843 18.2827 li
388.863 18.2827 li
388.883 18.2827 li
388.902 18.2827 li
388.921 18.2827 li
388.939 18.2827 li
388.958 18.2827 li
388.977 18.2827 li
388.997 18.2827 li
389.016 18.2827 li
389.035 18.2827 li
389.054 18.2827 li
389.073 18.2827 li
389.091 18.2827 li
389.109 18.2827 li
389.128 18.2827 li
389.146 18.2827 li
389.164 18.2827 li
389.18 18.2827 li
389.196 18.2827 li
389.214 18.2827 li
389.231 18.2827 li
389.248 18.2827 li
389.265 18.2827 li
389.281 18.2827 li
389.298 18.2827 li
389.314 18.2827 li
389.332 18.2827 li
389.347 18.2827 li
389.364 18.2827 li
389.38 18.2827 li
389.398 18.2827 li
389.412 18.2827 li
389.428 18.2827 li
389.443 18.2827 li
389.46 18.2827 li
389.476 18.2827 li
389.492 18.2827 li
389.508 18.2827 li
389.523 18.2827 li
389.537 18.2827 li
389.551 18.2827 li
389.566 18.2827 li
389.58 18.2827 li
389.596 18.2827 li
389.611 18.2827 li
389.625 18.2827 li
389.639 18.2827 li
389.654 18.2827 li
389.668 18.2827 li
389.682 18.2827 li
389.695 18.2827 li
389.709 18.2827 li
389.723 18.2827 li
389.736 18.2827 li
389.75 18.2827 li
389.764 18.2827 li
389.778 18.2827 li
389.791 18.2827 li
389.805 18.2827 li
389.818 18.2827 li
389.831 18.2827 li
389.844 18.2827 li
389.857 18.2827 li
389.87 18.2827 li
389.883 18.2827 li
389.895 18.2827 li
389.907 18.2827 li
389.92 18.2827 li
389.932 18.2827 li
389.944 18.2827 li
389.957 18.2827 li
389.969 18.2827 li
389.981 18.2827 li
389.992 18.2827 li
390.005 18.2827 li
390.016 18.2827 li
390.028 18.2827 li
390.039 18.2827 li
390.05 18.2827 li
390.061 18.2827 li
390.073 18.2827 li
390.084 18.2827 li
390.096 18.2827 li
390.107 18.2827 li
390.118 18.2827 li
390.128 18.2827 li
390.139 18.2827 li
390.149 18.2827 li
390.159 18.2827 li
390.17 18.2827 li
390.18 18.2827 li
390.19 18.2827 li
390.201 18.2827 li
390.211 18.2827 li
390.22 18.2827 li
390.23 18.2827 li
390.241 18.2827 li
390.25 18.2827 li
390.259 18.2827 li
390.269 18.2827 li
390.277 18.2827 li
390.287 18.2827 li
390.296 18.2827 li
390.305 18.2827 li
390.315 18.2827 li
390.324 18.2827 li
390.333 18.2827 li
390.342 18.2827 li
390.35 18.2827 li
390.36 18.2827 li
390.369 18.2827 li
390.377 18.2827 li
390.387 18.2827 li
390.395 18.2827 li
390.403 18.2827 li
390.411 18.2827 li
390.42 18.2827 li
390.429 18.2827 li
390.437 18.2827 li
390.445 18.2827 li
390.453 18.2827 li
390.461 18.2827 li
390.468 18.2827 li
390.477 18.2827 li
390.485 18.2827 li
390.493 18.2827 li
390.501 18.2827 li
390.508 18.2827 li
390.516 18.2827 li
390.523 18.2827 li
390.531 18.2827 li
390.539 18.2827 li
390.546 18.2827 li
390.554 18.2827 li
390.562 18.2827 li
390.568 18.2827 li
390.575 18.2827 li
390.582 18.2827 li
390.589 18.2827 li
390.596 18.2827 li
390.604 18.2827 li
390.611 18.2827 li
390.618 18.2827 li
390.625 18.2827 li
390.632 18.2827 li
390.638 18.2827 li
390.645 18.2827 li
390.651 18.2827 li
390.657 18.2827 li
390.664 18.2827 li
390.67 18.2827 li
390.677 18.2827 li
390.683 18.2827 li
390.689 18.2827 li
390.695 18.2827 li
390.701 18.2827 li
390.707 18.2827 li
390.714 18.2827 li
390.721 18.2827 li
390.726 18.2827 li
390.732 18.2827 li
390.738 18.2827 li
390.744 18.2827 li
390.749 18.2827 li
390.754 18.2827 li
390.76 18.2827 li
390.767 18.2827 li
390.771 18.2827 li
390.777 18.2827 li
390.783 18.2827 li
390.788 18.2827 li
390.793 18.2827 li
390.798 18.2827 li
390.804 18.2827 li
390.808 18.2827 li
390.814 18.2827 li
390.82 18.2827 li
390.825 18.2827 li
390.831 18.2827 li
390.836 18.2827 li
390.841 18.2827 li
390.845 18.2827 li
390.85 18.2827 li
390.855 18.2827 li
390.86 18.2827 li
390.864 18.2827 li
390.869 18.2827 li
390.874 18.2827 li
390.879 18.2827 li
390.883 18.2827 li
390.888 18.2827 li
390.892 18.2827 li
390.897 18.2827 li
390.902 18.2827 li
390.907 18.2827 li
390.911 18.2827 li
390.916 18.2827 li
390.919 18.2827 li
390.924 18.2827 li
390.927 18.2827 li
390.932 18.2827 li
390.936 18.2827 li
390.939 18.2827 li
390.943 18.2827 li
390.948 18.2827 li
390.952 18.2827 li
390.955 18.2827 li
390.96 18.2827 li
390.964 18.2827 li
390.968 18.2827 li
390.971 18.2827 li
390.975 18.2827 li
390.979 18.2827 li
390.983 18.2827 li
390.987 18.2827 li
390.991 18.2827 li
390.993 18.2827 li
390.997 18.2827 li
391 18.2827 li
391.004 18.2827 li
391.008 18.2827 li
391.011 18.2827 li
391.014 18.2827 li
391.018 18.2827 li
391.022 18.2827 li
391.026 18.2827 li
391.03 18.2827 li
391.032 18.2827 li
391.036 18.2827 li
391.039 18.2827 li
391.042 18.2827 li
391.046 18.2827 li
391.049 18.2827 li
391.052 18.2827 li
391.055 18.2827 li
391.059 18.2827 li
391.062 18.2827 li
391.065 18.2827 li
391.068 18.2827 li
391.071 18.2827 li
391.074 18.2827 li
391.077 18.2827 li
391.08 18.2827 li
391.084 18.2827 li
391.086 18.2827 li
391.089 18.2827 li
391.093 18.2827 li
391.096 18.2827 li
391.098 18.2827 li
391.101 18.2827 li
391.104 18.2827 li
391.106 18.2827 li
391.109 18.2827 li
391.112 18.2827 li
391.115 18.2827 li
391.117 18.2827 li
391.12 18.2827 li
391.123 18.2827 li
391.125 18.2827 li
391.128 18.2827 li
391.13 18.2827 li
391.132 18.2827 li
391.135 18.2827 li
391.138 18.2827 li
391.14 18.2827 li
391.143 18.2827 li
391.145 18.2827 li
391.147 18.2827 li
391.15 18.2827 li
391.152 18.2827 li
391.155 18.2827 li
391.157 18.2827 li
391.159 18.2827 li
391.161 18.2827 li
391.163 18.2827 li
391.165 18.2827 li
391.168 18.2827 li
391.17 18.2827 li
391.172 18.2827 li
391.174 18.2827 li
391.177 18.2827 li
391.179 18.2827 li
391.181 18.2827 li
391.183 18.2827 li
391.186 18.2827 li
391.187 18.2827 li
391.189 18.2827 li
391.191 18.2827 li
391.193 18.2827 li
391.195 18.2827 li
391.197 18.2827 li
391.199 18.2827 li
391.201 18.2827 li
391.203 18.2827 li
391.204 18.2827 li
391.207 18.2827 li
391.208 18.2827 li
391.21 18.2827 li
391.213 18.2827 li
391.214 18.2827 li
391.216 18.2827 li
391.218 18.2827 li
391.219 18.2827 li
391.221 18.2827 li
391.223 18.2827 li
391.225 18.2827 li
391.227 18.2827 li
391.228 18.2827 li
391.23 18.2827 li
391.232 18.2827 li
391.234 18.2827 li
391.236 18.2827 li
391.237 18.2827 li
391.239 18.2827 li
391.24 18.2827 li
391.242 18.2827 li
391.243 18.2827 li
391.245 18.2827 li
391.246 18.2827 li
391.247 18.2827 li
391.249 18.2827 li
391.25 18.2827 li
391.252 18.2827 li
391.253 18.2827 li
391.255 18.2827 li
391.256 18.2827 li
391.257 18.2827 li
391.259 18.2827 li
391.261 18.2827 li
391.262 18.2827 li
391.263 18.2827 li
391.264 18.2827 li
391.266 18.2827 li
391.267 18.2827 li
391.269 18.2827 li
391.27 18.2827 li
391.271 18.2827 li
391.273 18.2827 li
391.274 18.2827 li
391.275 18.2827 li
391.277 18.2827 li
391.279 18.2827 li
391.281 18.2827 li
391.282 18.2827 li
391.284 18.2827 li
391.286 18.2827 li
391.287 18.2827 li
391.288 18.2827 li
391.289 18.2827 li
391.29 18.2827 li
391.291 18.2827 li
391.292 18.2827 li
391.293 18.2827 li
391.294 18.2827 li
391.296 18.2827 li
391.297 18.2827 li
391.299 18.2827 li
391.3 18.2827 li
391.301 18.2827 li
391.302 18.2827 li
391.303 18.2827 li
391.305 18.2827 li
391.306 18.2827 li
391.307 18.2827 li
391.309 18.2827 li
391.31 18.2827 li
391.311 18.2827 li
391.312 18.2827 li
391.313 18.2827 li
391.314 18.2827 li
391.315 18.2827 li
391.316 18.2827 li
391.317 18.2827 li
391.318 18.2827 li
391.319 18.2827 li
391.32 18.2827 li
391.321 18.2827 li
391.322 18.2827 li
391.323 18.2827 li
391.324 18.2827 li
391.325 18.2827 li
391.326 18.2827 li
391.327 18.2827 li
391.328 18.2827 li
391.329 18.2827 li
391.33 18.2827 li
391.331 18.2827 li
391.332 18.2827 li
391.333 18.2827 li
391.334 18.2827 li
391.335 18.2827 li
391.336 18.2827 li
391.337 18.2827 li
391.338 18.2827 li
391.339 18.2827 li
391.34 18.2827 li
391.341 18.2827 li
391.342 18.2827 li
391.343 18.2827 li
391.344 18.2827 li
391.345 18.2827 li
391.346 18.2827 li
391.347 18.2827 li
391.348 18.2827 li
391.349 18.2827 li
391.35 18.2827 li
391.351 18.2827 li
391.352 18.2827 li
391.353 18.2827 li
391.354 18.2827 li
391.355 18.2827 li
391.356 18.2827 li
391.357 18.2827 li
391.358 18.2827 li
391.359 18.2827 li
391.36 18.2827 li
391.361 18.2827 li
391.362 18.2827 li
391.363 18.2827 li
391.364 18.2827 li
391.365 18.2827 li
391.366 18.2827 li
391.367 18.2827 li
391.368 18.2827 li
391.369 18.2827 li
391.37 18.2827 li
391.371 18.2827 li
391.372 18.2827 li
391.373 18.2827 li
391.374 18.2827 li
391.375 18.2827 li
391.376 18.2827 li
391.377 18.2827 li
391.378 18.2827 li
391.379 18.2827 li
391.38 18.2827 li
391.381 18.2827 li
391.382 18.2827 li
391.383 18.2827 li
391.384 18.2827 li
391.385 18.2827 li
391.386 18.2827 li
391.387 18.2827 li
391.388 18.2827 li
391.389 18.2827 li
391.39 18.2827 li
391.391 18.2827 li
391.392 18.2827 li
391.393 18.2827 li
391.394 18.2827 li
391.395 18.2827 li
391.396 18.2827 li
391.397 18.2827 li
391.398 18.2827 li
391.399 18.2827 li
391.4 18.2827 li
/1 
[/DeviceCMYK] /CSA add_res
.265019 .809232 0 0 cmyk
@
0 lj
41.8763 234.653 mo
46.3763 234.653 li
46.3763 230.153 li
41.8763 230.153 li
cp
@
56.4563 193.601 mo
60.9563 193.601 li
60.9563 189.101 li
56.4563 189.101 li
cp
@
66.254 162.347 mo
70.754 162.347 li
70.754 157.847 li
66.254 157.847 li
cp
@
73.6431 136.456 mo
78.1431 136.456 li
78.1431 131.956 li
73.6431 131.956 li
cp
@
85.5747 113.598 mo
90.0747 113.598 li
90.0747 109.098 li
85.5747 109.098 li
cp
@
97.5017 95.5217 mo
102.002 95.5217 li
102.002 91.0217 li
97.5017 91.0217 li
cp
@
111.116 82.5757 mo
115.616 82.5757 li
115.616 78.0757 li
111.116 78.0757 li
cp
@
120.898 72.1967 mo
125.398 72.1967 li
125.398 67.6967 li
120.898 67.6967 li
cp
@
132.955 62.2837 mo
137.455 62.2837 li
137.455 57.7837 li
132.955 57.7837 li
cp
@
143.918 56.1027 mo
148.418 56.1027 li
148.418 51.6027 li
143.918 51.6027 li
cp
@
154.317 50.9717 mo
158.817 50.9717 li
158.817 46.4717 li
154.317 46.4717 li
cp
@
165.673 46.8898 mo
170.173 46.8898 li
170.173 42.3898 li
165.673 42.3898 li
cp
@
174.725 43.0408 mo
179.225 43.0408 li
179.225 38.5408 li
174.725 38.5408 li
cp
@
184.462 39.8918 mo
188.962 39.8918 li
188.962 35.3918 li
184.462 35.3918 li
cp
@
193.582 37.9097 mo
198.082 37.9097 li
198.082 33.4097 li
193.582 33.4097 li
cp
@
201.824 35.3438 mo
206.324 35.3438 li
206.324 30.8438 li
201.824 30.8438 li
cp
@
210.073 33.8277 mo
214.573 33.8277 li
214.573 29.3277 li
210.073 29.3277 li
cp
@
217.775 32.6617 mo
222.275 32.6617 li
222.275 28.1617 li
217.775 28.1617 li
cp
@
224.785 31.0287 mo
229.285 31.0287 li
229.285 26.5287 li
224.785 26.5287 li
cp
@
231.818 30.4457 mo
236.318 30.4457 li
236.318 25.9457 li
231.818 25.9457 li
cp
@
238.21 29.9787 mo
242.71 29.9787 li
242.71 25.4787 li
238.21 25.4787 li
cp
@
244.338 29.6287 mo
248.838 29.6287 li
248.838 25.1287 li
244.338 25.1287 li
cp
@
250.102 28.8127 mo
254.602 28.8127 li
254.602 24.3127 li
250.102 24.3127 li
cp
@
255.604 28.1127 mo
260.104 28.1127 li
260.104 23.6127 li
255.604 23.6127 li
cp
@
260.936 27.6467 mo
265.436 27.6467 li
265.436 23.1467 li
260.936 23.1467 li
cp
@
266.052 27.0638 mo
270.552 27.0638 li
270.552 22.5638 li
266.052 22.5638 li
cp
@
270.945 26.4807 mo
275.445 26.4807 li
275.445 21.9807 li
270.945 21.9807 li
cp
@
275.558 26.0137 mo
280.058 26.0137 li
280.058 21.5137 li
275.558 21.5137 li
cp
@
279.958 25.7807 mo
284.458 25.7807 li
284.458 21.2807 li
279.958 21.2807 li
cp
@
284.106 25.1977 mo
288.606 25.1977 li
288.606 20.6977 li
284.106 20.6977 li
cp
@
288.156 24.9648 mo
292.656 24.9648 li
292.656 20.4648 li
288.156 20.4648 li
cp
@
292.145 24.8477 mo
296.645 24.8477 li
296.645 20.3477 li
292.145 20.3477 li
cp
@
295.907 24.4977 mo
300.407 24.4977 li
300.407 19.9977 li
295.907 19.9977 li
cp
@
299.488 24.4977 mo
303.988 24.4977 li
303.988 19.9977 li
299.488 19.9977 li
cp
@
302.964 24.4977 mo
307.464 24.4977 li
307.464 19.9977 li
302.964 19.9977 li
cp
@
306.302 24.2647 mo
310.802 24.2647 li
310.802 19.7647 li
306.302 19.7647 li
cp
@
309.573 24.1477 mo
314.073 24.1477 li
314.073 19.6477 li
309.573 19.6477 li
cp
@
312.75 24.1477 mo
317.25 24.1477 li
317.25 19.6477 li
312.75 19.6477 li
cp
@
315.848 23.7987 mo
320.348 23.7987 li
320.348 19.2987 li
315.848 19.2987 li
cp
@
318.849 23.6817 mo
323.349 23.6817 li
323.349 19.1817 li
318.849 19.1817 li
cp
@
321.728 23.5648 mo
326.228 23.5648 li
326.228 19.0648 li
321.728 19.0648 li
cp
@
324.52 23.5648 mo
329.02 23.5648 li
329.02 19.0648 li
324.52 19.0648 li
cp
@
327.213 23.2148 mo
331.713 23.2148 li
331.713 18.7148 li
327.213 18.7148 li
cp
@
329.8 22.9818 mo
334.3 22.9818 li
334.3 18.4818 li
329.8 18.4818 li
cp
@
332.318 22.9818 mo
336.818 22.9818 li
336.818 18.4818 li
332.318 18.4818 li
cp
@
334.825 22.8647 mo
339.325 22.8647 li
339.325 18.3647 li
334.825 18.3647 li
cp
@
337.179 22.6317 mo
341.679 22.6317 li
341.679 18.1317 li
337.179 18.1317 li
cp
@
339.467 22.3987 mo
343.967 22.3987 li
343.967 17.8987 li
339.467 17.8987 li
cp
@
341.692 22.1657 mo
346.192 22.1657 li
346.192 17.6657 li
341.692 17.6657 li
cp
@
343.873 22.0487 mo
348.373 22.0487 li
348.373 17.5487 li
343.873 17.5487 li
cp
@
345.968 21.9327 mo
350.468 21.9327 li
350.468 17.4327 li
345.968 17.4327 li
cp
@
348.003 21.8157 mo
352.503 21.8157 li
352.503 17.3157 li
348.003 17.3157 li
cp
@
349.949 21.8157 mo
354.449 21.8157 li
354.449 17.3157 li
349.949 17.3157 li
cp
@
351.84 21.8157 mo
356.34 21.8157 li
356.34 17.3157 li
351.84 17.3157 li
cp
@
353.696 21.8157 mo
358.196 21.8157 li
358.196 17.3157 li
353.696 17.3157 li
cp
@
355.46 21.6987 mo
359.96 21.6987 li
359.96 17.1987 li
355.46 17.1987 li
cp
@
357.162 21.6987 mo
361.662 21.6987 li
361.662 17.1987 li
357.162 17.1987 li
cp
@
358.795 21.4658 mo
363.295 21.4658 li
363.295 16.9658 li
358.795 16.9658 li
cp
@
360.361 21.3487 mo
364.861 21.3487 li
364.861 16.8487 li
360.361 16.8487 li
cp
@
361.873 21.3487 mo
366.373 21.3487 li
366.373 16.8487 li
361.873 16.8487 li
cp
@
363.323 21.1158 mo
367.823 21.1158 li
367.823 16.6158 li
363.323 16.6158 li
cp
@
364.738 21.1158 mo
369.238 21.1158 li
369.238 16.6158 li
364.738 16.6158 li
cp
@
366.064 20.9987 mo
370.564 20.9987 li
370.564 16.4987 li
366.064 16.4987 li
cp
@
367.347 20.9987 mo
371.847 20.9987 li
371.847 16.4987 li
367.347 16.4987 li
cp
@
368.576 20.9987 mo
373.076 20.9987 li
373.076 16.4987 li
368.576 16.4987 li
cp
@
369.738 20.9987 mo
374.238 20.9987 li
374.238 16.4987 li
369.738 16.4987 li
cp
@
370.845 20.9987 mo
375.345 20.9987 li
375.345 16.4987 li
370.845 16.4987 li
cp
@
371.897 20.9987 mo
376.397 20.9987 li
376.397 16.4987 li
371.897 16.4987 li
cp
@
372.91 20.9987 mo
377.41 20.9987 li
377.41 16.4987 li
372.91 16.4987 li
cp
@
373.864 20.8828 mo
378.364 20.8828 li
378.364 16.3828 li
373.864 16.3828 li
cp
@
374.78 20.8828 mo
379.28 20.8828 li
379.28 16.3828 li
374.78 16.3828 li
cp
@
375.654 20.8828 mo
380.154 20.8828 li
380.154 16.3828 li
375.654 16.3828 li
cp
@
376.485 20.8828 mo
380.985 20.8828 li
380.985 16.3828 li
376.485 16.3828 li
cp
@
377.266 20.8828 mo
381.766 20.8828 li
381.766 16.3828 li
377.266 16.3828 li
cp
@
378.007 20.8828 mo
382.507 20.8828 li
382.507 16.3828 li
378.007 16.3828 li
cp
@
378.705 20.8828 mo
383.205 20.8828 li
383.205 16.3828 li
378.705 16.3828 li
cp
@
379.376 20.8828 mo
383.876 20.8828 li
383.876 16.3828 li
379.376 16.3828 li
cp
@
380.011 20.8828 mo
384.511 20.8828 li
384.511 16.3828 li
380.011 16.3828 li
cp
@
380.604 20.8828 mo
385.104 20.8828 li
385.104 16.3828 li
380.604 16.3828 li
cp
@
381.158 20.8828 mo
385.658 20.8828 li
385.658 16.3828 li
381.158 16.3828 li
cp
@
381.686 20.7657 mo
386.186 20.7657 li
386.186 16.2657 li
381.686 16.2657 li
cp
@
382.184 20.6497 mo
386.684 20.6497 li
386.684 16.1497 li
382.184 16.1497 li
cp
@
382.659 20.5327 mo
387.159 20.5327 li
387.159 16.0327 li
382.659 16.0327 li
cp
@
383.099 20.5327 mo
387.599 20.5327 li
387.599 16.0327 li
383.099 16.0327 li
cp
@
383.514 20.5327 mo
388.014 20.5327 li
388.014 16.0327 li
383.514 16.0327 li
cp
@
383.906 20.5327 mo
388.406 20.5327 li
388.406 16.0327 li
383.906 16.0327 li
cp
@
384.27 20.5327 mo
388.77 20.5327 li
388.77 16.0327 li
384.27 16.0327 li
cp
@
384.615 20.5327 mo
389.115 20.5327 li
389.115 16.0327 li
384.615 16.0327 li
cp
@
384.938 20.5327 mo
389.438 20.5327 li
389.438 16.0327 li
384.938 16.0327 li
cp
@
385.245 20.5327 mo
389.745 20.5327 li
389.745 16.0327 li
385.245 16.0327 li
cp
@
385.529 20.5327 mo
390.029 20.5327 li
390.029 16.0327 li
385.529 16.0327 li
cp
@
385.795 20.5327 mo
390.295 20.5327 li
390.295 16.0327 li
385.795 16.0327 li
cp
@
386.043 20.5327 mo
390.543 20.5327 li
390.543 16.0327 li
386.043 16.0327 li
cp
@
386.273 20.5327 mo
390.773 20.5327 li
390.773 16.0327 li
386.273 16.0327 li
cp
@
386.49 20.5327 mo
390.99 20.5327 li
390.99 16.0327 li
386.49 16.0327 li
cp
@
386.689 20.5327 mo
391.189 20.5327 li
391.189 16.0327 li
386.689 16.0327 li
cp
@
386.878 20.5327 mo
391.378 20.5327 li
391.378 16.0327 li
386.878 16.0327 li
cp
@
387.048 20.5327 mo
391.548 20.5327 li
391.548 16.0327 li
387.048 16.0327 li
cp
@
387.21 20.5327 mo
391.71 20.5327 li
391.71 16.0327 li
387.21 16.0327 li
cp
@
387.36 20.5327 mo
391.86 20.5327 li
391.86 16.0327 li
387.36 16.0327 li
cp
@
387.5 20.5327 mo
392 20.5327 li
392 16.0327 li
387.5 16.0327 li
cp
@
387.632 20.5327 mo
392.132 20.5327 li
392.132 16.0327 li
387.632 16.0327 li
cp
@
387.755 20.5327 mo
392.255 20.5327 li
392.255 16.0327 li
387.755 16.0327 li
cp
@
387.868 20.5327 mo
392.368 20.5327 li
392.368 16.0327 li
387.868 16.0327 li
cp
@
387.97 20.5327 mo
392.47 20.5327 li
392.47 16.0327 li
387.97 16.0327 li
cp
@
388.064 20.5327 mo
392.564 20.5327 li
392.564 16.0327 li
388.064 16.0327 li
cp
@
388.153 20.5327 mo
392.653 20.5327 li
392.653 16.0327 li
388.153 16.0327 li
cp
@
388.235 20.5327 mo
392.735 20.5327 li
392.735 16.0327 li
388.235 16.0327 li
cp
@
388.311 20.5327 mo
392.811 20.5327 li
392.811 16.0327 li
388.311 16.0327 li
cp
@
388.382 20.5327 mo
392.882 20.5327 li
392.882 16.0327 li
388.382 16.0327 li
cp
@
388.445 20.5327 mo
392.945 20.5327 li
392.945 16.0327 li
388.445 16.0327 li
cp
@
388.505 20.5327 mo
393.005 20.5327 li
393.005 16.0327 li
388.505 16.0327 li
cp
@
388.559 20.5327 mo
393.059 20.5327 li
393.059 16.0327 li
388.559 16.0327 li
cp
@
388.61 20.5327 mo
393.11 20.5327 li
393.11 16.0327 li
388.61 16.0327 li
cp
@
388.656 20.5327 mo
393.156 20.5327 li
393.156 16.0327 li
388.656 16.0327 li
cp
@
388.698 20.5327 mo
393.198 20.5327 li
393.198 16.0327 li
388.698 16.0327 li
cp
@
388.737 20.5327 mo
393.237 20.5327 li
393.237 16.0327 li
388.737 16.0327 li
cp
@
388.772 20.5327 mo
393.272 20.5327 li
393.272 16.0327 li
388.772 16.0327 li
cp
@
388.805 20.5327 mo
393.305 20.5327 li
393.305 16.0327 li
388.805 16.0327 li
cp
@
388.836 20.5327 mo
393.336 20.5327 li
393.336 16.0327 li
388.836 16.0327 li
cp
@
388.865 20.5327 mo
393.365 20.5327 li
393.365 16.0327 li
388.865 16.0327 li
cp
@
388.89 20.5327 mo
393.39 20.5327 li
393.39 16.0327 li
388.89 16.0327 li
cp
@
388.913 20.5327 mo
393.413 20.5327 li
393.413 16.0327 li
388.913 16.0327 li
cp
@
388.935 20.5327 mo
393.435 20.5327 li
393.435 16.0327 li
388.935 16.0327 li
cp
@
388.954 20.5327 mo
393.454 20.5327 li
393.454 16.0327 li
388.954 16.0327 li
cp
@
388.973 20.5327 mo
393.473 20.5327 li
393.473 16.0327 li
388.973 16.0327 li
cp
@
388.99 20.5327 mo
393.49 20.5327 li
393.49 16.0327 li
388.99 16.0327 li
cp
@
389.005 20.5327 mo
393.505 20.5327 li
393.505 16.0327 li
389.005 16.0327 li
cp
@
389.018 20.5327 mo
393.518 20.5327 li
393.518 16.0327 li
389.018 16.0327 li
cp
@
389.03 20.5327 mo
393.53 20.5327 li
393.53 16.0327 li
389.03 16.0327 li
cp
@
389.041 20.5327 mo
393.541 20.5327 li
393.541 16.0327 li
389.041 16.0327 li
cp
@
389.052 20.5327 mo
393.552 20.5327 li
393.552 16.0327 li
389.052 16.0327 li
cp
@
389.061 20.5327 mo
393.561 20.5327 li
393.561 16.0327 li
389.061 16.0327 li
cp
@
389.069 20.5327 mo
393.569 20.5327 li
393.569 16.0327 li
389.069 16.0327 li
cp
@
389.077 20.5327 mo
393.577 20.5327 li
393.577 16.0327 li
389.077 16.0327 li
cp
@
389.084 20.5327 mo
393.584 20.5327 li
393.584 16.0327 li
389.084 16.0327 li
cp
@
389.09 20.5327 mo
393.59 20.5327 li
393.59 16.0327 li
389.09 16.0327 li
cp
@
389.096 20.5327 mo
393.596 20.5327 li
393.596 16.0327 li
389.096 16.0327 li
cp
@
389.102 20.5327 mo
393.602 20.5327 li
393.602 16.0327 li
389.102 16.0327 li
cp
@
389.107 20.5327 mo
393.607 20.5327 li
393.607 16.0327 li
389.107 16.0327 li
cp
@
389.111 20.5327 mo
393.611 20.5327 li
393.611 16.0327 li
389.111 16.0327 li
cp
@
389.115 20.5327 mo
393.615 20.5327 li
393.615 16.0327 li
389.115 16.0327 li
cp
@
389.119 20.5327 mo
393.619 20.5327 li
393.619 16.0327 li
389.119 16.0327 li
cp
@
389.121 20.5327 mo
393.621 20.5327 li
393.621 16.0327 li
389.121 16.0327 li
cp
@
389.124 20.5327 mo
393.624 20.5327 li
393.624 16.0327 li
389.124 16.0327 li
cp
@
389.127 20.5327 mo
393.627 20.5327 li
393.627 16.0327 li
389.127 16.0327 li
cp
@
389.129 20.5327 mo
393.629 20.5327 li
393.629 16.0327 li
389.129 16.0327 li
cp
@
389.132 20.5327 mo
393.632 20.5327 li
393.632 16.0327 li
389.132 16.0327 li
cp
@
389.134 20.5327 mo
393.634 20.5327 li
393.634 16.0327 li
389.134 16.0327 li
cp
@
389.136 20.5327 mo
393.636 20.5327 li
393.636 16.0327 li
389.136 16.0327 li
cp
@
389.137 20.5327 mo
393.637 20.5327 li
393.637 16.0327 li
389.137 16.0327 li
cp
@
389.139 20.5327 mo
393.639 20.5327 li
393.639 16.0327 li
389.139 16.0327 li
cp
@
389.14 20.5327 mo
393.64 20.5327 li
393.64 16.0327 li
389.14 16.0327 li
cp
@
389.141 20.5327 mo
393.641 20.5327 li
393.641 16.0327 li
389.141 16.0327 li
cp
@
389.142 20.5327 mo
393.642 20.5327 li
393.642 16.0327 li
389.142 16.0327 li
cp
@
389.143 20.5327 mo
393.643 20.5327 li
393.643 16.0327 li
389.143 16.0327 li
cp
@
389.143 20.5327 mo
393.643 20.5327 li
393.643 16.0327 li
389.143 16.0327 li
cp
@
389.144 20.5327 mo
393.644 20.5327 li
393.644 16.0327 li
389.144 16.0327 li
cp
@
389.145 20.5327 mo
393.645 20.5327 li
393.645 16.0327 li
389.145 16.0327 li
cp
@
389.145 20.5327 mo
393.645 20.5327 li
393.645 16.0327 li
389.145 16.0327 li
cp
@
389.146 20.5327 mo
393.646 20.5327 li
393.646 16.0327 li
389.146 16.0327 li
cp
@
389.146 20.5327 mo
393.646 20.5327 li
393.646 16.0327 li
389.146 16.0327 li
cp
@
389.147 20.5327 mo
393.647 20.5327 li
393.647 16.0327 li
389.147 16.0327 li
cp
@
389.147 20.5327 mo
393.647 20.5327 li
393.647 16.0327 li
389.147 16.0327 li
cp
@
389.147 20.5327 mo
393.647 20.5327 li
393.647 16.0327 li
389.147 16.0327 li
cp
@
389.148 20.5327 mo
393.648 20.5327 li
393.648 16.0327 li
389.148 16.0327 li
cp
@
389.148 20.5327 mo
393.648 20.5327 li
393.648 16.0327 li
389.148 16.0327 li
cp
@
389.148 20.5327 mo
393.648 20.5327 li
393.648 16.0327 li
389.148 16.0327 li
cp
@
389.148 20.5327 mo
393.648 20.5327 li
393.648 16.0327 li
389.148 16.0327 li
cp
@
389.149 20.5327 mo
393.649 20.5327 li
393.649 16.0327 li
389.149 16.0327 li
cp
@
389.149 20.5327 mo
393.649 20.5327 li
393.649 16.0327 li
389.149 16.0327 li
cp
@
389.149 20.5327 mo
393.649 20.5327 li
393.649 16.0327 li
389.149 16.0327 li
cp
@
389.149 20.5327 mo
393.649 20.5327 li
393.649 16.0327 li
389.149 16.0327 li
cp
@
389.149 20.5327 mo
393.649 20.5327 li
393.649 16.0327 li
389.149 16.0327 li
cp
@
389.149 20.5327 mo
393.649 20.5327 li
393.649 16.0327 li
389.149 16.0327 li
cp
@
389.149 20.5327 mo
393.649 20.5327 li
393.649 16.0327 li
389.149 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
389.15 20.5327 mo
393.65 20.5327 li
393.65 16.0327 li
389.15 16.0327 li
cp
@
1 lj
42.6083 103.208 mo
42.6497 103.185 li
42.6497 99.1027 li
44.1259 97.3527 li
44.1259 96.4197 li
44.1259 95.6037 li
44.1259 94.7878 li
44.1259 94.4377 li
44.1259 93.2717 li
46.879 91.5217 li
46.879 90.5897 li
46.879 89.6567 li
49.402 88.8397 li
49.402 87.9067 li
49.402 86.7407 li
50.5884 85.4577 li
50.5884 84.6418 li
51.7306 83.8257 li
53.8931 83.2417 li
53.8931 81.9597 li
53.8931 81.2598 li
53.8931 80.4427 li
53.8931 79.2767 li
54.9188 78.3438 li
55.911 77.0607 li
55.911 76.2438 li
55.911 75.3118 li
55.911 74.4948 li
55.911 73.9117 li
55.911 73.4447 li
55.911 73.3287 li
55.911 72.5127 li
55.911 72.3957 li
55.911 71.9297 li
55.911 71.6967 li
55.911 70.9967 li
55.911 69.8307 li
55.911 69.1307 li
55.911 68.8967 li
55.911 68.4307 li
55.911 67.1477 li
55.911 66.6807 li
55.911 66.5647 li
55.911 65.7487 li
57.8028 65.0487 li
57.8028 64.5827 li
57.8028 64.1158 li
57.8028 63.1827 li
57.8028 62.4827 li
57.8028 61.8997 li
59.5833 61.6667 li
59.5833 61.1997 li
59.5833 60.5007 li
59.5833 59.8007 li
59.5833 59.3337 li
59.5833 58.8678 li
59.5833 58.5177 li
59.5833 58.0517 li
59.5833 57.3517 li
59.5833 57.2347 li
61.2645 56.6517 li
62.8575 56.3017 li
62.8575 55.4857 li
63.6243 55.0188 li
63.6243 54.6687 li
65.1001 54.3197 li
66.5079 53.8527 li
67.1884 53.6198 li
68.5036 53.1527 li
68.5036 53.0367 li
68.5036 52.4537 li
68.5036 52.1027 li
68.5036 51.7537 li
68.5036 51.4037 li
69.7653 51.4037 li
69.7653 50.9368 li
71.563 50.1207 li
71.563 49.8877 li
72.7052 49.6547 li
72.7052 49.5378 li
73.8056 49.0707 li
73.8056 48.4877 li
73.8056 48.0217 li
74.8673 47.5557 li
74.8673 47.0887 li
74.8673 46.7388 li
74.8673 46.3887 li
74.8673 46.0387 li
75.3841 45.8057 li
75.8935 45.4557 li
76.8856 45.4557 li
76.8856 45.1057 li
77.8458 44.7557 li
77.8458 44.6398 li
77.8458 44.2897 li
77.8458 44.0567 li
77.8458 43.9397 li
78.777 43.8237 li
78.777 42.7737 li
78.777 42.4237 li
78.777 41.9577 li
78.777 41.8407 li
79.6802 41.4908 li
80.5579 41.2577 li
82.2392 41.0237 li
82.6458 40.7908 li
82.6458 40.6747 li
83.4415 40.5577 li
85.3457 39.9747 li
85.7127 39.6247 li
86.0747 39.6247 li
86.0747 39.3918 li
86.4327 39.1577 li
86.4327 39.0417 li
86.4327 38.6918 li
87.1367 38.1087 li
87.1367 37.6427 li
87.4827 37.6427 li
87.4827 37.5257 li
87.4827 37.2917 li
88.8267 37.2917 li
89.4787 37.0587 li
90.1147 36.5928 li
90.1147 36.4757 li
90.7387 36.2428 li
90.7387 35.6597 li
91.3497 35.5437 li
91.9497 35.4257 li
92.5377 34.9597 li
93.6787 34.8438 li
93.9577 34.7267 li
95.3157 34.6097 li
95.5797 34.4937 li
96.1017 34.4937 li
97.1187 34.4937 li
98.1027 34.2597 li
98.1027 34.1437 li
99.0557 34.1437 li
99.2897 34.1437 li
99.2897 33.7938 li
99.5217 33.5598 li
99.7517 33.2108 li
100.655 33.0938 li
101.097 32.8607 li
101.748 32.7437 li
102.174 32.6277 li
103.821 32.3937 li
104.807 32.2777 li
105.383 32.2777 li
105.761 32.2777 li
106.135 32.1607 li
106.686 31.9277 li
107.585 31.9277 li
108.798 31.9277 li
109.471 31.9277 li
109.802 31.8117 li
109.802 31.6938 li
109.802 31.5777 li
110.291 31.5777 li
111.247 31.4608 li
112.776 31.3448 li
113.657 31.2277 li
114.088 31.1118 li
114.654 31.1118 li
115.209 30.9948 li
115.209 30.8777 li
116.023 30.7617 li
116.157 30.7617 li
117.076 30.7617 li
117.076 30.5277 li
117.461 30.4117 li
117.842 30.2947 li
118.342 30.2947 li
118.589 30.1787 li
118.589 29.9448 li
118.956 29.9448 li
119.438 29.9448 li
120.03 29.8277 li
121.181 29.5948 li
121.961 29.4787 li
122.614 29.4787 li
123.148 29.3618 li
123.673 29.2457 li
124.188 29.2457 li
125.193 29.2457 li
125.684 29.1287 li
126.07 29.0128 li
126.357 29.0128 li
126.736 29.0128 li
127.202 29.0128 li
128.47 28.8947 li
128.998 28.8947 li
129.345 28.7787 li
129.943 28.7787 li
130.611 28.7787 li
131.346 28.6617 li
131.587 28.6617 li
132.064 28.5457 li
132.221 28.5457 li
133.071 28.4287 li
133.675 28.4287 li
134.559 28.4287 li
134.92 28.4287 li
135.907 28.4287 li
136.864 28.3127 li
137.198 28.3127 li
137.66 28.0787 li
138.179 28.0787 li
139.441 27.8457 li
140.232 27.7287 li
141.355 27.7287 li
142.38 27.7287 li
143.155 27.7287 li
143.963 27.7287 li
145.06 27.7287 li
145.669 27.7287 li
146.463 27.6127 li
146.997 27.6127 li
147.332 27.6127 li
147.804 27.6127 li
148.636 27.6127 li
149.577 27.3797 li
150.277 27.3797 li
151.253 27.3797 li
151.833 27.2628 li
152.999 27.2628 li
153.816 27.1467 li
154.5 27.1467 li
155.205 27.1467 li
155.569 27.1467 li
156.916 27.1467 li
157.465 27.1467 li
158.305 27.0287 li
158.765 27.0287 li
159.346 27.0287 li
159.696 27.0287 li
160.691 27.0287 li
161.446 27.0287 li
162.242 27.0287 li
162.846 27.0287 li
163.578 26.9128 li
164.482 26.9128 li
165.202 26.9128 li
165.906 26.9128 li
166.492 26.9128 li
166.993 26.7957 li
167.802 26.7957 li
168.543 26.7957 li
169.404 26.7957 li
170.196 26.7957 li
170.925 26.6797 li
171.616 26.6797 li
172.373 26.6797 li
172.93 26.6797 li
173.476 26.5627 li
174.15 26.5627 li
174.886 26.5627 li
175.68 26.4467 li
176.289 26.4467 li
177.047 26.4467 li
177.717 26.4467 li
178.338 26.3297 li
178.879 26.3297 li
179.707 26.3297 li
180.591 26.2127 li
181.342 26.2127 li
181.924 26.2127 li
182.821 26.2127 li
183.563 26.2127 li
184.118 26.2127 li
184.663 26.0967 li
185.321 26.0967 li
185.912 26.0967 li
186.777 26.0967 li
187.605 25.8627 li
188.227 25.8627 li
189.042 25.7467 li
189.635 25.6297 li
190.229 25.6297 li
190.686 25.6297 li
191.448 25.6297 li
192.181 25.5137 li
192.844 25.5137 li
193.596 25.5137 li
194.4 25.5137 li
195.095 25.5137 li
195.736 25.5137 li
196.411 25.3967 li
197.107 25.3967 li
197.689 25.3967 li
198.498 25.3967 li
199.218 25.3967 li
199.937 25.3967 li
200.583 25.3967 li
201.295 25.2807 li
201.889 25.2807 li
202.494 25.2807 li
203.215 25.2807 li
203.92 25.2807 li
204.573 25.1628 li
205.324 25.1628 li
205.989 25.0467 li
206.625 25.0467 li
207.236 25.0467 li
207.925 25.0467 li
208.636 25.0467 li
209.25 24.9297 li
209.848 24.9297 li
210.662 24.8138 li
211.284 24.8138 li
211.813 24.8138 li
212.539 24.6967 li
213.334 24.6967 li
213.871 24.6967 li
214.446 24.6967 li
215.097 24.5807 li
215.769 24.5807 li
216.421 24.5807 li
217.021 24.4637 li
217.591 24.4637 li
218.192 24.4637 li
218.691 24.3467 li
219.376 24.3467 li
220.011 24.2307 li
220.689 24.2307 li
221.269 24.1137 li
221.863 24.1137 li
222.492 23.8807 li
223.171 23.7637 li
223.827 23.6477 li
224.306 23.6477 li
224.828 23.6477 li
225.339 23.6477 li
225.939 23.6477 li
226.588 23.5307 li
227.269 23.4147 li
227.963 23.4147 li
228.525 23.2967 li
229.101 23.2967 li
229.701 23.2967 li
230.253 23.2967 li
230.837 23.2967 li
231.436 23.2967 li
232.004 23.2967 li
232.552 23.2967 li
233.192 23.2967 li
233.771 23.2967 li
234.298 23.1807 li
234.907 23.1807 li
235.407 23.1807 li
235.99 23.1807 li
236.466 23.0638 li
237.058 23.0638 li
237.589 23.0638 li
238.078 23.0638 li
238.716 23.0638 li
239.371 23.0638 li
239.952 23.0638 li
240.53 22.9477 li
241.041 22.9477 li
241.714 22.9477 li
242.338 22.9477 li
242.879 22.9477 li
243.472 22.9477 li
244.009 22.9477 li
244.565 22.9477 li
245.175 22.9477 li
245.786 22.9477 li
246.311 22.9477 li
246.866 22.8307 li
247.433 22.7148 li
247.958 22.7148 li
248.497 22.7148 li
249.025 22.7148 li
249.559 22.7148 li
250.074 22.7148 li
250.619 22.7148 li
251.204 22.7148 li
251.815 22.7148 li
252.343 22.7148 li
252.923 22.7148 li
253.441 22.7148 li
253.941 22.7148 li
254.514 22.7148 li
255.077 22.7148 li
255.641 22.7148 li
256.114 22.7148 li
256.639 22.7148 li
257.166 22.7148 li
257.65 22.7148 li
258.215 22.7148 li
258.761 22.7148 li
259.292 22.7148 li
259.851 22.7148 li
260.311 22.7148 li
260.765 22.7148 li
261.265 22.7148 li
261.768 22.7148 li
262.282 22.7148 li
262.78 22.7148 li
263.238 22.7148 li
263.768 22.7148 li
264.211 22.7148 li
264.698 22.7148 li
265.143 22.7148 li
265.635 22.7148 li
266.081 22.7148 li
266.583 22.7148 li
267.069 22.7148 li
267.569 22.7148 li
268.048 22.7148 li
268.561 22.7148 li
269.024 22.7148 li
269.525 22.5977 li
269.964 22.5977 li
270.382 22.5977 li
270.889 22.5977 li
271.357 22.5977 li
271.813 22.5977 li
272.283 22.5977 li
272.771 22.5977 li
273.211 22.5977 li
273.702 22.5977 li
274.146 22.5977 li
274.623 22.5977 li
275.102 22.5977 li
275.529 22.5977 li
276.013 22.5977 li
276.476 22.5977 li
276.996 22.5977 li
277.44 22.5977 li
277.863 22.5977 li
278.343 22.5977 li
278.838 22.5977 li
279.268 22.5977 li
279.787 22.5977 li
280.267 22.5977 li
280.734 22.5977 li
281.173 22.5977 li
281.636 22.5977 li
282.129 22.5977 li
282.568 22.5977 li
283.035 22.5977 li
283.508 22.5977 li
283.935 22.5977 li
284.368 22.5977 li
284.798 22.5977 li
285.206 22.5977 li
285.67 22.5977 li
286.116 22.5977 li
286.566 22.5977 li
287.033 22.5977 li
287.481 22.5977 li
287.907 22.5977 li
288.349 22.5977 li
288.765 22.5977 li
289.231 22.5977 li
289.652 22.5977 li
290.112 22.5977 li
290.552 22.5977 li
290.982 22.5977 li
291.403 22.5977 li
291.821 22.5977 li
292.247 22.5977 li
292.654 22.5977 li
293.069 22.4807 li
293.452 22.4807 li
293.865 22.4807 li
294.273 22.4807 li
294.673 22.3647 li
295.092 22.3647 li
295.494 22.3647 li
295.909 22.3647 li
296.338 22.3647 li
296.764 22.3647 li
297.154 22.3647 li
297.559 22.3647 li
297.955 22.3647 li
298.345 22.3647 li
298.767 22.3647 li
299.171 22.3647 li
299.557 22.3647 li
299.937 22.3647 li
300.336 22.3647 li
300.744 22.3647 li
301.128 22.3647 li
301.507 22.3647 li
301.923 22.3647 li
302.306 22.3647 li
302.685 22.3647 li
303.074 22.3647 li
303.454 22.3647 li
303.83 22.3647 li
304.221 22.3647 li
304.601 22.3647 li
304.986 22.3647 li
305.383 22.3647 li
305.741 22.3647 li
306.116 22.3647 li
306.471 22.3647 li
306.841 22.3647 li
307.204 22.3647 li
307.582 22.3647 li
307.948 22.2477 li
308.355 22.2477 li
308.718 22.2477 li
309.093 22.2477 li
309.47 22.0147 li
309.832 22.0147 li
310.209 22.0147 li
310.554 22.0147 li
310.927 22.0147 li
311.273 22.0147 li
311.623 22.0147 li
311.969 22.0147 li
312.318 22.0147 li
312.678 22.0147 li
313.019 22.0147 li
313.362 22.0147 li
313.7 21.8977 li
314.061 21.8977 li
314.413 21.8977 li
314.771 21.8977 li
315.137 21.8977 li
315.491 21.8977 li
315.817 21.7817 li
316.157 21.7817 li
316.48 21.7817 li
316.818 21.7817 li
317.171 21.7817 li
317.496 21.7817 li
317.837 21.7817 li
318.165 21.7817 li
318.506 21.7817 li
318.841 21.7817 li
319.189 21.7817 li
319.532 21.7817 li
319.861 21.7817 li
320.193 21.7817 li
320.538 21.7817 li
320.879 21.7817 li
321.197 21.7817 li
321.522 21.7817 li
321.85 21.7817 li
322.173 21.7817 li
322.5 21.7817 li
322.817 21.7817 li
323.124 21.7817 li
323.461 21.7817 li
323.774 21.7817 li
324.105 21.7817 li
324.418 21.7817 li
324.721 21.7817 li
325.027 21.7817 li
325.332 21.7817 li
325.639 21.7817 li
325.959 21.7817 li
326.261 21.7817 li
326.582 21.7817 li
326.889 21.7817 li
327.189 21.7817 li
327.499 21.7817 li
327.796 21.7817 li
328.085 21.7817 li
328.386 21.7817 li
328.675 21.7817 li
328.984 21.7817 li
329.272 21.7817 li
329.566 21.7817 li
329.874 21.7817 li
330.159 21.7817 li
330.436 21.7817 li
330.721 21.7817 li
330.993 21.7817 li
331.297 21.7817 li
331.587 21.7817 li
331.882 21.7817 li
332.164 21.7817 li
332.446 21.7817 li
332.728 21.6647 li
333.012 21.6647 li
333.288 21.6647 li
333.566 21.6647 li
333.847 21.6647 li
334.124 21.6647 li
334.405 21.6647 li
334.672 21.6647 li
334.954 21.6647 li
335.22 21.6647 li
335.492 21.6647 li
335.766 21.6647 li
336.034 21.6647 li
336.313 21.6647 li
336.583 21.4307 li
336.863 21.4307 li
337.134 21.4307 li
337.4 21.3148 li
337.662 21.3148 li
337.936 21.3148 li
338.201 21.3148 li
338.453 21.3148 li
338.714 21.3148 li
338.977 21.3148 li
339.232 21.3148 li
339.49 21.3148 li
339.757 21.3148 li
340.012 21.3148 li
340.269 21.3148 li
340.521 21.3148 li
340.775 21.3148 li
341.023 21.3148 li
341.276 21.3148 li
341.517 21.3148 li
341.763 21.3148 li
342.004 21.1977 li
342.244 21.1977 li
342.498 21.1977 li
342.746 21.1977 li
342.989 21.1977 li
343.229 21.1977 li
343.473 21.1977 li
343.713 21.1977 li
343.955 21.1977 li
344.198 21.1977 li
344.437 21.1977 li
344.685 21.1977 li
344.919 21.1977 li
345.152 21.1977 li
345.39 21.0817 li
345.625 21.0817 li
345.856 21.0817 li
346.089 21.0817 li
346.325 21.0817 li
346.558 21.0817 li
346.794 21.0817 li
347.021 21.0817 li
347.244 21.0817 li
347.473 21.0817 li
347.692 21.0817 li
347.911 21.0817 li
348.137 21.0817 li
348.362 21.0817 li
348.581 21.0817 li
348.803 21.0817 li
349.03 21.0817 li
349.252 21.0817 li
349.471 21.0817 li
349.688 21.0817 li
349.926 21.0817 li
350.145 21.0817 li
350.364 21.0817 li
350.584 21.0817 li
350.8 21.0817 li
351.022 21.0817 li
351.234 20.9648 li
351.449 20.9648 li
351.663 20.9648 li
351.878 20.9648 li
352.083 20.9648 li
352.293 20.9648 li
352.509 20.9648 li
352.709 20.9648 li
352.917 20.9648 li
353.119 20.8487 li
353.32 20.8487 li
353.522 20.8487 li
353.722 20.8487 li
353.925 20.8487 li
354.132 20.8487 li
354.336 20.8487 li
354.539 20.8487 li
354.741 20.8487 li
354.939 20.8487 li
355.13 20.8487 li
355.331 20.8487 li
355.527 20.8487 li
355.724 20.8487 li
355.914 20.8487 li
356.113 20.8487 li
356.304 20.8487 li
356.496 20.8487 li
356.68 20.8487 li
356.864 20.8487 li
357.052 20.8487 li
357.236 20.8487 li
357.421 20.8487 li
357.607 20.7318 li
357.796 20.7318 li
357.977 20.7318 li
358.154 20.7318 li
358.336 20.7318 li
358.521 20.7318 li
358.707 20.7318 li
358.895 20.7318 li
359.079 20.7318 li
359.258 20.6147 li
359.436 20.6147 li
359.617 20.6147 li
359.79 20.6147 li
359.966 20.6147 li
360.144 20.6147 li
360.314 20.6147 li
360.49 20.6147 li
360.664 20.6147 li
360.836 20.6147 li
361.005 20.6147 li
361.175 20.6147 li
361.347 20.6147 li
361.516 20.6147 li
361.683 20.6147 li
361.846 20.6147 li
362.016 20.6147 li
362.184 20.4987 li
362.352 20.4987 li
362.517 20.4987 li
362.684 20.4987 li
362.845 20.4987 li
363.007 20.4987 li
363.17 20.4987 li
363.332 20.4987 li
363.489 20.4987 li
363.653 20.4987 li
363.813 20.4987 li
363.973 20.4987 li
364.13 20.3817 li
364.289 20.3817 li
364.449 20.3817 li
364.604 20.3817 li
364.762 20.3817 li
364.919 20.3817 li
365.067 20.3817 li
365.222 20.3817 li
365.371 20.3817 li
365.523 20.3817 li
365.676 20.3817 li
365.825 20.3817 li
365.977 20.3817 li
366.125 20.3817 li
366.276 20.3817 li
366.426 20.3817 li
366.575 20.3817 li
366.723 20.3817 li
366.868 20.3817 li
367.01 20.3817 li
367.152 20.3817 li
367.296 20.3817 li
367.441 20.3817 li
367.581 20.3817 li
367.723 20.3817 li
367.868 20.3817 li
368.005 20.3817 li
368.145 20.3817 li
368.288 20.3817 li
368.425 20.2647 li
368.558 20.2647 li
368.692 20.2647 li
368.827 20.2647 li
368.965 20.2647 li
369.102 20.2647 li
369.234 20.2647 li
369.365 20.2647 li
369.497 20.2647 li
369.63 20.2647 li
369.764 20.2647 li
369.896 20.2647 li
370.026 20.2647 li
370.157 20.2647 li
370.282 20.2647 li
370.419 20.2647 li
370.543 20.2647 li
370.67 20.2647 li
370.796 20.2647 li
370.918 20.2647 li
371.046 20.2647 li
371.17 20.2647 li
371.297 20.2647 li
371.421 20.2647 li
371.548 20.1487 li
371.673 20.1487 li
371.796 20.1487 li
371.922 20.1487 li
372.041 20.1487 li
372.162 20.1487 li
372.285 20.1487 li
372.404 20.1487 li
372.526 20.1487 li
372.643 20.1487 li
372.76 20.1487 li
372.879 20.1487 li
372.999 20.1487 li
373.114 20.1487 li
373.231 20.1487 li
373.35 20.0317 li
373.464 20.0317 li
373.576 20.0317 li
373.687 20.0317 li
373.795 20.0317 li
373.908 20.0317 li
374.013 20.0317 li
374.125 20.0317 li
374.232 20.0317 li
374.343 20.0317 li
374.453 20.0317 li
374.559 20.0317 li
374.669 20.0317 li
374.782 20.0317 li
374.889 20.0317 li
374.996 20.0317 li
375.101 20.0317 li
375.207 20.0317 li
375.309 20.0317 li
375.416 20.0317 li
375.52 20.0317 li
375.625 20.0317 li
375.726 20.0317 li
375.829 20.0317 li
375.931 20.0317 li
376.032 20.0317 li
376.134 20.0317 li
376.236 20.0317 li
376.336 20.0317 li
376.437 20.0317 li
376.532 19.9157 li
376.63 19.9157 li
376.729 19.9157 li
376.825 19.9157 li
376.923 19.9157 li
377.017 19.9157 li
377.116 19.9157 li
377.211 19.9157 li
377.308 19.9157 li
377.404 19.9157 li
377.493 19.9157 li
377.586 19.9157 li
377.676 19.9157 li
377.769 19.9157 li
377.86 19.9157 li
377.953 19.9157 li
378.043 19.7987 li
378.132 19.7987 li
378.217 19.7987 li
378.305 19.7987 li
378.394 19.7987 li
378.48 19.7987 li
378.57 19.7987 li
378.659 19.7987 li
378.745 19.7987 li
378.829 19.7987 li
378.914 19.7987 li
379.001 19.7987 li
379.084 19.7987 li
379.167 19.7987 li
379.252 19.7987 li
379.338 19.7987 li
379.421 19.7987 li
379.501 19.7987 li
379.584 19.7987 li
379.664 19.7987 li
379.745 19.7987 li
379.827 19.7987 li
379.909 19.7987 li
379.989 19.7987 li
380.07 19.7987 li
380.152 19.7987 li
380.231 19.7987 li
380.309 19.7987 li
380.386 19.7987 li
380.463 19.7987 li
380.541 19.7987 li
380.617 19.7987 li
380.691 19.7987 li
380.767 19.7987 li
380.845 19.7987 li
380.92 19.7987 li
380.996 19.7987 li
381.07 19.7987 li
381.145 19.7987 li
381.216 19.7987 li
381.286 19.7987 li
381.359 19.7987 li
381.431 19.7987 li
381.499 19.7987 li
381.571 19.7987 li
381.642 19.7987 li
381.714 19.7987 li
381.784 19.7987 li
381.854 19.7987 li
381.922 19.7987 li
381.991 19.7987 li
382.062 19.7987 li
382.129 19.7987 li
382.195 19.7987 li
382.263 19.7987 li
382.331 19.7987 li
382.397 19.7987 li
382.461 19.7987 li
382.525 19.7987 li
382.591 19.7987 li
382.654 19.7987 li
382.719 19.7987 li
382.783 19.7987 li
382.847 19.7987 li
382.911 19.6827 li
382.975 19.6827 li
383.037 19.6827 li
383.099 19.6827 li
383.16 19.6827 li
383.223 19.6827 li
383.284 19.6827 li
383.344 19.6827 li
383.404 19.6827 li
383.463 19.6827 li
383.522 19.5648 li
383.584 19.5648 li
383.642 19.5648 li
383.7 19.4487 li
383.757 19.3317 li
383.815 19.3317 li
383.871 19.3317 li
383.929 19.3317 li
383.988 19.3317 li
384.045 19.3317 li
384.102 19.3317 li
384.159 19.3317 li
384.214 19.3317 li
384.269 19.3317 li
384.325 19.3317 li
384.379 19.3317 li
384.431 19.2158 li
384.485 19.2158 li
384.538 19.2158 li
384.59 19.2158 li
384.642 19.2158 li
384.694 19.2158 li
384.746 19.2158 li
384.797 19.2158 li
384.848 19.2158 li
384.9 19.2158 li
384.952 19.2158 li
385.002 19.2158 li
385.054 19.2158 li
385.103 19.2158 li
385.152 19.2158 li
385.201 19.2158 li
385.25 19.2158 li
385.299 19.2158 li
385.346 19.2158 li
385.391 18.9827 li
385.441 18.9827 li
385.487 18.9827 li
385.535 18.9827 li
385.583 18.9827 li
385.629 18.9827 li
385.675 18.9827 li
385.72 18.9827 li
385.765 18.9827 li
385.809 18.9827 li
385.855 18.9827 li
385.9 18.9827 li
385.945 18.9827 li
385.987 18.9827 li
386.029 18.9827 li
386.071 18.8658 li
386.113 18.8658 li
386.157 18.8658 li
386.2 18.8658 li
386.242 18.8658 li
386.284 18.8658 li
386.326 18.8658 li
386.367 18.8658 li
386.409 18.8658 li
386.451 18.8658 li
386.491 18.8658 li
386.532 18.8658 li
386.571 18.8658 li
386.611 18.8658 li
386.651 18.8658 li
386.689 18.8658 li
386.727 18.8658 li
386.765 18.8658 li
386.805 18.8658 li
386.843 18.8658 li
386.88 18.8658 li
386.917 18.8658 li
386.955 18.8658 li
386.991 18.8658 li
387.028 18.8658 li
387.065 18.8658 li
387.1 18.8658 li
387.136 18.8658 li
387.171 18.8658 li
387.206 18.8658 li
387.242 18.8658 li
387.277 18.8658 li
387.311 18.8658 li
387.346 18.8658 li
387.379 18.8658 li
387.414 18.8658 li
387.447 18.8658 li
387.48 18.8658 li
387.512 18.8658 li
387.545 18.8658 li
387.58 18.8658 li
387.613 18.8658 li
387.645 18.8658 li
387.677 18.8658 li
387.709 18.8658 li
387.739 18.8658 li
387.771 18.8658 li
387.802 18.8658 li
387.833 18.8658 li
387.864 18.8658 li
387.896 18.8658 li
387.927 18.7487 li
387.957 18.7487 li
387.988 18.7487 li
388.018 18.7487 li
388.048 18.7487 li
388.077 18.7487 li
388.107 18.7487 li
388.134 18.7487 li
388.163 18.7487 li
388.19 18.7487 li
388.218 18.7487 li
388.246 18.7487 li
388.273 18.7487 li
388.301 18.7487 li
388.33 18.6328 li
388.356 18.6328 li
388.383 18.6328 li
388.408 18.6328 li
388.435 18.6328 li
388.461 18.6328 li
388.487 18.5157 li
388.513 18.5157 li
388.539 18.5157 li
388.564 18.5157 li
388.59 18.5157 li
388.615 18.5157 li
388.64 18.5157 li
388.665 18.5157 li
388.689 18.5157 li
388.713 18.5157 li
388.737 18.5157 li
388.76 18.5157 li
388.785 18.5157 li
388.809 18.5157 li
388.832 18.5157 li
388.857 18.5157 li
388.88 18.5157 li
388.902 18.5157 li
388.925 18.5157 li
388.948 18.5157 li
388.97 18.5157 li
388.992 18.5157 li
389.014 18.5157 li
389.035 18.5157 li
389.056 18.5157 li
389.077 18.5157 li
389.098 18.5157 li
389.119 18.5157 li
389.14 18.5157 li
389.161 18.5157 li
389.181 18.5157 li
389.202 18.5157 li
389.223 18.5157 li
389.243 18.5157 li
389.263 18.5157 li
389.282 18.5157 li
389.302 18.5157 li
389.321 18.5157 li
389.341 18.5157 li
389.361 18.5157 li
389.381 18.5157 li
389.4 18.5157 li
389.42 18.5157 li
389.439 18.5157 li
389.458 18.5157 li
389.476 18.5157 li
389.495 18.5157 li
389.512 18.5157 li
389.53 18.5157 li
389.549 18.5157 li
389.568 18.5157 li
389.586 18.5157 li
389.602 18.5157 li
389.62 18.5157 li
389.636 18.5157 li
389.653 18.5157 li
389.67 18.5157 li
389.686 18.5157 li
389.702 18.5157 li
389.718 18.5157 li
389.734 18.5157 li
389.751 18.5157 li
389.766 18.5157 li
389.782 18.5157 li
389.798 18.5157 li
389.813 18.5157 li
389.828 18.5157 li
389.842 18.5157 li
389.857 18.5157 li
389.873 18.5157 li
389.888 18.5157 li
389.902 18.5157 li
389.916 18.5157 li
389.932 18.5157 li
389.946 18.5157 li
389.959 18.5157 li
389.972 18.5157 li
389.986 18.5157 li
390 18.5157 li
390.014 18.5157 li
390.027 18.5157 li
390.042 18.5157 li
390.054 18.5157 li
390.068 18.5157 li
390.081 18.5157 li
390.093 18.5157 li
390.106 18.5157 li
390.119 18.5157 li
390.132 18.5157 li
390.145 18.5157 li
390.157 18.3997 li
390.169 18.3997 li
390.181 18.3997 li
390.193 18.3997 li
390.206 18.3997 li
390.217 18.3997 li
390.23 18.3997 li
390.243 18.3997 li
390.255 18.3997 li
390.266 18.3997 li
390.278 18.3997 li
390.289 18.3997 li
390.301 18.3997 li
390.313 18.3997 li
390.324 18.3997 li
390.335 18.3997 li
390.346 18.3997 li
390.357 18.3997 li
390.367 18.3997 li
390.379 18.3997 li
390.388 18.3997 li
390.399 18.3997 li
390.409 18.3997 li
390.42 18.3997 li
390.43 18.3997 li
390.441 18.3997 li
390.451 18.3997 li
390.462 18.3997 li
390.471 18.3997 li
390.481 18.3997 li
390.491 18.3997 li
390.5 18.3997 li
390.51 18.3997 li
390.519 18.3997 li
390.529 18.3997 li
390.538 18.3997 li
390.546 18.3997 li
390.556 18.3997 li
390.566 18.3997 li
390.574 18.3997 li
390.583 18.3997 li
390.591 18.3997 li
390.601 18.3997 li
390.609 18.3997 li
390.618 18.3997 li
390.626 18.3997 li
390.634 18.3997 li
390.643 18.3997 li
390.65 18.3997 li
390.657 18.3997 li
390.666 18.3997 li
390.674 18.3997 li
390.682 18.3997 li
390.69 18.3997 li
390.696 18.3997 li
390.703 18.3997 li
390.711 18.3997 li
390.718 18.3997 li
390.726 18.3997 li
390.733 18.3997 li
390.741 18.3997 li
390.748 18.3997 li
390.756 18.3997 li
390.762 18.3997 li
390.768 18.3997 li
390.775 18.3997 li
390.782 18.3997 li
390.789 18.3997 li
390.795 18.3997 li
390.802 18.3997 li
390.807 18.3997 li
390.814 18.3997 li
390.82 18.3997 li
390.827 18.3997 li
390.833 18.3997 li
390.839 18.3997 li
390.845 18.3997 li
390.85 18.3997 li
390.856 18.3997 li
390.861 18.3997 li
390.868 18.3997 li
390.873 18.3997 li
390.88 18.3997 li
390.886 18.3997 li
390.891 18.3997 li
390.897 18.3997 li
390.902 18.3997 li
390.907 18.3997 li
390.913 18.3997 li
390.918 18.3997 li
390.924 18.3997 li
390.93 18.3997 li
390.935 18.3997 li
390.94 18.3997 li
390.945 18.3997 li
390.951 18.3997 li
390.955 18.3997 li
390.96 18.3997 li
390.965 18.3997 li
390.97 18.3997 li
390.975 18.3997 li
390.98 18.3997 li
390.985 18.3997 li
390.99 18.3997 li
390.995 18.3997 li
391 18.3997 li
391.004 18.3997 li
391.008 18.3997 li
391.012 18.3997 li
391.017 18.3997 li
391.021 18.3997 li
391.025 18.3997 li
391.03 18.3997 li
391.034 18.3997 li
391.039 18.3997 li
391.043 18.3997 li
391.048 18.3997 li
391.051 18.3997 li
391.055 18.3997 li
391.059 18.3997 li
391.063 18.3997 li
391.067 18.3997 li
391.071 18.3997 li
391.075 18.3997 li
391.078 18.3997 li
391.082 18.3997 li
391.086 18.3997 li
391.089 18.3997 li
391.093 18.3997 li
391.096 18.3997 li
391.099 18.3997 li
391.103 18.3997 li
391.106 18.3997 li
391.11 18.3997 li
391.114 18.3997 li
391.116 18.3997 li
391.12 18.3997 li
391.124 18.3997 li
391.127 18.3997 li
391.13 18.3997 li
391.133 18.3997 li
391.136 18.3997 li
391.139 18.3997 li
391.142 18.3997 li
391.146 18.3997 li
391.148 18.3997 li
391.151 18.3997 li
391.154 18.3997 li
391.157 18.3997 li
391.16 18.3997 li
391.163 18.3997 li
391.166 18.3997 li
391.169 18.3997 li
391.172 18.3997 li
391.174 18.3997 li
391.177 18.3997 li
391.18 18.3997 li
391.183 18.3997 li
391.186 18.3997 li
391.189 18.3997 li
391.191 18.3997 li
391.194 18.3997 li
391.196 18.3997 li
391.198 18.3997 li
391.2 18.3997 li
391.204 18.3997 li
391.206 18.3997 li
391.208 18.3997 li
391.21 18.3997 li
391.213 18.3997 li
391.215 18.3997 li
391.217 18.3997 li
391.218 18.3997 li
391.221 18.3997 li
391.224 18.3997 li
391.226 18.3997 li
391.228 18.3997 li
391.23 18.3997 li
391.233 18.3997 li
391.234 18.3997 li
391.236 18.3997 li
391.239 18.3997 li
391.24 18.3997 li
391.243 18.3997 li
391.245 18.3997 li
391.246 18.3997 li
391.248 18.3997 li
391.25 18.3997 li
391.252 18.3997 li
391.254 18.3997 li
391.255 18.3997 li
391.257 18.3997 li
391.258 18.3997 li
391.261 18.3997 li
391.262 18.3997 li
391.264 18.3997 li
391.266 18.3997 li
391.267 18.3997 li
391.27 18.3997 li
391.271 18.3997 li
391.273 18.3997 li
391.274 18.3997 li
391.275 18.3997 li
391.278 18.3997 li
391.279 18.3997 li
391.281 18.3997 li
391.282 18.3997 li
391.284 18.3997 li
391.285 18.3997 li
391.287 18.3997 li
391.288 18.3997 li
391.29 18.3997 li
391.291 18.3997 li
391.292 18.3997 li
391.293 18.3997 li
391.295 18.3997 li
391.296 18.3997 li
391.298 18.3997 li
391.299 18.3997 li
391.3 18.3997 li
391.301 18.3997 li
391.302 18.3997 li
391.303 18.3997 li
391.305 18.3997 li
391.306 18.3997 li
391.307 18.3997 li
391.309 18.3997 li
391.31 18.3997 li
391.311 18.3997 li
391.312 18.3997 li
391.313 18.3997 li
391.314 18.3997 li
391.315 18.3997 li
391.317 18.3997 li
391.318 18.3997 li
391.319 18.3997 li
391.32 18.3997 li
391.321 18.3997 li
391.322 18.3997 li
391.323 18.3997 li
391.324 18.3997 li
391.326 18.3997 li
391.327 18.3997 li
391.328 18.3997 li
391.33 18.3997 li
391.331 18.3997 li
391.332 18.3997 li
391.333 18.3997 li
391.334 18.3997 li
391.336 18.3997 li
391.337 18.3997 li
391.338 18.3997 li
391.339 18.3997 li
391.34 18.3997 li
391.341 18.3997 li
391.342 18.3997 li
391.343 18.3997 li
391.344 18.3997 li
391.345 18.3997 li
391.346 18.3997 li
391.347 18.3997 li
391.348 18.3997 li
391.349 18.3997 li
391.35 18.3997 li
391.351 18.3997 li
391.352 18.3997 li
391.353 18.3997 li
391.354 18.3997 li
391.355 18.3997 li
391.356 18.3997 li
391.357 18.3997 li
391.358 18.3997 li
391.359 18.3997 li
391.36 18.3997 li
391.361 18.3997 li
391.362 18.3997 li
391.363 18.2827 li
391.364 18.2827 li
391.365 18.2827 li
391.366 18.2827 li
391.367 18.2827 li
391.368 18.2827 li
391.369 18.2827 li
391.37 18.2827 li
391.371 18.2827 li
391.372 18.2827 li
391.373 18.2827 li
391.374 18.2827 li
391.375 18.2827 li
391.376 18.2827 li
391.377 18.2827 li
391.378 18.2827 li
391.379 18.2827 li
391.38 18.2827 li
391.381 18.2827 li
391.382 18.2827 li
391.383 18.2827 li
391.384 18.2827 li
391.385 18.2827 li
391.386 18.2827 li
391.387 18.2827 li
391.388 18.2827 li
391.389 18.2827 li
391.39 18.2827 li
391.391 18.2827 li
391.392 18.2827 li
391.393 18.2827 li
391.394 18.2827 li
391.395 18.2827 li
391.396 18.2827 li
391.397 18.2827 li
391.398 18.2827 li
391.399 18.2827 li
391.4 18.2827 li
0 .990631 1 .000396735 cmyk
@
42.6083 243.336 mo
42.6497 243.249 li
42.6497 238.934 li
45.5333 237.651 li
45.5333 236.718 li
46.879 234.852 li
46.879 231.12 li
46.879 228.787 li
50.5884 226.805 li
50.5884 224.822 li
52.831 222.607 li
54.9188 220.974 li
54.9188 219.575 li
55.911 217.942 li
57.8028 215.492 li
57.8028 213.393 li
57.8028 211.294 li
58.7063 209.895 li
62.0716 207.796 li
63.6243 207.212 li
67.1884 206.046 li
70.3763 203.714 li
70.9759 201.265 li
70.9759 199.048 li
70.9759 196.716 li
73.2602 195.9 li
75.3841 193.684 li
77.3696 191.818 li
77.8458 189.719 li
81.8274 187.62 li
82.2392 186.92 li
84.5977 185.171 li
84.5977 183.188 li
86.0747 182.489 li
87.4827 181.089 li
88.1617 179.806 li
91.6517 178.057 li
92.2447 175.724 li
93.9577 173.625 li
93.9577 172.342 li
96.6147 171.409 li
97.1187 170.01 li
97.8597 169.076 li
99.2897 166.628 li
100.207 165.462 li
100.432 163.478 li
100.877 162.313 li
102.594 159.981 li
104.219 158.581 li
105 156.948 li
106.504 156.015 li
107.585 154.032 li
109.305 152.399 li
111.403 151.117 li
113.072 149.484 li
113.945 147.385 li
114.793 145.869 li
116.29 144.935 li
116.946 143.886 li
117.968 142.953 li
118.956 141.437 li
120.264 140.154 li
122.071 139.338 li
123.148 137.939 li
123.776 136.656 li
125.095 134.673 li
125.974 133.157 li
128.113 131.174 li
129.259 129.658 li
129.688 128.492 li
131.022 127.559 li
132.221 126.743 li
133.3 125.81 li
134.12 124.293 li
135.418 123.36 li
136.183 121.844 li
137.264 120.445 li
138.499 118.579 li
140.112 117.529 li
141.412 117.296 li
142.659 116.013 li
143.264 114.381 li
144.49 112.515 li
145.619 111.699 li
146.659 111.232 li
148.084 109.949 li
148.498 108.666 li
149.043 107.383 li
150.103 107.267 li
151.295 106.917 li
152.761 105.983 li
153.391 104.934 li
154.425 103.884 li
155.095 102.951 li
156.108 101.785 li
157.226 100.852 li
158.106 99.4527 li
159.154 98.1697 li
160.135 97.4697 li
160.996 96.5367 li
161.832 95.7197 li
163.129 95.0207 li
163.965 94.0878 li
165.07 92.8047 li
166.188 91.9877 li
167.043 90.8217 li
168.211 90.5897 li
169.45 89.5397 li
170.574 88.8397 li
171.679 87.5577 li
172.456 86.3907 li
173.516 85.3407 li
174.617 84.4077 li
175.623 83.4747 li
176.453 81.9597 li
177.454 81.4928 li
178.457 80.6757 li
179.592 79.2767 li
180.67 78.3438 li
181.589 77.7607 li
182.703 77.5277 li
183.534 76.7107 li
184.788 76.2438 li
185.832 75.6617 li
186.97 75.6617 li
187.718 74.7287 li
188.595 74.3777 li
189.787 73.6787 li
190.946 72.7457 li
192.03 72.3957 li
192.918 72.0457 li
194.118 71.8127 li
194.957 71.3457 li
195.966 70.8797 li
197.006 70.4128 li
197.869 69.7128 li
198.709 69.3638 li
199.711 68.4307 li
200.811 67.7307 li
201.896 67.3807 li
202.982 67.1477 li
203.891 66.4487 li
204.901 65.9817 li
205.776 65.1647 li
206.753 64.5827 li
207.621 63.7657 li
208.586 63.0658 li
209.373 62.5997 li
210.421 61.8997 li
211.518 61.1997 li
212.517 60.7337 li
213.376 60.0337 li
214.26 59.9178 li
215.284 59.5668 li
216.299 58.8678 li
217.078 58.4007 li
217.897 57.4678 li
218.821 57.3517 li
219.691 57.0017 li
220.609 56.7688 li
221.463 56.4187 li
222.357 56.3017 li
223.198 56.0688 li
224.085 55.8347 li
225.022 55.6017 li
225.893 55.1357 li
226.698 54.5527 li
227.486 54.2027 li
228.237 53.6198 li
229.063 53.2698 li
229.9 53.1527 li
230.834 53.0367 li
231.634 52.8027 li
232.45 52.3367 li
233.292 52.2198 li
234.019 52.2198 li
234.909 51.5207 li
235.72 51.0537 li
236.564 50.7037 li
237.424 50.3537 li
238.256 49.8877 li
239.051 49.5378 li
239.827 49.1877 li
240.643 49.1877 li
241.365 48.4877 li
242.125 48.0217 li
242.936 47.0887 li
243.754 46.9717 li
244.556 46.7388 li
245.353 46.6217 li
246.18 46.5057 li
246.898 46.3887 li
247.704 46.0387 li
248.497 44.9897 li
249.26 44.5227 li
249.946 44.4057 li
250.779 44.4057 li
251.514 44.2897 li
252.196 43.5898 li
252.934 43.1237 li
253.67 43.0067 li
254.4 42.7737 li
255.076 42.4237 li
255.783 42.0737 li
256.475 41.6077 li
257.2 41.0237 li
257.937 40.9077 li
258.613 40.9077 li
259.322 40.6747 li
259.986 40.5577 li
260.638 40.2077 li
261.33 39.9747 li
261.959 39.8577 li
262.712 39.5087 li
263.335 39.2757 li
263.974 38.9247 li
264.638 38.8087 li
265.29 38.6918 li
265.989 38.4587 li
266.679 38.2257 li
267.273 37.6427 li
267.943 37.4097 li
268.566 37.2917 li
269.207 37.0587 li
269.832 36.9427 li
270.411 36.9427 li
271.071 36.8257 li
271.737 36.5928 li
272.364 36.5928 li
273.005 36.5928 li
273.628 36.4757 li
274.229 36.1257 li
274.866 36.1257 li
275.452 36.1257 li
276.07 35.8927 li
276.673 35.7767 li
277.272 35.6597 li
277.834 35.6597 li
278.405 35.5437 li
279.009 35.4257 li
279.566 35.0767 li
280.15 34.8438 li
280.736 34.8438 li
281.325 34.4937 li
281.857 34.2597 li
282.443 34.2597 li
283.001 33.9107 li
283.566 33.9107 li
284.121 33.6777 li
284.655 33.4438 li
285.175 33.3267 li
285.722 33.2108 li
286.282 32.9777 li
286.841 32.8607 li
287.364 32.7437 li
287.929 32.5107 li
288.453 32.3937 li
288.996 32.2777 li
289.564 32.0447 li
290.103 31.9277 li
290.596 31.9277 li
291.1 31.8117 li
291.608 31.6938 li
292.144 31.3448 li
292.647 31.1118 li
293.183 31.1118 li
293.704 31.1118 li
294.214 30.8777 li
294.714 30.7617 li
295.216 30.7617 li
295.722 30.5277 li
296.219 30.4117 li
296.702 30.2947 li
297.185 30.2947 li
297.645 29.9448 li
298.138 29.9448 li
298.614 29.4787 li
299.111 29.4787 li
299.602 29.3618 li
300.1 29.3618 li
300.58 29.3618 li
301.063 29.2457 li
301.505 29.1287 li
301.98 29.1287 li
302.435 29.1287 li
302.885 29.1287 li
303.36 29.0128 li
303.821 28.7787 li
304.279 28.3127 li
304.738 28.3127 li
305.165 28.3127 li
305.632 28.1957 li
306.079 28.1957 li
306.511 28.1957 li
306.949 28.0787 li
307.382 28.0787 li
307.814 27.9627 li
308.244 27.9627 li
308.661 27.9627 li
309.085 27.6127 li
309.515 27.6127 li
309.929 27.6127 li
310.374 27.6127 li
310.79 27.3797 li
311.193 27.3797 li
311.596 27.2628 li
312 27.2628 li
312.412 27.2628 li
312.807 27.0287 li
313.21 27.0287 li
313.615 27.0287 li
314.019 27.0287 li
314.413 27.0287 li
314.806 26.9128 li
315.214 26.5627 li
315.628 26.4467 li
316.03 26.4467 li
316.423 26.2127 li
316.82 26.0967 li
317.209 26.0967 li
317.599 26.0967 li
317.984 26.0967 li
318.369 26.0967 li
318.74 25.9797 li
319.116 25.8627 li
319.493 25.6297 li
319.871 25.5137 li
320.248 25.3967 li
320.6 25.3967 li
320.959 25.3967 li
321.325 25.2807 li
321.688 25.2807 li
322.038 25.2807 li
322.38 25.2807 li
322.741 25.2807 li
323.1 25.2807 li
323.457 25.2807 li
323.808 24.8138 li
324.144 24.8138 li
324.492 24.8138 li
324.824 24.5807 li
325.154 24.5807 li
325.491 24.5807 li
325.837 24.3467 li
326.19 24.2307 li
326.515 24.1137 li
326.85 24.1137 li
327.191 24.1137 li
327.518 24.1137 li
327.851 24.1137 li
328.179 24.1137 li
328.507 24.1137 li
328.822 23.9967 li
329.145 23.9967 li
329.462 23.9967 li
329.769 23.9967 li
330.093 23.9967 li
330.41 23.8807 li
330.727 23.7637 li
331.04 23.7637 li
331.351 23.7637 li
331.666 23.7637 li
331.977 23.7637 li
332.285 23.7637 li
332.58 23.6477 li
332.886 23.6477 li
333.193 23.6477 li
333.502 23.4147 li
333.804 23.4147 li
334.096 23.2967 li
334.386 23.2967 li
334.688 23.2967 li
334.984 23.1807 li
335.269 23.1807 li
335.56 23.1807 li
335.851 23.1807 li
336.133 23.1807 li
336.42 23.1807 li
336.705 23.1807 li
336.988 23.1807 li
337.26 23.1807 li
337.547 23.1807 li
337.816 23.1807 li
338.092 23.1807 li
338.364 23.1807 li
338.641 23.1807 li
338.904 23.1807 li
339.172 23.1807 li
339.443 23.1807 li
339.701 23.0638 li
339.961 23.0638 li
340.231 23.0638 li
340.497 23.0638 li
340.755 23.0638 li
341.029 23.0638 li
341.289 23.0638 li
341.539 23.0638 li
341.805 23.0638 li
342.059 23.0638 li
342.316 23.0638 li
342.568 23.0638 li
342.82 22.9477 li
343.063 22.9477 li
343.307 22.8307 li
343.548 22.8307 li
343.797 22.7148 li
344.045 22.7148 li
344.297 22.7148 li
344.539 22.7148 li
344.779 22.7148 li
345.025 22.5977 li
345.268 22.5977 li
345.506 22.5977 li
345.746 22.5977 li
345.98 22.5977 li
346.225 22.5977 li
346.458 22.5977 li
346.68 22.5977 li
346.923 22.5977 li
347.15 22.5977 li
347.377 22.5977 li
347.607 22.5977 li
347.835 22.5977 li
348.058 22.5977 li
348.277 22.5977 li
348.496 22.5977 li
348.715 22.5977 li
348.936 22.5977 li
349.155 22.5977 li
349.387 22.5977 li
349.611 22.5977 li
349.83 22.5977 li
350.042 22.5977 li
350.258 22.5977 li
350.466 22.4807 li
350.691 22.4807 li
350.903 22.3647 li
351.114 22.3647 li
351.32 22.3647 li
351.526 22.3647 li
351.727 22.2477 li
351.935 22.2477 li
352.14 22.1307 li
352.339 22.1307 li
352.542 22.1307 li
352.745 22.1307 li
352.946 22.1307 li
353.143 22.0147 li
353.343 22.0147 li
353.541 22.0147 li
353.737 22.0147 li
353.939 22.0147 li
354.139 22.0147 li
354.338 21.8977 li
354.532 21.8977 li
354.724 21.7817 li
354.916 21.7817 li
355.109 21.7817 li
355.298 21.7817 li
355.489 21.7817 li
355.677 21.7817 li
355.861 21.7817 li
356.043 21.7817 li
356.232 21.7817 li
356.416 21.7817 li
356.602 21.5487 li
356.784 21.5487 li
356.972 21.5487 li
357.155 21.5487 li
357.333 21.4307 li
357.507 21.4307 li
357.688 21.4307 li
357.864 21.4307 li
358.04 21.4307 li
358.216 21.3148 li
358.393 21.3148 li
358.565 21.1977 li
358.739 21.1977 li
358.908 21.1977 li
359.077 21.1977 li
359.25 21.1977 li
359.422 21.1977 li
359.588 21.1977 li
359.757 21.1977 li
359.924 21.1977 li
360.093 21.1977 li
360.259 21.1977 li
360.421 21.1977 li
360.591 21.1977 li
360.757 21.1977 li
360.918 21.0817 li
361.083 21.0817 li
361.248 21.0817 li
361.408 21.0817 li
361.57 21.0817 li
361.731 20.8487 li
361.893 20.7318 li
362.06 20.6147 li
362.218 20.6147 li
362.378 20.6147 li
362.539 20.6147 li
362.693 20.6147 li
362.846 20.6147 li
363 20.6147 li
363.161 20.6147 li
363.313 20.4987 li
363.465 20.3817 li
363.621 20.3817 li
363.77 20.3817 li
363.919 20.3817 li
364.071 20.3817 li
364.225 20.2647 li
364.378 20.1487 li
364.527 20.0317 li
364.673 19.9157 li
364.821 19.7987 li
364.965 19.7987 li
365.108 19.7987 li
365.254 19.6827 li
365.398 19.5648 li
365.54 19.5648 li
365.682 19.5648 li
365.826 19.5648 li
365.967 19.5648 li
366.108 19.5648 li
366.25 19.5648 li
366.389 19.4487 li
366.525 19.4487 li
366.659 19.4487 li
366.801 19.4487 li
366.939 19.4487 li
367.074 19.4487 li
367.208 19.4487 li
367.344 19.4487 li
367.481 19.4487 li
367.612 19.4487 li
367.741 19.4487 li
367.873 19.4487 li
368.001 19.4487 li
368.132 19.4487 li
368.26 19.4487 li
368.391 19.4487 li
368.521 19.4487 li
368.646 19.4487 li
368.773 19.4487 li
368.898 19.4487 li
369.025 19.4487 li
369.155 19.4487 li
369.283 19.4487 li
369.412 19.4487 li
369.538 19.4487 li
369.665 19.4487 li
369.786 19.3317 li
369.91 19.2158 li
370.024 19.2158 li
370.146 19.2158 li
370.27 19.2158 li
370.388 19.2158 li
370.503 19.2158 li
370.624 19.2158 li
370.742 19.2158 li
370.857 19.2158 li
370.973 19.2158 li
371.09 19.2158 li
371.21 19.2158 li
371.331 19.2158 li
371.442 19.2158 li
371.559 19.2158 li
371.672 19.2158 li
371.786 19.2158 li
371.898 19.2158 li
372.013 19.2158 li
372.127 19.2158 li
372.241 19.2158 li
372.352 19.2158 li
372.464 19.2158 li
372.573 19.2158 li
372.684 19.2158 li
372.795 19.2158 li
372.903 19.2158 li
373.009 19.2158 li
373.116 19.2158 li
373.225 19.2158 li
373.331 19.2158 li
373.438 19.2158 li
373.542 19.2158 li
373.644 19.2158 li
373.749 19.2158 li
373.848 19.2158 li
373.95 19.2158 li
374.051 19.2158 li
374.155 19.2158 li
374.258 19.2158 li
374.359 19.2158 li
374.459 19.2158 li
374.561 19.2158 li
374.657 19.2158 li
374.755 19.2158 li
374.856 19.2158 li
374.951 19.2158 li
375.049 19.2158 li
375.147 19.2158 li
375.243 19.0987 li
375.339 19.0987 li
375.432 19.0987 li
375.523 19.0987 li
375.616 19.0987 li
375.71 19.0987 li
375.802 19.0987 li
375.898 19.0987 li
375.989 19.0987 li
376.081 19.0987 li
376.173 19.0987 li
376.264 19.0987 li
376.355 19.0987 li
376.444 19.0987 li
376.532 19.0987 li
376.62 19.0987 li
376.709 19.0987 li
376.793 19.0987 li
376.884 19.0987 li
376.969 19.0987 li
377.055 19.0987 li
377.142 19.0987 li
377.227 19.0987 li
377.311 19.0987 li
377.396 19.0987 li
377.481 19.0987 li
377.566 19.0987 li
377.653 19.0987 li
377.735 19.0987 li
377.82 19.0987 li
377.905 19.0987 li
377.987 19.0987 li
378.067 19.0987 li
378.15 19.0987 li
378.232 19.0987 li
378.312 19.0987 li
378.391 19.0987 li
378.473 19.0987 li
378.55 19.0987 li
378.629 19.0987 li
378.709 19.0987 li
378.785 19.0987 li
378.862 19.0987 li
378.941 19.0987 li
379.021 19.0987 li
379.097 19.0987 li
379.172 18.9827 li
379.247 18.9827 li
379.323 18.9827 li
379.4 18.8658 li
379.475 18.8658 li
379.55 18.8658 li
379.622 18.8658 li
379.693 18.8658 li
379.765 18.8658 li
379.839 18.8658 li
379.911 18.8658 li
379.986 18.8658 li
380.059 18.8658 li
380.131 18.8658 li
380.2 18.8658 li
380.271 18.8658 li
380.343 18.8658 li
380.415 18.8658 li
380.488 18.8658 li
380.554 18.8658 li
380.623 18.8658 li
380.69 18.8658 li
380.759 18.8658 li
380.827 18.8658 li
380.892 18.8658 li
380.959 18.8658 li
381.026 18.8658 li
381.092 18.8658 li
381.16 18.8658 li
381.226 18.8658 li
381.291 18.8658 li
381.357 18.8658 li
381.421 18.8658 li
381.486 18.8658 li
381.552 18.8658 li
381.613 18.8658 li
381.676 18.8658 li
381.74 18.8658 li
381.802 18.8658 li
381.866 18.8658 li
381.927 18.8658 li
381.988 18.8658 li
382.048 18.8658 li
382.109 18.8658 li
382.168 18.8658 li
382.229 18.8658 li
382.288 18.8658 li
382.348 18.7487 li
382.407 18.7487 li
382.465 18.7487 li
382.524 18.7487 li
382.582 18.7487 li
382.639 18.7487 li
382.695 18.7487 li
382.752 18.7487 li
382.809 18.7487 li
382.866 18.7487 li
382.921 18.7487 li
382.977 18.7487 li
383.033 18.7487 li
383.088 18.7487 li
383.142 18.7487 li
383.195 18.7487 li
383.25 18.7487 li
383.306 18.6328 li
383.358 18.6328 li
383.414 18.6328 li
383.466 18.6328 li
383.52 18.6328 li
383.571 18.6328 li
383.626 18.6328 li
383.681 18.6328 li
383.732 18.6328 li
383.782 18.6328 li
383.83 18.6328 li
383.882 18.6328 li
383.933 18.6328 li
383.985 18.6328 li
384.034 18.6328 li
384.083 18.6328 li
384.133 18.6328 li
384.181 18.6328 li
384.231 18.6328 li
384.278 18.6328 li
384.327 18.6328 li
384.375 18.6328 li
384.424 18.6328 li
384.471 18.6328 li
384.519 18.6328 li
384.566 18.5157 li
384.614 18.5157 li
384.662 18.5157 li
384.705 18.5157 li
384.754 18.5157 li
384.798 18.5157 li
384.843 18.5157 li
384.89 18.5157 li
384.934 18.5157 li
384.978 18.5157 li
385.023 18.5157 li
385.068 18.5157 li
385.111 18.5157 li
385.155 18.5157 li
385.2 18.5157 li
385.243 18.5157 li
385.285 18.5157 li
385.328 18.5157 li
385.37 18.5157 li
385.414 18.5157 li
385.455 18.5157 li
385.497 18.5157 li
385.537 18.5157 li
385.577 18.5157 li
385.62 18.5157 li
385.659 18.5157 li
385.699 18.5157 li
385.739 18.5157 li
385.777 18.5157 li
385.818 18.5157 li
385.856 18.5157 li
385.894 18.5157 li
385.932 18.5157 li
385.971 18.5157 li
386.01 18.5157 li
386.047 18.5157 li
386.086 18.5157 li
386.125 18.5157 li
386.161 18.5157 li
386.198 18.5157 li
386.235 18.5157 li
386.271 18.5157 li
386.307 18.5157 li
386.345 18.5157 li
386.38 18.5157 li
386.416 18.5157 li
386.45 18.5157 li
386.484 18.5157 li
386.518 18.5157 li
386.552 18.5157 li
386.586 18.5157 li
386.62 18.5157 li
386.656 18.5157 li
386.689 18.3997 li
386.721 18.3997 li
386.755 18.3997 li
386.788 18.3997 li
386.82 18.3997 li
386.854 18.3997 li
386.886 18.3997 li
386.918 18.3997 li
386.95 18.3997 li
386.981 18.3997 li
387.013 18.3997 li
387.045 18.3997 li
387.075 18.3997 li
387.107 18.3997 li
387.137 18.3997 li
387.168 18.3997 li
387.198 18.3997 li
387.229 18.3997 li
387.259 18.3997 li
387.289 18.3997 li
387.318 18.3997 li
387.348 18.3997 li
387.378 18.3997 li
387.407 18.3997 li
387.438 18.3997 li
387.466 18.3997 li
387.494 18.3997 li
387.523 18.3997 li
387.55 18.3997 li
387.579 18.3997 li
387.608 18.3997 li
387.635 18.3997 li
387.663 18.3997 li
387.691 18.3997 li
387.718 18.3997 li
387.745 18.3997 li
387.771 18.3997 li
387.798 18.3997 li
387.825 18.3997 li
387.851 18.3997 li
387.878 18.3997 li
387.905 18.3997 li
387.931 18.3997 li
387.957 18.3997 li
387.982 18.3997 li
388.005 18.3997 li
388.031 18.3997 li
388.057 18.3997 li
388.081 18.3997 li
388.106 18.3997 li
388.132 18.3997 li
388.157 18.3997 li
388.18 18.3997 li
388.204 18.3997 li
388.228 18.3997 li
388.251 18.3997 li
388.274 18.3997 li
388.298 18.3997 li
388.322 18.3997 li
388.345 18.3997 li
388.366 18.3997 li
388.389 18.3997 li
388.412 18.3997 li
388.435 18.3997 li
388.457 18.3997 li
388.479 18.3997 li
388.501 18.3997 li
388.523 18.3997 li
388.545 18.3997 li
388.568 18.3997 li
388.591 18.3997 li
388.614 18.3997 li
388.635 18.3997 li
388.657 18.3997 li
388.677 18.3997 li
388.698 18.3997 li
388.718 18.3997 li
388.737 18.3997 li
388.758 18.3997 li
388.78 18.3997 li
388.799 18.3997 li
388.819 18.3997 li
388.838 18.3997 li
388.857 18.3997 li
388.877 18.3997 li
388.896 18.3997 li
388.917 18.3997 li
388.935 18.3997 li
388.954 18.3997 li
388.973 18.3997 li
388.99 18.3997 li
389.009 18.3997 li
389.027 18.3997 li
389.045 18.3997 li
389.064 18.3997 li
389.082 18.3997 li
389.1 18.3997 li
389.117 18.3997 li
389.135 18.3997 li
389.152 18.3997 li
389.17 18.3997 li
389.188 18.3997 li
389.207 18.3997 li
389.223 18.2827 li
389.24 18.2827 li
389.258 18.2827 li
389.275 18.2827 li
389.291 18.2827 li
389.307 18.2827 li
389.324 18.2827 li
389.34 18.2827 li
389.355 18.2827 li
389.371 18.2827 li
389.389 18.2827 li
389.403 18.2827 li
389.42 18.2827 li
389.437 18.2827 li
389.452 18.2827 li
389.468 18.2827 li
389.483 18.2827 li
389.497 18.2827 li
389.513 18.2827 li
389.528 18.2827 li
389.543 18.2827 li
389.557 18.2827 li
389.571 18.2827 li
389.586 18.2827 li
389.6 18.2827 li
389.614 18.2827 li
389.629 18.2827 li
389.643 18.2827 li
389.656 18.2827 li
389.67 18.2827 li
389.685 18.2827 li
389.698 18.2827 li
389.712 18.2827 li
389.725 18.2827 li
389.738 18.2827 li
389.752 18.2827 li
389.765 18.2827 li
389.778 18.2827 li
389.791 18.2827 li
389.804 18.2827 li
389.818 18.2827 li
389.83 18.2827 li
389.842 18.2827 li
389.854 18.2827 li
389.866 18.2827 li
389.879 18.2827 li
389.891 18.2827 li
389.903 18.2827 li
389.916 18.2827 li
389.927 18.2827 li
389.94 18.2827 li
389.951 18.2827 li
389.963 18.2827 li
389.974 18.2827 li
389.986 18.2827 li
389.998 18.2827 li
390.009 18.2827 li
390.019 18.2827 li
390.03 18.2827 li
390.042 18.2827 li
390.052 18.2827 li
390.063 18.2827 li
390.073 18.2827 li
390.084 18.2827 li
390.093 18.2827 li
390.105 18.2827 li
390.114 18.2827 li
390.124 18.2827 li
390.136 18.2827 li
390.145 18.2827 li
390.155 18.2827 li
390.165 18.2827 li
390.175 18.2827 li
390.185 18.2827 li
390.194 18.2827 li
390.205 18.2827 li
390.214 18.2827 li
390.223 18.2827 li
390.233 18.2827 li
390.242 18.2827 li
390.252 18.2827 li
390.261 18.2827 li
390.27 18.2827 li
390.28 18.2827 li
390.287 18.2827 li
390.296 18.2827 li
390.304 18.2827 li
390.313 18.2827 li
390.321 18.2827 li
390.33 18.2827 li
390.339 18.2827 li
390.348 18.2827 li
390.357 18.2827 li
390.366 18.2827 li
390.374 18.2827 li
390.382 18.2827 li
390.39 18.2827 li
390.397 18.2827 li
390.405 18.2827 li
390.413 18.2827 li
390.421 18.2827 li
390.429 18.2827 li
390.437 18.2827 li
390.445 18.2827 li
390.453 18.2827 li
390.461 18.2827 li
390.468 18.2827 li
390.476 18.2827 li
390.484 18.2827 li
390.491 18.2827 li
390.498 18.2827 li
390.505 18.2827 li
390.513 18.2827 li
390.52 18.2827 li
390.527 18.2827 li
390.534 18.2827 li
390.541 18.2827 li
390.548 18.2827 li
390.555 18.2827 li
390.561 18.2827 li
390.568 18.2827 li
390.574 18.2827 li
390.58 18.2827 li
390.587 18.2827 li
390.593 18.2827 li
390.599 18.2827 li
390.605 18.2827 li
390.61 18.2827 li
390.617 18.2827 li
390.623 18.2827 li
390.629 18.2827 li
390.634 18.2827 li
390.64 18.2827 li
390.647 18.2827 li
390.653 18.2827 li
390.66 18.2827 li
390.666 18.2827 li
390.671 18.2827 li
390.676 18.2827 li
390.683 18.2827 li
390.689 18.2827 li
390.694 18.2827 li
390.7 18.2827 li
390.705 18.2827 li
390.711 18.2827 li
390.717 18.2827 li
390.722 18.2827 li
390.727 18.2827 li
390.733 18.2827 li
390.739 18.2827 li
390.745 18.2827 li
390.75 18.2827 li
390.755 18.2827 li
390.76 18.2827 li
390.765 18.2827 li
390.771 18.2827 li
390.776 18.2827 li
390.78 18.2827 li
390.786 18.2827 li
390.791 18.2827 li
390.796 18.2827 li
390.801 18.2827 li
390.805 18.2827 li
390.811 18.2827 li
390.816 18.2827 li
390.821 18.2827 li
390.825 18.2827 li
390.83 18.2827 li
390.834 18.2827 li
390.839 18.2827 li
390.843 18.2827 li
390.848 18.2827 li
390.852 18.2827 li
390.857 18.2827 li
390.861 18.2827 li
390.867 18.2827 li
390.871 18.2827 li
390.875 18.2827 li
390.88 18.2827 li
390.884 18.2827 li
390.888 18.2827 li
390.892 18.2827 li
390.896 18.2827 li
390.9 18.2827 li
390.904 18.2827 li
390.909 18.2827 li
390.912 18.2827 li
390.916 18.2827 li
390.92 18.2827 li
390.923 18.2827 li
390.927 18.2827 li
390.93 18.2827 li
390.935 18.2827 li
390.938 18.2827 li
390.942 18.2827 li
390.945 18.2827 li
390.949 18.2827 li
390.953 18.2827 li
390.957 18.2827 li
390.961 18.2827 li
390.964 18.2827 li
390.967 18.2827 li
390.97 18.2827 li
390.974 18.2827 li
390.978 18.2827 li
390.981 18.2827 li
390.984 18.2827 li
390.987 18.2827 li
390.991 18.2827 li
390.993 18.2827 li
390.997 18.2827 li
391 18.2827 li
391.003 18.2827 li
391.006 18.2827 li
391.01 18.2827 li
391.013 18.2827 li
391.016 18.2827 li
391.02 18.2827 li
391.022 18.2827 li
391.025 18.2827 li
391.028 18.2827 li
391.032 18.2827 li
391.035 18.2827 li
391.038 18.2827 li
391.041 18.2827 li
391.043 18.2827 li
391.046 18.2827 li
391.049 18.2827 li
391.052 18.2827 li
391.055 18.2827 li
391.058 18.2827 li
391.06 18.2827 li
391.063 18.2827 li
391.066 18.2827 li
391.068 18.2827 li
391.071 18.2827 li
391.075 18.2827 li
391.077 18.2827 li
391.08 18.2827 li
391.082 18.2827 li
391.084 18.2827 li
391.087 18.2827 li
391.089 18.2827 li
391.092 18.2827 li
391.094 18.2827 li
391.096 18.2827 li
391.099 18.2827 li
391.102 18.2827 li
391.105 18.2827 li
391.107 18.2827 li
391.109 18.2827 li
391.111 18.2827 li
391.114 18.2827 li
391.116 18.2827 li
391.118 18.2827 li
391.12 18.2827 li
391.123 18.2827 li
391.125 18.2827 li
391.127 18.2827 li
391.129 18.2827 li
391.132 18.2827 li
391.134 18.2827 li
391.135 18.2827 li
391.138 18.2827 li
391.14 18.2827 li
391.142 18.2827 li
391.144 18.2827 li
391.146 18.2827 li
391.149 18.2827 li
391.151 18.2827 li
391.153 18.2827 li
391.155 18.2827 li
391.157 18.2827 li
391.159 18.2827 li
391.161 18.2827 li
391.163 18.2827 li
391.165 18.2827 li
391.167 18.2827 li
391.169 18.2827 li
391.17 18.2827 li
391.173 18.2827 li
391.175 18.2827 li
391.177 18.2827 li
391.179 18.2827 li
391.18 18.2827 li
391.182 18.2827 li
391.183 18.2827 li
391.185 18.2827 li
391.187 18.2827 li
391.189 18.2827 li
391.19 18.2827 li
391.191 18.2827 li
391.194 18.2827 li
391.195 18.2827 li
391.198 18.2827 li
391.199 18.2827 li
391.2 18.2827 li
391.202 18.2827 li
391.204 18.2827 li
391.206 18.2827 li
391.207 18.2827 li
391.208 18.2827 li
391.21 18.2827 li
391.212 18.2827 li
391.213 18.2827 li
391.215 18.2827 li
391.216 18.2827 li
391.218 18.2827 li
391.219 18.2827 li
391.221 18.2827 li
391.222 18.2827 li
391.225 18.2827 li
391.227 18.2827 li
391.228 18.2827 li
391.229 18.2827 li
391.23 18.2827 li
391.232 18.2827 li
391.234 18.2827 li
391.235 18.2827 li
391.236 18.2827 li
391.237 18.2827 li
391.239 18.2827 li
391.24 18.2827 li
391.241 18.2827 li
391.243 18.2827 li
391.245 18.2827 li
391.246 18.2827 li
391.247 18.2827 li
391.248 18.2827 li
391.249 18.2827 li
391.251 18.2827 li
391.252 18.2827 li
391.253 18.2827 li
391.254 18.2827 li
391.255 18.2827 li
391.257 18.2827 li
391.259 18.2827 li
391.26 18.2827 li
391.261 18.2827 li
391.263 18.2827 li
391.264 18.2827 li
391.266 18.2827 li
391.267 18.2827 li
391.269 18.2827 li
391.27 18.2827 li
391.271 18.2827 li
391.272 18.2827 li
391.273 18.2827 li
391.274 18.2827 li
391.275 18.2827 li
391.276 18.2827 li
391.277 18.2827 li
391.278 18.2827 li
391.279 18.2827 li
391.28 18.2827 li
391.281 18.2827 li
391.282 18.2827 li
391.283 18.2827 li
391.284 18.2827 li
391.286 18.2827 li
391.287 18.2827 li
391.288 18.2827 li
391.29 18.2827 li
391.291 18.2827 li
391.293 18.2827 li
391.294 18.2827 li
391.295 18.2827 li
391.296 18.2827 li
391.297 18.2827 li
391.298 18.2827 li
391.299 18.2827 li
391.3 18.2827 li
391.301 18.2827 li
391.302 18.2827 li
391.303 18.2827 li
391.304 18.2827 li
391.305 18.2827 li
391.306 18.2827 li
391.307 18.2827 li
391.308 18.2827 li
391.309 18.2827 li
391.31 18.2827 li
391.311 18.2827 li
391.312 18.2827 li
391.313 18.2827 li
391.314 18.2827 li
391.315 18.2827 li
391.316 18.2827 li
391.317 18.2827 li
391.318 18.2827 li
391.319 18.2827 li
391.32 18.2827 li
391.321 18.2827 li
391.322 18.2827 li
391.323 18.2827 li
391.324 18.2827 li
391.325 18.2827 li
391.326 18.2827 li
391.327 18.2827 li
391.328 18.2827 li
391.329 18.2827 li
391.33 18.2827 li
391.331 18.2827 li
391.332 18.2827 li
391.333 18.2827 li
391.334 18.2827 li
391.335 18.2827 li
391.336 18.2827 li
391.337 18.2827 li
391.338 18.2827 li
391.339 18.2827 li
391.34 18.2827 li
391.341 18.2827 li
391.342 18.2827 li
391.343 18.2827 li
391.344 18.2827 li
391.345 18.2827 li
391.346 18.2827 li
391.347 18.2827 li
391.348 18.2827 li
391.349 18.2827 li
391.35 18.2827 li
391.351 18.2827 li
391.352 18.2827 li
391.353 18.2827 li
391.354 18.2827 li
391.355 18.2827 li
391.356 18.2827 li
391.357 18.2827 li
391.358 18.2827 li
391.359 18.2827 li
391.36 18.2827 li
391.361 18.2827 li
391.362 18.2827 li
391.363 18.2827 li
391.364 18.2827 li
391.365 18.2827 li
391.366 18.2827 li
391.367 18.2827 li
391.368 18.2827 li
391.369 18.2827 li
391.37 18.2827 li
391.371 18.2827 li
391.372 18.2827 li
391.373 18.2827 li
391.374 18.2827 li
391.375 18.2827 li
391.376 18.2827 li
391.377 18.2827 li
391.378 18.2827 li
391.379 18.2827 li
391.38 18.2827 li
391.381 18.2827 li
391.382 18.2827 li
391.383 18.2827 li
391.384 18.2827 li
391.385 18.2827 li
391.386 18.2827 li
391.387 18.2827 li
391.388 18.2827 li
391.389 18.2827 li
391.39 18.2827 li
391.391 18.2827 li
391.392 18.2827 li
391.393 18.2827 li
391.394 18.2827 li
391.395 18.2827 li
391.396 18.2827 li
391.397 18.2827 li
391.398 18.2827 li
391.399 18.2827 li
391.4 18.2827 li
.895628 .7673 0 0 cmyk
@
0 lj
42.6497 238.616 mo
42.6497 244.616 li
39.6497 241.616 mo
45.6497 241.616 li
40.5286 239.495 mo
44.7708 243.737 li
40.5286 243.737 mo
44.7708 239.495 li
@
54.9188 217.974 mo
54.9188 223.974 li
51.9188 220.974 mo
57.9188 220.974 li
52.7977 218.853 mo
57.0399 223.095 li
52.7977 223.095 mo
57.0399 218.853 li
@
70.3763 200.714 mo
70.3763 206.714 li
67.3763 203.714 mo
73.3763 203.714 li
68.2552 201.593 mo
72.4974 205.835 li
68.2552 205.835 mo
72.4974 201.593 li
@
84.5977 182.171 mo
84.5977 188.171 li
81.5981 185.171 mo
87.5977 185.171 li
82.4774 183.05 mo
86.7197 187.292 li
82.4774 187.292 mo
86.7197 183.05 li
@
97.1187 167.01 mo
97.1187 173.01 li
94.1187 170.01 mo
100.119 170.01 li
94.9977 167.889 mo
99.2397 172.131 li
94.9977 172.131 mo
99.2397 167.889 li
@
107.585 151.032 mo
107.585 157.032 li
104.585 154.032 mo
110.585 154.032 li
105.464 151.912 mo
109.706 156.153 li
105.464 156.153 mo
109.706 151.912 li
@
120.264 137.154 mo
120.264 143.154 li
117.264 140.154 mo
123.264 140.154 li
118.143 138.033 mo
122.385 142.275 li
118.143 142.275 mo
122.385 138.033 li
@
132.221 123.742 mo
132.221 129.742 li
129.221 126.742 mo
135.221 126.742 li
130.1 124.622 mo
134.342 128.863 li
130.1 128.863 mo
134.342 124.622 li
@
143.264 111.381 mo
143.264 117.381 li
140.264 114.381 mo
146.264 114.381 li
141.143 112.26 mo
145.385 116.501 li
141.143 116.501 mo
145.385 112.26 li
@
153.391 101.934 mo
153.391 107.934 li
150.391 104.934 mo
156.391 104.934 li
151.27 102.813 mo
155.512 107.055 li
151.27 107.055 mo
155.512 102.813 li
@
163.13 92.0207 mo
163.13 98.0207 li
160.13 95.0207 mo
166.13 95.0207 li
161.009 92.8997 mo
165.251 97.1417 li
161.009 97.1417 mo
165.251 92.8997 li
@
173.516 82.3407 mo
173.516 88.3407 li
170.516 85.3407 mo
176.516 85.3407 li
171.395 83.2198 mo
175.637 87.4617 li
171.395 87.4617 mo
175.637 83.2198 li
@
183.534 73.7107 mo
183.534 79.7107 li
180.534 76.7107 mo
186.534 76.7107 li
181.413 74.5898 mo
185.655 78.8317 li
181.413 78.8317 mo
185.655 74.5898 li
@
194.118 68.8127 mo
194.118 74.8127 li
191.118 71.8127 mo
197.118 71.8127 li
191.996 69.6918 mo
196.239 73.9337 li
191.996 73.9337 mo
196.239 69.6918 li
@
203.891 63.4477 mo
203.891 69.4477 li
200.891 66.4477 mo
206.891 66.4477 li
201.77 64.3277 mo
206.012 68.5688 li
201.77 68.5688 mo
206.012 64.3277 li
@
213.377 57.0337 mo
213.377 63.0337 li
210.377 60.0337 mo
216.377 60.0337 li
211.255 57.9128 mo
215.498 62.1547 li
211.255 62.1547 mo
215.498 57.9128 li
@
222.357 53.3017 mo
222.357 59.3017 li
219.357 56.3017 mo
225.357 56.3017 li
220.236 54.1807 mo
224.478 58.4227 li
220.236 58.4227 mo
224.478 54.1807 li
@
230.834 50.0367 mo
230.834 56.0367 li
227.834 53.0367 mo
233.834 53.0367 li
228.713 50.9158 mo
232.955 55.1577 li
228.713 55.1577 mo
232.955 50.9158 li
@
239.051 46.5378 mo
239.051 52.5378 li
236.051 49.5378 mo
242.051 49.5378 li
236.93 47.4167 mo
241.172 51.6587 li
236.93 51.6587 mo
241.172 47.4167 li
@
246.898 43.3887 mo
246.898 49.3887 li
243.898 46.3887 mo
249.898 46.3887 li
244.777 44.2677 mo
249.019 48.5098 li
244.777 48.5098 mo
249.019 44.2677 li
@
254.4 39.7737 mo
254.4 45.7737 li
251.4 42.7737 mo
257.4 42.7737 li
252.28 40.6527 mo
256.521 44.8948 li
252.28 44.8948 mo
256.521 40.6527 li
@
261.33 36.9747 mo
261.33 42.9747 li
258.33 39.9747 mo
264.33 39.9747 li
259.209 37.8537 mo
263.451 42.0957 li
259.209 42.0957 mo
263.451 37.8537 li
@
267.944 34.4088 mo
267.944 40.4087 li
264.944 37.4087 mo
270.944 37.4087 li
265.823 35.2878 mo
270.064 39.5297 li
265.823 39.5297 mo
270.064 35.2878 li
@
274.229 33.1257 mo
274.229 39.1257 li
271.229 36.1257 mo
277.229 36.1257 li
272.108 34.0047 mo
276.35 38.2467 li
272.108 38.2467 mo
276.35 34.0047 li
@
280.15 31.8438 mo
280.15 37.8438 li
277.15 34.8438 mo
283.15 34.8438 li
278.03 32.7217 mo
282.271 36.9648 li
278.03 36.9648 mo
282.271 32.7217 li
@
285.722 30.2108 mo
285.722 36.2107 li
282.722 33.2108 mo
288.722 33.2108 li
283.601 31.0898 mo
287.843 35.3317 li
283.601 35.3317 mo
287.843 31.0898 li
@
291.1 28.8107 mo
291.1 34.8107 li
288.1 31.8107 mo
294.1 31.8107 li
288.98 29.6898 mo
293.221 33.9317 li
288.98 33.9317 mo
293.221 29.6898 li
@
296.219 27.4117 mo
296.219 33.4117 li
293.219 30.4117 mo
299.219 30.4117 li
294.098 28.2907 mo
298.34 32.5327 li
294.098 32.5327 mo
298.34 28.2907 li
@
301.063 26.2448 mo
301.063 32.2448 li
298.063 29.2448 mo
304.063 29.2448 li
298.941 27.1237 mo
303.184 31.3668 li
298.941 31.3668 mo
303.184 27.1237 li
@
305.632 25.1957 mo
305.632 31.1957 li
302.632 28.1957 mo
308.632 28.1957 li
303.511 26.0747 mo
307.753 30.3167 li
303.511 30.3167 mo
307.753 26.0747 li
@
309.929 24.6127 mo
309.929 30.6127 li
306.929 27.6127 mo
312.929 27.6127 li
307.808 25.4918 mo
312.05 29.7337 li
307.808 29.7337 mo
312.05 25.4918 li
@
314.018 24.0297 mo
314.018 30.0297 li
311.018 27.0297 mo
317.018 27.0297 li
311.897 24.9088 mo
316.139 29.1507 li
311.897 29.1507 mo
316.139 24.9088 li
@
317.984 23.0967 mo
317.984 29.0967 li
314.984 26.0967 mo
320.984 26.0967 li
315.863 23.9757 mo
320.105 28.2177 li
315.863 28.2177 mo
320.105 23.9757 li
@
321.688 22.2797 mo
321.688 28.2797 li
318.688 25.2797 mo
324.688 25.2797 li
319.567 23.1597 mo
323.809 27.4007 li
319.567 27.4007 mo
323.809 23.1597 li
@
325.154 21.5807 mo
325.154 27.5807 li
322.154 24.5807 mo
328.154 24.5807 li
323.033 22.4597 mo
327.275 26.7017 li
323.033 26.7017 mo
327.275 22.4597 li
@
328.507 21.1137 mo
328.507 27.1137 li
325.507 24.1137 mo
331.507 24.1137 li
326.386 21.9927 mo
330.628 26.2347 li
326.386 26.2347 mo
330.628 21.9927 li
@
331.666 20.7637 mo
331.666 26.7637 li
328.666 23.7637 mo
334.666 23.7637 li
329.545 21.6428 mo
333.788 25.8847 li
329.545 25.8847 mo
333.788 21.6428 li
@
334.688 20.2977 mo
334.688 26.2977 li
331.688 23.2977 mo
337.688 23.2977 li
332.567 21.1767 mo
336.809 25.4188 li
332.567 25.4188 mo
336.809 21.1767 li
@
337.547 20.1807 mo
337.547 26.1807 li
334.547 23.1807 mo
340.547 23.1807 li
335.426 21.0598 mo
339.668 25.3017 li
335.426 25.3017 mo
339.668 21.0598 li
@
340.231 20.0648 mo
340.231 26.0648 li
337.231 23.0648 mo
343.231 23.0648 li
338.11 20.9438 mo
342.352 25.1857 li
338.11 25.1857 mo
342.352 20.9438 li
@
342.82 19.9477 mo
342.82 25.9477 li
339.82 22.9477 mo
345.82 22.9477 li
340.699 20.8267 mo
344.941 25.0688 li
340.699 25.0688 mo
344.941 20.8267 li
@
345.268 19.5977 mo
345.268 25.5977 li
342.268 22.5977 mo
348.268 22.5977 li
343.147 20.4767 mo
347.389 24.7188 li
343.147 24.7188 mo
347.389 20.4767 li
@
347.608 19.5977 mo
347.608 25.5977 li
344.608 22.5977 mo
350.608 22.5977 li
345.487 20.4767 mo
349.729 24.7188 li
345.487 24.7188 mo
349.729 20.4767 li
@
349.83 19.5977 mo
349.83 25.5977 li
346.83 22.5977 mo
352.83 22.5977 li
347.709 20.4767 mo
351.951 24.7188 li
347.709 24.7188 mo
351.951 20.4767 li
@
351.935 19.2477 mo
351.935 25.2477 li
348.935 22.2477 mo
354.935 22.2477 li
349.814 20.1267 mo
354.056 24.3687 li
349.814 24.3687 mo
354.056 20.1267 li
@
353.939 19.0147 mo
353.939 25.0147 li
350.939 22.0147 mo
356.939 22.0147 li
351.818 19.8937 mo
356.06 24.1357 li
351.818 24.1357 mo
356.06 19.8937 li
@
355.861 18.7817 mo
355.861 24.7817 li
352.861 21.7817 mo
358.861 21.7817 li
353.74 19.6607 mo
357.982 23.9027 li
353.74 23.9027 mo
357.982 19.6607 li
@
357.688 18.4317 mo
357.688 24.4317 li
354.688 21.4317 mo
360.688 21.4317 li
355.567 19.3107 mo
359.809 23.5527 li
355.567 23.5527 mo
359.809 19.3107 li
@
359.422 18.1987 mo
359.422 24.1987 li
356.422 21.1987 mo
362.422 21.1987 li
357.301 19.0777 mo
361.543 23.3198 li
357.301 23.3198 mo
361.543 19.0777 li
@
361.083 18.0817 mo
361.083 24.0817 li
358.083 21.0817 mo
364.083 21.0817 li
358.962 18.9608 mo
363.204 23.2027 li
358.962 23.2027 mo
363.204 18.9608 li
@
362.693 17.6147 mo
362.693 23.6147 li
359.693 20.6147 mo
365.693 20.6147 li
360.572 18.4937 mo
364.814 22.7368 li
360.572 22.7368 mo
364.814 18.4937 li
@
364.225 17.2647 mo
364.225 23.2647 li
361.225 20.2647 mo
367.225 20.2647 li
362.104 18.1447 mo
366.346 22.3867 li
362.104 22.3867 mo
366.346 18.1447 li
@
365.682 16.5657 mo
365.682 22.5657 li
362.682 19.5657 mo
368.682 19.5657 li
363.561 17.4448 mo
367.804 21.6867 li
363.561 21.6867 mo
367.804 17.4448 li
@
367.074 16.4487 mo
367.074 22.4487 li
364.074 19.4487 mo
370.074 19.4487 li
364.953 17.3277 mo
369.195 21.5698 li
364.953 21.5698 mo
369.195 17.3277 li
@
368.391 16.4487 mo
368.391 22.4487 li
365.391 19.4487 mo
371.391 19.4487 li
366.27 17.3277 mo
370.512 21.5698 li
366.27 21.5698 mo
370.512 17.3277 li
@
369.665 16.4487 mo
369.665 22.4487 li
366.665 19.4487 mo
372.665 19.4487 li
367.544 17.3277 mo
371.786 21.5698 li
367.544 21.5698 mo
371.786 17.3277 li
@
370.857 16.2158 mo
370.857 22.2158 li
367.857 19.2158 mo
373.857 19.2158 li
368.736 17.0948 mo
372.978 21.3367 li
368.736 21.3367 mo
372.978 17.0948 li
@
372.014 16.2158 mo
372.014 22.2158 li
369.014 19.2158 mo
375.014 19.2158 li
369.893 17.0948 mo
374.134 21.3367 li
369.893 21.3367 mo
374.134 17.0948 li
@
373.117 16.2158 mo
373.117 22.2158 li
370.117 19.2158 mo
376.117 19.2158 li
370.996 17.0948 mo
375.238 21.3367 li
370.996 21.3367 mo
375.238 17.0948 li
@
374.154 16.2158 mo
374.154 22.2158 li
371.154 19.2158 mo
377.154 19.2158 li
372.033 17.0948 mo
376.275 21.3367 li
372.033 21.3367 mo
376.275 17.0948 li
@
375.146 16.2158 mo
375.146 22.2158 li
372.146 19.2158 mo
378.146 19.2158 li
373.025 17.0948 mo
377.268 21.3367 li
373.025 21.3367 mo
377.268 17.0948 li
@
376.082 16.0987 mo
376.082 22.0987 li
373.082 19.0987 mo
379.082 19.0987 li
373.961 16.9777 mo
378.202 21.2198 li
373.961 21.2198 mo
378.202 16.9777 li
@
376.969 16.0987 mo
376.969 22.0987 li
373.969 19.0987 mo
379.969 19.0987 li
374.848 16.9777 mo
379.09 21.2198 li
374.848 21.2198 mo
379.09 16.9777 li
@
377.82 16.0987 mo
377.82 22.0987 li
374.82 19.0987 mo
380.82 19.0987 li
375.698 16.9777 mo
379.941 21.2198 li
375.698 21.2198 mo
379.941 16.9777 li
@
378.629 16.0987 mo
378.629 22.0987 li
375.629 19.0987 mo
381.629 19.0987 li
376.508 16.9777 mo
380.75 21.2198 li
376.508 21.2198 mo
380.75 16.9777 li
@
379.4 15.8658 mo
379.4 21.8658 li
376.4 18.8658 mo
382.4 18.8658 li
377.279 16.7448 mo
381.521 20.9868 li
377.279 20.9868 mo
381.521 16.7448 li
@
380.131 15.8658 mo
380.131 21.8658 li
377.131 18.8658 mo
383.131 18.8658 li
378.01 16.7448 mo
382.252 20.9868 li
378.01 20.9868 mo
382.252 16.7448 li
@
380.827 15.8658 mo
380.827 21.8658 li
377.827 18.8658 mo
383.827 18.8658 li
378.705 16.7448 mo
382.948 20.9868 li
378.705 20.9868 mo
382.948 16.7448 li
@
381.487 15.8658 mo
381.487 21.8658 li
378.487 18.8658 mo
384.487 18.8658 li
379.366 16.7448 mo
383.608 20.9868 li
379.366 20.9868 mo
383.608 16.7448 li
@
382.109 15.8658 mo
382.109 21.8658 li
379.109 18.8658 mo
385.109 18.8658 li
379.988 16.7448 mo
384.23 20.9868 li
379.988 20.9868 mo
384.23 16.7448 li
@
382.696 15.7487 mo
382.696 21.7487 li
379.696 18.7487 mo
385.696 18.7487 li
380.575 16.6277 mo
384.817 20.8698 li
380.575 20.8698 mo
384.817 16.6277 li
@
383.25 15.7487 mo
383.25 21.7487 li
380.25 18.7487 mo
386.25 18.7487 li
381.129 16.6277 mo
385.371 20.8698 li
381.129 20.8698 mo
385.371 16.6277 li
@
383.782 15.6328 mo
383.782 21.6328 li
380.782 18.6328 mo
386.782 18.6328 li
381.661 16.5117 mo
385.903 20.7537 li
381.661 20.7537 mo
385.903 16.5117 li
@
384.278 15.6328 mo
384.278 21.6328 li
381.278 18.6328 mo
387.278 18.6328 li
382.157 16.5117 mo
386.399 20.7537 li
382.157 20.7537 mo
386.399 16.5117 li
@
384.753 15.5157 mo
384.753 21.5157 li
381.753 18.5157 mo
387.753 18.5157 li
382.632 16.3947 mo
386.874 20.6367 li
382.632 20.6367 mo
386.874 16.3947 li
@
385.2 15.5157 mo
385.2 21.5157 li
382.2 18.5157 mo
388.2 18.5157 li
383.079 16.3947 mo
387.32 20.6367 li
383.079 20.6367 mo
387.32 16.3947 li
@
385.62 15.5157 mo
385.62 21.5157 li
382.62 18.5157 mo
388.62 18.5157 li
383.499 16.3947 mo
387.741 20.6367 li
383.499 20.6367 mo
387.741 16.3947 li
@
386.009 15.5157 mo
386.009 21.5157 li
383.009 18.5157 mo
389.009 18.5157 li
383.888 16.3947 mo
388.13 20.6367 li
383.888 20.6367 mo
388.13 16.3947 li
@
386.38 15.5157 mo
386.38 21.5157 li
383.38 18.5157 mo
389.38 18.5157 li
384.259 16.3947 mo
388.501 20.6367 li
384.259 20.6367 mo
388.501 16.3947 li
@
386.721 15.3997 mo
386.721 21.3997 li
383.721 18.3997 mo
389.721 18.3997 li
384.6 16.2787 mo
388.843 20.5197 li
384.6 20.5197 mo
388.843 16.2787 li
@
387.045 15.3997 mo
387.045 21.3997 li
384.045 18.3997 mo
390.045 18.3997 li
384.924 16.2787 mo
389.166 20.5197 li
384.924 20.5197 mo
389.166 16.2787 li
@
387.348 15.3997 mo
387.348 21.3997 li
384.348 18.3997 mo
390.348 18.3997 li
385.227 16.2787 mo
389.469 20.5197 li
385.227 20.5197 mo
389.469 16.2787 li
@
387.635 15.3997 mo
387.635 21.3997 li
384.635 18.3997 mo
390.635 18.3997 li
385.514 16.2787 mo
389.756 20.5197 li
385.514 20.5197 mo
389.756 16.2787 li
@
387.905 15.3997 mo
387.905 21.3997 li
384.905 18.3997 mo
390.905 18.3997 li
385.784 16.2787 mo
390.026 20.5197 li
385.784 20.5197 mo
390.026 16.2787 li
@
388.157 15.3997 mo
388.157 21.3997 li
385.157 18.3997 mo
391.157 18.3997 li
386.036 16.2787 mo
390.278 20.5197 li
386.036 20.5197 mo
390.278 16.2787 li
@
388.389 15.3997 mo
388.389 21.3997 li
385.389 18.3997 mo
391.389 18.3997 li
386.268 16.2787 mo
390.511 20.5197 li
386.268 20.5197 mo
390.511 16.2787 li
@
388.614 15.3997 mo
388.614 21.3997 li
385.614 18.3997 mo
391.614 18.3997 li
386.493 16.2787 mo
390.735 20.5197 li
386.493 20.5197 mo
390.735 16.2787 li
@
388.819 15.3997 mo
388.819 21.3997 li
385.819 18.3997 mo
391.819 18.3997 li
386.698 16.2787 mo
390.94 20.5197 li
386.698 20.5197 mo
390.94 16.2787 li
@
389.009 15.3997 mo
389.009 21.3997 li
386.009 18.3997 mo
392.009 18.3997 li
386.888 16.2787 mo
391.13 20.5197 li
386.888 20.5197 mo
391.13 16.2787 li
@
389.189 15.3997 mo
389.189 21.3997 li
386.189 18.3997 mo
392.189 18.3997 li
387.068 16.2787 mo
391.31 20.5197 li
387.068 20.5197 mo
391.31 16.2787 li
@
389.355 15.2827 mo
389.355 21.2827 li
386.355 18.2827 mo
392.355 18.2827 li
387.234 16.1617 mo
391.477 20.4037 li
387.234 20.4037 mo
391.477 16.1617 li
@
389.513 15.2827 mo
389.513 21.2827 li
386.513 18.2827 mo
392.513 18.2827 li
387.392 16.1617 mo
391.634 20.4037 li
387.392 20.4037 mo
391.634 16.1617 li
@
389.657 15.2827 mo
389.657 21.2827 li
386.657 18.2827 mo
392.657 18.2827 li
387.536 16.1617 mo
391.778 20.4037 li
387.536 20.4037 mo
391.778 16.1617 li
@
389.791 15.2827 mo
389.791 21.2827 li
386.791 18.2827 mo
392.791 18.2827 li
387.67 16.1617 mo
391.912 20.4037 li
387.67 20.4037 mo
391.912 16.1617 li
@
389.915 15.2827 mo
389.915 21.2827 li
386.915 18.2827 mo
392.915 18.2827 li
387.795 16.1617 mo
392.036 20.4037 li
387.795 20.4037 mo
392.036 16.1617 li
@
390.03 15.2827 mo
390.03 21.2827 li
387.03 18.2827 mo
393.03 18.2827 li
387.909 16.1617 mo
392.151 20.4037 li
387.909 20.4037 mo
392.151 16.1617 li
@
390.136 15.2827 mo
390.136 21.2827 li
387.136 18.2827 mo
393.136 18.2827 li
388.014 16.1617 mo
392.256 20.4037 li
388.014 20.4037 mo
392.256 16.1617 li
@
390.233 15.2827 mo
390.233 21.2827 li
387.233 18.2827 mo
393.233 18.2827 li
388.112 16.1617 mo
392.354 20.4037 li
388.112 20.4037 mo
392.354 16.1617 li
@
390.322 15.2827 mo
390.322 21.2827 li
387.322 18.2827 mo
393.322 18.2827 li
388.201 16.1617 mo
392.443 20.4037 li
388.201 20.4037 mo
392.443 16.1617 li
@
390.405 15.2827 mo
390.405 21.2827 li
387.405 18.2827 mo
393.405 18.2827 li
388.284 16.1617 mo
392.526 20.4037 li
388.284 20.4037 mo
392.526 16.1617 li
@
390.484 15.2827 mo
390.484 21.2827 li
387.484 18.2827 mo
393.484 18.2827 li
388.363 16.1617 mo
392.605 20.4037 li
388.363 20.4037 mo
392.605 16.1617 li
@
390.555 15.2827 mo
390.555 21.2827 li
387.555 18.2827 mo
393.555 18.2827 li
388.434 16.1617 mo
392.675 20.4037 li
388.434 20.4037 mo
392.675 16.1617 li
@
390.617 15.2827 mo
390.617 21.2827 li
387.617 18.2827 mo
393.617 18.2827 li
388.496 16.1617 mo
392.738 20.4037 li
388.496 20.4037 mo
392.738 16.1617 li
@
390.677 15.2827 mo
390.677 21.2827 li
387.677 18.2827 mo
393.677 18.2827 li
388.555 16.1617 mo
392.798 20.4037 li
388.555 20.4037 mo
392.798 16.1617 li
@
390.733 15.2827 mo
390.733 21.2827 li
387.733 18.2827 mo
393.733 18.2827 li
388.613 16.1617 mo
392.854 20.4037 li
388.613 20.4037 mo
392.854 16.1617 li
@
390.786 15.2827 mo
390.786 21.2827 li
387.786 18.2827 mo
393.786 18.2827 li
388.665 16.1617 mo
392.907 20.4037 li
388.665 20.4037 mo
392.907 16.1617 li
@
390.835 15.2827 mo
390.835 21.2827 li
387.835 18.2827 mo
393.835 18.2827 li
388.714 16.1617 mo
392.956 20.4037 li
388.714 20.4037 mo
392.956 16.1617 li
@
390.88 15.2827 mo
390.88 21.2827 li
387.88 18.2827 mo
393.88 18.2827 li
388.759 16.1617 mo
393 20.4037 li
388.759 20.4037 mo
393 16.1617 li
@
390.92 15.2827 mo
390.92 21.2827 li
387.92 18.2827 mo
393.92 18.2827 li
388.799 16.1617 mo
393.041 20.4037 li
388.799 20.4037 mo
393.041 16.1617 li
@
390.957 15.2827 mo
390.957 21.2827 li
387.957 18.2827 mo
393.957 18.2827 li
388.836 16.1617 mo
393.078 20.4037 li
388.836 20.4037 mo
393.078 16.1617 li
@
390.99 15.2827 mo
390.99 21.2827 li
387.99 18.2827 mo
393.99 18.2827 li
388.869 16.1617 mo
393.111 20.4037 li
388.869 20.4037 mo
393.111 16.1617 li
@
391.022 15.2827 mo
391.022 21.2827 li
388.022 18.2827 mo
394.022 18.2827 li
388.901 16.1617 mo
393.143 20.4037 li
388.901 20.4037 mo
393.143 16.1617 li
@
391.052 15.2827 mo
391.052 21.2827 li
388.052 18.2827 mo
394.052 18.2827 li
388.931 16.1617 mo
393.173 20.4037 li
388.931 20.4037 mo
393.173 16.1617 li
@
391.08 15.2827 mo
391.08 21.2827 li
388.08 18.2827 mo
394.08 18.2827 li
388.959 16.1617 mo
393.2 20.4037 li
388.959 20.4037 mo
393.2 16.1617 li
@
391.104 15.2827 mo
391.104 21.2827 li
388.104 18.2827 mo
394.104 18.2827 li
388.983 16.1617 mo
393.225 20.4037 li
388.983 20.4037 mo
393.225 16.1617 li
@
391.127 15.2827 mo
391.127 21.2827 li
388.127 18.2827 mo
394.127 18.2827 li
389.006 16.1617 mo
393.248 20.4037 li
389.006 20.4037 mo
393.248 16.1617 li
@
391.149 15.2827 mo
391.149 21.2827 li
388.149 18.2827 mo
394.149 18.2827 li
389.028 16.1617 mo
393.27 20.4037 li
389.028 20.4037 mo
393.27 16.1617 li
@
391.169 15.2827 mo
391.169 21.2827 li
388.169 18.2827 mo
394.169 18.2827 li
389.048 16.1617 mo
393.29 20.4037 li
389.048 20.4037 mo
393.29 16.1617 li
@
391.187 15.2827 mo
391.187 21.2827 li
388.187 18.2827 mo
394.187 18.2827 li
389.066 16.1617 mo
393.308 20.4037 li
389.066 20.4037 mo
393.308 16.1617 li
@
391.204 15.2827 mo
391.204 21.2827 li
388.204 18.2827 mo
394.204 18.2827 li
389.083 16.1617 mo
393.325 20.4037 li
389.083 20.4037 mo
393.325 16.1617 li
@
391.22 15.2827 mo
391.22 21.2827 li
388.22 18.2827 mo
394.22 18.2827 li
389.098 16.1617 mo
393.341 20.4037 li
389.098 20.4037 mo
393.341 16.1617 li
@
391.233 15.2827 mo
391.233 21.2827 li
388.233 18.2827 mo
394.233 18.2827 li
389.113 16.1617 mo
393.354 20.4037 li
389.113 20.4037 mo
393.354 16.1617 li
@
391.246 15.2827 mo
391.246 21.2827 li
388.246 18.2827 mo
394.246 18.2827 li
389.125 16.1617 mo
393.367 20.4037 li
389.125 20.4037 mo
393.367 16.1617 li
@
391.258 15.2827 mo
391.258 21.2827 li
388.258 18.2827 mo
394.258 18.2827 li
389.137 16.1617 mo
393.379 20.4037 li
389.137 20.4037 mo
393.379 16.1617 li
@
391.269 15.2827 mo
391.269 21.2827 li
388.269 18.2827 mo
394.269 18.2827 li
389.148 16.1617 mo
393.389 20.4037 li
389.148 20.4037 mo
393.389 16.1617 li
@
391.279 15.2827 mo
391.279 21.2827 li
388.279 18.2827 mo
394.279 18.2827 li
389.158 16.1617 mo
393.4 20.4037 li
389.158 20.4037 mo
393.4 16.1617 li
@
391.289 15.2827 mo
391.289 21.2827 li
388.289 18.2827 mo
394.289 18.2827 li
389.168 16.1617 mo
393.409 20.4037 li
389.168 20.4037 mo
393.409 16.1617 li
@
391.298 15.2827 mo
391.298 21.2827 li
388.298 18.2827 mo
394.298 18.2827 li
389.177 16.1617 mo
393.419 20.4037 li
389.177 20.4037 mo
393.419 16.1617 li
@
391.305 15.2827 mo
391.305 21.2827 li
388.305 18.2827 mo
394.305 18.2827 li
389.185 16.1617 mo
393.427 20.4037 li
389.185 20.4037 mo
393.427 16.1617 li
@
391.313 15.2827 mo
391.313 21.2827 li
388.313 18.2827 mo
394.313 18.2827 li
389.192 16.1617 mo
393.434 20.4037 li
389.192 20.4037 mo
393.434 16.1617 li
@
391.32 15.2827 mo
391.32 21.2827 li
388.32 18.2827 mo
394.32 18.2827 li
389.198 16.1617 mo
393.441 20.4037 li
389.198 20.4037 mo
393.441 16.1617 li
@
391.326 15.2827 mo
391.326 21.2827 li
388.326 18.2827 mo
394.326 18.2827 li
389.205 16.1617 mo
393.447 20.4037 li
389.205 20.4037 mo
393.447 16.1617 li
@
391.332 15.2827 mo
391.332 21.2827 li
388.332 18.2827 mo
394.332 18.2827 li
389.211 16.1617 mo
393.453 20.4037 li
389.211 20.4037 mo
393.453 16.1617 li
@
391.337 15.2827 mo
391.337 21.2827 li
388.337 18.2827 mo
394.337 18.2827 li
389.216 16.1617 mo
393.458 20.4037 li
389.216 20.4037 mo
393.458 16.1617 li
@
391.342 15.2827 mo
391.342 21.2827 li
388.342 18.2827 mo
394.342 18.2827 li
389.221 16.1617 mo
393.463 20.4037 li
389.221 20.4037 mo
393.463 16.1617 li
@
391.346 15.2827 mo
391.346 21.2827 li
388.346 18.2827 mo
394.346 18.2827 li
389.225 16.1617 mo
393.467 20.4037 li
389.225 20.4037 mo
393.467 16.1617 li
@
391.351 15.2827 mo
391.351 21.2827 li
388.351 18.2827 mo
394.351 18.2827 li
389.23 16.1617 mo
393.472 20.4037 li
389.23 20.4037 mo
393.472 16.1617 li
@
391.355 15.2827 mo
391.355 21.2827 li
388.355 18.2827 mo
394.355 18.2827 li
389.234 16.1617 mo
393.477 20.4037 li
389.234 20.4037 mo
393.477 16.1617 li
@
391.359 15.2827 mo
391.359 21.2827 li
388.359 18.2827 mo
394.359 18.2827 li
389.238 16.1617 mo
393.48 20.4037 li
389.238 20.4037 mo
393.48 16.1617 li
@
391.363 15.2827 mo
391.363 21.2827 li
388.363 18.2827 mo
394.363 18.2827 li
389.242 16.1617 mo
393.484 20.4037 li
389.242 20.4037 mo
393.484 16.1617 li
@
391.366 15.2827 mo
391.366 21.2827 li
388.366 18.2827 mo
394.366 18.2827 li
389.245 16.1617 mo
393.487 20.4037 li
389.245 20.4037 mo
393.487 16.1617 li
@
391.369 15.2827 mo
391.369 21.2827 li
388.369 18.2827 mo
394.369 18.2827 li
389.248 16.1617 mo
393.489 20.4037 li
389.248 20.4037 mo
393.489 16.1617 li
@
391.371 15.2827 mo
391.371 21.2827 li
388.371 18.2827 mo
394.371 18.2827 li
389.25 16.1617 mo
393.492 20.4037 li
389.25 20.4037 mo
393.492 16.1617 li
@
391.373 15.2827 mo
391.373 21.2827 li
388.373 18.2827 mo
394.373 18.2827 li
389.252 16.1617 mo
393.495 20.4037 li
389.252 20.4037 mo
393.495 16.1617 li
@
391.376 15.2827 mo
391.376 21.2827 li
388.376 18.2827 mo
394.376 18.2827 li
389.255 16.1617 mo
393.497 20.4037 li
389.255 20.4037 mo
393.497 16.1617 li
@
391.378 15.2827 mo
391.378 21.2827 li
388.378 18.2827 mo
394.378 18.2827 li
389.257 16.1617 mo
393.499 20.4037 li
389.257 20.4037 mo
393.499 16.1617 li
@
391.38 15.2827 mo
391.38 21.2827 li
388.38 18.2827 mo
394.38 18.2827 li
389.259 16.1617 mo
393.501 20.4037 li
389.259 20.4037 mo
393.501 16.1617 li
@
391.382 15.2827 mo
391.382 21.2827 li
388.382 18.2827 mo
394.382 18.2827 li
389.261 16.1617 mo
393.504 20.4037 li
389.261 20.4037 mo
393.504 16.1617 li
@
391.384 15.2827 mo
391.384 21.2827 li
388.384 18.2827 mo
394.384 18.2827 li
389.263 16.1617 mo
393.505 20.4037 li
389.263 20.4037 mo
393.505 16.1617 li
@
391.386 15.2827 mo
391.386 21.2827 li
388.386 18.2827 mo
394.386 18.2827 li
389.265 16.1617 mo
393.507 20.4037 li
389.265 20.4037 mo
393.507 16.1617 li
@
391.387 15.2827 mo
391.387 21.2827 li
388.387 18.2827 mo
394.387 18.2827 li
389.266 16.1617 mo
393.508 20.4037 li
389.266 20.4037 mo
393.508 16.1617 li
@
391.388 15.2827 mo
391.388 21.2827 li
388.388 18.2827 mo
394.388 18.2827 li
389.267 16.1617 mo
393.509 20.4037 li
389.267 20.4037 mo
393.509 16.1617 li
@
391.39 15.2827 mo
391.39 21.2827 li
388.39 18.2827 mo
394.39 18.2827 li
389.269 16.1617 mo
393.511 20.4037 li
389.269 20.4037 mo
393.511 16.1617 li
@
391.391 15.2827 mo
391.391 21.2827 li
388.391 18.2827 mo
394.391 18.2827 li
389.27 16.1617 mo
393.512 20.4037 li
389.27 20.4037 mo
393.512 16.1617 li
@
391.391 15.2827 mo
391.391 21.2827 li
388.391 18.2827 mo
394.391 18.2827 li
389.27 16.1617 mo
393.513 20.4037 li
389.27 20.4037 mo
393.513 16.1617 li
@
391.392 15.2827 mo
391.392 21.2827 li
388.392 18.2827 mo
394.392 18.2827 li
389.271 16.1617 mo
393.513 20.4037 li
389.271 20.4037 mo
393.513 16.1617 li
@
391.393 15.2827 mo
391.393 21.2827 li
388.393 18.2827 mo
394.393 18.2827 li
389.272 16.1617 mo
393.514 20.4037 li
389.272 20.4037 mo
393.514 16.1617 li
@
391.394 15.2827 mo
391.394 21.2827 li
388.394 18.2827 mo
394.394 18.2827 li
389.273 16.1617 mo
393.515 20.4037 li
389.273 20.4037 mo
393.515 16.1617 li
@
391.395 15.2827 mo
391.395 21.2827 li
388.395 18.2827 mo
394.395 18.2827 li
389.273 16.1617 mo
393.516 20.4037 li
389.273 20.4037 mo
393.516 16.1617 li
@
391.395 15.2827 mo
391.395 21.2827 li
388.395 18.2827 mo
394.395 18.2827 li
389.274 16.1617 mo
393.516 20.4037 li
389.274 20.4037 mo
393.516 16.1617 li
@
391.396 15.2827 mo
391.396 21.2827 li
388.396 18.2827 mo
394.396 18.2827 li
389.275 16.1617 mo
393.516 20.4037 li
389.275 20.4037 mo
393.516 16.1617 li
@
391.396 15.2827 mo
391.396 21.2827 li
388.396 18.2827 mo
394.396 18.2827 li
389.275 16.1617 mo
393.517 20.4037 li
389.275 20.4037 mo
393.517 16.1617 li
@
391.397 15.2827 mo
391.397 21.2827 li
388.397 18.2827 mo
394.397 18.2827 li
389.276 16.1617 mo
393.518 20.4037 li
389.276 20.4037 mo
393.518 16.1617 li
@
391.397 15.2827 mo
391.397 21.2827 li
388.397 18.2827 mo
394.397 18.2827 li
389.276 16.1617 mo
393.518 20.4037 li
389.276 20.4037 mo
393.518 16.1617 li
@
391.398 15.2827 mo
391.398 21.2827 li
388.398 18.2827 mo
394.398 18.2827 li
389.277 16.1617 mo
393.519 20.4037 li
389.277 20.4037 mo
393.519 16.1617 li
@
391.398 15.2827 mo
391.398 21.2827 li
388.398 18.2827 mo
394.398 18.2827 li
389.277 16.1617 mo
393.519 20.4037 li
389.277 20.4037 mo
393.519 16.1617 li
@
391.398 15.2827 mo
391.398 21.2827 li
388.398 18.2827 mo
394.398 18.2827 li
389.277 16.1617 mo
393.519 20.4037 li
389.277 20.4037 mo
393.519 16.1617 li
@
391.398 15.2827 mo
391.398 21.2827 li
388.398 18.2827 mo
394.398 18.2827 li
389.277 16.1617 mo
393.52 20.4037 li
389.277 20.4037 mo
393.52 16.1617 li
@
391.399 15.2827 mo
391.399 21.2827 li
388.399 18.2827 mo
394.399 18.2827 li
389.278 16.1617 mo
393.52 20.4037 li
389.278 20.4037 mo
393.52 16.1617 li
@
391.399 15.2827 mo
391.399 21.2827 li
388.399 18.2827 mo
394.399 18.2827 li
389.278 16.1617 mo
393.52 20.4037 li
389.278 20.4037 mo
393.52 16.1617 li
@
391.399 15.2827 mo
391.399 21.2827 li
388.399 18.2827 mo
394.399 18.2827 li
389.278 16.1617 mo
393.52 20.4037 li
389.278 20.4037 mo
393.52 16.1617 li
@
391.399 15.2827 mo
391.399 21.2827 li
388.399 18.2827 mo
394.399 18.2827 li
389.278 16.1617 mo
393.52 20.4037 li
389.278 20.4037 mo
393.52 16.1617 li
@
391.399 15.2827 mo
391.399 21.2827 li
388.399 18.2827 mo
394.399 18.2827 li
389.278 16.1617 mo
393.52 20.4037 li
389.278 20.4037 mo
393.52 16.1617 li
@
391.399 15.2827 mo
391.399 21.2827 li
388.399 18.2827 mo
394.399 18.2827 li
389.279 16.1617 mo
393.52 20.4037 li
389.279 20.4037 mo
393.52 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
391.4 15.2827 mo
391.4 21.2827 li
388.4 18.2827 mo
394.4 18.2827 li
389.279 16.1617 mo
393.521 20.4037 li
389.279 20.4037 mo
393.521 16.1617 li
@
56.1497 242.533 mo
383.15 242.533 li
383.15 154.783 li
56.1497 154.783 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
CPYTWR+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/K <1C60D8A8C9B64EDF88209F74DE48C33B4B0B93D0D9C0FD0B4C3ED394623E
3A80B45D329FC06BB55248F78872AA55981B9FC8E5ADA631A9747A6CEB10FCCD
65D75EFC> |-
/N <1C60D8A8C9B6079F1E49523970A7CE614BC1CB2AC135B49A6B33564AFCCA
E69F17C685A8629597666C835EDDD27239AEF884B91696774A2A> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPYTWR+Helvetica /Encoding get
dup 37 /percent put
dup 58 /colon put
dup 59 /semicolon put
dup 69 /E put
dup 75 /K put
dup 78 /N put
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/CPYTWR+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 3{/.notdef}rp /R 
8{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c 
/.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/.notdef /p 2{/.notdef}rp /s /t /u 138{/.notdef}rp]
CPYTWR+Helvetica nf
CPYTWR+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
91.3997 172.732 mo
(FKNet [8]; EER: 7.7%)
[10.387 11.3393 12.2741 9.45212 4.72604 4.72606 4.72606 9.4521 4.72606 4.72604 4.72604 11.3393 
11.3393 12.2741 4.72607 4.72604 9.4521 4.72606 9.45209 0 ]xsh
1 lj
59.1497 166.732 mo
89.1497 166.732 li
@
0 lj
74.1497 163.732 mo
74.1497 169.732 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
CPYTWR+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B
61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1
E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36
DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B
7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-
/V <1C60D8A8C9B64EDF88209F74DE48C31924050FF0040AA5A034E0BA481252
B18875F38C0C76ED1A659C37AD61> |-
/f <1C60D8A8C9B854D08882A1CDE4CC8CF82C721397EF3C1B7F275F9E0F93B7
3057EE87F13D1A76347F24278F0AAB6C40024DD0CC30E14D035B17B8421125C0
8D6E5ECF0FD989FD11DB950870FC66> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPYTWR+Helvetica /Encoding get
dup 83 /S put
dup 86 /V put
dup 102 /f put
pop
%ADOEndSubsetFont
/CPYTWR+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 3{/.notdef}rp /R 
/S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /.notdef /n /.notdef /p 2{/.notdef}rp /s 
/t /u 138{/.notdef}rp]
CPYTWR+Helvetica nf
CPYTWR+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
91.3997 194.016 mo
(EfficientNetV2-S [17]; EER: 1.82%)
[11.3393 4.72605 4.72605 3.77405 8.50011 3.77405 9.4521 9.4521 4.72606 12.2741 9.4521 4.72606 
11.3393 9.4521 5.66095 11.3393 4.72604 4.72606 9.4521 9.45209 4.72607 4.72604 4.72604 11.3393 
11.3392 12.2742 4.72604 4.72604 9.45212 4.72604 9.45212 9.45212 0 ]xsh
1 lj
59.1497 188.016 mo
89.1497 188.016 li
.265019 .809232 0 0 cmyk
@
0 lj
71.8997 190.266 mo
76.3997 190.266 li
76.3997 185.766 li
71.8997 185.766 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
CPYTWR+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E2
2FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D216
1CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361
A4431D76AF6F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPYTWR+Helvetica /Encoding get
dup 79 /O put
dup 114 /r put
pop
%ADOEndSubsetFont
/CPYTWR+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N /O 2{/.notdef}rp 
/R /S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 
3{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n /.notdef /p /.notdef 
/r /s /t /u 138{/.notdef}rp]
CPYTWR+Helvetica nf
CPYTWR+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
91.3997 215.3 mo
(Ours; E)sh
149.03 215.3 mo
(ER: 1.33%)
[11.3392 12.2742 4.72604 4.72606 9.4521 4.72606 9.4521 9.45212 0 ]xsh
1 lj
59.1497 209.3 mo
89.1497 209.3 li
0 .990631 1 .000396735 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
CPYTWR+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B6079FE1CE316282F0E84E7EAE56817E527B1A2FBA7D6E6E3E
84761CC128BB54A99A2A93B5D172E1531D29A45A5EC52E28A860DB78AEF5044D
D841ADA187A0971E5C6028FECC99F95A89CDEF60FF9739318C6CDCFD940AFB97
77EC1EB041B6AC82C7B827BCFC6CB4C10A94B6280806B13F83> |-
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/v <1C60D8A8C9B7A73DC54C6E6FD58E3FF02EC0039EA78A08B0B838392D2447
0C9B580A1092E3692A4C20563FB5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CPYTWR+Helvetica /Encoding get
dup 67 /C put
dup 68 /D put
dup 111 /o put
dup 118 /v put
pop
%ADOEndSubsetFont
/CPYTWR+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/D /E /F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 
/O 2{/.notdef}rp /R /S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e 
/f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /s /t /u /v 137{/.notdef}rp]
CPYTWR+Helvetica nf
CPYTWR+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
91.3997 236.584 mo
(DefConvNet [45]; 3.88%)
[12.2741 9.45211 4.72604 12.2742 9.4521 9.45212 8.50009 12.2741 9.45212 4.72604 4.72606 4.72606 
9.4521 9.4521 4.72606 4.72606 4.72604 9.45212 4.72604 9.45212 9.45212 0 ]xsh
59.1497 230.584 mo
89.1497 230.584 li
.895628 .7673 0 0 cmyk
@
0 lj
74.1497 227.584 mo
74.1497 233.584 li
71.1497 230.584 mo
77.1497 230.584 li
72.0286 228.463 mo
76.2708 232.705 li
72.0286 232.705 mo
76.2708 228.463 li
@
56.1497 242.533 mo
383.15 242.533 li
383.15 154.783 li
56.1497 154.783 li
cp
1 /0 /CSD get_res sepcs
.851074 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/CPYTWS+Helvetica-Bold*1 uf
/CPYTWS+Helvetica-Bold uf
/JAAAAA+Helvetica-Bold uf
/CPYTWR+Helvetica*1 uf
/CPYTWR+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
