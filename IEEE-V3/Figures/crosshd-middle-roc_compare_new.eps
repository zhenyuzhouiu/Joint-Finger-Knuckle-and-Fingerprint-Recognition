%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: crosshd-middle-roc_compare_new.eps-41019.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/16/2022, 10:54:30 AM
%%BoundingBox: 0 0 386 310
%%HiResBoundingBox: 0 0 385.8385 309.9899
%%CropBox: 0 0 385.8385 309.9899
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1061 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-16T10:54:02+08:00"
   xmp:CreateDate="2022-08-16T10:54:02+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.9.0.1467703 \(R2020b\). Operating System: Linux)"
   xmpMM:DocumentID="uuid:2ef97f68-1f6a-11ed-0000-8ccfc42c9022"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/zhenyuzhou/Desktop/finger-knuckle/deep-learning/codekevin/fknet/test/version-2/cross-hd-index-fkv3\(yolov5\)-105-221/crosshd-middle-roc_compare_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -309.99 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 309.99 li
385.838 309.99 li
385.838 0 li
cp
clp
-13.6622 310.347 mo
413.838 310.347 li
413.838 -5.40332 li
-13.6622 -5.40332 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
-13.6622 310.347 mo
413.838 310.347 li
413.838 -5.40332 li
-13.6622 -5.40332 li
cp
f
41.8378 269.847 mo
373.338 269.847 li
373.338 18.5967 li
41.8378 18.5967 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
46.3542 269.847 mo
46.3542 18.5967 li
1 /0 /CSD get_res sepcs
.224609 sep
@
55.3874 269.847 mo
55.3874 18.5967 li
@
62.3929 269.847 mo
62.3929 18.5967 li
@
68.1179 269.847 mo
68.1179 18.5967 li
@
72.9577 269.847 mo
72.9577 18.5967 li
@
77.1499 269.847 mo
77.1499 18.5967 li
@
80.8483 269.847 mo
80.8483 18.5967 li
@
84.1566 269.847 mo
84.1566 18.5967 li
@
105.92 269.847 mo
105.92 18.5967 li
@
118.65 269.847 mo
118.65 18.5967 li
@
127.683 269.847 mo
127.683 18.5967 li
@
134.689 269.847 mo
134.689 18.5967 li
@
140.413 269.847 mo
140.413 18.5967 li
@
145.253 269.847 mo
145.253 18.5967 li
@
149.446 269.847 mo
149.446 18.5967 li
@
153.144 269.847 mo
153.144 18.5967 li
@
156.452 269.847 mo
156.452 18.5967 li
@
178.215 269.847 mo
178.215 18.5967 li
@
190.945 269.847 mo
190.945 18.5967 li
@
199.978 269.847 mo
199.978 18.5967 li
@
206.984 269.847 mo
206.984 18.5967 li
@
212.709 269.847 mo
212.709 18.5967 li
@
217.549 269.847 mo
217.549 18.5967 li
@
221.741 269.847 mo
221.741 18.5967 li
@
225.44 269.847 mo
225.44 18.5967 li
@
250.511 269.847 mo
250.511 18.5967 li
@
263.241 269.847 mo
263.241 18.5967 li
@
272.273 269.847 mo
272.273 18.5967 li
@
279.28 269.847 mo
279.28 18.5967 li
@
285.004 269.847 mo
285.004 18.5967 li
@
289.844 269.847 mo
289.844 18.5967 li
@
294.037 269.847 mo
294.037 18.5967 li
@
297.734 269.847 mo
297.734 18.5967 li
@
301.043 269.847 mo
301.043 18.5967 li
@
322.806 269.847 mo
322.806 18.5967 li
@
335.536 269.847 mo
335.536 18.5967 li
@
344.569 269.847 mo
344.569 18.5967 li
@
351.575 269.847 mo
351.575 18.5967 li
@
357.299 269.847 mo
357.299 18.5967 li
@
362.139 269.847 mo
362.139 18.5967 li
@
366.331 269.847 mo
366.331 18.5967 li
@
370.03 269.847 mo
370.03 18.5967 li
@
1 lj
[] 0 dsh
84.1566 269.847 mo
84.1566 18.5967 li
1 /0 /CSD get_res sepcs
.126953 sep
@
228.747 269.847 mo
228.747 18.5967 li
@
373.338 269.847 mo
373.338 18.5967 li
@
373.338 269.847 mo
41.8378 269.847 li
@
373.338 219.597 mo
41.8378 219.597 li
@
373.338 169.347 mo
41.8378 169.347 li
@
373.338 119.097 mo
41.8378 119.097 li
@
373.338 68.8467 mo
41.8378 68.8467 li
@
373.338 18.5967 mo
41.8378 18.5967 li
@
2 lc
41.8378 269.847 mo
373.338 269.847 li
1 /0 /CSD get_res sepcs
.851074 sep
@
41.8378 18.5967 mo
373.338 18.5967 li
@
84.1566 269.847 mo
84.1566 266.532 li
@
228.747 269.847 mo
228.747 266.532 li
@
373.338 269.847 mo
373.338 266.532 li
@
84.1566 18.5967 mo
84.1566 21.9117 li
@
228.747 18.5967 mo
228.747 21.9117 li
@
373.338 18.5967 mo
373.338 21.9117 li
@
46.3542 269.847 mo
46.3542 268.189 li
@
55.3874 269.847 mo
55.3874 268.189 li
@
62.3929 269.847 mo
62.3929 268.189 li
@
68.1179 269.847 mo
68.1179 268.189 li
@
72.9577 269.847 mo
72.9577 268.189 li
@
77.1499 269.847 mo
77.1499 268.189 li
@
80.8483 269.847 mo
80.8483 268.189 li
@
84.1566 269.847 mo
84.1566 268.189 li
@
84.1566 269.847 mo
84.1566 268.189 li
@
105.92 269.847 mo
105.92 268.189 li
@
118.65 269.847 mo
118.65 268.189 li
@
127.683 269.847 mo
127.683 268.189 li
@
134.689 269.847 mo
134.689 268.189 li
@
140.413 269.847 mo
140.413 268.189 li
@
145.253 269.847 mo
145.253 268.189 li
@
149.446 269.847 mo
149.446 268.189 li
@
153.144 269.847 mo
153.144 268.189 li
@
156.452 269.847 mo
156.452 268.189 li
@
178.215 269.847 mo
178.215 268.189 li
@
190.945 269.847 mo
190.945 268.189 li
@
199.978 269.847 mo
199.978 268.189 li
@
206.984 269.847 mo
206.984 268.189 li
@
212.709 269.847 mo
212.709 268.189 li
@
217.549 269.847 mo
217.549 268.189 li
@
221.741 269.847 mo
221.741 268.189 li
@
225.44 269.847 mo
225.44 268.189 li
@
228.747 269.847 mo
228.747 268.189 li
@
250.511 269.847 mo
250.511 268.189 li
@
263.241 269.847 mo
263.241 268.189 li
@
272.273 269.847 mo
272.273 268.189 li
@
279.28 269.847 mo
279.28 268.189 li
@
285.004 269.847 mo
285.004 268.189 li
@
289.844 269.847 mo
289.844 268.189 li
@
294.037 269.847 mo
294.037 268.189 li
@
297.734 269.847 mo
297.734 268.189 li
@
301.043 269.847 mo
301.043 268.189 li
@
322.806 269.847 mo
322.806 268.189 li
@
335.536 269.847 mo
335.536 268.189 li
@
344.569 269.847 mo
344.569 268.189 li
@
351.575 269.847 mo
351.575 268.189 li
@
357.299 269.847 mo
357.299 268.189 li
@
362.139 269.847 mo
362.139 268.189 li
@
366.331 269.847 mo
366.331 268.189 li
@
370.03 269.847 mo
370.03 268.189 li
@
373.338 269.847 mo
373.338 268.189 li
@
46.3542 18.5967 mo
46.3542 20.2537 li
@
55.3874 18.5967 mo
55.3874 20.2537 li
@
62.3929 18.5967 mo
62.3929 20.2537 li
@
68.1179 18.5967 mo
68.1179 20.2537 li
@
72.9577 18.5967 mo
72.9577 20.2537 li
@
77.1499 18.5967 mo
77.1499 20.2537 li
@
80.8483 18.5967 mo
80.8483 20.2537 li
@
84.1566 18.5967 mo
84.1566 20.2537 li
@
84.1566 18.5967 mo
84.1566 20.2537 li
@
105.92 18.5967 mo
105.92 20.2537 li
@
118.65 18.5967 mo
118.65 20.2537 li
@
127.683 18.5967 mo
127.683 20.2537 li
@
134.689 18.5967 mo
134.689 20.2537 li
@
140.413 18.5967 mo
140.413 20.2537 li
@
145.253 18.5967 mo
145.253 20.2537 li
@
149.446 18.5967 mo
149.446 20.2537 li
@
153.144 18.5967 mo
153.144 20.2537 li
@
156.452 18.5967 mo
156.452 20.2537 li
@
178.215 18.5967 mo
178.215 20.2537 li
@
190.945 18.5967 mo
190.945 20.2537 li
@
199.978 18.5967 mo
199.978 20.2537 li
@
206.984 18.5967 mo
206.984 20.2537 li
@
212.709 18.5967 mo
212.709 20.2537 li
@
217.549 18.5967 mo
217.549 20.2537 li
@
221.741 18.5967 mo
221.741 20.2537 li
@
225.44 18.5967 mo
225.44 20.2537 li
@
228.747 18.5967 mo
228.747 20.2537 li
@
250.511 18.5967 mo
250.511 20.2537 li
@
263.241 18.5967 mo
263.241 20.2537 li
@
272.273 18.5967 mo
272.273 20.2537 li
@
279.28 18.5967 mo
279.28 20.2537 li
@
285.004 18.5967 mo
285.004 20.2537 li
@
289.844 18.5967 mo
289.844 20.2537 li
@
294.037 18.5967 mo
294.037 20.2537 li
@
297.734 18.5967 mo
297.734 20.2537 li
@
301.043 18.5967 mo
301.043 20.2537 li
@
322.806 18.5967 mo
322.806 20.2537 li
@
335.536 18.5967 mo
335.536 20.2537 li
@
344.569 18.5967 mo
344.569 20.2537 li
@
351.575 18.5967 mo
351.575 20.2537 li
@
357.299 18.5967 mo
357.299 20.2537 li
@
362.139 18.5967 mo
362.139 20.2537 li
@
366.331 18.5967 mo
366.331 20.2537 li
@
370.03 18.5967 mo
370.03 20.2537 li
@
373.338 18.5967 mo
373.338 20.2537 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QZIVAR+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/QZIVAR+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/.notdef /four 12{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t 139{/.notdef}rp]
QZIVAR+Helvetica nf
QZIVAR+Helvetica*1 [12 0 0 -12 0 0 ]msf
71.0878 289.347 mo
(10)
[6.672 0 ]xsh
QZIVAR+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
86.8378 283.347 mo
(-4)
[3.19673 0 ]xsh
QZIVAR+Helvetica*1 [12 0 0 -12 0 0 ]msf
215.838 289.347 mo
(10)
[6.672 0 ]xsh
QZIVAR+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
231.588 283.347 mo
(-2)
[3.19673 0 ]xsh
QZIVAR+Helvetica*1 [12 0 0 -12 0 0 ]msf
362.088 289.347 mo
(10)
[6.672 0 ]xsh
QZIVAR+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
377.838 283.347 mo
(0)sh
QZIVAR+Helvetica*1 [13.2 0 0 -13.2 0 0 ]msf
132.213 306.747 mo
(Fal)sh
150.548 306.747 mo
(se Acceptance R)sh
250.326 306.747 mo
(ate)sh
41.8378 269.847 mo
41.8378 18.5967 li
@
373.338 269.847 mo
373.338 18.5967 li
@
41.8378 269.847 mo
45.1526 269.847 li
@
41.8378 219.597 mo
45.1526 219.597 li
@
41.8378 169.347 mo
45.1526 169.347 li
@
41.8378 119.097 mo
45.1526 119.097 li
@
41.8378 68.8467 mo
45.1526 68.8467 li
@
41.8378 18.5967 mo
45.1526 18.5967 li
@
373.338 269.847 mo
370.023 269.847 li
@
373.338 219.597 mo
370.023 219.597 li
@
373.338 169.347 mo
370.023 169.347 li
@
373.338 119.097 mo
370.023 119.097 li
@
373.338 68.8467 mo
370.023 68.8467 li
@
373.338 18.5967 mo
370.023 18.5967 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QZIVAR+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QZIVAR+Helvetica /Encoding get
dup 46 /period put
dup 54 /six put
dup 56 /eight put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/QZIVAR+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp 
/A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp /a 
/.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t /u 
138{/.notdef}rp]
QZIVAR+Helvetica nf
QZIVAR+Helvetica*1 [12 0 0 -12 0 0 ]msf
29.1878 273.972 mo
(0)sh
17.9378 223.722 mo
(0.2)sh
17.9378 173.472 mo
(0.4)sh
17.9378 123.222 mo
(0.6)sh
17.9378 72.9717 mo
(0.8)sh
29.1878 22.7217 mo
(1)sh
QZIVAR+Helvetica*1 [0 -13.2 -13.2 0 0 0 ]msf
11.1878 230.097 mo
(Genuine Acceptance Rate)
[-10.2696 -7.3392 -7.3392 -7.33919 -2.9304 -7.3392 -7.33919 -3.6696 -8.8045 -6.59999 -6.59999 -7.3392 
-7.3392 -3.66959 -7.3392 -7.3392 -6.60001 -7.33919 -3.6696 -9.5304 -7.3392 -3.6696 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QZIVAS+Helvetica-Bold /JAAAAA+Helvetica-Bold findfont ct_VMDictPut
/QZIVAS+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
QZIVAS+Helvetica-Bold nf
QZIVAS+Helvetica-Bold*1 [13.2 0 0 -13.2 0 0 ]msf
77.4632 12.3787 mo
(Receiver Operating Characteristics)
[9.5304 7.3392 7.3392 7.3392 3.6696 7.3392 7.33919 5.1349 3.6696 10.2696 8.06511 7.33919 
5.1349 7.3392 4.39549 3.6696 8.06509 8.06509 3.66962 9.5304 8.06509 7.3392 5.1349 7.33919 
7.3392 4.39548 7.33923 5.13489 3.66962 7.33917 4.39551 3.66962 7.33917 0 ]xsh
0 lc
41.798 231.329 mo
283.581 146.692 li
301.594 118.462 li
310.421 104.488 li
316.17 94.1827 li
320.465 87.0557 li
323.838 80.7737 li
326.531 75.6927 li
328.825 73.0107 li
330.799 70.0467 li
332.556 67.2947 li
334.136 65.1067 li
335.573 63.3417 li
336.856 61.3657 li
338.02 58.9667 li
339.103 57.3427 li
340.099 56.0727 li
341.022 54.5197 li
341.879 53.5317 li
342.694 52.8257 li
343.459 51.3437 li
344.167 50.4267 li
344.84 48.7327 li
345.463 47.6737 li
346.045 47.2507 li
346.581 47.0387 li
347.083 45.8387 li
347.551 44.3567 li
347.99 43.0867 li
348.418 42.3107 li
348.811 41.6747 li
349.189 40.6167 li
349.545 39.9107 li
349.882 39.6287 li
350.201 39.5577 li
350.503 38.8517 li
350.793 38.3577 li
351.069 37.8647 li
351.333 37.6517 li
351.593 36.6647 li
351.842 35.9587 li
352.081 35.7467 li
352.306 35.3237 li
352.531 35.1117 li
352.743 34.8997 li
352.949 34.6177 li
353.152 34.0527 li
353.351 33.5587 li
353.549 33.3467 li
353.74 33.2767 li
353.929 33.2057 li
354.116 32.6417 li
354.301 32.2177 li
354.479 31.8647 li
354.656 31.5127 li
354.828 31.2297 li
355.001 31.1587 li
355.172 30.7357 li
355.336 30.5237 li
355.497 30.3827 li
355.658 30.3127 li
355.817 30.1007 li
355.967 30.1007 li
356.122 29.5357 li
356.269 29.4657 li
356.417 29.4657 li
356.563 29.0417 li
356.704 28.8307 li
356.845 28.5477 li
356.977 28.3357 li
357.111 27.9827 li
357.245 27.9827 li
357.378 27.8417 li
357.509 27.7717 li
357.64 27.5597 li
357.766 27.2767 li
357.885 27.1357 li
358.004 26.9247 li
358.117 26.5717 li
358.229 26.4307 li
358.338 26.2897 li
358.445 26.2187 li
358.557 25.9367 li
358.667 25.9367 li
358.772 25.6537 li
358.879 25.5837 li
358.985 25.5127 li
359.091 25.4427 li
359.195 25.3717 li
359.299 25.2307 li
359.404 25.0897 li
359.508 24.8777 li
359.614 24.7367 li
359.719 24.5247 li
359.826 24.5247 li
359.932 24.5247 li
360.035 24.4537 li
360.139 24.3837 li
360.245 24.3837 li
360.343 24.3127 li
360.448 24.2427 li
360.548 24.0307 li
360.643 23.9607 li
360.732 23.9607 li
360.818 23.9607 li
360.902 23.9607 li
360.986 23.9607 li
361.062 23.8897 li
361.138 23.8897 li
361.211 23.7487 li
361.278 23.7487 li
361.343 23.6777 li
361.408 23.6777 li
361.474 23.6077 li
361.541 23.5367 li
361.606 23.3957 li
361.672 23.3257 li
361.737 23.1847 li
361.802 23.1127 li
361.867 23.0427 li
361.93 22.9017 li
361.993 22.9017 li
362.059 22.9017 li
362.122 22.9017 li
362.188 22.9017 li
362.252 22.9017 li
362.313 22.8307 li
362.372 22.7607 li
362.431 22.7607 li
362.492 22.6897 li
362.555 22.6197 li
362.615 22.6197 li
362.676 22.6197 li
362.733 22.6197 li
362.787 22.4787 li
362.84 22.4787 li
362.889 22.4077 li
362.939 22.3367 li
362.989 22.3367 li
363.038 22.3367 li
363.083 22.3367 li
363.127 22.3367 li
363.17 22.3367 li
363.214 22.3367 li
363.256 22.3367 li
363.299 22.3367 li
363.34 22.3367 li
363.379 22.3367 li
363.417 22.1257 li
363.457 22.1257 li
363.496 22.1257 li
363.535 22.0547 li
363.576 22.0547 li
363.62 22.0547 li
363.661 21.9846 li
363.704 21.9846 li
363.746 21.9137 li
363.787 21.9137 li
363.826 21.9137 li
363.865 21.9137 li
363.904 21.9137 li
363.943 21.7727 li
363.985 21.7017 li
364.025 21.7017 li
364.062 21.5607 li
364.099 21.5607 li
364.133 21.5607 li
364.167 21.4897 li
364.202 21.4897 li
364.235 21.4897 li
364.27 21.4197 li
364.302 21.4197 li
364.334 21.4197 li
364.368 21.4197 li
364.402 21.4197 li
364.435 21.4197 li
364.468 21.4197 li
364.502 21.4197 li
364.535 21.4197 li
364.569 21.4197 li
364.601 21.4197 li
364.63 21.4197 li
364.661 21.4197 li
364.694 21.4197 li
364.727 21.4197 li
364.761 21.4197 li
364.794 21.4197 li
364.827 21.4197 li
364.858 21.4197 li
364.888 21.4197 li
364.918 21.4197 li
364.947 21.4197 li
364.976 21.2787 li
365.006 21.2787 li
365.036 21.2787 li
365.065 21.2787 li
365.095 21.2787 li
365.122 21.2787 li
365.148 21.2077 li
365.174 21.2077 li
365.199 21.2077 li
365.224 21.2077 li
365.252 20.9957 li
365.279 20.9257 li
365.306 20.9257 li
365.332 20.9257 li
365.358 20.9257 li
365.384 20.9257 li
365.408 20.8547 li
365.432 20.8547 li
365.456 20.8547 li
365.482 20.8547 li
365.504 20.8547 li
365.527 20.8547 li
365.552 20.8547 li
365.576 20.8547 li
365.599 20.8547 li
365.625 20.8547 li
365.651 20.7847 li
365.677 20.7847 li
365.704 20.7847 li
365.731 20.7847 li
365.759 20.7847 li
365.787 20.7137 li
365.817 20.7137 li
365.847 20.7137 li
365.879 20.7137 li
365.91 20.7137 li
365.939 20.7137 li
365.966 20.7137 li
365.992 20.7137 li
366.015 20.7137 li
366.038 20.7137 li
366.061 20.7137 li
366.082 20.7137 li
366.105 20.7137 li
366.127 20.7137 li
366.149 20.7137 li
366.171 20.7137 li
366.193 20.7137 li
366.217 20.7137 li
366.242 20.7137 li
366.266 20.7137 li
366.29 20.7137 li
366.314 20.7137 li
366.339 20.7137 li
366.361 20.7137 li
366.386 20.7137 li
366.413 20.7137 li
366.441 20.7137 li
366.47 20.7137 li
366.497 20.7137 li
366.525 20.6437 li
366.552 20.6437 li
366.578 20.5727 li
366.604 20.5727 li
366.631 20.5727 li
366.659 20.5727 li
366.689 20.5727 li
366.717 20.5727 li
366.745 20.5727 li
366.773 20.5727 li
366.799 20.5727 li
366.824 20.5727 li
366.849 20.5727 li
366.874 20.5727 li
366.897 20.5727 li
366.921 20.5027 li
366.945 20.5027 li
366.968 20.5027 li
366.989 20.5027 li
367.009 20.5027 li
367.029 20.5027 li
367.049 20.5027 li
367.069 20.4317 li
367.088 20.4317 li
367.106 20.4317 li
367.123 20.4317 li
367.139 20.4317 li
367.155 20.4317 li
367.172 20.4317 li
367.186 20.4317 li
367.201 20.4317 li
367.217 20.4317 li
367.232 20.4317 li
367.247 20.4317 li
367.265 20.4317 li
367.281 20.4317 li
367.297 20.4317 li
367.313 20.3617 li
367.33 20.3617 li
367.347 20.3617 li
367.364 20.3617 li
367.381 20.3617 li
367.394 20.3617 li
367.41 20.3617 li
367.425 20.3617 li
367.441 20.3617 li
367.456 20.3617 li
367.472 20.3617 li
367.488 20.3617 li
367.503 20.3617 li
367.519 20.3617 li
367.533 20.3617 li
367.548 20.3617 li
367.562 20.3617 li
367.575 20.3617 li
367.59 20.3617 li
367.605 20.3617 li
367.619 20.3617 li
367.632 20.3617 li
367.646 20.3617 li
367.66 20.3617 li
367.674 20.3617 li
367.688 20.2897 li
367.702 20.2897 li
367.715 20.2897 li
367.73 20.2897 li
367.745 20.2897 li
367.759 20.2897 li
367.776 20.2897 li
367.793 20.2897 li
367.81 20.2897 li
367.826 20.2897 li
367.841 20.2897 li
367.859 20.2897 li
367.874 20.2897 li
367.89 20.2197 li
367.904 20.2197 li
367.919 20.2197 li
367.935 20.2197 li
367.951 20.2197 li
367.967 20.2197 li
367.982 20.2197 li
367.997 20.2197 li
368.013 20.2197 li
368.028 20.2197 li
368.044 20.2197 li
368.059 20.2197 li
368.074 20.2197 li
368.089 20.2197 li
368.102 20.2197 li
368.117 20.2197 li
368.131 20.2197 li
368.145 20.2197 li
368.159 20.2197 li
368.174 20.2197 li
368.187 20.2197 li
368.201 20.2197 li
368.213 20.2197 li
368.227 20.2197 li
368.241 20.2197 li
368.257 20.2197 li
368.272 20.2197 li
368.288 20.2197 li
368.302 20.2197 li
368.316 20.2197 li
368.329 20.2197 li
368.343 20.2197 li
368.357 20.2197 li
368.372 20.2197 li
368.386 20.2197 li
368.401 20.2197 li
368.415 20.2197 li
368.43 20.2197 li
368.445 20.2197 li
368.459 20.2197 li
368.475 20.2197 li
368.489 20.2197 li
368.504 20.2197 li
368.518 20.0787 li
368.534 20.0787 li
368.549 20.0787 li
368.564 20.0787 li
368.579 20.0787 li
368.594 20.0787 li
368.61 20.0787 li
368.626 20.0787 li
368.642 20.0787 li
368.658 20.0787 li
368.674 20.0787 li
368.691 20.0787 li
368.706 20.0787 li
368.72 20.0787 li
368.736 20.0787 li
368.75 20.0077 li
368.765 20.0077 li
368.778 19.9377 li
368.793 19.9377 li
368.807 19.9377 li
368.821 19.9377 li
368.835 19.9377 li
368.849 19.9377 li
368.863 19.9377 li
368.876 19.9377 li
368.888 19.9377 li
368.901 19.9377 li
368.915 19.9377 li
368.927 19.9377 li
368.939 19.9377 li
368.951 19.9377 li
368.963 19.9377 li
368.976 19.9377 li
368.989 19.9377 li
369.003 19.9377 li
369.017 19.9377 li
369.031 19.9377 li
369.045 19.9377 li
369.059 19.9377 li
369.072 19.9377 li
369.086 19.9377 li
369.101 19.9377 li
369.114 19.9377 li
369.126 19.9377 li
369.14 19.9377 li
369.152 19.9377 li
369.164 19.9377 li
369.176 19.9377 li
369.189 19.9377 li
369.201 19.9377 li
369.213 19.9377 li
369.226 19.9377 li
369.238 19.9377 li
369.251 19.9377 li
369.263 19.9377 li
369.277 19.9377 li
369.29 19.9377 li
369.302 19.9377 li
369.317 19.9377 li
369.329 19.9377 li
369.343 19.9377 li
369.356 19.9377 li
369.37 19.9377 li
369.384 19.9377 li
369.4 19.9377 li
369.416 19.9377 li
369.432 19.9377 li
369.447 19.9377 li
369.463 19.9377 li
369.479 19.9377 li
369.495 19.9377 li
369.511 19.9377 li
369.529 19.9377 li
369.544 19.9377 li
369.559 19.9377 li
369.575 19.9377 li
369.591 19.8667 li
369.606 19.8667 li
369.62 19.8667 li
369.634 19.7967 li
369.647 19.7967 li
369.66 19.7967 li
369.674 19.7967 li
369.687 19.7967 li
369.699 19.7967 li
369.712 19.7967 li
369.724 19.7967 li
369.736 19.7967 li
369.749 19.7267 li
369.761 19.7267 li
369.774 19.7267 li
369.787 19.7267 li
369.801 19.7267 li
369.816 19.7267 li
369.829 19.7267 li
369.843 19.7267 li
369.856 19.7267 li
369.87 19.6557 li
369.884 19.6557 li
369.899 19.6557 li
369.912 19.6557 li
369.926 19.6557 li
369.94 19.6557 li
369.954 19.6557 li
369.968 19.6557 li
369.982 19.6557 li
369.996 19.6557 li
370.009 19.5847 li
370.024 19.5847 li
370.038 19.5847 li
370.052 19.5847 li
370.067 19.5847 li
370.082 19.5847 li
370.097 19.5847 li
370.112 19.5847 li
370.128 19.5847 li
370.144 19.5847 li
370.159 19.5847 li
370.173 19.5847 li
370.188 19.5847 li
370.204 19.5847 li
370.218 19.5847 li
370.232 19.5847 li
370.247 19.5847 li
370.261 19.5847 li
370.275 19.5847 li
370.288 19.5847 li
370.302 19.5847 li
370.316 19.5847 li
370.33 19.5847 li
370.344 19.5847 li
370.359 19.5847 li
370.373 19.5847 li
370.388 19.5847 li
370.402 19.5847 li
370.415 19.5847 li
370.428 19.5847 li
370.442 19.5847 li
370.456 19.5847 li
370.469 19.5847 li
370.482 19.5847 li
370.494 19.5847 li
370.506 19.5847 li
370.519 19.5137 li
370.532 19.5137 li
370.545 19.5137 li
370.558 19.5137 li
370.57 19.5137 li
370.583 19.5137 li
370.595 19.5137 li
370.606 19.5137 li
370.617 19.5137 li
370.629 19.5137 li
370.64 19.5137 li
370.65 19.5137 li
370.661 19.5137 li
370.672 19.4437 li
370.682 19.4437 li
370.693 19.4437 li
370.704 19.4437 li
370.715 19.4437 li
370.724 19.4437 li
370.735 19.4437 li
370.745 19.4437 li
370.754 19.4437 li
370.764 19.4437 li
370.774 19.4437 li
370.783 19.4437 li
370.793 19.4437 li
370.802 19.4437 li
370.811 19.4437 li
370.82 19.4437 li
370.829 19.4437 li
370.839 19.4437 li
370.848 19.4437 li
370.858 19.4437 li
370.867 19.4437 li
370.877 19.4437 li
370.886 19.4437 li
370.895 19.4437 li
370.905 19.4437 li
370.915 19.4437 li
370.925 19.4437 li
370.936 19.4437 li
370.945 19.4437 li
370.954 19.4437 li
370.964 19.4437 li
370.973 19.4437 li
370.982 19.4437 li
370.991 19.4437 li
371 19.4437 li
371.008 19.4437 li
371.018 19.4437 li
371.026 19.4437 li
371.035 19.4437 li
371.044 19.4437 li
371.053 19.4437 li
371.062 19.4437 li
371.07 19.4437 li
371.08 19.3727 li
371.09 19.3727 li
371.098 19.3727 li
371.108 19.3727 li
371.116 19.3727 li
371.124 19.3727 li
371.133 19.3727 li
371.141 19.3727 li
371.15 19.3727 li
371.159 19.3727 li
371.168 19.3727 li
371.176 19.3727 li
371.185 19.3727 li
371.193 19.3727 li
371.202 19.3727 li
371.211 19.3727 li
371.22 19.3727 li
371.23 19.3027 li
371.239 19.3027 li
371.248 19.3027 li
371.257 19.2317 li
371.266 19.2317 li
371.276 19.2317 li
371.285 19.2317 li
371.293 19.2317 li
371.303 19.2317 li
371.313 19.2317 li
371.323 19.2317 li
371.332 19.2317 li
371.341 19.2317 li
371.351 19.2317 li
371.36 19.2317 li
371.371 19.1617 li
371.381 19.1617 li
371.391 19.1617 li
371.401 19.1617 li
371.411 19.1617 li
371.421 19.1617 li
371.43 19.1617 li
371.44 19.1617 li
371.45 19.1617 li
371.46 19.1617 li
371.469 19.0907 li
371.48 19.0907 li
371.49 19.0907 li
371.5 19.0907 li
371.51 19.0907 li
371.52 19.0907 li
371.53 19.0907 li
371.54 19.0907 li
371.551 19.0907 li
371.561 19.0907 li
371.57 19.0907 li
371.579 19.0907 li
371.588 19.0907 li
371.597 19.0907 li
371.605 19.0907 li
371.613 19.0907 li
371.622 19.0907 li
371.63 19.0907 li
371.638 19.0907 li
371.647 19.0907 li
371.656 19.0907 li
371.665 19.0907 li
371.674 19.0907 li
371.683 19.0907 li
371.693 19.0907 li
371.702 19.0907 li
371.71 19.0907 li
371.719 19.0907 li
371.728 19.0907 li
371.738 19.0907 li
371.747 19.0907 li
371.757 19.0907 li
371.766 19.0907 li
371.776 19.0907 li
371.786 19.0907 li
371.796 19.0907 li
371.805 19.0907 li
371.815 19.0907 li
371.824 19.0907 li
371.833 19.0907 li
371.843 19.0907 li
371.852 19.0907 li
371.861 19.0907 li
371.87 19.0907 li
371.879 19.0907 li
371.887 19.0907 li
371.895 19.0907 li
371.902 19.0907 li
371.911 19.0907 li
371.919 19.0907 li
371.928 19.0907 li
371.936 19.0907 li
371.945 19.0907 li
371.952 19.0907 li
371.96 19.0907 li
371.968 19.0907 li
371.975 19.0907 li
371.983 19.0907 li
371.991 19.0907 li
371.999 19.0907 li
372.005 19.0907 li
372.011 19.0907 li
372.018 19.0907 li
372.025 19.0907 li
372.031 19.0907 li
372.038 19.0907 li
372.043 19.0907 li
372.05 19.0907 li
372.056 19.0907 li
372.062 19.0207 li
372.068 19.0207 li
372.075 19.0207 li
372.081 19.0207 li
372.086 19.0207 li
372.092 19.0207 li
372.098 19.0207 li
372.104 19.0207 li
372.109 19.0207 li
372.114 18.9497 li
372.12 18.9497 li
372.125 18.9497 li
372.131 18.9497 li
372.136 18.9497 li
372.141 18.9497 li
372.146 18.9497 li
372.152 18.9497 li
372.156 18.9497 li
372.162 18.9497 li
372.167 18.9497 li
372.172 18.9497 li
372.177 18.9497 li
372.182 18.9497 li
372.187 18.9497 li
372.192 18.9497 li
372.197 18.9497 li
372.202 18.9497 li
372.206 18.9497 li
372.211 18.9497 li
372.216 18.9497 li
372.22 18.9497 li
372.226 18.9497 li
372.231 18.9497 li
372.236 18.9497 li
372.241 18.9497 li
372.246 18.9497 li
372.251 18.9497 li
372.256 18.9497 li
372.263 18.9497 li
372.268 18.9497 li
372.274 18.9497 li
372.279 18.9497 li
372.284 18.9497 li
372.29 18.9497 li
372.295 18.9497 li
372.301 18.9497 li
372.306 18.9497 li
372.311 18.9497 li
372.317 18.9497 li
372.322 18.9497 li
372.326 18.9497 li
372.331 18.9497 li
372.338 18.9497 li
372.342 18.9497 li
372.347 18.9497 li
372.353 18.9497 li
372.359 18.9497 li
372.365 18.9497 li
372.37 18.9497 li
372.375 18.9497 li
372.38 18.9497 li
372.385 18.9497 li
372.39 18.9497 li
372.395 18.9497 li
372.4 18.9497 li
372.404 18.9497 li
372.409 18.9497 li
372.414 18.9497 li
372.418 18.9497 li
372.422 18.9497 li
372.427 18.9497 li
372.431 18.9497 li
372.435 18.9497 li
372.439 18.8787 li
372.443 18.8787 li
372.446 18.8787 li
372.451 18.8787 li
372.454 18.8787 li
372.458 18.8787 li
372.462 18.8787 li
372.466 18.8077 li
372.47 18.8077 li
372.474 18.8077 li
372.478 18.8077 li
372.481 18.8077 li
372.485 18.8077 li
372.489 18.8077 li
372.493 18.8077 li
372.497 18.8077 li
372.502 18.8077 li
372.506 18.8077 li
372.509 18.8077 li
372.514 18.8077 li
372.518 18.8077 li
372.522 18.8077 li
372.526 18.8077 li
372.53 18.8077 li
372.535 18.8077 li
372.538 18.8077 li
372.542 18.8077 li
372.546 18.7377 li
372.551 18.7377 li
372.555 18.7377 li
372.559 18.7377 li
372.563 18.7377 li
372.567 18.7377 li
372.572 18.7377 li
372.576 18.7377 li
372.581 18.7377 li
372.584 18.7377 li
372.589 18.7377 li
372.593 18.7377 li
372.598 18.7377 li
372.602 18.7377 li
372.606 18.7377 li
372.611 18.7377 li
372.615 18.7377 li
372.619 18.7377 li
372.623 18.7377 li
372.628 18.7377 li
372.631 18.7377 li
372.636 18.7377 li
372.641 18.7377 li
372.646 18.7377 li
372.651 18.7377 li
372.656 18.7377 li
372.66 18.7377 li
372.665 18.7377 li
372.67 18.7377 li
372.674 18.7377 li
372.679 18.7377 li
372.684 18.7377 li
372.689 18.7377 li
372.694 18.7377 li
372.699 18.7377 li
372.705 18.7377 li
372.71 18.7377 li
372.715 18.7377 li
372.721 18.7377 li
372.726 18.7377 li
372.731 18.7377 li
372.737 18.7377 li
372.742 18.7377 li
372.747 18.7377 li
372.752 18.7377 li
372.758 18.7377 li
372.763 18.7377 li
372.767 18.7377 li
372.772 18.7377 li
372.778 18.7377 li
372.782 18.7377 li
372.787 18.7377 li
372.791 18.7377 li
372.795 18.7377 li
372.8 18.7377 li
372.804 18.7377 li
372.809 18.7377 li
372.811 18.7377 li
372.815 18.7377 li
372.819 18.7377 li
372.823 18.7377 li
372.827 18.7377 li
372.831 18.7377 li
372.834 18.7377 li
372.838 18.7377 li
372.842 18.7377 li
372.845 18.7377 li
372.847 18.7377 li
372.851 18.7377 li
372.856 18.7377 li
372.86 18.7377 li
372.865 18.7377 li
372.868 18.7377 li
372.873 18.7377 li
372.877 18.7377 li
372.881 18.7377 li
372.885 18.7377 li
372.889 18.7377 li
372.893 18.7377 li
372.896 18.7377 li
372.9 18.7377 li
372.904 18.7377 li
372.908 18.7377 li
372.911 18.7377 li
372.916 18.7377 li
372.919 18.7377 li
372.922 18.7377 li
372.926 18.7377 li
372.93 18.7377 li
372.933 18.7377 li
372.937 18.7377 li
372.94 18.7377 li
372.944 18.7377 li
372.948 18.7377 li
372.951 18.7377 li
372.955 18.7377 li
372.958 18.7377 li
372.961 18.7377 li
372.965 18.7377 li
372.968 18.7377 li
372.971 18.7377 li
372.974 18.7377 li
372.978 18.7377 li
372.981 18.7377 li
372.985 18.7377 li
372.988 18.7377 li
372.992 18.7377 li
372.995 18.7377 li
372.997 18.7377 li
373.001 18.7377 li
373.004 18.7377 li
373.007 18.7377 li
373.01 18.7377 li
373.014 18.7377 li
373.018 18.7377 li
373.021 18.7377 li
373.024 18.7377 li
373.028 18.6667 li
373.032 18.6667 li
373.035 18.6667 li
373.039 18.6667 li
373.042 18.6667 li
373.045 18.6667 li
373.048 18.6667 li
373.051 18.6667 li
373.054 18.6667 li
373.058 18.6667 li
373.061 18.6667 li
373.063 18.6667 li
373.067 18.6667 li
373.069 18.6667 li
373.072 18.6667 li
373.075 18.6667 li
373.077 18.6667 li
373.08 18.6667 li
373.083 18.6667 li
373.085 18.6667 li
373.088 18.6667 li
373.09 18.6667 li
373.093 18.6667 li
373.095 18.6667 li
373.098 18.6667 li
373.1 18.6667 li
373.102 18.6667 li
373.105 18.6667 li
373.108 18.6667 li
373.11 18.6667 li
373.112 18.6667 li
373.115 18.6667 li
373.117 18.6667 li
373.118 18.6667 li
373.12 18.6667 li
373.123 18.6667 li
373.124 18.6667 li
373.127 18.6667 li
373.129 18.6667 li
373.131 18.6667 li
373.133 18.6667 li
373.135 18.6667 li
373.137 18.6667 li
373.138 18.6667 li
373.141 18.6667 li
373.142 18.6667 li
373.145 18.6667 li
373.146 18.6667 li
373.148 18.6667 li
373.15 18.6667 li
373.151 18.6667 li
373.154 18.6667 li
373.156 18.6667 li
373.157 18.6667 li
373.159 18.6667 li
373.161 18.6667 li
373.163 18.6667 li
373.165 18.6667 li
373.167 18.6667 li
373.169 18.6667 li
373.172 18.6667 li
373.174 18.6667 li
373.175 18.6667 li
373.177 18.6667 li
373.179 18.6667 li
373.181 18.6667 li
373.182 18.6667 li
373.184 18.6667 li
373.185 18.6667 li
373.186 18.6667 li
373.187 18.6667 li
373.189 18.6667 li
373.19 18.6667 li
373.192 18.6667 li
373.193 18.6667 li
373.194 18.6667 li
373.195 18.6667 li
373.196 18.6667 li
373.198 18.6667 li
373.199 18.6667 li
373.2 18.6667 li
373.201 18.6667 li
373.202 18.6667 li
373.203 18.6667 li
373.204 18.6667 li
373.205 18.6667 li
373.206 18.6667 li
373.207 18.6667 li
373.208 18.6667 li
373.209 18.6667 li
373.21 18.6667 li
373.211 18.6667 li
373.213 18.6667 li
373.214 18.6667 li
373.215 18.6667 li
373.216 18.6667 li
373.217 18.6667 li
373.218 18.6667 li
373.219 18.6667 li
373.22 18.6667 li
373.221 18.6667 li
373.222 18.6667 li
373.223 18.6667 li
373.224 18.6667 li
373.225 18.6667 li
373.226 18.6667 li
373.227 18.6667 li
373.228 18.6667 li
373.229 18.6667 li
373.23 18.6667 li
373.231 18.6667 li
373.232 18.6667 li
373.233 18.6667 li
373.234 18.6667 li
373.235 18.6667 li
373.236 18.6667 li
373.237 18.6667 li
373.238 18.6667 li
373.239 18.6667 li
373.24 18.6667 li
373.241 18.6667 li
373.242 18.6667 li
373.243 18.6667 li
373.244 18.6667 li
373.245 18.5967 li
373.246 18.5967 li
373.247 18.5967 li
373.248 18.5967 li
373.249 18.5967 li
373.25 18.5967 li
373.251 18.5967 li
373.252 18.5967 li
373.253 18.5967 li
373.254 18.5967 li
373.255 18.5967 li
373.256 18.5967 li
373.257 18.5967 li
373.258 18.5967 li
373.259 18.5967 li
373.26 18.5967 li
373.261 18.5967 li
373.262 18.5967 li
373.263 18.5967 li
373.264 18.5967 li
373.265 18.5967 li
373.266 18.5967 li
373.267 18.5967 li
373.268 18.5967 li
373.269 18.5967 li
373.27 18.5967 li
373.271 18.5967 li
373.272 18.5967 li
373.273 18.5967 li
373.274 18.5967 li
373.275 18.5967 li
373.276 18.5967 li
373.277 18.5967 li
373.278 18.5967 li
373.279 18.5967 li
373.28 18.5967 li
373.281 18.5967 li
373.282 18.5967 li
373.283 18.5967 li
373.284 18.5967 li
373.285 18.5967 li
373.286 18.5967 li
373.287 18.5967 li
373.288 18.5967 li
373.289 18.5967 li
373.29 18.5967 li
373.291 18.5967 li
373.292 18.5967 li
373.293 18.5967 li
373.294 18.5967 li
373.295 18.5967 li
373.296 18.5967 li
373.297 18.5967 li
373.298 18.5967 li
373.299 18.5967 li
373.3 18.5967 li
373.301 18.5967 li
373.302 18.5967 li
373.303 18.5967 li
373.304 18.5967 li
373.305 18.5967 li
373.306 18.5967 li
373.307 18.5967 li
373.308 18.5967 li
373.309 18.5967 li
373.31 18.5967 li
373.311 18.5967 li
373.312 18.5967 li
373.313 18.5967 li
373.314 18.5967 li
373.315 18.5967 li
373.316 18.5967 li
373.317 18.5967 li
373.318 18.5967 li
373.319 18.5967 li
373.32 18.5967 li
373.321 18.5967 li
373.322 18.5967 li
373.323 18.5967 li
373.324 18.5967 li
373.325 18.5967 li
373.326 18.5967 li
373.327 18.5967 li
373.328 18.5967 li
373.329 18.5967 li
373.33 18.5967 li
373.331 18.5967 li
373.332 18.5967 li
373.333 18.5967 li
373.334 18.5967 li
373.335 18.5967 li
373.336 18.5967 li
373.337 18.5967 li
373.338 18.5967 li
/1 
[/DeviceCMYK] /CSA add_res
.265019 .809232 0 0 cmyk
@
0 lj
330.306 69.5437 mo
334.806 69.5437 li
334.806 65.0437 li
330.306 65.0437 li
cp
@
341.208 53.5937 mo
345.708 53.5937 li
345.708 49.0937 li
341.208 49.0937 li
cp
@
346.561 43.9247 mo
351.061 43.9247 li
351.061 39.4247 li
346.561 39.4247 li
cp
@
349.591 38.2087 mo
354.091 38.2087 li
354.091 33.7087 li
349.591 33.7087 li
cp
@
351.68 35.4557 mo
356.18 35.4557 li
356.18 30.9557 li
351.68 30.9557 li
cp
@
353.408 32.5627 mo
357.908 32.5627 li
357.908 28.0627 li
353.408 28.0627 li
cp
@
354.861 30.2337 mo
359.361 30.2337 li
359.361 25.7337 li
354.861 25.7337 li
cp
@
356.088 28.5397 mo
360.588 28.5397 li
360.588 24.0397 li
356.088 24.0397 li
cp
@
357.154 27.3397 mo
361.654 27.3397 li
361.654 22.8397 li
357.154 22.8397 li
cp
@
358.198 26.4927 mo
362.698 26.4927 li
362.698 21.9927 li
358.198 21.9927 li
cp
@
359.028 25.9987 mo
363.528 25.9987 li
363.528 21.4987 li
359.028 21.4987 li
cp
@
359.679 25.1517 mo
364.179 25.1517 li
364.179 20.6517 li
359.679 20.6517 li
cp
@
360.305 24.8697 mo
364.805 24.8697 li
364.805 20.3697 li
360.305 20.3697 li
cp
@
360.834 24.5877 mo
365.334 24.5877 li
365.334 20.0877 li
360.834 20.0877 li
cp
@
361.246 24.3757 mo
365.746 24.3757 li
365.746 19.8757 li
361.246 19.8757 li
cp
@
361.654 24.1637 mo
366.154 24.1637 li
366.154 19.6637 li
361.654 19.6637 li
cp
@
362.02 23.6697 mo
366.52 23.6697 li
366.52 19.1697 li
362.02 19.1697 li
cp
@
362.35 23.6697 mo
366.85 23.6697 li
366.85 19.1697 li
362.35 19.1697 li
cp
@
362.668 23.6697 mo
367.168 23.6697 li
367.168 19.1697 li
362.668 19.1697 li
cp
@
362.949 23.4577 mo
367.449 23.4577 li
367.449 18.9577 li
362.949 18.9577 li
cp
@
363.207 23.1057 mo
367.707 23.1057 li
367.707 18.6057 li
363.207 18.6057 li
cp
@
363.454 23.0347 mo
367.954 23.0347 li
367.954 18.5347 li
363.454 18.5347 li
cp
@
363.742 22.9637 mo
368.242 22.9637 li
368.242 18.4637 li
363.742 18.4637 li
cp
@
363.967 22.9637 mo
368.467 22.9637 li
368.467 18.4637 li
363.967 18.4637 li
cp
@
364.22 22.9637 mo
368.72 22.9637 li
368.72 18.4637 li
364.22 18.4637 li
cp
@
364.496 22.8227 mo
368.996 22.8227 li
368.996 18.3227 li
364.496 18.3227 li
cp
@
364.739 22.7517 mo
369.239 22.7517 li
369.239 18.2517 li
364.739 18.2517 li
cp
@
364.922 22.6817 mo
369.422 22.6817 li
369.422 18.1817 li
364.922 18.1817 li
cp
@
365.08 22.6107 mo
369.58 22.6107 li
369.58 18.1107 li
365.08 18.1107 li
cp
@
365.238 22.6107 mo
369.738 22.6107 li
369.738 18.1107 li
365.238 18.1107 li
cp
@
365.382 22.6107 mo
369.882 22.6107 li
369.882 18.1107 li
365.382 18.1107 li
cp
@
365.526 22.5407 mo
370.026 22.5407 li
370.026 18.0407 li
365.526 18.0407 li
cp
@
365.685 22.4697 mo
370.185 22.4697 li
370.185 17.9697 li
365.685 17.9697 li
cp
@
365.839 22.4697 mo
370.339 22.4697 li
370.339 17.9697 li
365.839 17.9697 li
cp
@
365.977 22.4697 mo
370.477 22.4697 li
370.477 17.9697 li
365.977 17.9697 li
cp
@
366.122 22.4697 mo
370.622 22.4697 li
370.622 17.9697 li
366.122 17.9697 li
cp
@
366.268 22.3287 mo
370.768 22.3287 li
370.768 17.8287 li
366.268 17.8287 li
cp
@
366.424 22.3287 mo
370.924 22.3287 li
370.924 17.8287 li
366.424 17.8287 li
cp
@
366.571 22.1877 mo
371.071 22.1877 li
371.071 17.6877 li
366.571 17.6877 li
cp
@
366.701 22.1877 mo
371.201 22.1877 li
371.201 17.6877 li
366.701 17.6877 li
cp
@
366.836 22.1877 mo
371.336 22.1877 li
371.336 17.6877 li
366.836 17.6877 li
cp
@
366.963 22.1877 mo
371.463 22.1877 li
371.463 17.6877 li
366.963 17.6877 li
cp
@
367.093 22.1877 mo
371.593 22.1877 li
371.593 17.6877 li
367.093 17.6877 li
cp
@
367.245 22.1877 mo
371.745 22.1877 li
371.745 17.6877 li
367.245 17.6877 li
cp
@
367.397 22.0467 mo
371.897 22.0467 li
371.897 17.5467 li
367.397 17.5467 li
cp
@
367.524 21.9757 mo
372.024 21.9757 li
372.024 17.4757 li
367.524 17.4757 li
cp
@
367.662 21.9057 mo
372.162 21.9057 li
372.162 17.4057 li
367.662 17.4057 li
cp
@
367.802 21.8347 mo
372.302 21.8347 li
372.302 17.3347 li
367.802 17.3347 li
cp
@
367.954 21.8347 mo
372.454 21.8347 li
372.454 17.3347 li
367.954 17.3347 li
cp
@
368.094 21.8347 mo
372.594 21.8347 li
372.594 17.3347 li
368.094 17.3347 li
cp
@
368.232 21.8347 mo
372.732 21.8347 li
372.732 17.3347 li
368.232 17.3347 li
cp
@
368.357 21.7647 mo
372.857 21.7647 li
372.857 17.2647 li
368.357 17.2647 li
cp
@
368.464 21.6937 mo
372.964 21.6937 li
372.964 17.1937 li
368.464 17.1937 li
cp
@
368.561 21.6937 mo
373.061 21.6937 li
373.061 17.1937 li
368.561 17.1937 li
cp
@
368.655 21.6937 mo
373.155 21.6937 li
373.155 17.1937 li
368.655 17.1937 li
cp
@
368.749 21.6937 mo
373.249 21.6937 li
373.249 17.1937 li
368.749 17.1937 li
cp
@
368.839 21.6227 mo
373.339 21.6227 li
373.339 17.1227 li
368.839 17.1227 li
cp
@
368.926 21.6227 mo
373.426 21.6227 li
373.426 17.1227 li
368.926 17.1227 li
cp
@
369.016 21.4817 mo
373.516 21.4817 li
373.516 16.9817 li
369.016 16.9817 li
cp
@
369.111 21.4817 mo
373.611 21.4817 li
373.611 16.9817 li
369.111 16.9817 li
cp
@
369.21 21.4107 mo
373.71 21.4107 li
373.71 16.9107 li
369.21 16.9107 li
cp
@
369.311 21.3407 mo
373.811 21.3407 li
373.811 16.8407 li
369.311 16.8407 li
cp
@
369.398 21.3407 mo
373.898 21.3407 li
373.898 16.8407 li
369.398 16.8407 li
cp
@
369.488 21.3407 mo
373.988 21.3407 li
373.988 16.8407 li
369.488 16.8407 li
cp
@
369.583 21.3407 mo
374.083 21.3407 li
374.083 16.8407 li
369.583 16.8407 li
cp
@
369.669 21.3407 mo
374.169 21.3407 li
374.169 16.8407 li
369.669 16.8407 li
cp
@
369.748 21.3407 mo
374.248 21.3407 li
374.248 16.8407 li
369.748 16.8407 li
cp
@
369.812 21.2697 mo
374.312 21.2697 li
374.312 16.7697 li
369.812 16.7697 li
cp
@
369.87 21.1997 mo
374.37 21.1997 li
374.37 16.6997 li
369.87 16.6997 li
cp
@
369.922 21.1997 mo
374.422 21.1997 li
374.422 16.6997 li
369.922 16.6997 li
cp
@
369.971 21.1997 mo
374.471 21.1997 li
374.471 16.6997 li
369.971 16.6997 li
cp
@
370.024 21.1997 mo
374.524 21.1997 li
374.524 16.6997 li
370.024 16.6997 li
cp
@
370.077 21.1997 mo
374.577 21.1997 li
374.577 16.6997 li
370.077 16.6997 li
cp
@
370.13 21.1997 mo
374.63 21.1997 li
374.63 16.6997 li
370.13 16.6997 li
cp
@
370.177 21.1997 mo
374.677 21.1997 li
374.677 16.6997 li
370.177 16.6997 li
cp
@
370.216 21.0587 mo
374.716 21.0587 li
374.716 16.5587 li
370.216 16.5587 li
cp
@
370.255 21.0587 mo
374.755 21.0587 li
374.755 16.5587 li
370.255 16.5587 li
cp
@
370.296 20.9877 mo
374.796 20.9877 li
374.796 16.4877 li
370.296 16.4877 li
cp
@
370.338 20.9877 mo
374.838 20.9877 li
374.838 16.4877 li
370.338 16.4877 li
cp
@
370.382 20.9877 mo
374.882 20.9877 li
374.882 16.4877 li
370.382 16.4877 li
cp
@
370.429 20.9877 mo
374.929 20.9877 li
374.929 16.4877 li
370.429 16.4877 li
cp
@
370.482 20.9877 mo
374.982 20.9877 li
374.982 16.4877 li
370.482 16.4877 li
cp
@
370.532 20.9877 mo
375.032 20.9877 li
375.032 16.4877 li
370.532 16.4877 li
cp
@
370.573 20.9877 mo
375.073 20.9877 li
375.073 16.4877 li
370.573 16.4877 li
cp
@
370.61 20.9877 mo
375.11 20.9877 li
375.11 16.4877 li
370.61 16.4877 li
cp
@
370.65 20.9877 mo
375.15 20.9877 li
375.15 16.4877 li
370.65 16.4877 li
cp
@
370.687 20.9877 mo
375.187 20.9877 li
375.187 16.4877 li
370.687 16.4877 li
cp
@
370.722 20.9877 mo
375.222 20.9877 li
375.222 16.4877 li
370.722 16.4877 li
cp
@
370.754 20.9877 mo
375.254 20.9877 li
375.254 16.4877 li
370.754 16.4877 li
cp
@
370.788 20.9177 mo
375.288 20.9177 li
375.288 16.4177 li
370.788 16.4177 li
cp
@
370.819 20.9177 mo
375.319 20.9177 li
375.319 16.4177 li
370.819 16.4177 li
cp
@
370.845 20.9177 mo
375.345 20.9177 li
375.345 16.4177 li
370.845 16.4177 li
cp
@
370.868 20.9177 mo
375.368 20.9177 li
375.368 16.4177 li
370.868 16.4177 li
cp
@
370.888 20.9177 mo
375.388 20.9177 li
375.388 16.4177 li
370.888 16.4177 li
cp
@
370.907 20.9177 mo
375.407 20.9177 li
375.407 16.4177 li
370.907 16.4177 li
cp
@
370.927 20.9177 mo
375.427 20.9177 li
375.427 16.4177 li
370.927 16.4177 li
cp
@
370.942 20.9177 mo
375.442 20.9177 li
375.442 16.4177 li
370.942 16.4177 li
cp
@
370.953 20.9177 mo
375.453 20.9177 li
375.453 16.4177 li
370.953 16.4177 li
cp
@
370.963 20.9177 mo
375.463 20.9177 li
375.463 16.4177 li
370.963 16.4177 li
cp
@
370.97 20.9177 mo
375.47 20.9177 li
375.47 16.4177 li
370.97 16.4177 li
cp
@
370.977 20.9177 mo
375.477 20.9177 li
375.477 16.4177 li
370.977 16.4177 li
cp
@
370.984 20.9177 mo
375.484 20.9177 li
375.484 16.4177 li
370.984 16.4177 li
cp
@
370.99 20.9177 mo
375.49 20.9177 li
375.49 16.4177 li
370.99 16.4177 li
cp
@
370.995 20.8467 mo
375.495 20.8467 li
375.495 16.3467 li
370.995 16.3467 li
cp
@
371 20.8467 mo
375.5 20.8467 li
375.5 16.3467 li
371 16.3467 li
cp
@
371.004 20.8467 mo
375.504 20.8467 li
375.504 16.3467 li
371.004 16.3467 li
cp
@
371.007 20.8467 mo
375.507 20.8467 li
375.507 16.3467 li
371.007 16.3467 li
cp
@
371.011 20.8467 mo
375.511 20.8467 li
375.511 16.3467 li
371.011 16.3467 li
cp
@
371.015 20.8467 mo
375.515 20.8467 li
375.515 16.3467 li
371.015 16.3467 li
cp
@
371.019 20.8467 mo
375.519 20.8467 li
375.519 16.3467 li
371.019 16.3467 li
cp
@
371.022 20.8467 mo
375.522 20.8467 li
375.522 16.3467 li
371.022 16.3467 li
cp
@
371.026 20.8467 mo
375.526 20.8467 li
375.526 16.3467 li
371.026 16.3467 li
cp
@
371.029 20.8467 mo
375.529 20.8467 li
375.529 16.3467 li
371.029 16.3467 li
cp
@
371.032 20.8467 mo
375.532 20.8467 li
375.532 16.3467 li
371.032 16.3467 li
cp
@
371.034 20.8467 mo
375.534 20.8467 li
375.534 16.3467 li
371.034 16.3467 li
cp
@
371.037 20.8467 mo
375.537 20.8467 li
375.537 16.3467 li
371.037 16.3467 li
cp
@
371.04 20.8467 mo
375.54 20.8467 li
375.54 16.3467 li
371.04 16.3467 li
cp
@
371.043 20.8467 mo
375.543 20.8467 li
375.543 16.3467 li
371.043 16.3467 li
cp
@
371.045 20.8467 mo
375.545 20.8467 li
375.545 16.3467 li
371.045 16.3467 li
cp
@
371.049 20.8467 mo
375.549 20.8467 li
375.549 16.3467 li
371.049 16.3467 li
cp
@
371.051 20.8467 mo
375.551 20.8467 li
375.551 16.3467 li
371.051 16.3467 li
cp
@
371.053 20.8467 mo
375.553 20.8467 li
375.553 16.3467 li
371.053 16.3467 li
cp
@
371.056 20.8467 mo
375.556 20.8467 li
375.556 16.3467 li
371.056 16.3467 li
cp
@
371.059 20.8467 mo
375.559 20.8467 li
375.559 16.3467 li
371.059 16.3467 li
cp
@
371.061 20.8467 mo
375.561 20.8467 li
375.561 16.3467 li
371.061 16.3467 li
cp
@
371.064 20.8467 mo
375.564 20.8467 li
375.564 16.3467 li
371.064 16.3467 li
cp
@
371.066 20.8467 mo
375.566 20.8467 li
375.566 16.3467 li
371.066 16.3467 li
cp
@
371.068 20.8467 mo
375.568 20.8467 li
375.568 16.3467 li
371.068 16.3467 li
cp
@
371.07 20.8467 mo
375.57 20.8467 li
375.57 16.3467 li
371.07 16.3467 li
cp
@
371.072 20.8467 mo
375.572 20.8467 li
375.572 16.3467 li
371.072 16.3467 li
cp
@
371.074 20.8467 mo
375.574 20.8467 li
375.574 16.3467 li
371.074 16.3467 li
cp
@
371.076 20.8467 mo
375.576 20.8467 li
375.576 16.3467 li
371.076 16.3467 li
cp
@
371.077 20.8467 mo
375.577 20.8467 li
375.577 16.3467 li
371.077 16.3467 li
cp
@
371.078 20.8467 mo
375.578 20.8467 li
375.578 16.3467 li
371.078 16.3467 li
cp
@
371.078 20.8467 mo
375.578 20.8467 li
375.578 16.3467 li
371.078 16.3467 li
cp
@
371.079 20.8467 mo
375.579 20.8467 li
375.579 16.3467 li
371.079 16.3467 li
cp
@
371.08 20.8467 mo
375.58 20.8467 li
375.58 16.3467 li
371.08 16.3467 li
cp
@
371.08 20.8467 mo
375.58 20.8467 li
375.58 16.3467 li
371.08 16.3467 li
cp
@
371.081 20.8467 mo
375.581 20.8467 li
375.581 16.3467 li
371.081 16.3467 li
cp
@
371.081 20.8467 mo
375.581 20.8467 li
375.581 16.3467 li
371.081 16.3467 li
cp
@
371.082 20.8467 mo
375.582 20.8467 li
375.582 16.3467 li
371.082 16.3467 li
cp
@
371.082 20.8467 mo
375.582 20.8467 li
375.582 16.3467 li
371.082 16.3467 li
cp
@
371.083 20.8467 mo
375.583 20.8467 li
375.583 16.3467 li
371.083 16.3467 li
cp
@
371.083 20.8467 mo
375.583 20.8467 li
375.583 16.3467 li
371.083 16.3467 li
cp
@
371.083 20.8467 mo
375.583 20.8467 li
375.583 16.3467 li
371.083 16.3467 li
cp
@
371.084 20.8467 mo
375.584 20.8467 li
375.584 16.3467 li
371.084 16.3467 li
cp
@
371.084 20.8467 mo
375.584 20.8467 li
375.584 16.3467 li
371.084 16.3467 li
cp
@
371.084 20.8467 mo
375.584 20.8467 li
375.584 16.3467 li
371.084 16.3467 li
cp
@
371.084 20.8467 mo
375.584 20.8467 li
375.584 16.3467 li
371.084 16.3467 li
cp
@
371.084 20.8467 mo
375.584 20.8467 li
375.584 16.3467 li
371.084 16.3467 li
cp
@
371.085 20.8467 mo
375.585 20.8467 li
375.585 16.3467 li
371.085 16.3467 li
cp
@
371.085 20.8467 mo
375.585 20.8467 li
375.585 16.3467 li
371.085 16.3467 li
cp
@
371.085 20.8467 mo
375.585 20.8467 li
375.585 16.3467 li
371.085 16.3467 li
cp
@
371.086 20.8467 mo
375.586 20.8467 li
375.586 16.3467 li
371.086 16.3467 li
cp
@
371.086 20.8467 mo
375.586 20.8467 li
375.586 16.3467 li
371.086 16.3467 li
cp
@
371.086 20.8467 mo
375.586 20.8467 li
375.586 16.3467 li
371.086 16.3467 li
cp
@
371.086 20.8467 mo
375.586 20.8467 li
375.586 16.3467 li
371.086 16.3467 li
cp
@
371.086 20.8467 mo
375.586 20.8467 li
375.586 16.3467 li
371.086 16.3467 li
cp
@
371.086 20.8467 mo
375.586 20.8467 li
375.586 16.3467 li
371.086 16.3467 li
cp
@
371.086 20.8467 mo
375.586 20.8467 li
375.586 16.3467 li
371.086 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.087 20.8467 mo
375.587 20.8467 li
375.587 16.3467 li
371.087 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
371.088 20.8467 mo
375.588 20.8467 li
375.588 16.3467 li
371.088 16.3467 li
cp
@
1 lj
41.798 125.854 mo
47.5972 123.261 li
58.2749 116.556 li
63.9523 111.263 li
71.8429 107.24 li
77.2288 103.288 li
85.3589 99.8287 li
93.1428 96.5127 li
99.5288 93.0547 li
103.986 90.2317 li
110.78 88.2557 li
117.067 85.6437 li
122.412 83.2447 li
127.357 81.1267 li
132.703 79.6447 li
138.895 78.0217 li
144.449 76.6097 li
149.307 75.3397 li
154.107 73.6457 li
158.792 72.1637 li
163.129 71.4577 li
167.311 70.3987 li
171.748 68.9877 li
175.75 67.9297 li
180.056 66.8707 li
183.837 65.8127 li
187.559 65.5297 li
191.219 64.5417 li
194.799 63.6947 li
198.196 62.6357 li
201.569 61.8597 li
204.81 61.2247 li
207.969 60.8717 li
211.115 59.9537 li
213.969 59.6717 li
216.96 59.0367 li
219.954 58.8257 li
222.728 58.1897 li
225.396 57.6957 li
228.101 57.4137 li
230.507 56.7077 li
232.94 56.1427 li
235.455 56.0017 li
237.797 55.0837 li
240.055 54.5197 li
242.222 54.3077 li
244.375 54.0257 li
246.449 53.7427 li
248.479 53.3907 li
250.472 53.0377 li
252.374 52.3317 li
254.19 51.9087 li
256.068 51.4846 li
257.792 51.2027 li
259.527 51.1327 li
261.238 50.9907 li
262.878 50.2847 li
264.518 50.0027 li
266.096 49.9327 li
267.62 49.4377 li
269.115 48.6617 li
270.579 48.5207 li
272.038 48.2377 li
273.47 47.9557 li
274.847 47.6737 li
276.22 47.3207 li
277.552 46.8977 li
278.845 46.4737 li
280.133 46.1917 li
281.351 45.7687 li
282.595 45.6277 li
283.813 45.3447 li
285.003 44.9217 li
286.167 44.5687 li
287.304 44.4277 li
288.413 43.6517 li
289.508 43.2277 li
290.615 42.8747 li
291.668 42.8047 li
292.709 42.5917 li
293.74 42.5217 li
294.752 42.3107 li
295.747 41.8867 li
296.713 41.6747 li
297.66 41.4637 li
298.608 41.2517 li
299.52 40.9697 li
300.415 40.6877 li
301.302 40.1227 li
302.168 39.9107 li
303.016 39.6987 li
303.853 39.2057 li
304.677 38.7817 li
305.477 38.7107 li
306.251 38.6407 li
307.031 38.6407 li
307.779 38.0757 li
308.546 37.8647 li
309.298 37.5107 li
310.025 37.2287 li
310.746 37.1587 li
311.443 37.0877 li
312.154 36.7346 li
312.829 36.4527 li
313.497 36.2407 li
314.17 36.1697 li
314.833 36.0997 li
315.485 35.8877 li
316.109 35.7467 li
316.723 35.6057 li
317.329 35.3237 li
317.937 35.1117 li
318.531 34.8997 li
319.115 34.8287 li
319.695 34.6877 li
320.252 34.5467 li
320.806 34.0527 li
321.347 33.9117 li
321.888 33.7007 li
322.417 33.7007 li
322.936 33.4177 li
323.47 33.2057 li
323.984 32.9947 li
324.478 32.6417 li
324.964 32.4297 li
325.456 32.3587 li
325.929 32.1467 li
326.405 32.0057 li
326.881 31.8647 li
327.353 31.5827 li
327.818 31.5127 li
328.268 31.3707 li
328.718 31.2297 li
329.16 30.9477 li
329.593 30.7357 li
330.014 30.5237 li
330.433 30.1717 li
330.846 29.9587 li
331.261 29.7477 li
331.667 29.5357 li
332.065 29.1827 li
332.469 29.0417 li
332.852 28.9717 li
333.229 28.6177 li
333.602 28.3357 li
333.973 28.1947 li
334.347 27.9827 li
334.709 27.9127 li
335.068 27.7007 li
335.433 27.4187 li
335.789 27.4187 li
336.13 27.2067 li
336.478 27.0657 li
336.814 26.9247 li
337.156 26.8537 li
337.481 26.6427 li
337.809 26.5007 li
338.128 26.4307 li
338.45 26.2897 li
338.765 26.2187 li
339.079 26.0777 li
339.38 26.0777 li
339.688 26.0777 li
339.99 26.0777 li
340.286 25.9367 li
340.574 25.8657 li
340.867 25.6537 li
341.152 25.5837 li
341.437 25.5127 li
341.719 25.3717 li
341.997 25.3717 li
342.268 25.3017 li
342.536 25.1597 li
342.808 25.0897 li
343.074 25.0187 li
343.34 24.8777 li
343.596 24.8777 li
343.855 24.8777 li
344.108 24.8777 li
344.365 24.7367 li
344.613 24.6667 li
344.856 24.5957 li
345.098 24.5957 li
345.343 24.5957 li
345.585 24.3127 li
345.82 24.2427 li
346.062 24.1017 li
346.297 24.0307 li
346.529 24.0307 li
346.762 24.0307 li
346.99 23.9607 li
347.213 23.8187 li
347.435 23.7487 li
347.656 23.7487 li
347.872 23.7487 li
348.09 23.6777 li
348.305 23.6777 li
348.518 23.5367 li
348.727 23.5367 li
348.935 23.4667 li
349.143 23.3957 li
349.344 23.2547 li
349.549 23.2547 li
349.75 23.1847 li
349.952 23.1847 li
350.154 23.0427 li
350.347 23.0427 li
350.539 22.9017 li
350.732 22.9017 li
350.927 22.7607 li
351.113 22.7607 li
351.3 22.6897 li
351.483 22.6897 li
351.667 22.5487 li
351.848 22.3367 li
352.027 22.2667 li
352.204 22.2667 li
352.382 22.1957 li
352.555 22.1257 li
352.73 22.1257 li
352.901 22.0547 li
353.07 22.0547 li
353.239 21.9137 li
353.402 21.8437 li
353.571 21.8437 li
353.738 21.7727 li
353.903 21.7017 li
354.069 21.7017 li
354.232 21.7017 li
354.392 21.7017 li
354.553 21.7017 li
354.709 21.7017 li
354.867 21.7017 li
355.022 21.7017 li
355.179 21.6307 li
355.332 21.4897 li
355.481 21.4197 li
355.63 21.3487 li
355.78 21.3487 li
355.926 21.3487 li
356.071 21.3487 li
356.214 21.2787 li
356.359 21.2077 li
356.503 21.1377 li
356.645 20.9957 li
356.787 20.9257 li
356.924 20.9257 li
357.064 20.8547 li
357.202 20.8547 li
357.337 20.8547 li
357.472 20.8547 li
357.606 20.8547 li
357.739 20.8547 li
357.869 20.8547 li
357.998 20.8547 li
358.127 20.8547 li
358.256 20.8547 li
358.383 20.8547 li
358.511 20.8547 li
358.634 20.7847 li
358.758 20.7847 li
358.879 20.7137 li
358.999 20.7137 li
359.122 20.7137 li
359.244 20.7137 li
359.363 20.7137 li
359.477 20.7137 li
359.597 20.7137 li
359.714 20.6437 li
359.827 20.6437 li
359.944 20.6437 li
360.056 20.6437 li
360.168 20.6437 li
360.281 20.5027 li
360.394 20.5027 li
360.505 20.5027 li
360.615 20.4317 li
360.724 20.4317 li
360.832 20.4317 li
360.94 20.4317 li
361.046 20.4317 li
361.151 20.4317 li
361.253 20.3617 li
361.358 20.2897 li
361.462 20.2897 li
361.564 20.2897 li
361.663 20.2197 li
361.762 20.2197 li
361.86 20.1487 li
361.961 20.1487 li
362.058 20.1487 li
362.153 20.1487 li
362.249 20.1487 li
362.347 20.1487 li
362.439 20.1487 li
362.534 20.1487 li
362.627 20.0787 li
362.716 20.0787 li
362.809 20.0077 li
362.899 20.0077 li
362.99 19.9377 li
363.079 19.9377 li
363.167 19.9377 li
363.257 19.8667 li
363.344 19.8667 li
363.431 19.8667 li
363.516 19.8667 li
363.604 19.8667 li
363.687 19.8667 li
363.772 19.8667 li
363.856 19.8667 li
363.939 19.8667 li
364.018 19.8667 li
364.099 19.8667 li
364.179 19.8667 li
364.258 19.8667 li
364.336 19.8667 li
364.415 19.7967 li
364.491 19.7267 li
364.565 19.7267 li
364.644 19.7267 li
364.72 19.7267 li
364.797 19.7267 li
364.87 19.7267 li
364.943 19.7267 li
365.015 19.7267 li
365.087 19.7267 li
365.16 19.7267 li
365.232 19.7267 li
365.301 19.7267 li
365.37 19.7267 li
365.442 19.7267 li
365.514 19.7267 li
365.583 19.7267 li
365.651 19.7267 li
365.719 19.7267 li
365.784 19.6557 li
365.849 19.6557 li
365.912 19.6557 li
365.979 19.6557 li
366.043 19.6557 li
366.107 19.6557 li
366.171 19.6557 li
366.235 19.6557 li
366.297 19.6557 li
366.359 19.6557 li
366.419 19.6557 li
366.482 19.6557 li
366.542 19.6557 li
366.603 19.6557 li
366.662 19.6557 li
366.722 19.6557 li
366.781 19.6557 li
366.838 19.5847 li
366.892 19.5137 li
366.947 19.5137 li
367.003 19.5137 li
367.057 19.5137 li
367.115 19.5137 li
367.171 19.5137 li
367.226 19.5137 li
367.279 19.5137 li
367.334 19.5137 li
367.388 19.4437 li
367.441 19.4437 li
367.494 19.4437 li
367.546 19.4437 li
367.597 19.4437 li
367.649 19.4437 li
367.7 19.4437 li
367.75 19.4437 li
367.799 19.4437 li
367.848 19.4437 li
367.895 19.4437 li
367.943 19.4437 li
367.99 19.4437 li
368.037 19.4437 li
368.086 19.4437 li
368.133 19.4437 li
368.178 19.3727 li
368.224 19.3727 li
368.27 19.3727 li
368.315 19.3727 li
368.359 19.3727 li
368.405 19.3727 li
368.449 19.3727 li
368.492 19.3727 li
368.534 19.3727 li
368.576 19.3727 li
368.618 19.3727 li
368.66 19.3727 li
368.702 19.3727 li
368.743 19.3727 li
368.783 19.3727 li
368.824 19.3727 li
368.866 19.3727 li
368.906 19.3027 li
368.944 19.3027 li
368.983 19.3027 li
369.021 19.3027 li
369.06 19.3027 li
369.097 19.3027 li
369.134 19.3027 li
369.17 19.3027 li
369.207 19.3027 li
369.243 19.3027 li
369.28 19.3027 li
369.314 19.3027 li
369.35 19.3027 li
369.386 19.3027 li
369.421 19.3027 li
369.456 19.3027 li
369.491 19.3027 li
369.525 19.3027 li
369.559 19.3027 li
369.592 19.3027 li
369.626 19.3027 li
369.658 19.3027 li
369.692 19.3027 li
369.724 19.3027 li
369.756 19.3027 li
369.788 19.3027 li
369.82 19.2317 li
369.851 19.2317 li
369.882 19.2317 li
369.913 19.2317 li
369.943 19.1617 li
369.972 19.1617 li
370.001 19.1617 li
370.03 19.1617 li
370.058 19.1617 li
370.087 19.1617 li
370.115 19.1617 li
370.143 19.1617 li
370.172 19.1617 li
370.199 19.1617 li
370.226 19.1617 li
370.253 19.1617 li
370.279 19.1617 li
370.306 19.1617 li
370.331 19.1617 li
370.357 19.1617 li
370.381 19.0907 li
370.406 19.0907 li
370.433 19.0907 li
370.457 19.0907 li
370.482 19.0907 li
370.508 19.0907 li
370.531 19.0907 li
370.555 19.0907 li
370.579 19.0907 li
370.602 19.0907 li
370.627 19.0207 li
370.651 18.9497 li
370.672 18.9497 li
370.693 18.8787 li
370.715 18.8787 li
370.737 18.8077 li
370.759 18.8077 li
370.782 18.8077 li
370.803 18.8077 li
370.825 18.8077 li
370.846 18.8077 li
370.867 18.8077 li
370.887 18.8077 li
370.907 18.8077 li
370.928 18.8077 li
370.949 18.8077 li
370.969 18.8077 li
370.989 18.8077 li
371.008 18.8077 li
371.027 18.8077 li
371.047 18.8077 li
371.067 18.8077 li
371.086 18.8077 li
371.104 18.8077 li
371.122 18.8077 li
371.14 18.8077 li
371.158 18.8077 li
371.176 18.8077 li
371.194 18.8077 li
371.212 18.8077 li
371.229 18.8077 li
371.245 18.8077 li
371.263 18.8077 li
371.279 18.8077 li
371.296 18.8077 li
371.313 18.8077 li
371.329 18.8077 li
371.345 18.8077 li
371.362 18.8077 li
371.377 18.8077 li
371.393 18.8077 li
371.408 18.8077 li
371.424 18.7377 li
371.439 18.7377 li
371.454 18.7377 li
371.469 18.7377 li
371.483 18.7377 li
371.498 18.7377 li
371.513 18.7377 li
371.527 18.7377 li
371.543 18.7377 li
371.557 18.7377 li
371.57 18.7377 li
371.584 18.7377 li
371.598 18.7377 li
371.611 18.7377 li
371.625 18.7377 li
371.638 18.7377 li
371.651 18.7377 li
371.665 18.7377 li
371.678 18.7377 li
371.692 18.7377 li
371.704 18.7377 li
371.717 18.7377 li
371.729 18.7377 li
371.742 18.7377 li
371.755 18.7377 li
371.767 18.7377 li
371.778 18.7377 li
371.79 18.7377 li
371.803 18.7377 li
371.813 18.7377 li
371.826 18.7377 li
371.836 18.7377 li
371.848 18.7377 li
371.859 18.7377 li
371.87 18.7377 li
371.881 18.7377 li
371.891 18.7377 li
371.901 18.7377 li
371.911 18.7377 li
371.922 18.7377 li
371.933 18.7377 li
371.942 18.7377 li
371.952 18.7377 li
371.963 18.7377 li
371.972 18.7377 li
371.983 18.7377 li
371.992 18.7377 li
372.002 18.6667 li
372.011 18.6667 li
372.021 18.6667 li
372.031 18.6667 li
372.04 18.6667 li
372.049 18.6667 li
372.059 18.6667 li
372.068 18.6667 li
372.077 18.6667 li
372.086 18.6667 li
372.095 18.6667 li
372.104 18.6667 li
372.112 18.6667 li
372.121 18.6667 li
372.129 18.6667 li
372.137 18.6667 li
372.145 18.6667 li
372.154 18.6667 li
372.163 18.6667 li
372.17 18.6667 li
372.179 18.6667 li
372.187 18.6667 li
372.195 18.6667 li
372.202 18.6667 li
372.211 18.6667 li
372.218 18.6667 li
372.226 18.6667 li
372.233 18.6667 li
372.241 18.6667 li
372.248 18.6667 li
372.256 18.6667 li
372.263 18.6667 li
372.271 18.6667 li
372.278 18.6667 li
372.285 18.6667 li
372.293 18.6667 li
372.299 18.6667 li
372.308 18.6667 li
372.314 18.6667 li
372.322 18.6667 li
372.329 18.5967 li
372.335 18.5967 li
372.342 18.5967 li
372.349 18.5967 li
372.356 18.5967 li
372.363 18.5967 li
372.37 18.5967 li
372.377 18.5967 li
372.384 18.5967 li
372.39 18.5967 li
372.397 18.5967 li
372.403 18.5967 li
372.409 18.5967 li
372.414 18.5967 li
372.42 18.5967 li
372.426 18.5967 li
372.433 18.5967 li
372.438 18.5967 li
372.444 18.5967 li
372.45 18.5967 li
372.456 18.5967 li
372.462 18.5967 li
372.468 18.5967 li
372.473 18.5967 li
372.479 18.5967 li
372.484 18.5967 li
372.49 18.5967 li
372.496 18.5967 li
372.502 18.5967 li
372.507 18.5967 li
372.512 18.5967 li
372.518 18.5967 li
372.524 18.5967 li
372.529 18.5967 li
372.535 18.5967 li
372.54 18.5967 li
372.545 18.5967 li
372.55 18.5967 li
372.555 18.5967 li
372.559 18.5967 li
372.565 18.5967 li
372.569 18.5967 li
372.574 18.5967 li
372.58 18.5967 li
372.584 18.5967 li
372.589 18.5967 li
372.594 18.5967 li
372.599 18.5967 li
372.603 18.5967 li
372.608 18.5967 li
372.612 18.5967 li
372.617 18.5967 li
372.621 18.5967 li
372.626 18.5967 li
372.63 18.5967 li
372.634 18.5967 li
372.639 18.5967 li
372.643 18.5967 li
372.647 18.5967 li
372.652 18.5967 li
372.656 18.5967 li
372.66 18.5967 li
372.664 18.5967 li
372.668 18.5967 li
372.672 18.5967 li
372.676 18.5967 li
372.679 18.5967 li
372.683 18.5967 li
372.688 18.5967 li
372.692 18.5967 li
372.697 18.5967 li
372.701 18.5967 li
372.705 18.5967 li
372.709 18.5967 li
372.713 18.5967 li
372.716 18.5967 li
372.721 18.5967 li
372.724 18.5967 li
372.727 18.5967 li
372.731 18.5967 li
372.735 18.5967 li
372.738 18.5967 li
372.742 18.5967 li
372.745 18.5967 li
372.749 18.5967 li
372.753 18.5967 li
372.756 18.5967 li
372.759 18.5967 li
372.762 18.5967 li
372.766 18.5967 li
372.769 18.5967 li
372.772 18.5967 li
372.776 18.5967 li
372.779 18.5967 li
372.782 18.5967 li
372.785 18.5967 li
372.788 18.5967 li
372.792 18.5967 li
372.795 18.5967 li
372.798 18.5967 li
372.801 18.5967 li
372.804 18.5967 li
372.807 18.5967 li
372.81 18.5967 li
372.813 18.5967 li
372.816 18.5967 li
372.819 18.5967 li
372.822 18.5967 li
372.825 18.5967 li
372.828 18.5967 li
372.831 18.5967 li
372.834 18.5967 li
372.837 18.5967 li
372.839 18.5967 li
372.842 18.5967 li
372.845 18.5967 li
372.848 18.5967 li
372.851 18.5967 li
372.854 18.5967 li
372.857 18.5967 li
372.859 18.5967 li
372.863 18.5967 li
372.865 18.5967 li
372.868 18.5967 li
372.871 18.5967 li
372.874 18.5967 li
372.877 18.5967 li
372.879 18.5967 li
372.881 18.5967 li
372.884 18.5967 li
372.886 18.5967 li
372.89 18.5967 li
372.892 18.5967 li
372.894 18.5967 li
372.896 18.5967 li
372.899 18.5967 li
372.902 18.5967 li
372.904 18.5967 li
372.906 18.5967 li
372.908 18.5967 li
372.911 18.5967 li
372.913 18.5967 li
372.916 18.5967 li
372.918 18.5967 li
372.92 18.5967 li
372.922 18.5967 li
372.925 18.5967 li
372.928 18.5967 li
372.93 18.5967 li
372.931 18.5967 li
372.934 18.5967 li
372.936 18.5967 li
372.938 18.5967 li
372.94 18.5967 li
372.943 18.5967 li
372.945 18.5967 li
372.947 18.5967 li
372.949 18.5967 li
372.951 18.5967 li
372.953 18.5967 li
372.956 18.5967 li
372.957 18.5967 li
372.959 18.5967 li
372.961 18.5967 li
372.963 18.5967 li
372.965 18.5967 li
372.968 18.5967 li
372.969 18.5967 li
372.97 18.5967 li
372.973 18.5967 li
372.975 18.5967 li
372.977 18.5967 li
372.979 18.5967 li
372.981 18.5967 li
372.983 18.5967 li
372.986 18.5967 li
372.987 18.5967 li
372.989 18.5967 li
372.992 18.5967 li
372.994 18.5967 li
372.995 18.5967 li
372.997 18.5967 li
372.999 18.5967 li
373.001 18.5967 li
373.003 18.5967 li
373.004 18.5967 li
373.006 18.5967 li
373.008 18.5967 li
373.01 18.5967 li
373.013 18.5967 li
373.014 18.5967 li
373.015 18.5967 li
373.017 18.5967 li
373.018 18.5967 li
373.021 18.5967 li
373.022 18.5967 li
373.024 18.5967 li
373.025 18.5967 li
373.027 18.5967 li
373.029 18.5967 li
373.031 18.5967 li
373.032 18.5967 li
373.034 18.5967 li
373.035 18.5967 li
373.037 18.5967 li
373.039 18.5967 li
373.04 18.5967 li
373.042 18.5967 li
373.043 18.5967 li
373.045 18.5967 li
373.047 18.5967 li
373.049 18.5967 li
373.05 18.5967 li
373.052 18.5967 li
373.053 18.5967 li
373.054 18.5967 li
373.056 18.5967 li
373.058 18.5967 li
373.059 18.5967 li
373.061 18.5967 li
373.062 18.5967 li
373.063 18.5967 li
373.064 18.5967 li
373.066 18.5967 li
373.067 18.5967 li
373.069 18.5967 li
373.07 18.5967 li
373.072 18.5967 li
373.073 18.5967 li
373.075 18.5967 li
373.076 18.5967 li
373.078 18.5967 li
373.079 18.5967 li
373.081 18.5967 li
373.082 18.5967 li
373.083 18.5967 li
373.084 18.5967 li
373.086 18.5967 li
373.088 18.5967 li
373.089 18.5967 li
373.09 18.5967 li
373.091 18.5967 li
373.093 18.5967 li
373.094 18.5967 li
373.096 18.5967 li
373.097 18.5967 li
373.099 18.5967 li
373.1 18.5967 li
373.102 18.5967 li
373.104 18.5967 li
373.105 18.5967 li
373.106 18.5967 li
373.107 18.5967 li
373.108 18.5967 li
373.11 18.5967 li
373.111 18.5967 li
373.113 18.5967 li
373.114 18.5967 li
373.115 18.5967 li
373.117 18.5967 li
373.118 18.5967 li
373.119 18.5967 li
373.12 18.5967 li
373.121 18.5967 li
373.123 18.5967 li
373.124 18.5967 li
373.125 18.5967 li
373.127 18.5967 li
373.128 18.5967 li
373.129 18.5967 li
373.13 18.5967 li
373.131 18.5967 li
373.133 18.5967 li
373.134 18.5967 li
373.135 18.5967 li
373.136 18.5967 li
373.137 18.5967 li
373.138 18.5967 li
373.14 18.5967 li
373.141 18.5967 li
373.142 18.5967 li
373.143 18.5967 li
373.144 18.5967 li
373.145 18.5967 li
373.146 18.5967 li
373.147 18.5967 li
373.148 18.5967 li
373.15 18.5967 li
373.151 18.5967 li
373.152 18.5967 li
373.153 18.5967 li
373.154 18.5967 li
373.155 18.5967 li
373.156 18.5967 li
373.157 18.5967 li
373.158 18.5967 li
373.159 18.5967 li
373.16 18.5967 li
373.161 18.5967 li
373.163 18.5967 li
373.165 18.5967 li
373.166 18.5967 li
373.167 18.5967 li
373.168 18.5967 li
373.169 18.5967 li
373.17 18.5967 li
373.171 18.5967 li
373.172 18.5967 li
373.173 18.5967 li
373.174 18.5967 li
373.175 18.5967 li
373.176 18.5967 li
373.177 18.5967 li
373.179 18.5967 li
373.18 18.5967 li
373.181 18.5967 li
373.182 18.5967 li
373.184 18.5967 li
373.185 18.5967 li
373.186 18.5967 li
373.187 18.5967 li
373.188 18.5967 li
373.189 18.5967 li
373.19 18.5967 li
373.191 18.5967 li
373.192 18.5967 li
373.193 18.5967 li
373.194 18.5967 li
373.195 18.5967 li
373.196 18.5967 li
373.197 18.5967 li
373.198 18.5967 li
373.199 18.5967 li
373.2 18.5967 li
373.201 18.5967 li
373.202 18.5967 li
373.203 18.5967 li
373.204 18.5967 li
373.205 18.5967 li
373.207 18.5967 li
373.208 18.5967 li
373.209 18.5967 li
373.21 18.5967 li
373.211 18.5967 li
373.212 18.5967 li
373.213 18.5967 li
373.214 18.5967 li
373.215 18.5967 li
373.216 18.5967 li
373.217 18.5967 li
373.218 18.5967 li
373.219 18.5967 li
373.22 18.5967 li
373.221 18.5967 li
373.222 18.5967 li
373.223 18.5967 li
373.224 18.5967 li
373.225 18.5967 li
373.226 18.5967 li
373.227 18.5967 li
373.228 18.5967 li
373.229 18.5967 li
373.23 18.5967 li
373.231 18.5967 li
373.232 18.5967 li
373.233 18.5967 li
373.234 18.5967 li
373.235 18.5967 li
373.236 18.5967 li
373.237 18.5967 li
373.238 18.5967 li
373.239 18.5967 li
373.24 18.5967 li
373.241 18.5967 li
373.242 18.5967 li
373.243 18.5967 li
373.244 18.5967 li
373.245 18.5967 li
373.246 18.5967 li
373.247 18.5967 li
373.248 18.5967 li
373.249 18.5967 li
373.25 18.5967 li
373.251 18.5967 li
373.252 18.5967 li
373.253 18.5967 li
373.254 18.5967 li
373.255 18.5967 li
373.256 18.5967 li
373.257 18.5967 li
373.258 18.5967 li
373.259 18.5967 li
373.26 18.5967 li
373.261 18.5967 li
373.262 18.5967 li
373.263 18.5967 li
373.264 18.5967 li
373.265 18.5967 li
373.266 18.5967 li
373.267 18.5967 li
373.268 18.5967 li
373.269 18.5967 li
373.27 18.5967 li
373.271 18.5967 li
373.272 18.5967 li
373.273 18.5967 li
373.274 18.5967 li
373.275 18.5967 li
373.276 18.5967 li
373.277 18.5967 li
373.278 18.5967 li
373.279 18.5967 li
373.28 18.5967 li
373.281 18.5967 li
373.282 18.5967 li
373.283 18.5967 li
373.284 18.5967 li
373.285 18.5967 li
373.286 18.5967 li
373.287 18.5967 li
373.288 18.5967 li
373.289 18.5967 li
373.29 18.5967 li
373.291 18.5967 li
373.292 18.5967 li
373.293 18.5967 li
373.294 18.5967 li
373.295 18.5967 li
373.296 18.5967 li
373.297 18.5967 li
373.298 18.5967 li
373.299 18.5967 li
373.3 18.5967 li
373.301 18.5967 li
373.302 18.5967 li
373.303 18.5967 li
373.304 18.5967 li
373.305 18.5967 li
373.306 18.5967 li
373.307 18.5967 li
373.308 18.5967 li
373.309 18.5967 li
373.31 18.5967 li
373.311 18.5967 li
373.312 18.5967 li
373.313 18.5967 li
373.314 18.5967 li
373.315 18.5967 li
373.316 18.5967 li
373.317 18.5967 li
373.318 18.5967 li
373.319 18.5967 li
373.32 18.5967 li
373.321 18.5967 li
373.322 18.5967 li
373.323 18.5967 li
373.324 18.5967 li
373.325 18.5967 li
373.326 18.5967 li
373.327 18.5967 li
373.328 18.5967 li
373.329 18.5967 li
373.33 18.5967 li
373.331 18.5967 li
373.332 18.5967 li
373.333 18.5967 li
373.334 18.5967 li
373.335 18.5967 li
373.336 18.5967 li
373.337 18.5967 li
373.338 18.5967 li
1 /0 /CSD get_res sepcs
1 sep
@
0 lj
93.1428 93.5127 mo
93.1428 99.5127 li
@
149.307 72.3397 mo
149.307 78.3397 li
@
191.219 61.5417 mo
191.219 67.5417 li
@
222.728 55.1897 mo
222.728 61.1897 li
@
246.449 50.7437 mo
246.449 56.7437 li
@
264.518 47.0027 mo
264.518 53.0027 li
@
278.845 43.4737 mo
278.845 49.4737 li
@
290.615 39.8747 mo
290.615 45.8747 li
@
300.415 37.6867 mo
300.415 43.6867 li
@
308.546 34.8637 mo
308.546 40.8637 li
@
315.486 32.8877 mo
315.486 38.8877 li
@
321.347 30.9117 mo
321.347 36.9117 li
@
326.405 29.0057 mo
326.405 35.0057 li
@
330.846 26.9597 mo
330.846 32.9597 li
@
334.709 24.9127 mo
334.709 30.9127 li
@
338.128 23.4307 mo
338.128 29.4307 li
@
341.153 22.5837 mo
341.153 28.5837 li
@
343.854 21.8777 mo
343.854 27.8777 li
@
346.297 21.0307 mo
346.297 27.0307 li
@
348.518 20.5367 mo
348.518 26.5367 li
@
350.539 19.9017 mo
350.539 25.9017 li
@
352.382 19.1957 mo
352.382 25.1957 li
@
354.069 18.7017 mo
354.069 24.7017 li
@
355.63 18.3487 mo
355.63 24.3487 li
@
357.064 17.8557 mo
357.064 23.8557 li
@
358.383 17.8557 mo
358.383 23.8557 li
@
359.597 17.7137 mo
359.597 23.7137 li
@
360.724 17.4317 mo
360.724 23.4317 li
@
361.761 17.2197 mo
361.761 23.2197 li
@
362.716 17.0787 mo
362.716 23.0787 li
@
363.604 16.8667 mo
363.604 22.8667 li
@
364.415 16.7967 mo
364.415 22.7967 li
@
365.16 16.7257 mo
365.16 22.7257 li
@
365.849 16.6557 mo
365.849 22.6557 li
@
366.483 16.6557 mo
366.483 22.6557 li
@
367.057 16.5147 mo
367.057 22.5147 li
@
367.597 16.4437 mo
367.597 22.4437 li
@
368.086 16.4437 mo
368.086 22.4437 li
@
368.534 16.3727 mo
368.534 22.3727 li
@
368.944 16.3027 mo
368.944 22.3027 li
@
369.314 16.3027 mo
369.314 22.3027 li
@
369.658 16.3027 mo
369.658 22.3027 li
@
369.972 16.1607 mo
369.972 22.1607 li
@
370.253 16.1607 mo
370.253 22.1607 li
@
370.508 16.0907 mo
370.508 22.0907 li
@
370.737 15.8087 mo
370.737 21.8087 li
@
370.949 15.8087 mo
370.949 21.8087 li
@
371.14 15.8087 mo
371.14 21.8087 li
@
371.313 15.8087 mo
371.313 21.8087 li
@
371.469 15.7377 mo
371.469 21.7377 li
@
371.612 15.7377 mo
371.612 21.7377 li
@
371.742 15.7377 mo
371.742 21.7377 li
@
371.859 15.7377 mo
371.859 21.7377 li
@
371.963 15.7377 mo
371.963 21.7377 li
@
372.059 15.6677 mo
372.059 21.6677 li
@
372.145 15.6677 mo
372.145 21.6677 li
@
372.226 15.6677 mo
372.226 21.6677 li
@
372.3 15.6677 mo
372.3 21.6677 li
@
372.37 15.5967 mo
372.37 21.5967 li
@
372.433 15.5967 mo
372.433 21.5967 li
@
372.49 15.5967 mo
372.49 21.5967 li
@
372.545 15.5967 mo
372.545 21.5967 li
@
372.594 15.5967 mo
372.594 21.5967 li
@
372.639 15.5967 mo
372.639 21.5967 li
@
372.68 15.5967 mo
372.68 21.5967 li
@
372.72 15.5967 mo
372.72 21.5967 li
@
372.756 15.5967 mo
372.756 21.5967 li
@
372.788 15.5967 mo
372.788 21.5967 li
@
372.819 15.5967 mo
372.819 21.5967 li
@
372.848 15.5967 mo
372.848 21.5967 li
@
372.877 15.5967 mo
372.877 21.5967 li
@
372.901 15.5967 mo
372.901 21.5967 li
@
372.925 15.5967 mo
372.925 21.5967 li
@
372.947 15.5967 mo
372.947 21.5967 li
@
372.967 15.5967 mo
372.967 21.5967 li
@
372.987 15.5967 mo
372.987 21.5967 li
@
373.006 15.5967 mo
373.006 21.5967 li
@
373.024 15.5967 mo
373.024 21.5967 li
@
373.04 15.5967 mo
373.04 21.5967 li
@
373.056 15.5967 mo
373.056 21.5967 li
@
373.07 15.5967 mo
373.07 21.5967 li
@
373.085 15.5967 mo
373.085 21.5967 li
@
373.099 15.5967 mo
373.099 21.5967 li
@
373.111 15.5967 mo
373.111 21.5967 li
@
373.124 15.5967 mo
373.124 21.5967 li
@
373.136 15.5967 mo
373.136 21.5967 li
@
373.147 15.5967 mo
373.147 21.5967 li
@
373.157 15.5967 mo
373.157 21.5967 li
@
373.166 15.5967 mo
373.166 21.5967 li
@
373.175 15.5967 mo
373.175 21.5967 li
@
373.184 15.5967 mo
373.184 21.5967 li
@
373.192 15.5967 mo
373.192 21.5967 li
@
373.201 15.5967 mo
373.201 21.5967 li
@
373.208 15.5967 mo
373.208 21.5967 li
@
373.215 15.5967 mo
373.215 21.5967 li
@
373.222 15.5967 mo
373.222 21.5967 li
@
373.229 15.5967 mo
373.229 21.5967 li
@
373.235 15.5967 mo
373.235 21.5967 li
@
373.241 15.5967 mo
373.241 21.5967 li
@
373.247 15.5967 mo
373.247 21.5967 li
@
373.252 15.5967 mo
373.252 21.5967 li
@
373.258 15.5967 mo
373.258 21.5967 li
@
373.263 15.5967 mo
373.263 21.5967 li
@
373.268 15.5967 mo
373.268 21.5967 li
@
373.272 15.5967 mo
373.272 21.5967 li
@
373.276 15.5967 mo
373.276 21.5967 li
@
373.279 15.5967 mo
373.279 21.5967 li
@
373.283 15.5967 mo
373.283 21.5967 li
@
373.286 15.5967 mo
373.286 21.5967 li
@
373.29 15.5967 mo
373.29 21.5967 li
@
373.293 15.5967 mo
373.293 21.5967 li
@
373.296 15.5967 mo
373.296 21.5967 li
@
373.299 15.5967 mo
373.299 21.5967 li
@
373.301 15.5967 mo
373.301 21.5967 li
@
373.304 15.5967 mo
373.304 21.5967 li
@
373.306 15.5967 mo
373.306 21.5967 li
@
373.308 15.5967 mo
373.308 21.5967 li
@
373.31 15.5967 mo
373.31 21.5967 li
@
373.312 15.5967 mo
373.312 21.5967 li
@
373.314 15.5967 mo
373.314 21.5967 li
@
373.316 15.5967 mo
373.316 21.5967 li
@
373.317 15.5967 mo
373.317 21.5967 li
@
373.319 15.5967 mo
373.319 21.5967 li
@
373.32 15.5967 mo
373.32 21.5967 li
@
373.321 15.5967 mo
373.321 21.5967 li
@
373.322 15.5967 mo
373.322 21.5967 li
@
373.324 15.5967 mo
373.324 21.5967 li
@
373.324 15.5967 mo
373.324 21.5967 li
@
373.326 15.5967 mo
373.326 21.5967 li
@
373.327 15.5967 mo
373.327 21.5967 li
@
373.327 15.5967 mo
373.327 21.5967 li
@
373.328 15.5967 mo
373.328 21.5967 li
@
373.329 15.5967 mo
373.329 21.5967 li
@
373.329 15.5967 mo
373.329 21.5967 li
@
373.331 15.5967 mo
373.331 21.5967 li
@
373.331 15.5967 mo
373.331 21.5967 li
@
373.332 15.5967 mo
373.332 21.5967 li
@
373.332 15.5967 mo
373.332 21.5967 li
@
373.333 15.5967 mo
373.333 21.5967 li
@
373.333 15.5967 mo
373.333 21.5967 li
@
373.334 15.5967 mo
373.334 21.5967 li
@
373.334 15.5967 mo
373.334 21.5967 li
@
373.334 15.5967 mo
373.334 21.5967 li
@
373.334 15.5967 mo
373.334 21.5967 li
@
373.335 15.5967 mo
373.335 21.5967 li
@
373.335 15.5967 mo
373.335 21.5967 li
@
373.335 15.5967 mo
373.335 21.5967 li
@
373.335 15.5967 mo
373.335 21.5967 li
@
373.336 15.5967 mo
373.336 21.5967 li
@
373.336 15.5967 mo
373.336 21.5967 li
@
373.336 15.5967 mo
373.336 21.5967 li
@
373.336 15.5967 mo
373.336 21.5967 li
@
373.336 15.5967 mo
373.336 21.5967 li
@
373.336 15.5967 mo
373.336 21.5967 li
@
373.337 15.5967 mo
373.337 21.5967 li
@
373.337 15.5967 mo
373.337 21.5967 li
@
373.337 15.5967 mo
373.337 21.5967 li
@
373.337 15.5967 mo
373.337 21.5967 li
@
373.337 15.5967 mo
373.337 21.5967 li
@
373.337 15.5967 mo
373.337 21.5967 li
@
373.337 15.5967 mo
373.337 21.5967 li
@
373.337 15.5967 mo
373.337 21.5967 li
@
373.337 15.5967 mo
373.337 21.5967 li
@
373.337 15.5967 mo
373.337 21.5967 li
@
373.337 15.5967 mo
373.337 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
373.338 15.5967 mo
373.338 21.5967 li
@
1 lj
41.798 120.848 mo
41.9519 120.508 li
41.9519 119.238 li
42.8894 118.462 li
43.7999 117.897 li
45.9659 116.98 li
45.9659 115.992 li
45.9659 115.074 li
45.9659 114.439 li
45.9659 113.24 li
48.7671 112.463 li
48.7671 111.545 li
49.8956 110.558 li
50.6257 109.569 li
51.3394 109.217 li
51.3394 108.087 li
52.3804 107.24 li
53.0554 106.958 li
53.0554 105.97 li
53.3878 104.841 li
54.0417 104.347 li
54.998 103.852 li
56.2296 103.076 li
57.7042 102.441 li
58.2749 101.665 li
59.9276 101.383 li
61.4976 100.747 li
62.7491 100.394 li
62.7491 99.5467 li
64.187 99.1937 li
65.3374 98.3467 li
65.7862 97.7117 li
66.2284 97.2187 li
66.6644 96.3707 li
67.0948 95.3827 li
68.1448 94.3957 li
68.555 93.3367 li
68.9601 92.9127 li
71.2874 92.2787 li
71.8429 91.5007 li
74.4831 91.0787 li
74.9847 90.8667 li
76.6042 89.9487 li
77.8417 89.6667 li
78.5909 89.5257 li
79.8956 88.4667 li
81.4214 87.8317 li
82.223 86.9847 li
82.3542 86.5607 li
82.7464 86.2087 li
85.5964 85.6437 li
86.5308 85.0787 li
87.1008 84.2327 li
88.6428 83.4557 li
90.3178 82.6087 li
90.7238 82.2557 li
92.1968 81.6207 li
93.4218 81.2677 li
94.3318 80.5627 li
95.3898 80.2087 li
96.9968 79.6447 li
97.6488 79.2217 li
99.0688 78.7977 li
99.9818 78.7267 li
101.588 78.1627 li
102.981 77.8097 li
103.854 77.3157 li
104.897 76.7507 li
105.843 76.2577 li
106.398 75.4807 li
107.36 74.9167 li
108.694 74.4927 li
109.754 73.7167 li
111.15 73.5757 li
112.133 73.1517 li
113.38 72.8697 li
114.057 72.1637 li
115 71.5287 li
115.734 71.0347 li
116.936 70.4697 li
117.627 69.3407 li
118.718 69.1997 li
119.412 69.1287 li
120.327 68.8467 li
121.519 68.3527 li
122.154 67.9997 li
122.993 67.5767 li
124.055 67.3647 li
124.778 67.1537 li
125.518 66.6587 li
126.272 66.0237 li
127.136 65.5997 li
128.374 65.2477 li
129.418 64.8237 li
130.143 64.7537 li
131.297 64.3307 li
132.331 63.7657 li
133.331 63.4827 li
134.55 63.0597 li
135.313 62.6357 li
136.366 62.2837 li
137.452 62.0007 li
138.348 61.5067 li
139.304 61.0127 li
140.357 60.5897 li
141.457 60.5897 li
142.344 59.9537 li
143.32 59.3897 li
144.23 58.8957 li
145.097 58.5427 li
145.87 58.0487 li
147.297 57.6957 li
147.938 57.3427 li
148.773 57.1307 li
149.586 56.4957 li
150.649 55.9307 li
151.444 55.7197 li
152.39 55.2257 li
153.143 55.0137 li
154.107 54.6607 li
154.847 54.2377 li
155.734 54.0967 li
156.599 53.8847 li
157.463 53.6017 li
158.234 53.3907 li
159.181 52.9667 li
160.21 52.4017 li
161.239 52.1197 li
162.172 51.6967 li
163.018 51.2737 li
163.765 50.9907 li
164.503 50.8497 li
165.476 50.4967 li
166.538 50.2147 li
167.668 49.9327 li
168.44 49.4377 li
169.193 49.0857 li
169.896 48.8027 li
170.914 48.1677 li
171.718 47.8147 li
172.657 47.4617 li
173.562 47.3917 li
174.273 47.1096 li
175.009 46.8267 li
175.856 46.8267 li
176.564 46.5447 li
177.491 46.5447 li
178.503 46.3327 li
179.358 46.0507 li
180.231 45.6977 li
181.058 45.4867 li
181.896 45.4147 li
182.702 44.8517 li
183.561 44.2867 li
184.458 44.2157 li
185.311 43.8627 li
186.233 43.8627 li
186.945 43.7217 li
187.733 43.5107 li
188.449 43.5107 li
189.087 43.2977 li
189.995 43.1567 li
190.72 42.9457 li
191.465 42.7337 li
192.343 42.4517 li
193.093 42.2397 li
193.991 41.8867 li
194.843 41.6047 li
195.683 41.3227 li
196.476 41.2517 li
197.124 41.1807 li
197.823 40.8987 li
198.727 40.8987 li
199.438 40.7577 li
200.233 40.6167 li
201.004 40.4047 li
201.693 40.2637 li
202.456 40.1227 li
203.22 39.6987 li
203.974 39.3467 li
204.626 39.2057 li
205.381 39.1337 li
206.027 38.6407 li
206.731 38.2877 li
207.355 38.0757 li
208.043 38.0757 li
208.774 37.7937 li
209.492 37.7937 li
210.238 37.7227 li
210.909 37.6517 li
211.658 37.5817 li
212.405 37.5107 li
213.111 37.3697 li
213.808 37.2997 li
214.517 37.2287 li
215.196 37.0167 li
215.902 36.7346 li
216.633 36.5237 li
217.22 36.4527 li
217.922 36.4527 li
218.632 36.3817 li
219.24 36.0997 li
219.917 35.8877 li
220.536 35.7467 li
221.14 35.6757 li
221.73 35.4647 li
222.415 35.2527 li
222.996 34.8997 li
223.645 34.8997 li
224.246 34.7587 li
224.779 34.6877 li
225.414 34.6177 li
226.047 34.4057 li
226.64 34.4057 li
227.204 34.4057 li
227.806 34.2647 li
228.426 34.1237 li
229.114 34.1237 li
229.697 33.9827 li
230.27 33.9117 li
230.863 33.7007 li
231.437 33.4877 li
231.987 33.2767 li
232.557 33.0647 li
233.141 32.9947 li
233.691 32.9237 li
234.277 32.7117 li
234.818 32.5007 li
235.418 32.3587 li
235.982 32.2177 li
236.593 32.0767 li
237.158 32.0057 li
237.761 31.8647 li
238.302 31.7237 li
238.948 31.6537 li
239.518 31.3707 li
240.029 31.2297 li
240.617 31.1587 li
241.163 31.1587 li
241.708 31.0177 li
242.269 31.0177 li
242.815 31.0177 li
243.401 30.9477 li
243.973 30.8057 li
244.565 30.7357 li
245.129 30.4537 li
245.676 30.4537 li
246.204 30.4537 li
246.736 30.3127 li
247.265 30.2417 li
247.76 30.0297 li
248.252 30.0297 li
248.821 29.8887 li
249.407 29.6767 li
249.931 29.6767 li
250.433 29.6767 li
250.964 29.5357 li
251.473 29.2537 li
252.002 28.9717 li
252.539 28.9717 li
253.093 28.8307 li
253.616 28.7597 li
254.084 28.6887 li
254.588 28.5477 li
255.101 28.5477 li
255.578 28.5477 li
256.11 28.4067 li
256.59 28.4067 li
257.07 28.3357 li
257.527 28.2657 li
258.035 28.1947 li
258.497 28.1247 li
258.968 27.9127 li
259.435 27.9127 li
259.943 27.9127 li
260.418 27.7007 li
260.884 27.5597 li
261.365 27.5597 li
261.831 27.5597 li
262.304 27.5597 li
262.774 27.4897 li
263.218 27.4187 li
263.676 27.3487 li
264.112 27.2067 li
264.554 27.1357 li
265.028 27.0657 li
265.47 27.0657 li
265.93 27.0657 li
266.401 26.9947 li
266.84 26.9247 li
267.296 26.7837 li
267.754 26.7837 li
268.177 26.7127 li
268.604 26.6427 li
269.029 26.6427 li
269.443 26.6427 li
269.859 26.6427 li
270.296 26.5717 li
270.71 26.5717 li
271.149 26.5007 li
271.559 26.5007 li
272.006 26.4307 li
272.408 26.4307 li
272.818 26.2897 li
273.244 26.2897 li
273.661 26.2897 li
274.061 26.2897 li
274.465 26.1487 li
274.869 26.1487 li
275.256 26.0777 li
275.653 26.0777 li
276.051 26.0777 li
276.476 26.0777 li
276.885 26.0777 li
277.274 26.0777 li
277.663 26.0077 li
278.056 25.9367 li
278.449 25.9367 li
278.825 25.9367 li
279.227 25.9367 li
279.626 25.9367 li
280.015 25.7947 li
280.409 25.5837 li
280.786 25.3017 li
281.169 25.2307 li
281.544 25.1597 li
281.92 25.0187 li
282.299 25.0187 li
282.694 25.0187 li
283.08 25.0187 li
283.44 24.8777 li
283.823 24.7367 li
284.192 24.6667 li
284.563 24.5957 li
284.929 24.5247 li
285.294 24.4537 li
285.659 24.4537 li
286.017 24.4537 li
286.384 24.4537 li
286.747 24.2427 li
287.122 24.2427 li
287.481 24.2427 li
287.836 24.1717 li
288.167 24.1717 li
288.519 24.1717 li
288.852 24.1717 li
289.202 24.1717 li
289.547 24.1717 li
289.88 24.1717 li
290.242 24.1717 li
290.588 24.1717 li
290.938 24.1717 li
291.285 24.1017 li
291.633 23.9607 li
291.973 23.9607 li
292.324 23.8897 li
292.661 23.8187 li
292.993 23.7487 li
293.325 23.7487 li
293.651 23.7487 li
293.994 23.7487 li
294.317 23.7487 li
294.629 23.6077 li
294.954 23.6077 li
295.279 23.6077 li
295.611 23.6077 li
295.924 23.5367 li
296.235 23.5367 li
296.547 23.5367 li
296.856 23.5367 li
297.176 23.5367 li
297.491 23.5367 li
297.805 23.4667 li
298.109 23.4667 li
298.409 23.4667 li
298.708 23.4667 li
299.018 23.4667 li
299.325 23.3957 li
299.627 23.3957 li
299.926 23.3957 li
300.244 23.3257 li
300.538 23.3257 li
300.846 23.2547 li
301.153 23.2547 li
301.451 23.2547 li
301.754 23.2547 li
302.052 23.2547 li
302.354 23.2547 li
302.656 23.2547 li
302.959 23.1127 li
303.245 23.1127 li
303.542 23.0427 li
303.83 23.0427 li
304.102 23.0427 li
304.395 23.0427 li
304.68 22.9717 li
304.973 22.9017 li
305.249 22.9017 li
305.531 22.8307 li
305.809 22.8307 li
306.086 22.6897 li
306.36 22.6897 li
306.639 22.6897 li
306.908 22.6897 li
307.19 22.6197 li
307.46 22.5487 li
307.72 22.5487 li
307.988 22.5487 li
308.266 22.5487 li
308.534 22.4787 li
308.803 22.4787 li
309.07 22.4077 li
309.334 22.3367 li
309.605 22.3367 li
309.874 22.3367 li
310.141 22.2667 li
310.403 22.1257 li
310.677 22.0547 li
310.946 22.0547 li
311.205 21.9137 li
311.48 21.9137 li
311.747 21.9137 li
312.004 21.8437 li
312.253 21.8437 li
312.506 21.8437 li
312.762 21.8437 li
313.011 21.8437 li
313.266 21.7727 li
313.527 21.7727 li
313.769 21.7727 li
314.015 21.7727 li
314.262 21.7727 li
314.506 21.7727 li
314.764 21.7727 li
315 21.7017 li
315.251 21.7017 li
315.501 21.7017 li
315.749 21.7017 li
315.994 21.7017 li
316.229 21.7017 li
316.475 21.7017 li
316.714 21.6307 li
316.953 21.6307 li
317.191 21.6307 li
317.434 21.6307 li
317.662 21.6307 li
317.897 21.6307 li
318.134 21.6307 li
318.354 21.6307 li
318.58 21.6307 li
318.811 21.6307 li
319.041 21.6307 li
319.27 21.6307 li
319.495 21.6307 li
319.72 21.4197 li
319.947 21.3487 li
320.174 21.3487 li
320.39 21.3487 li
320.616 21.3487 li
320.845 21.3487 li
321.075 21.3487 li
321.291 21.3487 li
321.51 21.2787 li
321.729 21.2787 li
321.947 21.2787 li
322.161 21.2787 li
322.372 21.2787 li
322.589 21.2787 li
322.806 21.2787 li
323.02 21.2787 li
323.231 21.2787 li
323.448 21.2077 li
323.668 21.2077 li
323.879 21.2077 li
324.087 21.2077 li
324.289 21.2077 li
324.499 21.2077 li
324.708 21.2077 li
324.917 21.2077 li
325.127 21.1377 li
325.332 21.1377 li
325.536 21.1377 li
325.74 21.1377 li
325.943 21.1377 li
326.139 21.1377 li
326.341 21.1377 li
326.54 21.1377 li
326.736 21.1377 li
326.936 21.1377 li
327.137 21.0667 li
327.334 20.9957 li
327.535 20.9257 li
327.732 20.8547 li
327.931 20.8547 li
328.131 20.8547 li
328.331 20.8547 li
328.529 20.8547 li
328.725 20.8547 li
328.927 20.7847 li
329.122 20.7847 li
329.316 20.7847 li
329.512 20.7847 li
329.702 20.7847 li
329.893 20.7847 li
330.083 20.7847 li
330.274 20.7847 li
330.468 20.7847 li
330.654 20.7847 li
330.839 20.7847 li
331.025 20.7847 li
331.211 20.7847 li
331.393 20.7137 li
331.579 20.7137 li
331.76 20.7137 li
331.94 20.7137 li
332.124 20.7137 li
332.304 20.7137 li
332.484 20.7137 li
332.664 20.7137 li
332.841 20.6437 li
333.021 20.6437 li
333.202 20.6437 li
333.377 20.6437 li
333.551 20.5727 li
333.727 20.5027 li
333.911 20.5027 li
334.084 20.5027 li
334.262 20.4317 li
334.433 20.4317 li
334.607 20.4317 li
334.784 20.4317 li
334.96 20.4317 li
335.131 20.4317 li
335.306 20.4317 li
335.474 20.3617 li
335.642 20.3617 li
335.813 20.3617 li
335.982 20.3617 li
336.154 20.3617 li
336.318 20.3617 li
336.488 20.3617 li
336.655 20.3617 li
336.819 20.3617 li
336.985 20.3617 li
337.15 20.3617 li
337.314 20.2897 li
337.474 20.2897 li
337.639 20.2197 li
337.802 20.1487 li
337.967 20.1487 li
338.125 20.1487 li
338.284 20.0787 li
338.445 20.0787 li
338.606 20.0787 li
338.767 20.0787 li
338.926 20.0787 li
339.08 20.0787 li
339.238 20.0787 li
339.397 20.0787 li
339.559 20.0787 li
339.716 20.0077 li
339.874 19.8667 li
340.032 19.8667 li
340.188 19.8667 li
340.341 19.8667 li
340.495 19.8667 li
340.654 19.8667 li
340.807 19.8667 li
340.961 19.7967 li
341.114 19.7967 li
341.265 19.7267 li
341.42 19.7267 li
341.568 19.7267 li
341.718 19.7267 li
341.866 19.7267 li
342.019 19.7267 li
342.172 19.7267 li
342.322 19.7267 li
342.468 19.7267 li
342.613 19.7267 li
342.754 19.7267 li
342.9 19.7267 li
343.045 19.7267 li
343.19 19.7267 li
343.337 19.6557 li
343.486 19.6557 li
343.63 19.6557 li
343.775 19.6557 li
343.917 19.6557 li
344.063 19.6557 li
344.206 19.6557 li
344.35 19.6557 li
344.489 19.6557 li
344.635 19.6557 li
344.775 19.6557 li
344.915 19.6557 li
345.057 19.6557 li
345.195 19.6557 li
345.334 19.6557 li
345.471 19.6557 li
345.607 19.6557 li
345.744 19.5847 li
345.884 19.5847 li
346.022 19.5137 li
346.16 19.5137 li
346.297 19.5137 li
346.431 19.5137 li
346.569 19.5137 li
346.703 19.5137 li
346.835 19.5137 li
346.97 19.5137 li
347.102 19.5137 li
347.236 19.5137 li
347.364 19.5137 li
347.5 19.5137 li
347.633 19.5137 li
347.762 19.5137 li
347.892 19.5137 li
348.018 19.5137 li
348.149 19.5137 li
348.276 19.5137 li
348.401 19.5137 li
348.531 19.5137 li
348.658 19.5137 li
348.787 19.5137 li
348.914 19.5137 li
349.04 19.5137 li
349.167 19.5137 li
349.294 19.5137 li
349.418 19.5137 li
349.543 19.5137 li
349.67 19.5137 li
349.793 19.5137 li
349.918 19.5137 li
350.042 19.5137 li
350.161 19.5137 li
350.282 19.4437 li
350.404 19.4437 li
350.527 19.4437 li
350.65 19.4437 li
350.771 19.4437 li
350.895 19.4437 li
351.017 19.4437 li
351.133 19.4437 li
351.249 19.3727 li
351.367 19.3727 li
351.483 19.3727 li
351.602 19.3727 li
351.718 19.3027 li
351.833 19.3027 li
351.949 19.3027 li
352.063 19.3027 li
352.178 19.3027 li
352.293 19.3027 li
352.41 19.3027 li
352.522 19.3027 li
352.636 19.3027 li
352.751 19.3027 li
352.864 19.3027 li
352.976 19.3027 li
353.09 19.3027 li
353.199 19.3027 li
353.315 19.3027 li
353.424 19.3027 li
353.534 19.3027 li
353.644 19.3027 li
353.749 19.3027 li
353.859 19.3027 li
353.969 19.3027 li
354.078 19.3027 li
354.187 19.3027 li
354.293 19.3027 li
354.404 19.3027 li
354.51 19.3027 li
354.616 19.2317 li
354.722 19.2317 li
354.829 19.2317 li
354.931 19.2317 li
355.036 19.2317 li
355.14 19.2317 li
355.243 19.2317 li
355.343 19.2317 li
355.444 19.2317 li
355.547 19.2317 li
355.648 19.2317 li
355.747 19.2317 li
355.847 19.2317 li
355.947 19.2317 li
356.049 19.2317 li
356.15 19.2317 li
356.25 19.2317 li
356.352 19.2317 li
356.45 19.2317 li
356.549 19.2317 li
356.648 19.2317 li
356.748 19.2317 li
356.846 19.2317 li
356.941 19.2317 li
357.034 19.2317 li
357.132 19.2317 li
357.229 19.2317 li
357.327 19.2317 li
357.424 19.2317 li
357.518 19.0907 li
357.612 19.0907 li
357.707 19.0907 li
357.801 19.0907 li
357.893 19.0907 li
357.986 19.0907 li
358.081 19.0907 li
358.174 19.0907 li
358.266 19.0907 li
358.357 19.0907 li
358.449 19.0907 li
358.54 19.0907 li
358.629 19.0907 li
358.719 19.0907 li
358.81 19.0907 li
358.9 19.0907 li
358.986 19.0907 li
359.074 19.0907 li
359.164 19.0907 li
359.252 19.0907 li
359.338 19.0907 li
359.426 19.0907 li
359.512 19.0907 li
359.599 19.0907 li
359.685 19.0907 li
359.773 19.0907 li
359.861 19.0907 li
359.947 19.0907 li
360.033 19.0907 li
360.118 19.0907 li
360.201 19.0907 li
360.283 19.0907 li
360.368 19.0907 li
360.45 19.0907 li
360.533 19.0907 li
360.617 19.0907 li
360.699 19.0907 li
360.781 19.0907 li
360.861 19.0907 li
360.943 19.0907 li
361.023 19.0907 li
361.102 19.0907 li
361.183 19.0907 li
361.26 19.0907 li
361.341 19.0907 li
361.42 19.0907 li
361.499 19.0907 li
361.575 19.0907 li
361.653 19.0907 li
361.729 19.0907 li
361.806 19.0907 li
361.884 19.0907 li
361.959 19.0907 li
362.035 19.0907 li
362.108 19.0907 li
362.18 19.0907 li
362.255 19.0907 li
362.329 19.0907 li
362.403 19.0907 li
362.478 19.0907 li
362.55 19.0907 li
362.621 19.0907 li
362.693 19.0907 li
362.763 19.0907 li
362.836 19.0907 li
362.908 19.0907 li
362.977 19.0907 li
363.047 19.0907 li
363.118 19.0907 li
363.187 19.0907 li
363.259 19.0907 li
363.328 19.0907 li
363.397 19.0907 li
363.466 19.0907 li
363.536 19.0907 li
363.602 19.0907 li
363.671 19.0907 li
363.737 19.0907 li
363.805 19.0907 li
363.872 19.0907 li
363.94 19.0907 li
364.004 19.0907 li
364.069 19.0207 li
364.132 19.0207 li
364.198 19.0207 li
364.261 19.0207 li
364.327 19.0207 li
364.391 19.0207 li
364.456 19.0207 li
364.519 19.0207 li
364.583 19.0207 li
364.647 19.0207 li
364.708 19.0207 li
364.771 19.0207 li
364.831 19.0207 li
364.892 19.0207 li
364.952 19.0207 li
365.012 19.0207 li
365.073 19.0207 li
365.132 19.0207 li
365.192 19.0207 li
365.252 19.0207 li
365.311 18.9497 li
365.369 18.9497 li
365.428 18.9497 li
365.486 18.9497 li
365.542 18.9497 li
365.599 18.9497 li
365.658 18.9497 li
365.717 18.9497 li
365.773 18.9497 li
365.829 18.9497 li
365.884 18.9497 li
365.937 18.9497 li
365.991 18.9497 li
366.046 18.9497 li
366.1 18.9497 li
366.155 18.9497 li
366.21 18.8787 li
366.261 18.8787 li
366.317 18.8787 li
366.37 18.7377 li
366.422 18.7377 li
366.474 18.7377 li
366.527 18.7377 li
366.578 18.7377 li
366.629 18.7377 li
366.682 18.7377 li
366.733 18.7377 li
366.783 18.7377 li
366.833 18.7377 li
366.884 18.7377 li
366.934 18.7377 li
366.984 18.7377 li
367.034 18.7377 li
367.081 18.7377 li
367.13 18.7377 li
367.177 18.6667 li
367.226 18.6667 li
367.274 18.6667 li
367.322 18.6667 li
367.367 18.6667 li
367.414 18.6667 li
367.461 18.6667 li
367.508 18.6667 li
367.555 18.6667 li
367.601 18.6667 li
367.645 18.5967 li
367.689 18.5967 li
367.733 18.5967 li
367.778 18.5967 li
367.823 18.5967 li
367.867 18.5967 li
367.908 18.5967 li
367.953 18.5967 li
367.993 18.5967 li
368.036 18.5967 li
368.077 18.5967 li
368.12 18.5967 li
368.161 18.5967 li
368.202 18.5967 li
368.243 18.5967 li
368.285 18.5967 li
368.326 18.5967 li
368.365 18.5967 li
368.405 18.5967 li
368.445 18.5967 li
368.485 18.5967 li
368.523 18.5967 li
368.562 18.5967 li
368.6 18.5967 li
368.638 18.5967 li
368.677 18.5967 li
368.716 18.5967 li
368.755 18.5967 li
368.792 18.5967 li
368.83 18.5967 li
368.867 18.5967 li
368.905 18.5967 li
368.942 18.5967 li
368.977 18.5967 li
369.013 18.5967 li
369.049 18.5967 li
369.085 18.5967 li
369.119 18.5967 li
369.155 18.5967 li
369.19 18.5967 li
369.225 18.5967 li
369.26 18.5967 li
369.294 18.5967 li
369.329 18.5967 li
369.36 18.5967 li
369.394 18.5967 li
369.427 18.5967 li
369.461 18.5967 li
369.493 18.5967 li
369.527 18.5967 li
369.559 18.5967 li
369.59 18.5967 li
369.623 18.5967 li
369.655 18.5967 li
369.688 18.5967 li
369.719 18.5967 li
369.752 18.5967 li
369.782 18.5967 li
369.813 18.5967 li
369.843 18.5967 li
369.873 18.5967 li
369.903 18.5967 li
369.933 18.5967 li
369.962 18.5967 li
369.99 18.5967 li
370.019 18.5967 li
370.048 18.5967 li
370.076 18.5967 li
370.104 18.5967 li
370.132 18.5967 li
370.161 18.5967 li
370.188 18.5967 li
370.215 18.5967 li
370.243 18.5967 li
370.27 18.5967 li
370.297 18.5967 li
370.323 18.5967 li
370.35 18.5967 li
370.377 18.5967 li
370.403 18.5967 li
370.429 18.5967 li
370.455 18.5967 li
370.48 18.5967 li
370.506 18.5967 li
370.532 18.5967 li
370.556 18.5967 li
370.581 18.5967 li
370.606 18.5967 li
370.631 18.5967 li
370.655 18.5967 li
370.679 18.5967 li
370.704 18.5967 li
370.727 18.5967 li
370.751 18.5967 li
370.774 18.5967 li
370.797 18.5967 li
370.819 18.5967 li
370.842 18.5967 li
370.865 18.5967 li
370.887 18.5967 li
370.909 18.5967 li
370.931 18.5967 li
370.952 18.5967 li
370.974 18.5967 li
370.995 18.5967 li
371.016 18.5967 li
371.038 18.5967 li
371.059 18.5967 li
371.081 18.5967 li
371.102 18.5967 li
371.121 18.5967 li
371.141 18.5967 li
371.161 18.5967 li
371.182 18.5967 li
371.201 18.5967 li
371.22 18.5967 li
371.24 18.5967 li
371.259 18.5967 li
371.277 18.5967 li
371.295 18.5967 li
371.315 18.5967 li
371.333 18.5967 li
371.352 18.5967 li
371.372 18.5967 li
371.39 18.5967 li
371.408 18.5967 li
371.426 18.5967 li
371.443 18.5967 li
371.461 18.5967 li
371.479 18.5967 li
371.497 18.5967 li
371.515 18.5967 li
371.533 18.5967 li
371.55 18.5967 li
371.568 18.5967 li
371.584 18.5967 li
371.602 18.5967 li
371.618 18.5967 li
371.634 18.5967 li
371.649 18.5967 li
371.666 18.5967 li
371.682 18.5967 li
371.699 18.5967 li
371.713 18.5967 li
371.729 18.5967 li
371.744 18.5967 li
371.76 18.5967 li
371.776 18.5967 li
371.791 18.5967 li
371.806 18.5967 li
371.822 18.5967 li
371.838 18.5967 li
371.852 18.5967 li
371.867 18.5967 li
371.881 18.5967 li
371.895 18.5967 li
371.909 18.5967 li
371.922 18.5967 li
371.936 18.5967 li
371.951 18.5967 li
371.963 18.5967 li
371.977 18.5967 li
371.99 18.5967 li
372.003 18.5967 li
372.017 18.5967 li
372.029 18.5967 li
372.042 18.5967 li
372.055 18.5967 li
372.068 18.5967 li
372.079 18.5967 li
372.092 18.5967 li
372.104 18.5967 li
372.117 18.5967 li
372.128 18.5967 li
372.141 18.5967 li
372.154 18.5967 li
372.165 18.5967 li
372.176 18.5967 li
372.188 18.5967 li
372.199 18.5967 li
372.211 18.5967 li
372.222 18.5967 li
372.233 18.5967 li
372.245 18.5967 li
372.256 18.5967 li
372.267 18.5967 li
372.277 18.5967 li
372.288 18.5967 li
372.298 18.5967 li
372.308 18.5967 li
372.32 18.5967 li
372.329 18.5967 li
372.34 18.5967 li
372.35 18.5967 li
372.361 18.5967 li
372.37 18.5967 li
372.38 18.5967 li
372.391 18.5967 li
372.4 18.5967 li
372.409 18.5967 li
372.419 18.5967 li
372.428 18.5967 li
372.438 18.5967 li
372.447 18.5967 li
372.456 18.5967 li
372.465 18.5967 li
372.473 18.5967 li
372.482 18.5967 li
372.49 18.5967 li
372.5 18.5967 li
372.507 18.5967 li
372.516 18.5967 li
372.524 18.5967 li
372.533 18.5967 li
372.542 18.5967 li
372.55 18.5967 li
372.558 18.5967 li
372.566 18.5967 li
372.574 18.5967 li
372.582 18.5967 li
372.59 18.5967 li
372.598 18.5967 li
372.605 18.5967 li
372.613 18.5967 li
372.62 18.5967 li
372.628 18.5967 li
372.635 18.5967 li
372.643 18.5967 li
372.65 18.5967 li
372.657 18.5967 li
372.665 18.5967 li
372.672 18.5967 li
372.679 18.5967 li
372.686 18.5967 li
372.693 18.5967 li
372.7 18.5967 li
372.706 18.5967 li
372.713 18.5967 li
372.72 18.5967 li
372.727 18.5967 li
372.733 18.5967 li
372.74 18.5967 li
372.746 18.5967 li
372.752 18.5967 li
372.759 18.5967 li
372.765 18.5967 li
372.77 18.5967 li
372.776 18.5967 li
372.783 18.5967 li
372.789 18.5967 li
372.795 18.5967 li
372.8 18.5967 li
372.806 18.5967 li
372.812 18.5967 li
372.818 18.5967 li
372.823 18.5967 li
372.829 18.5967 li
372.834 18.5967 li
372.84 18.5967 li
372.845 18.5967 li
372.851 18.5967 li
372.856 18.5967 li
372.861 18.5967 li
372.866 18.5967 li
372.871 18.5967 li
372.875 18.5967 li
372.88 18.5967 li
372.885 18.5967 li
372.89 18.5967 li
372.895 18.5967 li
372.899 18.5967 li
372.904 18.5967 li
372.909 18.5967 li
372.913 18.5967 li
372.918 18.5967 li
372.922 18.5967 li
372.926 18.5967 li
372.931 18.5967 li
372.935 18.5967 li
372.94 18.5967 li
372.943 18.5967 li
372.948 18.5967 li
372.952 18.5967 li
372.957 18.5967 li
372.961 18.5967 li
372.965 18.5967 li
372.969 18.5967 li
372.973 18.5967 li
372.977 18.5967 li
372.98 18.5967 li
372.984 18.5967 li
372.988 18.5967 li
372.992 18.5967 li
372.995 18.5967 li
372.999 18.5967 li
373.003 18.5967 li
373.006 18.5967 li
373.01 18.5967 li
373.014 18.5967 li
373.017 18.5967 li
373.021 18.5967 li
373.024 18.5967 li
373.027 18.5967 li
373.031 18.5967 li
373.034 18.5967 li
373.037 18.5967 li
373.04 18.5967 li
373.044 18.5967 li
373.047 18.5967 li
373.051 18.5967 li
373.054 18.5967 li
373.057 18.5967 li
373.06 18.5967 li
373.063 18.5967 li
373.067 18.5967 li
373.069 18.5967 li
373.072 18.5967 li
373.075 18.5967 li
373.078 18.5967 li
373.08 18.5967 li
373.082 18.5967 li
373.085 18.5967 li
373.088 18.5967 li
373.09 18.5967 li
373.093 18.5967 li
373.096 18.5967 li
373.098 18.5967 li
373.1 18.5967 li
373.103 18.5967 li
373.106 18.5967 li
373.109 18.5967 li
373.111 18.5967 li
373.114 18.5967 li
373.116 18.5967 li
373.119 18.5967 li
373.121 18.5967 li
373.124 18.5967 li
373.127 18.5967 li
373.129 18.5967 li
373.131 18.5967 li
373.133 18.5967 li
373.136 18.5967 li
373.138 18.5967 li
373.14 18.5967 li
373.142 18.5967 li
373.145 18.5967 li
373.146 18.5967 li
373.148 18.5967 li
373.151 18.5967 li
373.153 18.5967 li
373.155 18.5967 li
373.156 18.5967 li
373.159 18.5967 li
373.16 18.5967 li
373.163 18.5967 li
373.165 18.5967 li
373.167 18.5967 li
373.169 18.5967 li
373.171 18.5967 li
373.173 18.5967 li
373.174 18.5967 li
373.177 18.5967 li
373.178 18.5967 li
373.181 18.5967 li
373.182 18.5967 li
373.184 18.5967 li
373.186 18.5967 li
373.188 18.5967 li
373.19 18.5967 li
373.191 18.5967 li
373.193 18.5967 li
373.194 18.5967 li
373.196 18.5967 li
373.198 18.5967 li
373.199 18.5967 li
373.202 18.5967 li
373.204 18.5967 li
373.206 18.5967 li
373.208 18.5967 li
373.209 18.5967 li
373.211 18.5967 li
373.212 18.5967 li
373.213 18.5967 li
373.215 18.5967 li
373.217 18.5967 li
373.22 18.5967 li
373.222 18.5967 li
373.223 18.5967 li
373.225 18.5967 li
373.226 18.5967 li
373.227 18.5967 li
373.229 18.5967 li
373.23 18.5967 li
373.231 18.5967 li
373.233 18.5967 li
373.234 18.5967 li
373.235 18.5967 li
373.237 18.5967 li
373.238 18.5967 li
373.239 18.5967 li
373.24 18.5967 li
373.241 18.5967 li
373.242 18.5967 li
373.243 18.5967 li
373.244 18.5967 li
373.245 18.5967 li
373.247 18.5967 li
373.248 18.5967 li
373.25 18.5967 li
373.252 18.5967 li
373.253 18.5967 li
373.254 18.5967 li
373.256 18.5967 li
373.257 18.5967 li
373.258 18.5967 li
373.259 18.5967 li
373.26 18.5967 li
373.261 18.5967 li
373.263 18.5967 li
373.264 18.5967 li
373.265 18.5967 li
373.266 18.5967 li
373.267 18.5967 li
373.268 18.5967 li
373.27 18.5967 li
373.271 18.5967 li
373.272 18.5967 li
373.273 18.5967 li
373.274 18.5967 li
373.275 18.5967 li
373.276 18.5967 li
373.277 18.5967 li
373.278 18.5967 li
373.279 18.5967 li
373.28 18.5967 li
373.281 18.5967 li
373.282 18.5967 li
373.283 18.5967 li
373.284 18.5967 li
373.285 18.5967 li
373.286 18.5967 li
373.287 18.5967 li
373.288 18.5967 li
373.289 18.5967 li
373.29 18.5967 li
373.291 18.5967 li
373.292 18.5967 li
373.293 18.5967 li
373.294 18.5967 li
373.295 18.5967 li
373.296 18.5967 li
373.297 18.5967 li
373.298 18.5967 li
373.299 18.5967 li
373.3 18.5967 li
373.301 18.5967 li
373.302 18.5967 li
373.303 18.5967 li
373.304 18.5967 li
373.305 18.5967 li
373.306 18.5967 li
373.307 18.5967 li
373.308 18.5967 li
373.309 18.5967 li
373.31 18.5967 li
373.311 18.5967 li
373.312 18.5967 li
373.313 18.5967 li
373.314 18.5967 li
373.315 18.5967 li
373.316 18.5967 li
373.317 18.5967 li
373.318 18.5967 li
373.319 18.5967 li
373.32 18.5967 li
373.321 18.5967 li
373.322 18.5967 li
373.323 18.5967 li
373.324 18.5967 li
373.325 18.5967 li
373.326 18.5967 li
373.327 18.5967 li
373.328 18.5967 li
373.329 18.5967 li
373.33 18.5967 li
373.331 18.5967 li
373.332 18.5967 li
373.333 18.5967 li
373.334 18.5967 li
373.335 18.5967 li
373.336 18.5967 li
373.337 18.5967 li
373.338 18.5967 li
0 .990631 1 .000396735 cmyk
@
41.798 221.91 mo
47.9925 219.103 li
53.7163 217.268 li
60.9831 215.292 li
68.7581 212.539 li
77.8417 210.069 li
83.2612 206.752 li
91.7138 203.717 li
96.9968 200.965 li
104.38 198.283 li
108.864 196.095 li
114.057 194.331 li
118.428 192.355 li
122.993 190.167 li
128.766 186.709 li
134.525 184.238 li
139.667 181.909 li
144.972 179.157 li
149.416 177.534 li
153.581 175.346 li
157.715 173.37 li
162.45 171.464 li
166.267 168.5 li
170.686 165.748 li
174.602 163.49 li
178.269 161.16 li
181.852 159.113 li
185.108 158.055 li
188.3 155.373 li
191.517 153.397 li
194.893 151.844 li
197.979 149.656 li
201.029 147.68 li
203.871 145.774 li
206.615 142.881 li
209.37 140.27 li
212 139 li
214.672 136.741 li
217.072 134.906 li
219.396 133.142 li
221.604 130.036 li
223.874 127.143 li
225.993 124.531 li
228.053 123.19 li
230.13 120.72 li
232.105 117.827 li
234.127 116.274 li
236.036 114.792 li
237.96 112.251 li
239.859 111.051 li
241.575 108.37 li
243.392 107.24 li
245.079 105.405 li
246.711 104.417 li
248.236 102.441 li
249.815 100.747 li
251.324 99.4767 li
252.843 97.5707 li
254.291 95.6647 li
255.714 93.6897 li
257.144 92.4897 li
258.534 91.4307 li
259.909 89.2427 li
261.248 88.1847 li
262.583 87.1967 li
263.862 85.8557 li
265.081 83.5967 li
266.29 81.9737 li
267.483 80.8447 li
268.661 79.9977 li
269.817 79.4327 li
270.958 78.4447 li
272.063 77.3857 li
273.155 76.4687 li
274.249 74.7037 li
275.285 73.2927 li
276.324 72.3757 li
277.378 71.5287 li
278.371 70.2577 li
279.38 68.9877 li
280.34 67.7877 li
281.267 66.4477 li
282.237 65.0357 li
283.168 64.3307 li
284.111 62.8477 li
285.022 62.4947 li
285.93 62.2127 li
286.8 61.2247 li
287.691 60.2367 li
288.543 59.1777 li
289.382 58.5427 li
290.216 57.6257 li
291.035 57.3427 li
291.829 55.8607 li
292.623 55.5077 li
293.393 54.7317 li
294.158 53.4607 li
294.926 52.7557 li
295.663 51.6967 li
296.416 50.7787 li
297.163 50.3557 li
297.888 49.8617 li
298.599 49.2967 li
299.308 48.9437 li
300.007 47.8857 li
300.672 47.3917 li
301.359 47.0387 li
302.033 46.5447 li
302.712 45.7687 li
303.377 45.1327 li
304.023 44.8517 li
304.661 44.2867 li
305.292 43.6517 li
305.923 43.2977 li
306.538 43.0157 li
307.147 42.7337 li
307.751 42.0987 li
308.345 41.6747 li
308.964 41.2517 li
309.551 40.8987 li
310.133 40.6167 li
310.729 40.0517 li
311.284 39.8397 li
311.851 39.2057 li
312.418 39.0637 li
312.979 38.8517 li
313.526 38.2167 li
314.077 37.7227 li
314.612 37.0877 li
315.149 36.7346 li
315.672 36.3817 li
316.202 35.8877 li
316.722 35.6057 li
317.227 35.1827 li
317.731 34.8997 li
318.229 34.5467 li
318.716 34.3357 li
319.211 33.8417 li
319.692 33.5587 li
320.174 33.3467 li
320.657 33.2767 li
321.131 32.7827 li
321.605 32.6417 li
322.063 32.5007 li
322.526 32.2887 li
322.99 32.0767 li
323.445 31.7947 li
323.898 31.5127 li
324.343 31.3007 li
324.789 30.9477 li
325.229 30.7357 li
325.663 30.7357 li
326.095 30.6647 li
326.522 30.5237 li
326.934 29.8887 li
327.357 29.8887 li
327.776 29.8177 li
328.198 29.6067 li
328.609 29.2537 li
329.018 29.1827 li
329.411 28.9007 li
329.806 28.8307 li
330.206 28.6177 li
330.597 28.4767 li
330.977 28.2657 li
331.35 27.9127 li
331.729 27.7007 li
332.108 27.2067 li
332.475 27.0657 li
332.845 26.8537 li
333.212 26.8537 li
333.582 26.8537 li
333.941 26.6427 li
334.295 26.4307 li
334.655 26.2897 li
334.999 26.1487 li
335.342 26.0077 li
335.681 26.0077 li
336.019 25.8657 li
336.361 25.8657 li
336.71 25.7947 li
337.039 25.5837 li
337.371 25.5127 li
337.698 25.4427 li
338.02 25.4427 li
338.345 25.1597 li
338.665 25.0187 li
338.987 24.8077 li
339.301 24.6667 li
339.608 24.5957 li
339.915 24.5247 li
340.222 24.3837 li
340.524 24.3837 li
340.823 24.3127 li
341.121 24.1717 li
341.417 24.1717 li
341.717 24.1717 li
342.015 24.1717 li
342.307 23.9607 li
342.594 23.7487 li
342.884 23.6077 li
343.17 23.5367 li
343.453 23.4667 li
343.739 23.3257 li
344.015 23.2547 li
344.293 23.1127 li
344.571 22.9717 li
344.842 22.9017 li
345.112 22.9017 li
345.379 22.7607 li
345.643 22.7607 li
345.907 22.6197 li
346.168 22.6197 li
346.429 22.6197 li
346.69 22.5487 li
346.94 22.4787 li
347.195 22.4787 li
347.446 22.4787 li
347.696 22.4787 li
347.948 22.4787 li
348.199 22.4077 li
348.448 22.4077 li
348.689 22.2667 li
348.929 22.2667 li
349.164 22.1957 li
349.399 22.1957 li
349.631 22.1257 li
349.867 22.1257 li
350.099 22.1257 li
350.329 22.1257 li
350.561 22.1257 li
350.782 22.1257 li
351.002 22.1257 li
351.222 22.1257 li
351.439 22.0547 li
351.656 22.0547 li
351.874 21.9846 li
352.09 21.9846 li
352.305 21.9846 li
352.517 21.7727 li
352.73 21.7017 li
352.938 21.7017 li
353.147 21.7017 li
353.353 21.7017 li
353.558 21.6307 li
353.759 21.6307 li
353.958 21.5607 li
354.157 21.5607 li
354.351 21.5607 li
354.545 21.5607 li
354.736 21.5607 li
354.93 21.4197 li
355.122 21.3487 li
355.311 21.3487 li
355.501 21.3487 li
355.685 21.2787 li
355.868 21.2787 li
356.05 21.2787 li
356.235 21.2787 li
356.414 21.2787 li
356.593 21.2787 li
356.771 21.2787 li
356.947 21.2077 li
357.118 21.1377 li
357.292 21.0667 li
357.462 21.0667 li
357.632 21.0667 li
357.798 21.0667 li
357.961 20.9957 li
358.126 20.9257 li
358.289 20.9257 li
358.447 20.9257 li
358.606 20.9257 li
358.765 20.8547 li
358.923 20.8547 li
359.077 20.6437 li
359.231 20.3617 li
359.38 20.3617 li
359.534 20.3617 li
359.686 20.3617 li
359.832 20.3617 li
359.975 20.3617 li
360.12 20.2897 li
360.263 20.2897 li
360.404 20.2897 li
360.544 20.2897 li
360.681 20.2897 li
360.817 20.2197 li
360.951 20.2197 li
361.085 20.2197 li
361.215 20.1487 li
361.343 20.1487 li
361.472 20.1487 li
361.596 20.0787 li
361.721 20.0787 li
361.843 20.0787 li
361.961 20.0787 li
362.081 20.0787 li
362.2 20.0787 li
362.313 20.0787 li
362.428 20.0787 li
362.54 20.0787 li
362.649 20.0787 li
362.76 20.0787 li
362.87 20.0787 li
362.972 20.0787 li
363.077 20.0787 li
363.181 20.0787 li
363.282 20.0787 li
363.379 20.0787 li
363.477 20.0787 li
363.573 20.0787 li
363.669 19.9377 li
363.765 19.9377 li
363.862 19.9377 li
363.952 19.9377 li
364.04 19.9377 li
364.127 19.9377 li
364.216 19.9377 li
364.301 19.9377 li
364.388 19.9377 li
364.472 19.8667 li
364.553 19.8667 li
364.633 19.8667 li
364.713 19.8667 li
364.789 19.8667 li
364.865 19.8667 li
364.942 19.8667 li
365.016 19.7267 li
365.09 19.7267 li
365.162 19.7267 li
365.232 19.7267 li
365.304 19.7267 li
365.373 19.7267 li
365.443 19.7267 li
365.509 19.7267 li
365.577 19.7267 li
365.645 19.7267 li
365.711 19.7267 li
365.774 19.7267 li
365.836 19.7267 li
365.897 19.7267 li
365.959 19.7267 li
366.018 19.7267 li
366.078 19.7267 li
366.137 19.7267 li
366.193 19.7267 li
366.249 19.7267 li
366.304 19.7267 li
366.359 19.7267 li
366.413 19.7267 li
366.468 19.7267 li
366.521 19.7267 li
366.573 19.7267 li
366.626 19.7267 li
366.675 19.7267 li
366.727 19.6557 li
366.776 19.5847 li
366.824 19.5847 li
366.873 19.5847 li
366.92 19.5847 li
366.966 19.5847 li
367.012 19.5847 li
367.057 19.5847 li
367.102 19.5847 li
367.144 19.5847 li
367.187 19.5847 li
367.229 19.5847 li
367.27 19.5847 li
367.31 19.5847 li
367.353 19.5847 li
367.393 19.5847 li
367.431 19.5847 li
367.469 19.5137 li
367.507 19.5137 li
367.545 19.5137 li
367.583 19.5137 li
367.619 19.5137 li
367.655 19.5137 li
367.692 19.5137 li
367.727 19.5137 li
367.761 19.5137 li
367.793 19.5137 li
367.826 19.5137 li
367.86 19.5137 li
367.892 19.5137 li
367.924 19.5137 li
367.954 19.5137 li
367.984 19.5137 li
368.015 19.5137 li
368.045 19.5137 li
368.074 19.5137 li
368.101 19.5137 li
368.129 19.5137 li
368.157 19.5137 li
368.185 19.5137 li
368.213 19.5137 li
368.24 19.5137 li
368.267 19.5137 li
368.293 19.5137 li
368.318 19.5137 li
368.344 19.5137 li
368.369 19.5137 li
368.395 19.5137 li
368.417 19.4437 li
368.441 19.4437 li
368.464 19.4437 li
368.487 19.4437 li
368.51 19.4437 li
368.533 19.4437 li
368.554 19.4437 li
368.576 19.4437 li
368.597 19.4437 li
368.618 19.4437 li
368.638 19.4437 li
368.657 19.4437 li
368.677 19.3727 li
368.697 19.3727 li
368.717 19.3727 li
368.734 19.3727 li
368.753 19.3727 li
368.77 19.3727 li
368.789 19.3727 li
368.806 19.3727 li
368.824 19.3727 li
368.841 19.3727 li
368.858 19.3727 li
368.876 19.3727 li
368.892 19.3727 li
368.909 19.3727 li
368.924 19.3727 li
368.941 19.3727 li
368.956 19.3727 li
368.971 19.3727 li
368.986 19.3727 li
369.002 19.3727 li
369.017 19.3727 li
369.031 19.3727 li
369.046 19.3727 li
369.059 19.3727 li
369.075 19.3727 li
369.089 19.3727 li
369.104 19.3727 li
369.118 19.3727 li
369.132 19.3727 li
369.146 19.3727 li
369.16 19.3727 li
369.173 19.3727 li
369.186 19.3727 li
369.199 19.3727 li
369.212 19.3727 li
369.224 19.3727 li
369.237 19.3727 li
369.248 19.3727 li
369.26 19.3727 li
369.272 19.3727 li
369.284 19.3727 li
369.295 19.3727 li
369.307 19.3727 li
369.318 19.3727 li
369.329 19.3727 li
369.34 19.3727 li
369.352 19.3727 li
369.363 19.3727 li
369.374 19.3727 li
369.385 19.3727 li
369.396 19.3727 li
369.406 19.3727 li
369.416 19.3727 li
369.427 19.3727 li
369.436 19.3727 li
369.447 19.3727 li
369.457 19.3727 li
369.467 19.3727 li
369.477 19.3727 li
369.487 19.3727 li
369.497 19.3727 li
369.506 19.3727 li
369.515 19.3727 li
369.525 19.3727 li
369.534 19.3727 li
369.543 19.3727 li
369.552 19.3727 li
369.561 19.3727 li
369.569 19.3727 li
369.578 19.3727 li
369.586 19.3727 li
369.595 19.3727 li
369.603 19.3727 li
369.612 19.3727 li
369.62 19.3727 li
369.629 19.3727 li
369.638 19.3727 li
369.646 19.3727 li
369.654 19.3727 li
369.662 19.3727 li
369.67 19.3027 li
369.677 19.3027 li
369.685 19.3027 li
369.692 19.3027 li
369.701 19.3027 li
369.707 19.3027 li
369.715 19.3027 li
369.722 19.3027 li
369.729 19.3027 li
369.736 19.3027 li
369.744 19.3027 li
369.752 19.3027 li
369.759 19.3027 li
369.767 19.3027 li
369.775 19.3027 li
369.782 19.3027 li
369.789 19.3027 li
369.796 19.3027 li
369.803 19.3027 li
369.81 19.3027 li
369.817 19.3027 li
369.824 19.3027 li
369.831 19.3027 li
369.838 19.3027 li
369.845 19.3027 li
369.851 19.3027 li
369.858 19.3027 li
369.865 19.3027 li
369.872 19.3027 li
369.879 19.3027 li
369.886 19.3027 li
369.893 19.3027 li
369.899 19.3027 li
369.906 19.3027 li
369.913 19.3027 li
369.92 19.3027 li
369.926 19.3027 li
369.934 19.3027 li
369.94 19.3027 li
369.946 19.3027 li
369.952 19.3027 li
369.958 19.3027 li
369.965 19.3027 li
369.97 19.3027 li
369.977 19.3027 li
369.983 19.3027 li
369.991 19.3027 li
369.997 19.3027 li
370.004 19.3027 li
370.01 19.3027 li
370.016 19.3027 li
370.022 19.3027 li
370.029 19.3027 li
370.036 19.3027 li
370.042 19.3027 li
370.048 19.3027 li
370.054 19.3027 li
370.061 19.3027 li
370.067 19.3027 li
370.074 19.3027 li
370.08 19.3027 li
370.087 19.3027 li
370.093 19.2317 li
370.099 19.1617 li
370.106 19.1617 li
370.112 19.1617 li
370.118 19.1617 li
370.125 19.1617 li
370.131 19.1617 li
370.137 19.1617 li
370.143 19.1617 li
370.15 19.1617 li
370.156 19.1617 li
370.162 19.1617 li
370.168 19.1617 li
370.174 19.1617 li
370.181 19.1617 li
370.188 19.1617 li
370.195 19.1617 li
370.201 19.1617 li
370.207 19.1617 li
370.213 19.1617 li
370.22 19.1617 li
370.226 19.1617 li
370.233 19.1617 li
370.239 19.1617 li
370.246 19.1617 li
370.252 19.1617 li
370.259 19.1617 li
370.265 19.0907 li
370.272 19.0907 li
370.279 19.0907 li
370.286 19.0907 li
370.292 19.0907 li
370.299 19.0907 li
370.305 19.0907 li
370.313 19.0907 li
370.318 19.0907 li
370.325 19.0907 li
370.331 19.0907 li
370.338 19.0907 li
370.344 19.0907 li
370.35 19.0907 li
370.356 19.0907 li
370.363 19.0907 li
370.37 19.0907 li
370.376 19.0907 li
370.383 19.0907 li
370.39 19.0907 li
370.397 19.0907 li
370.403 19.0907 li
370.409 19.0907 li
370.415 19.0907 li
370.422 19.0907 li
370.429 19.0907 li
370.436 19.0907 li
370.442 19.0907 li
370.448 19.0907 li
370.455 19.0907 li
370.461 19.0907 li
370.467 19.0907 li
370.474 19.0907 li
370.481 19.0907 li
370.487 19.0907 li
370.493 19.0907 li
370.5 19.0907 li
370.506 19.0907 li
370.512 19.0907 li
370.52 19.0907 li
370.526 19.0907 li
370.532 19.0907 li
370.538 19.0907 li
370.545 19.0907 li
370.551 19.0907 li
370.558 19.0907 li
370.564 19.0907 li
370.57 19.0907 li
370.576 19.0907 li
370.583 19.0907 li
370.589 19.0907 li
370.595 19.0907 li
370.601 19.0907 li
370.607 19.0907 li
370.613 19.0907 li
370.62 19.0907 li
370.626 19.0907 li
370.632 19.0907 li
370.638 19.0907 li
370.644 19.0907 li
370.65 19.0907 li
370.656 19.0907 li
370.662 19.0907 li
370.668 19.0907 li
370.673 19.0907 li
370.679 19.0907 li
370.685 19.0907 li
370.69 19.0907 li
370.697 19.0907 li
370.702 19.0907 li
370.708 19.0907 li
370.714 19.0907 li
370.72 19.0907 li
370.725 19.0907 li
370.73 19.0907 li
370.736 19.0907 li
370.742 19.0907 li
370.747 19.0907 li
370.752 19.0907 li
370.758 19.0907 li
370.763 19.0907 li
370.768 19.0907 li
370.774 19.0907 li
370.78 19.0907 li
370.784 19.0907 li
370.79 19.0907 li
370.795 19.0907 li
370.8 19.0907 li
370.805 19.0907 li
370.811 19.0907 li
370.815 19.0907 li
370.82 19.0907 li
370.826 19.0907 li
370.831 19.0907 li
370.835 19.0907 li
370.84 19.0907 li
370.846 19.0907 li
370.85 19.0907 li
370.856 19.0907 li
370.861 19.0907 li
370.866 19.0907 li
370.87 19.0907 li
370.876 19.0907 li
370.881 19.0907 li
370.886 19.0907 li
370.891 19.0907 li
370.895 19.0907 li
370.9 19.0907 li
370.904 19.0907 li
370.909 19.0907 li
370.914 19.0907 li
370.918 19.0907 li
370.923 19.0907 li
370.927 19.0907 li
370.931 19.0907 li
370.936 19.0907 li
370.941 19.0907 li
370.945 19.0907 li
370.95 19.0907 li
370.954 19.0907 li
370.959 19.0907 li
370.963 19.0907 li
370.967 19.0907 li
370.972 19.0907 li
370.976 19.0907 li
370.98 19.0907 li
370.984 19.0907 li
370.989 19.0907 li
370.993 19.0907 li
370.997 19.0907 li
371.001 19.0907 li
371.006 19.0907 li
371.009 19.0907 li
371.013 19.0907 li
371.018 19.0907 li
371.022 19.0907 li
371.026 19.0907 li
371.03 19.0907 li
371.034 19.0907 li
371.038 19.0907 li
371.043 19.0907 li
371.047 19.0907 li
371.052 19.0907 li
371.056 19.0907 li
371.059 19.0907 li
371.064 19.0907 li
371.068 19.0907 li
371.072 19.0907 li
371.076 19.0907 li
371.08 19.0907 li
371.084 19.0907 li
371.088 19.0907 li
371.093 19.0907 li
371.096 19.0907 li
371.101 19.0907 li
371.104 19.0907 li
371.109 19.0907 li
371.113 19.0907 li
371.117 19.0907 li
371.122 19.0907 li
371.126 19.0907 li
371.129 19.0907 li
371.134 19.0907 li
371.138 19.0907 li
371.142 19.0907 li
371.147 19.0907 li
371.15 19.0907 li
371.155 19.0907 li
371.159 19.0907 li
371.164 19.0907 li
371.168 19.0207 li
371.173 19.0207 li
371.177 19.0207 li
371.181 19.0207 li
371.186 19.0207 li
371.19 19.0207 li
371.194 19.0207 li
371.198 19.0207 li
371.203 19.0207 li
371.207 19.0207 li
371.211 19.0207 li
371.215 19.0207 li
371.22 19.0207 li
371.224 19.0207 li
371.229 19.0207 li
371.233 19.0207 li
371.239 19.0207 li
371.243 18.9497 li
371.247 18.9497 li
371.251 18.9497 li
371.255 18.9497 li
371.26 18.9497 li
371.264 18.9497 li
371.268 18.9497 li
371.272 18.9497 li
371.276 18.9497 li
371.281 18.9497 li
371.285 18.9497 li
371.29 18.9497 li
371.293 18.9497 li
371.297 18.9497 li
371.302 18.9497 li
371.307 18.9497 li
371.311 18.9497 li
371.315 18.9497 li
371.32 18.9497 li
371.324 18.9497 li
371.329 18.9497 li
371.333 18.9497 li
371.338 18.9497 li
371.342 18.9497 li
371.347 18.9497 li
371.351 18.9497 li
371.356 18.9497 li
371.36 18.9497 li
371.365 18.9497 li
371.369 18.9497 li
371.373 18.9497 li
371.378 18.9497 li
371.383 18.9497 li
371.387 18.8787 li
371.392 18.8787 li
371.395 18.8787 li
371.4 18.8787 li
371.404 18.8787 li
371.408 18.8787 li
371.413 18.8787 li
371.417 18.8787 li
371.421 18.8787 li
371.426 18.8787 li
371.43 18.8787 li
371.434 18.8787 li
371.438 18.8787 li
371.443 18.8787 li
371.447 18.8787 li
371.451 18.8787 li
371.455 18.8787 li
371.459 18.8787 li
371.463 18.8787 li
371.468 18.8787 li
371.471 18.8787 li
371.476 18.8787 li
371.48 18.8787 li
371.484 18.8787 li
371.488 18.8787 li
371.492 18.8787 li
371.496 18.8787 li
371.501 18.8787 li
371.504 18.8787 li
371.508 18.8787 li
371.512 18.8787 li
371.515 18.8787 li
371.519 18.8787 li
371.524 18.8787 li
371.527 18.8787 li
371.531 18.8787 li
371.534 18.8787 li
371.537 18.8787 li
371.541 18.8787 li
371.545 18.8787 li
371.549 18.8787 li
371.553 18.8787 li
371.557 18.8787 li
371.561 18.8787 li
371.564 18.8787 li
371.567 18.8787 li
371.572 18.8787 li
371.576 18.8787 li
371.579 18.8787 li
371.583 18.8787 li
371.586 18.8787 li
371.59 18.8787 li
371.593 18.8787 li
371.597 18.8787 li
371.599 18.8787 li
371.603 18.8787 li
371.607 18.8787 li
371.61 18.8787 li
371.614 18.8787 li
371.617 18.8787 li
371.62 18.8787 li
371.624 18.8787 li
371.627 18.8787 li
371.63 18.8787 li
371.633 18.8787 li
371.637 18.8787 li
371.641 18.8077 li
371.644 18.8077 li
371.647 18.8077 li
371.651 18.8077 li
371.654 18.8077 li
371.657 18.8077 li
371.661 18.8077 li
371.664 18.8077 li
371.668 18.8077 li
371.671 18.8077 li
371.674 18.8077 li
371.677 18.8077 li
371.681 18.8077 li
371.685 18.8077 li
371.688 18.8077 li
371.691 18.8077 li
371.695 18.8077 li
371.698 18.8077 li
371.701 18.8077 li
371.704 18.8077 li
371.708 18.8077 li
371.711 18.8077 li
371.714 18.8077 li
371.717 18.8077 li
371.721 18.8077 li
371.725 18.8077 li
371.728 18.8077 li
371.731 18.8077 li
371.734 18.8077 li
371.738 18.8077 li
371.74 18.8077 li
371.744 18.8077 li
371.748 18.8077 li
371.75 18.8077 li
371.754 18.8077 li
371.758 18.8077 li
371.761 18.8077 li
371.764 18.8077 li
371.768 18.8077 li
371.77 18.8077 li
371.774 18.8077 li
371.777 18.8077 li
371.781 18.8077 li
371.784 18.8077 li
371.787 18.8077 li
371.79 18.8077 li
371.793 18.8077 li
371.797 18.8077 li
371.8 18.8077 li
371.804 18.8077 li
371.806 18.8077 li
371.809 18.8077 li
371.813 18.8077 li
371.816 18.8077 li
371.819 18.8077 li
371.822 18.8077 li
371.826 18.8077 li
371.829 18.7377 li
371.832 18.7377 li
371.835 18.7377 li
371.839 18.7377 li
371.842 18.7377 li
371.845 18.7377 li
371.849 18.7377 li
371.851 18.7377 li
371.854 18.7377 li
371.858 18.7377 li
371.861 18.7377 li
371.863 18.7377 li
371.867 18.7377 li
371.87 18.7377 li
371.872 18.7377 li
371.876 18.7377 li
371.879 18.7377 li
371.882 18.7377 li
371.885 18.7377 li
371.888 18.7377 li
371.891 18.7377 li
371.895 18.7377 li
371.898 18.7377 li
371.901 18.7377 li
371.904 18.7377 li
371.908 18.7377 li
371.911 18.7377 li
371.915 18.7377 li
371.918 18.7377 li
371.92 18.7377 li
371.924 18.7377 li
371.927 18.7377 li
371.93 18.7377 li
371.933 18.7377 li
371.936 18.7377 li
371.938 18.7377 li
371.942 18.7377 li
371.945 18.7377 li
371.947 18.7377 li
371.95 18.7377 li
371.954 18.7377 li
371.956 18.7377 li
371.959 18.7377 li
371.963 18.7377 li
371.965 18.7377 li
371.968 18.7377 li
371.971 18.7377 li
371.974 18.7377 li
371.977 18.7377 li
371.98 18.7377 li
371.983 18.7377 li
371.986 18.7377 li
371.989 18.7377 li
371.992 18.7377 li
371.994 18.7377 li
371.997 18.7377 li
372.001 18.7377 li
372.004 18.7377 li
372.007 18.7377 li
372.01 18.7377 li
372.012 18.7377 li
372.015 18.7377 li
372.018 18.7377 li
372.02 18.7377 li
372.023 18.7377 li
372.026 18.7377 li
372.029 18.7377 li
372.032 18.7377 li
372.035 18.7377 li
372.038 18.7377 li
372.041 18.7377 li
372.043 18.7377 li
372.047 18.7377 li
372.05 18.7377 li
372.052 18.7377 li
372.056 18.7377 li
372.058 18.7377 li
372.061 18.7377 li
372.064 18.7377 li
372.066 18.7377 li
372.069 18.7377 li
372.072 18.7377 li
372.075 18.7377 li
372.078 18.7377 li
372.081 18.7377 li
372.083 18.7377 li
372.086 18.7377 li
372.088 18.7377 li
372.092 18.7377 li
372.095 18.7377 li
372.097 18.7377 li
372.1 18.7377 li
372.103 18.7377 li
372.106 18.7377 li
372.109 18.7377 li
372.112 18.7377 li
372.115 18.7377 li
372.118 18.7377 li
372.122 18.7377 li
372.125 18.7377 li
372.127 18.7377 li
372.131 18.7377 li
372.133 18.7377 li
372.136 18.7377 li
372.139 18.7377 li
372.142 18.7377 li
372.145 18.7377 li
372.147 18.7377 li
372.151 18.7377 li
372.153 18.7377 li
372.156 18.7377 li
372.159 18.7377 li
372.162 18.7377 li
372.166 18.7377 li
372.168 18.7377 li
372.171 18.7377 li
372.174 18.7377 li
372.178 18.7377 li
372.181 18.7377 li
372.184 18.7377 li
372.187 18.7377 li
372.19 18.7377 li
372.193 18.7377 li
372.197 18.7377 li
372.2 18.7377 li
372.203 18.7377 li
372.206 18.7377 li
372.209 18.7377 li
372.212 18.7377 li
372.215 18.7377 li
372.219 18.7377 li
372.222 18.7377 li
372.225 18.7377 li
372.229 18.7377 li
372.232 18.7377 li
372.236 18.7377 li
372.239 18.7377 li
372.242 18.7377 li
372.246 18.7377 li
372.249 18.7377 li
372.253 18.7377 li
372.256 18.7377 li
372.259 18.7377 li
372.263 18.7377 li
372.267 18.7377 li
372.27 18.7377 li
372.274 18.7377 li
372.277 18.7377 li
372.281 18.7377 li
372.284 18.7377 li
372.287 18.7377 li
372.291 18.7377 li
372.294 18.7377 li
372.298 18.7377 li
372.301 18.7377 li
372.304 18.7377 li
372.308 18.7377 li
372.311 18.7377 li
372.316 18.7377 li
372.319 18.7377 li
372.322 18.7377 li
372.326 18.7377 li
372.33 18.7377 li
372.333 18.7377 li
372.336 18.7377 li
372.34 18.7377 li
372.343 18.7377 li
372.347 18.7377 li
372.351 18.7377 li
372.355 18.7377 li
372.358 18.7377 li
372.361 18.7377 li
372.365 18.7377 li
372.369 18.7377 li
372.373 18.7377 li
372.377 18.7377 li
372.38 18.7377 li
372.383 18.7377 li
372.387 18.7377 li
372.39 18.7377 li
372.394 18.7377 li
372.397 18.7377 li
372.401 18.7377 li
372.404 18.7377 li
372.408 18.7377 li
372.412 18.7377 li
372.415 18.7377 li
372.419 18.7377 li
372.422 18.7377 li
372.426 18.7377 li
372.429 18.7377 li
372.433 18.7377 li
372.436 18.7377 li
372.44 18.7377 li
372.443 18.7377 li
372.446 18.7377 li
372.45 18.7377 li
372.453 18.7377 li
372.457 18.7377 li
372.461 18.7377 li
372.463 18.7377 li
372.467 18.7377 li
372.471 18.7377 li
372.475 18.7377 li
372.479 18.7377 li
372.481 18.7377 li
372.485 18.7377 li
372.488 18.7377 li
372.492 18.7377 li
372.495 18.7377 li
372.499 18.7377 li
372.502 18.7377 li
372.506 18.7377 li
372.508 18.7377 li
372.512 18.7377 li
372.515 18.7377 li
372.518 18.7377 li
372.522 18.7377 li
372.525 18.7377 li
372.529 18.7377 li
372.532 18.7377 li
372.536 18.7377 li
372.538 18.7377 li
372.542 18.7377 li
372.545 18.7377 li
372.548 18.7377 li
372.551 18.7377 li
372.554 18.7377 li
372.557 18.7377 li
372.561 18.7377 li
372.564 18.7377 li
372.567 18.7377 li
372.57 18.7377 li
372.573 18.7377 li
372.576 18.7377 li
372.579 18.7377 li
372.582 18.7377 li
372.585 18.7377 li
372.588 18.7377 li
372.592 18.7377 li
372.595 18.7377 li
372.598 18.7377 li
372.601 18.7377 li
372.604 18.7377 li
372.607 18.7377 li
372.609 18.7377 li
372.613 18.7377 li
372.616 18.7377 li
372.62 18.7377 li
372.622 18.7377 li
372.626 18.7377 li
372.629 18.7377 li
372.631 18.7377 li
372.634 18.7377 li
372.638 18.7377 li
372.64 18.7377 li
372.643 18.7377 li
372.646 18.7377 li
372.649 18.7377 li
372.652 18.7377 li
372.654 18.7377 li
372.657 18.7377 li
372.659 18.7377 li
372.662 18.7377 li
372.665 18.7377 li
372.668 18.7377 li
372.67 18.7377 li
372.674 18.7377 li
372.677 18.7377 li
372.679 18.7377 li
372.683 18.7377 li
372.685 18.7377 li
372.688 18.7377 li
372.691 18.7377 li
372.694 18.7377 li
372.696 18.7377 li
372.699 18.7377 li
372.701 18.7377 li
372.704 18.7377 li
372.706 18.7377 li
372.709 18.7377 li
372.712 18.7377 li
372.715 18.7377 li
372.717 18.7377 li
372.72 18.7377 li
372.723 18.7377 li
372.725 18.7377 li
372.727 18.7377 li
372.73 18.7377 li
372.733 18.7377 li
372.735 18.7377 li
372.738 18.7377 li
372.74 18.7377 li
372.743 18.7377 li
372.745 18.7377 li
372.748 18.7377 li
372.75 18.7377 li
372.753 18.7377 li
372.755 18.7377 li
372.758 18.7377 li
372.76 18.7377 li
372.763 18.7377 li
372.765 18.7377 li
372.767 18.7377 li
372.77 18.7377 li
372.772 18.7377 li
372.775 18.7377 li
372.777 18.7377 li
372.779 18.7377 li
372.782 18.7377 li
372.784 18.7377 li
372.787 18.7377 li
372.789 18.7377 li
372.791 18.7377 li
372.793 18.7377 li
372.797 18.7377 li
372.799 18.7377 li
372.801 18.7377 li
372.803 18.7377 li
372.806 18.7377 li
372.808 18.7377 li
372.81 18.7377 li
372.813 18.7377 li
372.815 18.7377 li
372.818 18.7377 li
372.82 18.7377 li
372.823 18.7377 li
372.825 18.7377 li
372.828 18.7377 li
372.83 18.7377 li
372.833 18.7377 li
372.836 18.7377 li
372.838 18.7377 li
372.84 18.7377 li
372.843 18.7377 li
372.845 18.7377 li
372.847 18.7377 li
372.85 18.7377 li
372.853 18.7377 li
372.855 18.7377 li
372.857 18.7377 li
372.859 18.7377 li
372.863 18.7377 li
372.865 18.7377 li
372.867 18.6667 li
372.87 18.6667 li
372.872 18.6667 li
372.875 18.6667 li
372.877 18.6667 li
372.879 18.6667 li
372.881 18.6667 li
372.884 18.6667 li
372.886 18.6667 li
372.889 18.6667 li
372.891 18.6667 li
372.893 18.6667 li
372.895 18.6667 li
372.898 18.6667 li
372.901 18.6667 li
372.903 18.6667 li
372.905 18.6667 li
372.908 18.6667 li
372.91 18.6667 li
372.912 18.6667 li
372.914 18.6667 li
372.917 18.6667 li
372.92 18.6667 li
372.921 18.6667 li
372.923 18.6667 li
372.926 18.6667 li
372.928 18.6667 li
372.93 18.6667 li
372.933 18.6667 li
372.934 18.6667 li
372.937 18.6667 li
372.94 18.6667 li
372.942 18.6667 li
372.944 18.6667 li
372.947 18.6667 li
372.949 18.6667 li
372.951 18.6667 li
372.953 18.6667 li
372.956 18.6667 li
372.958 18.6667 li
372.96 18.6667 li
372.962 18.6667 li
372.965 18.6667 li
372.967 18.6667 li
372.968 18.6667 li
372.97 18.6667 li
372.973 18.6667 li
372.975 18.6667 li
372.977 18.6667 li
372.979 18.6667 li
372.982 18.6667 li
372.984 18.6667 li
372.986 18.6667 li
372.988 18.6667 li
372.991 18.6667 li
372.993 18.6667 li
372.995 18.6667 li
372.997 18.6667 li
373 18.6667 li
373.002 18.6667 li
373.004 18.6667 li
373.006 18.6667 li
373.008 18.6667 li
373.01 18.6667 li
373.013 18.6667 li
373.015 18.6667 li
373.017 18.6667 li
373.019 18.6667 li
373.022 18.6667 li
373.023 18.6667 li
373.025 18.6667 li
373.027 18.6667 li
373.03 18.6667 li
373.032 18.6667 li
373.034 18.6667 li
373.036 18.6667 li
373.038 18.6667 li
373.04 18.6667 li
373.042 18.6667 li
373.043 18.6667 li
373.045 18.6667 li
373.047 18.6667 li
373.049 18.6667 li
373.052 18.6667 li
373.053 18.6667 li
373.055 18.6667 li
373.057 18.6667 li
373.059 18.6667 li
373.061 18.6667 li
373.062 18.6667 li
373.064 18.6667 li
373.066 18.6667 li
373.068 18.6667 li
373.07 18.6667 li
373.072 18.6667 li
373.073 18.6667 li
373.076 18.6667 li
373.077 18.6667 li
373.079 18.6667 li
373.08 18.6667 li
373.082 18.6667 li
373.084 18.6667 li
373.086 18.6667 li
373.088 18.6667 li
373.089 18.6667 li
373.091 18.6667 li
373.093 18.6667 li
373.094 18.6667 li
373.097 18.6667 li
373.098 18.6667 li
373.099 18.6667 li
373.101 18.6667 li
373.103 18.6667 li
373.105 18.6667 li
373.106 18.6667 li
373.108 18.6667 li
373.109 18.6667 li
373.111 18.6667 li
373.112 18.6667 li
373.114 18.6667 li
373.116 18.6667 li
373.118 18.6667 li
373.119 18.6667 li
373.12 18.6667 li
373.122 18.6667 li
373.124 18.6667 li
373.126 18.6667 li
373.127 18.6667 li
373.128 18.6667 li
373.13 18.6667 li
373.132 18.6667 li
373.133 18.6667 li
373.135 18.6667 li
373.136 18.6667 li
373.138 18.6667 li
373.139 18.6667 li
373.141 18.6667 li
373.142 18.6667 li
373.144 18.6667 li
373.145 18.6667 li
373.147 18.6667 li
373.148 18.6667 li
373.15 18.6667 li
373.151 18.6667 li
373.153 18.6667 li
373.154 18.6667 li
373.155 18.6667 li
373.156 18.6667 li
373.158 18.6667 li
373.159 18.6667 li
373.161 18.6667 li
373.163 18.6667 li
373.164 18.6667 li
373.165 18.6667 li
373.167 18.6667 li
373.168 18.6667 li
373.17 18.6667 li
373.172 18.6667 li
373.174 18.6667 li
373.175 18.6667 li
373.177 18.6667 li
373.179 18.6667 li
373.181 18.6667 li
373.182 18.6667 li
373.184 18.6667 li
373.186 18.6667 li
373.187 18.6667 li
373.189 18.6667 li
373.19 18.6667 li
373.191 18.6667 li
373.193 18.6667 li
373.194 18.6667 li
373.195 18.6667 li
373.197 18.6667 li
373.198 18.6667 li
373.199 18.6667 li
373.2 18.6667 li
373.202 18.6667 li
373.203 18.6667 li
373.204 18.6667 li
373.205 18.6667 li
373.207 18.6667 li
373.208 18.6667 li
373.209 18.6667 li
373.21 18.6667 li
373.211 18.6667 li
373.212 18.6667 li
373.213 18.6667 li
373.214 18.6667 li
373.216 18.6667 li
373.217 18.6667 li
373.218 18.6667 li
373.22 18.6667 li
373.222 18.6667 li
373.224 18.6667 li
373.225 18.6667 li
373.226 18.6667 li
373.227 18.6667 li
373.229 18.6667 li
373.231 18.6667 li
373.233 18.6667 li
373.234 18.6667 li
373.235 18.6667 li
373.236 18.6667 li
373.238 18.6667 li
373.239 18.5967 li
373.24 18.5967 li
373.241 18.5967 li
373.242 18.5967 li
373.243 18.5967 li
373.244 18.5967 li
373.245 18.5967 li
373.247 18.5967 li
373.248 18.5967 li
373.25 18.5967 li
373.251 18.5967 li
373.252 18.5967 li
373.253 18.5967 li
373.254 18.5967 li
373.255 18.5967 li
373.256 18.5967 li
373.258 18.5967 li
373.259 18.5967 li
373.26 18.5967 li
373.261 18.5967 li
373.262 18.5967 li
373.263 18.5967 li
373.264 18.5967 li
373.265 18.5967 li
373.266 18.5967 li
373.267 18.5967 li
373.268 18.5967 li
373.269 18.5967 li
373.27 18.5967 li
373.271 18.5967 li
373.272 18.5967 li
373.273 18.5967 li
373.274 18.5967 li
373.275 18.5967 li
373.276 18.5967 li
373.277 18.5967 li
373.278 18.5967 li
373.279 18.5967 li
373.28 18.5967 li
373.281 18.5967 li
373.282 18.5967 li
373.283 18.5967 li
373.284 18.5967 li
373.285 18.5967 li
373.286 18.5967 li
373.287 18.5967 li
373.288 18.5967 li
373.29 18.5967 li
373.291 18.5967 li
373.292 18.5967 li
373.293 18.5967 li
373.294 18.5967 li
373.295 18.5967 li
373.296 18.5967 li
373.297 18.5967 li
373.298 18.5967 li
373.299 18.5967 li
373.3 18.5967 li
373.301 18.5967 li
373.302 18.5967 li
373.303 18.5967 li
373.304 18.5967 li
373.305 18.5967 li
373.306 18.5967 li
373.307 18.5967 li
373.308 18.5967 li
373.309 18.5967 li
373.31 18.5967 li
373.311 18.5967 li
373.312 18.5967 li
373.313 18.5967 li
373.314 18.5967 li
373.315 18.5967 li
373.316 18.5967 li
373.317 18.5967 li
373.318 18.5967 li
373.319 18.5967 li
373.32 18.5967 li
373.321 18.5967 li
373.322 18.5967 li
373.323 18.5967 li
373.324 18.5967 li
373.325 18.5967 li
373.326 18.5967 li
373.327 18.5967 li
373.328 18.5967 li
373.329 18.5967 li
373.33 18.5967 li
373.331 18.5967 li
373.332 18.5967 li
373.333 18.5967 li
373.334 18.5967 li
373.335 18.5967 li
373.336 18.5967 li
373.337 18.5967 li
373.338 18.5967 li
.895628 .7673 0 0 cmyk
@
43.3378 264.597 mo
372.588 264.597 li
372.588 179.847 li
43.3378 179.847 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QZIVAR+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/N <1C60D8A8C9B6079F1E49523970A7CE614BC1CB2AC135B49A6B33564AFCCA
E69F17C685A8629597666C835EDDD27239AEF884B91696774A2A> |-
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B
61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1
E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36
DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B
7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-
/V <1C60D8A8C9B64EDF88209F74DE48C31924050FF0040AA5A034E0BA481252
B18875F38C0C76ED1A659C37AD61> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
/f <1C60D8A8C9B854D08882A1CDE4CC8CF82C721397EF3C1B7F275F9E0F93B7
3057EE87F13D1A76347F24278F0AAB6C40024DD0CC30E14D035B17B8421125C0
8D6E5ECF0FD989FD11DB950870FC66> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QZIVAR+Helvetica /Encoding get
dup 37 /percent put
dup 55 /seven put
dup 58 /colon put
dup 59 /semicolon put
dup 69 /E put
dup 78 /N put
dup 83 /S put
dup 86 /V put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 102 /f put
pop
%ADOEndSubsetFont
/QZIVAR+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /.notdef /four /.notdef /six /seven 
/eight /.notdef /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 6{/.notdef}rp /N 3{/.notdef}rp /R /S 2{/.notdef}rp 
/V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef 
/c /.notdef /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t /u 
138{/.notdef}rp]
QZIVAR+Helvetica nf
QZIVAR+Helvetica*1 [16.5 0 0 -16.5 0 0 ]msf
78.5878 197.046 mo
(EfficientNetV2-S [17]; EER: 22.62%)
[11.0056 4.587 4.587 3.663 8.25 3.66299 9.17401 9.17398 4.58701 11.913 9.17401 4.58699 
11.0056 9.17398 5.49438 11.0056 4.58701 4.58701 9.17398 9.17401 4.58699 4.58699 4.58701 11.0056 
11.0056 11.913 4.58698 4.58701 9.17401 9.17398 4.58701 9.17398 9.17401 0 ]xsh
46.3378 191.421 mo
76.3378 191.421 li
.265019 .809232 0 0 cmyk
@
0 lj
59.0878 193.671 mo
63.5878 193.671 li
63.5878 189.171 li
59.0878 189.171 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QZIVAR+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/K <1C60D8A8C9B64EDF88209F74DE48C33B4B0B93D0D9C0FD0B4C3ED394623E
3A80B45D329FC06BB55248F78872AA55981B9FC8E5ADA631A9747A6CEB10FCCD
65D75EFC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QZIVAR+Helvetica /Encoding get
dup 57 /nine put
dup 75 /K put
pop
%ADOEndSubsetFont
/QZIVAR+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /.notdef /four /.notdef /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 3{/.notdef}rp /R 
/S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /.notdef /n /.notdef /p 2{/.notdef}rp /s 
/t /u 138{/.notdef}rp]
QZIVAR+Helvetica nf
QZIVAR+Helvetica*1 [16.5 0 0 -16.5 0 0 ]msf
78.5878 217.579 mo
(FKNet [8]; EER: 9.04%)
[10.0814 11.0056 11.913 9.174 4.58699 4.58701 4.58701 9.17398 4.58701 4.58701 4.58699 11.0056 
11.0056 11.913 4.58701 4.58701 9.17398 4.58701 9.174 9.174 0 ]xsh
1 lj
46.3378 211.955 mo
76.3378 211.955 li
@
0 lj
61.3378 208.955 mo
61.3378 214.954 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QZIVAR+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3
518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE7
19F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E5897699
5550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77
D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFF
C73DA426D2C4> |-
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E2
2FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D216
1CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361
A4431D76AF6F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QZIVAR+Helvetica /Encoding get
dup 51 /three put
dup 79 /O put
dup 114 /r put
pop
%ADOEndSubsetFont
/QZIVAR+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /.notdef /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N /O 2{/.notdef}rp 
/R /S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 
3{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n /.notdef /p /.notdef 
/r /s /t /u 138{/.notdef}rp]
QZIVAR+Helvetica nf
QZIVAR+Helvetica*1 [16.5 0 0 -16.5 0 0 ]msf
78.5878 238.114 mo
(Ours; E)sh
134.523 238.114 mo
(ER: 3.33%)
[11.0056 11.913 4.58701 4.58701 9.17398 4.58701 9.174 9.174 0 ]xsh
1 lj
46.3378 232.488 mo
76.3378 232.488 li
0 .990631 1 .000396735 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QZIVAR+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/C <1C60D8A8C9B6079FE1CE316282F0E84E7EAE56817E527B1A2FBA7D6E6E3E
84761CC128BB54A99A2A93B5D172E1531D29A45A5EC52E28A860DB78AEF5044D
D841ADA187A0971E5C6028FECC99F95A89CDEF60FF9739318C6CDCFD940AFB97
77EC1EB041B6AC82C7B827BCFC6CB4C10A94B6280806B13F83> |-
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/v <1C60D8A8C9B7A73DC54C6E6FD58E3FF02EC0039EA78A08B0B838392D2447
0C9B580A1092E3692A4C20563FB5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QZIVAR+Helvetica /Encoding get
dup 53 /five put
dup 67 /C put
dup 68 /D put
dup 111 /o put
dup 118 /v put
pop
%ADOEndSubsetFont
/QZIVAR+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/D /E /F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 
/O 2{/.notdef}rp /R /S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e 
/f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /s /t /u /v 137{/.notdef}rp]
QZIVAR+Helvetica nf
QZIVAR+Helvetica*1 [16.5 0 0 -16.5 0 0 ]msf
78.5878 258.648 mo
(DefConvNet [45]; EER: 10.67%)
[11.913 9.174 4.587 11.913 9.17398 9.17401 8.25 11.913 9.174 4.58699 4.58701 4.58701 
9.17398 9.17401 4.58699 4.58699 4.58701 11.0056 11.0056 11.913 4.58698 4.58701 9.17401 9.17398 
4.58701 9.17398 9.17401 0 ]xsh
46.3378 253.023 mo
76.3378 253.023 li
.895628 .7673 0 0 cmyk
@
0 lj
43.3378 264.597 mo
372.588 264.597 li
372.588 179.847 li
43.3378 179.847 li
cp
1 /0 /CSD get_res sepcs
.851074 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/QZIVAS+Helvetica-Bold*1 uf
/QZIVAS+Helvetica-Bold uf
/JAAAAA+Helvetica-Bold uf
/QZIVAR+Helvetica*1 uf
/QZIVAR+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
