%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: crossthu-roc_compare_new.eps-45174.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/16/2022, 10:55:38 AM
%%BoundingBox: 0 0 394 304
%%HiResBoundingBox: 0 0 393.3762 303.8655
%%CropBox: 0 0 393.3762 303.8655
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1027 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-16T10:55:11+08:00"
   xmp:CreateDate="2022-08-16T10:55:11+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.9.0.1467703 \(R2020b\). Operating System: Linux)"
   xmpMM:DocumentID="uuid:581a0fe9-1f6a-11ed-0000-399bd36e52da"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/zhenyuzhou/Desktop/finger-knuckle/deep-learning/codekevin/fknet/test/version-2/cross-thu/crossthu-roc_compare_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -303.865 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 303.865 li
393.376 303.865 li
393.376 0 li
cp
clp
-5.18219 303.876 mo
422.318 303.876 li
422.318 -5.87442 li
-5.18219 -5.87442 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
-5.18219 303.876 mo
422.318 303.876 li
422.318 -5.87442 li
-5.18219 -5.87442 li
cp
f
50.3178 263.376 mo
381.818 263.376 li
381.818 17.3756 li
50.3178 17.3756 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
60.0303 263.376 mo
60.0303 17.3756 li
1 /0 /CSD get_res sepcs
.224609 sep
@
69.9729 263.376 mo
69.9729 17.3756 li
@
77.0276 263.376 mo
77.0276 17.3756 li
@
82.4994 263.376 mo
82.4994 17.3756 li
@
86.9701 263.376 mo
86.9701 17.3756 li
@
90.7502 263.376 mo
90.7502 17.3756 li
@
94.0248 263.376 mo
94.0248 17.3756 li
@
96.9128 263.376 mo
96.9128 17.3756 li
@
99.4968 263.376 mo
99.4968 17.3756 li
@
116.494 263.376 mo
116.494 17.3756 li
@
126.437 263.376 mo
126.437 17.3756 li
@
133.491 263.376 mo
133.491 17.3756 li
@
138.963 263.376 mo
138.963 17.3756 li
@
143.435 263.376 mo
143.435 17.3756 li
@
147.215 263.376 mo
147.215 17.3756 li
@
150.489 263.376 mo
150.489 17.3756 li
@
153.378 263.376 mo
153.378 17.3756 li
@
155.961 263.376 mo
155.961 17.3756 li
@
172.959 263.376 mo
172.959 17.3756 li
@
182.902 263.376 mo
182.902 17.3756 li
@
189.956 263.376 mo
189.956 17.3756 li
@
195.428 263.376 mo
195.428 17.3756 li
@
199.899 263.376 mo
199.899 17.3756 li
@
203.679 263.376 mo
203.679 17.3756 li
@
206.953 263.376 mo
206.953 17.3756 li
@
209.841 263.376 mo
209.841 17.3756 li
@
212.425 263.376 mo
212.425 17.3756 li
@
229.423 263.376 mo
229.423 17.3756 li
@
239.366 263.376 mo
239.366 17.3756 li
@
246.42 263.376 mo
246.42 17.3756 li
@
251.893 263.376 mo
251.893 17.3756 li
@
256.363 263.376 mo
256.363 17.3756 li
@
260.143 263.376 mo
260.143 17.3756 li
@
263.418 263.376 mo
263.418 17.3756 li
@
266.306 263.376 mo
266.306 17.3756 li
@
285.887 263.376 mo
285.887 17.3756 li
@
295.83 263.376 mo
295.83 17.3756 li
@
302.884 263.376 mo
302.884 17.3756 li
@
308.356 263.376 mo
308.356 17.3756 li
@
312.827 263.376 mo
312.827 17.3756 li
@
316.608 263.376 mo
316.608 17.3756 li
@
319.882 263.376 mo
319.882 17.3756 li
@
322.77 263.376 mo
322.77 17.3756 li
@
325.354 263.376 mo
325.354 17.3756 li
@
342.352 263.376 mo
342.352 17.3756 li
@
352.294 263.376 mo
352.294 17.3756 li
@
359.349 263.376 mo
359.349 17.3756 li
@
364.821 263.376 mo
364.821 17.3756 li
@
369.291 263.376 mo
369.291 17.3756 li
@
373.072 263.376 mo
373.072 17.3756 li
@
376.346 263.376 mo
376.346 17.3756 li
@
379.234 263.376 mo
379.234 17.3756 li
@
1 lj
[] 0 dsh
155.961 263.376 mo
155.961 17.3756 li
1 /0 /CSD get_res sepcs
.126953 sep
@
268.89 263.376 mo
268.89 17.3756 li
@
381.818 263.376 mo
381.818 17.3756 li
@
381.818 263.376 mo
50.3178 263.376 li
@
381.818 228.233 mo
50.3178 228.233 li
@
381.818 193.09 mo
50.3178 193.09 li
@
381.818 157.948 mo
50.3178 157.948 li
@
381.818 122.804 mo
50.3178 122.804 li
@
381.818 87.6616 mo
50.3178 87.6616 li
@
381.818 52.5186 mo
50.3178 52.5186 li
@
381.818 17.3756 mo
50.3178 17.3756 li
@
2 lc
50.3178 263.376 mo
381.818 263.376 li
1 /0 /CSD get_res sepcs
.851074 sep
@
50.3178 17.3756 mo
381.818 17.3756 li
@
155.961 263.376 mo
155.961 260.061 li
@
268.89 263.376 mo
268.89 260.061 li
@
381.818 263.376 mo
381.818 260.061 li
@
155.961 17.3756 mo
155.961 20.6906 li
@
268.89 17.3756 mo
268.89 20.6906 li
@
381.818 17.3756 mo
381.818 20.6906 li
@
60.0303 263.376 mo
60.0303 261.718 li
@
69.9729 263.376 mo
69.9729 261.718 li
@
77.0276 263.376 mo
77.0276 261.718 li
@
82.4994 263.376 mo
82.4994 261.718 li
@
86.9701 263.376 mo
86.9701 261.718 li
@
90.7502 263.376 mo
90.7502 261.718 li
@
94.0248 263.376 mo
94.0248 261.718 li
@
96.9128 263.376 mo
96.9128 261.718 li
@
99.4968 263.376 mo
99.4968 261.718 li
@
116.494 263.376 mo
116.494 261.718 li
@
126.437 263.376 mo
126.437 261.718 li
@
133.491 263.376 mo
133.491 261.718 li
@
138.963 263.376 mo
138.963 261.718 li
@
143.435 263.376 mo
143.435 261.718 li
@
147.215 263.376 mo
147.215 261.718 li
@
150.489 263.376 mo
150.489 261.718 li
@
153.378 263.376 mo
153.378 261.718 li
@
155.961 263.376 mo
155.961 261.718 li
@
155.961 263.376 mo
155.961 261.718 li
@
172.959 263.376 mo
172.959 261.718 li
@
182.902 263.376 mo
182.902 261.718 li
@
189.956 263.376 mo
189.956 261.718 li
@
195.428 263.376 mo
195.428 261.718 li
@
199.899 263.376 mo
199.899 261.718 li
@
203.679 263.376 mo
203.679 261.718 li
@
206.953 263.376 mo
206.953 261.718 li
@
209.841 263.376 mo
209.841 261.718 li
@
212.425 263.376 mo
212.425 261.718 li
@
229.423 263.376 mo
229.423 261.718 li
@
239.366 263.376 mo
239.366 261.718 li
@
246.42 263.376 mo
246.42 261.718 li
@
251.893 263.376 mo
251.893 261.718 li
@
256.363 263.376 mo
256.363 261.718 li
@
260.143 263.376 mo
260.143 261.718 li
@
263.418 263.376 mo
263.418 261.718 li
@
266.306 263.376 mo
266.306 261.718 li
@
268.89 263.376 mo
268.89 261.718 li
@
285.887 263.376 mo
285.887 261.718 li
@
295.83 263.376 mo
295.83 261.718 li
@
302.884 263.376 mo
302.884 261.718 li
@
308.356 263.376 mo
308.356 261.718 li
@
312.827 263.376 mo
312.827 261.718 li
@
316.608 263.376 mo
316.608 261.718 li
@
319.882 263.376 mo
319.882 261.718 li
@
322.77 263.376 mo
322.77 261.718 li
@
325.354 263.376 mo
325.354 261.718 li
@
342.352 263.376 mo
342.352 261.718 li
@
352.294 263.376 mo
352.294 261.718 li
@
359.349 263.376 mo
359.349 261.718 li
@
364.821 263.376 mo
364.821 261.718 li
@
369.291 263.376 mo
369.291 261.718 li
@
373.072 263.376 mo
373.072 261.718 li
@
376.346 263.376 mo
376.346 261.718 li
@
379.234 263.376 mo
379.234 261.718 li
@
381.818 263.376 mo
381.818 261.718 li
@
60.0303 17.3756 mo
60.0303 19.0326 li
@
69.9729 17.3756 mo
69.9729 19.0326 li
@
77.0276 17.3756 mo
77.0276 19.0326 li
@
82.4994 17.3756 mo
82.4994 19.0326 li
@
86.9701 17.3756 mo
86.9701 19.0326 li
@
90.7502 17.3756 mo
90.7502 19.0326 li
@
94.0248 17.3756 mo
94.0248 19.0326 li
@
96.9128 17.3756 mo
96.9128 19.0326 li
@
99.4968 17.3756 mo
99.4968 19.0326 li
@
116.494 17.3756 mo
116.494 19.0326 li
@
126.437 17.3756 mo
126.437 19.0326 li
@
133.491 17.3756 mo
133.491 19.0326 li
@
138.963 17.3756 mo
138.963 19.0326 li
@
143.435 17.3756 mo
143.435 19.0326 li
@
147.215 17.3756 mo
147.215 19.0326 li
@
150.489 17.3756 mo
150.489 19.0326 li
@
153.378 17.3756 mo
153.378 19.0326 li
@
155.961 17.3756 mo
155.961 19.0326 li
@
155.961 17.3756 mo
155.961 19.0326 li
@
172.959 17.3756 mo
172.959 19.0326 li
@
182.902 17.3756 mo
182.902 19.0326 li
@
189.956 17.3756 mo
189.956 19.0326 li
@
195.428 17.3756 mo
195.428 19.0326 li
@
199.899 17.3756 mo
199.899 19.0326 li
@
203.679 17.3756 mo
203.679 19.0326 li
@
206.953 17.3756 mo
206.953 19.0326 li
@
209.841 17.3756 mo
209.841 19.0326 li
@
212.425 17.3756 mo
212.425 19.0326 li
@
229.423 17.3756 mo
229.423 19.0326 li
@
239.366 17.3756 mo
239.366 19.0326 li
@
246.42 17.3756 mo
246.42 19.0326 li
@
251.893 17.3756 mo
251.893 19.0326 li
@
256.363 17.3756 mo
256.363 19.0326 li
@
260.143 17.3756 mo
260.143 19.0326 li
@
263.418 17.3756 mo
263.418 19.0326 li
@
266.306 17.3756 mo
266.306 19.0326 li
@
268.89 17.3756 mo
268.89 19.0326 li
@
285.887 17.3756 mo
285.887 19.0326 li
@
295.83 17.3756 mo
295.83 19.0326 li
@
302.884 17.3756 mo
302.884 19.0326 li
@
308.356 17.3756 mo
308.356 19.0326 li
@
312.827 17.3756 mo
312.827 19.0326 li
@
316.608 17.3756 mo
316.608 19.0326 li
@
319.882 17.3756 mo
319.882 19.0326 li
@
322.77 17.3756 mo
322.77 19.0326 li
@
325.354 17.3756 mo
325.354 19.0326 li
@
342.352 17.3756 mo
342.352 19.0326 li
@
352.294 17.3756 mo
352.294 19.0326 li
@
359.349 17.3756 mo
359.349 19.0326 li
@
364.821 17.3756 mo
364.821 19.0326 li
@
369.291 17.3756 mo
369.291 19.0326 li
@
373.072 17.3756 mo
373.072 19.0326 li
@
376.346 17.3756 mo
376.346 19.0326 li
@
379.234 17.3756 mo
379.234 19.0326 li
@
381.818 17.3756 mo
381.818 19.0326 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XAIQUV+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/XAIQUV+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/.notdef /four 12{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t 139{/.notdef}rp]
XAIQUV+Helvetica nf
XAIQUV+Helvetica*1 [12 0 0 -12 0 0 ]msf
143.318 282.876 mo
(10)
[6.672 0 ]xsh
XAIQUV+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
159.068 276.876 mo
(-4)
[3.19673 0 ]xsh
XAIQUV+Helvetica*1 [12 0 0 -12 0 0 ]msf
255.818 282.876 mo
(10)
[6.672 0 ]xsh
XAIQUV+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
271.568 276.876 mo
(-2)
[3.19672 0 ]xsh
XAIQUV+Helvetica*1 [12 0 0 -12 0 0 ]msf
370.568 282.876 mo
(10)
[6.672 0 ]xsh
XAIQUV+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
386.318 276.876 mo
(0)sh
XAIQUV+Helvetica*1 [13.2 0 0 -13.2 0 0 ]msf
140.693 300.276 mo
(Fal)sh
159.028 300.276 mo
(se Acceptance R)sh
258.806 300.276 mo
(ate)sh
50.3178 263.376 mo
50.3178 17.3756 li
@
381.818 263.376 mo
381.818 17.3756 li
@
50.3178 263.376 mo
53.6326 263.376 li
@
50.3178 228.233 mo
53.6326 228.233 li
@
50.3178 193.09 mo
53.6326 193.09 li
@
50.3178 157.948 mo
53.6326 157.948 li
@
50.3178 122.804 mo
53.6326 122.804 li
@
50.3178 87.6616 mo
53.6326 87.6616 li
@
50.3178 52.5186 mo
53.6326 52.5186 li
@
50.3178 17.3756 mo
53.6326 17.3756 li
@
381.818 263.376 mo
378.503 263.376 li
@
381.818 228.233 mo
378.503 228.233 li
@
381.818 193.09 mo
378.503 193.09 li
@
381.818 157.948 mo
378.503 157.948 li
@
381.818 122.804 mo
378.503 122.804 li
@
381.818 87.6616 mo
378.503 87.6616 li
@
381.818 52.5186 mo
378.503 52.5186 li
@
381.818 17.3756 mo
378.503 17.3756 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
XAIQUV+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XAIQUV+Helvetica /Encoding get
dup 46 /period put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/XAIQUV+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /.notdef /four /.notdef /six /.notdef /eight /nine 
7{/.notdef}rp /A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
XAIQUV+Helvetica nf
XAIQUV+Helvetica*1 [12 0 0 -12 0 0 ]msf
18.9178 267.501 mo
(0.86)sh
18.9178 232.358 mo
(0.88)sh
26.4178 197.215 mo
(0.9)sh
18.9178 162.072 mo
(0.92)sh
18.9178 126.929 mo
(0.94)sh
18.9178 91.786 mo
(0.96)sh
18.9178 56.6434 mo
(0.98)sh
37.6678 21.5004 mo
(1)sh
XAIQUV+Helvetica*1 [0 -13.2 -13.2 0 0 0 ]msf
12.1678 226.251 mo
(Genuine Acceptance Rate)
[-10.2696 -7.3392 -7.3392 -7.33919 -2.9304 -7.3392 -7.33919 -3.6696 -8.8045 -6.59999 -6.59999 -7.3392 
-7.3392 -3.66959 -7.3392 -7.3392 -6.60001 -7.33919 -3.6696 -9.5304 -7.3392 -3.6696 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XAIQUW+Helvetica-Bold /JAAAAA+Helvetica-Bold findfont ct_VMDictPut
/XAIQUW+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
XAIQUW+Helvetica-Bold nf
XAIQUW+Helvetica-Bold*1 [13.2 0 0 -13.2 0 0 ]msf
85.9432 11.1576 mo
(Receiver Operating Characteristics)
[9.5304 7.3392 7.3392 7.3392 3.6696 7.3392 7.33919 5.1349 3.6696 10.2696 8.06511 7.33919 
5.1349 7.3392 4.39549 3.6696 8.06509 8.06509 3.66962 9.5304 8.06509 7.3392 5.1349 7.33919 
7.3392 4.39548 7.33923 5.13489 3.66962 7.33917 4.39551 3.66962 7.33917 0 ]xsh
0 lc
50.3178 62.0246 mo
50.3178 59.1436 li
60.2604 56.9826 li
60.2604 49.7816 li
67.3151 48.3416 li
84.3123 47.6216 li
84.3123 46.9016 li
94.2557 44.0206 li
105.525 41.8596 li
115.893 38.9806 li
121.868 36.8196 li
126.668 36.8196 li
134.527 33.9386 li
139.839 31.7786 li
145.248 31.7786 li
150.308 31.0586 li
152.871 30.3376 li
158.677 28.8976 li
161.729 27.4576 li
166.886 26.0166 li
170.514 25.2966 li
173.993 25.2966 li
176.899 24.5776 li
181.264 24.5776 li
185.07 24.5776 li
188.582 24.5776 li
191.77 24.5776 li
194.589 24.5776 li
197.877 24.5776 li
200.775 24.5776 li
204.188 23.8576 li
206.584 23.8576 li
208.977 23.8576 li
211.381 23.8576 li
213.852 23.1366 li
216.253 23.1366 li
218.272 22.4166 li
220.435 22.4166 li
222.303 22.4166 li
224.476 22.4166 li
226.509 21.6966 li
228.318 21.6966 li
230.418 21.6966 li
232.418 21.6966 li
234.24 21.6966 li
236.418 20.9766 li
238.453 20.9766 li
240.736 20.9766 li
242.443 20.9766 li
244.135 20.9766 li
246.039 20.9766 li
247.808 20.9766 li
249.572 20.9766 li
251.159 20.9766 li
252.911 20.9766 li
254.484 20.9766 li
256.057 20.9766 li
257.55 20.9766 li
258.924 20.2566 li
260.472 20.2566 li
261.754 20.2566 li
263.132 20.2566 li
264.517 20.2566 li
265.913 20.2566 li
267.211 20.2566 li
268.541 19.5366 li
269.767 19.5366 li
271.051 19.5366 li
272.268 18.8156 li
273.434 18.8156 li
274.627 18.8156 li
275.782 18.8156 li
276.926 18.8156 li
278.054 18.8156 li
279.146 18.0956 li
280.221 18.0956 li
281.27 18.0956 li
282.337 18.0956 li
283.404 18.0956 li
284.431 18.0956 li
285.461 18.0956 li
286.383 18.0956 li
287.355 18.0956 li
288.282 18.0956 li
289.252 18.0956 li
290.147 18.0956 li
291.063 18.0956 li
291.975 18.0956 li
292.891 18.0956 li
293.765 18.0956 li
294.675 18.0956 li
295.507 18.0956 li
296.352 18.0956 li
297.152 18.0956 li
297.994 18.0956 li
298.778 18.0956 li
299.509 18.0956 li
300.285 18.0956 li
301.088 18.0956 li
301.807 18.0956 li
302.535 18.0956 li
303.282 18.0956 li
304.023 18.0956 li
304.685 18.0956 li
305.397 18.0956 li
306.136 18.0956 li
306.796 18.0956 li
307.437 18.0956 li
308.116 18.0956 li
308.764 18.0956 li
309.398 18.0956 li
310.038 18.0956 li
310.651 18.0956 li
311.28 18.0956 li
311.902 18.0956 li
312.52 18.0956 li
313.127 18.0956 li
313.728 18.0956 li
314.306 18.0956 li
314.888 18.0956 li
315.441 18.0956 li
315.988 18.0956 li
316.527 18.0956 li
317.074 18.0956 li
317.615 18.0956 li
318.127 18.0956 li
318.681 18.0956 li
319.191 18.0956 li
319.711 18.0956 li
320.191 18.0956 li
320.685 18.0956 li
321.166 18.0956 li
321.648 17.3756 li
322.097 17.3756 li
322.562 17.3756 li
323.019 17.3756 li
323.469 17.3756 li
323.92 17.3756 li
324.354 17.3756 li
324.791 17.3756 li
325.228 17.3756 li
325.663 17.3756 li
326.098 17.3756 li
326.507 17.3756 li
326.915 17.3756 li
327.32 17.3756 li
327.721 17.3756 li
328.114 17.3756 li
328.504 17.3756 li
328.891 17.3756 li
329.27 17.3756 li
329.639 17.3756 li
330.014 17.3756 li
330.385 17.3756 li
330.747 17.3756 li
331.103 17.3756 li
331.468 17.3756 li
331.825 17.3756 li
332.184 17.3756 li
332.53 17.3756 li
332.877 17.3756 li
333.216 17.3756 li
333.563 17.3756 li
333.895 17.3756 li
334.222 17.3756 li
334.562 17.3756 li
334.888 17.3756 li
335.2 17.3756 li
335.523 17.3756 li
335.831 17.3756 li
336.141 17.3756 li
336.449 17.3756 li
336.75 17.3756 li
337.045 17.3756 li
337.345 17.3756 li
337.64 17.3756 li
337.936 17.3756 li
338.215 17.3756 li
338.5 17.3756 li
338.782 17.3756 li
339.064 17.3756 li
339.347 17.3756 li
339.617 17.3756 li
339.893 17.3756 li
340.165 17.3756 li
340.441 17.3756 li
340.711 17.3756 li
340.99 17.3756 li
341.255 17.3756 li
341.516 17.3756 li
341.776 17.3756 li
342.034 17.3756 li
342.293 17.3756 li
342.543 17.3756 li
342.795 17.3756 li
343.041 17.3756 li
343.3 17.3756 li
343.538 17.3756 li
343.77 17.3756 li
344.011 17.3756 li
344.254 17.3756 li
344.489 17.3756 li
344.722 17.3756 li
344.952 17.3756 li
345.178 17.3756 li
345.401 17.3756 li
345.628 17.3756 li
345.859 17.3756 li
346.077 17.3756 li
346.3 17.3756 li
346.516 17.3756 li
346.727 17.3756 li
346.945 17.3756 li
347.154 17.3756 li
347.364 17.3756 li
347.578 17.3756 li
347.788 17.3756 li
347.991 17.3756 li
348.197 17.3756 li
348.398 17.3756 li
348.601 17.3756 li
348.798 17.3756 li
348.993 17.3756 li
349.186 17.3756 li
349.378 17.3756 li
349.567 17.3756 li
349.764 17.3756 li
349.954 17.3756 li
350.137 17.3756 li
350.32 17.3756 li
350.504 17.3756 li
350.68 17.3756 li
350.861 17.3756 li
351.031 17.3756 li
351.211 17.3756 li
351.391 17.3756 li
351.573 17.3756 li
351.741 17.3756 li
351.914 17.3756 li
352.089 17.3756 li
352.263 17.3756 li
352.435 17.3756 li
352.609 17.3756 li
352.779 17.3756 li
352.945 17.3756 li
353.108 17.3756 li
353.272 17.3756 li
353.438 17.3756 li
353.6 17.3756 li
353.76 17.3756 li
353.914 17.3756 li
354.07 17.3756 li
354.228 17.3756 li
354.384 17.3756 li
354.538 17.3756 li
354.692 17.3756 li
354.841 17.3756 li
354.988 17.3756 li
355.138 17.3756 li
355.291 17.3756 li
355.435 17.3756 li
355.582 17.3756 li
355.72 17.3756 li
355.866 17.3756 li
356.004 17.3756 li
356.148 17.3756 li
356.286 17.3756 li
356.425 17.3756 li
356.565 17.3756 li
356.7 17.3756 li
356.833 17.3756 li
356.969 17.3756 li
357.102 17.3756 li
357.238 17.3756 li
357.371 17.3756 li
357.504 17.3756 li
357.632 17.3756 li
357.759 17.3756 li
357.892 17.3756 li
358.025 17.3756 li
358.151 17.3756 li
358.275 17.3756 li
358.402 17.3756 li
358.528 17.3756 li
358.654 17.3756 li
358.774 17.3756 li
358.9 17.3756 li
359.022 17.3756 li
359.144 17.3756 li
359.264 17.3756 li
359.381 17.3756 li
359.498 17.3756 li
359.619 17.3756 li
359.734 17.3756 li
359.854 17.3756 li
359.973 17.3756 li
360.095 17.3756 li
360.211 17.3756 li
360.326 17.3756 li
360.441 17.3756 li
360.552 17.3756 li
360.668 17.3756 li
360.78 17.3756 li
360.887 17.3756 li
360.996 17.3756 li
361.107 17.3756 li
361.216 17.3756 li
361.322 17.3756 li
361.425 17.3756 li
361.534 17.3756 li
361.642 17.3756 li
361.75 17.3756 li
361.854 17.3756 li
361.957 17.3756 li
362.059 17.3756 li
362.162 17.3756 li
362.263 17.3756 li
362.364 17.3756 li
362.466 17.3756 li
362.569 17.3756 li
362.664 17.3756 li
362.771 17.3756 li
362.87 17.3756 li
362.97 17.3756 li
363.064 17.3756 li
363.16 17.3756 li
363.255 17.3756 li
363.35 17.3756 li
363.444 17.3756 li
363.536 17.3756 li
363.627 17.3756 li
363.722 17.3756 li
363.812 17.3756 li
363.9 17.3756 li
363.991 17.3756 li
364.079 17.3756 li
364.169 17.3756 li
364.256 17.3756 li
364.343 17.3756 li
364.428 17.3756 li
364.516 17.3756 li
364.603 17.3756 li
364.69 17.3756 li
364.778 17.3756 li
364.864 17.3756 li
364.949 17.3756 li
365.031 17.3756 li
365.115 17.3756 li
365.196 17.3756 li
365.277 17.3756 li
365.366 17.3756 li
365.448 17.3756 li
365.53 17.3756 li
365.611 17.3756 li
365.695 17.3756 li
365.774 17.3756 li
365.854 17.3756 li
365.932 17.3756 li
366.009 17.3756 li
366.09 17.3756 li
366.168 17.3756 li
366.245 17.3756 li
366.322 17.3756 li
366.399 17.3756 li
366.474 17.3756 li
366.548 17.3756 li
366.622 17.3756 li
366.699 17.3756 li
366.772 17.3756 li
366.845 17.3756 li
366.92 17.3756 li
366.994 17.3756 li
367.068 17.3756 li
367.141 17.3756 li
367.213 17.3756 li
367.282 17.3756 li
367.352 17.3756 li
367.422 17.3756 li
367.492 17.3756 li
367.566 17.3756 li
367.636 17.3756 li
367.707 17.3756 li
367.774 17.3756 li
367.843 17.3756 li
367.911 17.3756 li
367.975 17.3756 li
368.043 17.3756 li
368.11 17.3756 li
368.179 17.3756 li
368.25 17.3756 li
368.314 17.3756 li
368.381 17.3756 li
368.448 17.3756 li
368.513 17.3756 li
368.578 17.3756 li
368.641 17.3756 li
368.704 17.3756 li
368.77 17.3756 li
368.832 17.3756 li
368.895 17.3756 li
368.958 17.3756 li
369.018 17.3756 li
369.081 17.3756 li
369.143 17.3756 li
369.204 17.3756 li
369.265 17.3756 li
369.323 17.3756 li
369.386 17.3756 li
369.445 17.3756 li
369.504 17.3756 li
369.564 17.3756 li
369.622 17.3756 li
369.679 17.3756 li
369.739 17.3756 li
369.795 17.3756 li
369.853 17.3756 li
369.911 17.3756 li
369.969 17.3756 li
370.027 17.3756 li
370.084 17.3756 li
370.14 17.3756 li
370.197 17.3756 li
370.252 17.3756 li
370.309 17.3756 li
370.363 17.3756 li
370.42 17.3756 li
370.477 17.3756 li
370.532 17.3756 li
370.586 17.3756 li
370.641 17.3756 li
370.694 17.3756 li
370.747 17.3756 li
370.8 17.3756 li
370.851 17.3756 li
370.904 17.3756 li
370.955 17.3756 li
371.005 17.3756 li
371.056 17.3756 li
371.106 17.3756 li
371.157 17.3756 li
371.209 17.3756 li
371.259 17.3756 li
371.31 17.3756 li
371.359 17.3756 li
371.409 17.3756 li
371.458 17.3756 li
371.508 17.3756 li
371.558 17.3756 li
371.605 17.3756 li
371.652 17.3756 li
371.701 17.3756 li
371.748 17.3756 li
371.795 17.3756 li
371.841 17.3756 li
371.889 17.3756 li
371.936 17.3756 li
371.983 17.3756 li
372.027 17.3756 li
372.073 17.3756 li
372.12 17.3756 li
372.166 17.3756 li
372.211 17.3756 li
372.256 17.3756 li
372.302 17.3756 li
372.345 17.3756 li
372.389 17.3756 li
372.433 17.3756 li
372.476 17.3756 li
372.521 17.3756 li
372.565 17.3756 li
372.609 17.3756 li
372.651 17.3756 li
372.693 17.3756 li
372.737 17.3756 li
372.779 17.3756 li
372.821 17.3756 li
372.862 17.3756 li
372.904 17.3756 li
372.947 17.3756 li
372.989 17.3756 li
373.032 17.3756 li
373.075 17.3756 li
373.114 17.3756 li
373.155 17.3756 li
373.196 17.3756 li
373.236 17.3756 li
373.274 17.3756 li
373.314 17.3756 li
373.352 17.3756 li
373.393 17.3756 li
373.43 17.3756 li
373.469 17.3756 li
373.507 17.3756 li
373.545 17.3756 li
373.583 17.3756 li
373.622 17.3756 li
373.661 17.3756 li
373.698 17.3756 li
373.737 17.3756 li
373.773 17.3756 li
373.811 17.3756 li
373.849 17.3756 li
373.888 17.3756 li
373.923 17.3756 li
373.96 17.3756 li
373.997 17.3756 li
374.034 17.3756 li
374.07 17.3756 li
374.106 17.3756 li
374.14 17.3756 li
374.176 17.3756 li
374.211 17.3756 li
374.247 17.3756 li
374.284 17.3756 li
374.32 17.3756 li
374.356 17.3756 li
374.39 17.3756 li
374.425 17.3756 li
374.458 17.3756 li
374.492 17.3756 li
374.527 17.3756 li
374.557 17.3756 li
374.591 17.3756 li
374.625 17.3756 li
374.659 17.3756 li
374.693 17.3756 li
374.723 17.3756 li
374.755 17.3756 li
374.788 17.3756 li
374.822 17.3756 li
374.854 17.3756 li
374.886 17.3756 li
374.919 17.3756 li
374.952 17.3756 li
374.984 17.3756 li
375.017 17.3756 li
375.05 17.3756 li
375.082 17.3756 li
375.114 17.3756 li
375.144 17.3756 li
375.175 17.3756 li
375.206 17.3756 li
375.236 17.3756 li
375.265 17.3756 li
375.295 17.3756 li
375.327 17.3756 li
375.357 17.3756 li
375.388 17.3756 li
375.418 17.3756 li
375.45 17.3756 li
375.481 17.3756 li
375.51 17.3756 li
375.541 17.3756 li
375.572 17.3756 li
375.6 17.3756 li
375.627 17.3756 li
375.655 17.3756 li
375.685 17.3756 li
375.713 17.3756 li
375.74 17.3756 li
375.769 17.3756 li
375.798 17.3756 li
375.825 17.3756 li
375.853 17.3756 li
375.882 17.3756 li
375.911 17.3756 li
375.939 17.3756 li
375.966 17.3756 li
375.994 17.3756 li
376.023 17.3756 li
376.05 17.3756 li
376.077 17.3756 li
376.104 17.3756 li
376.131 17.3756 li
376.159 17.3756 li
376.186 17.3756 li
376.213 17.3756 li
376.24 17.3756 li
376.268 17.3756 li
376.294 17.3756 li
376.32 17.3756 li
376.345 17.3756 li
376.372 17.3756 li
376.397 17.3756 li
376.423 17.3756 li
376.449 17.3756 li
376.474 17.3756 li
376.501 17.3756 li
376.526 17.3756 li
376.551 17.3756 li
376.576 17.3756 li
376.601 17.3756 li
376.625 17.3756 li
376.651 17.3756 li
376.677 17.3756 li
376.702 17.3756 li
376.724 17.3756 li
376.749 17.3756 li
376.774 17.3756 li
376.8 17.3756 li
376.824 17.3756 li
376.846 17.3756 li
376.871 17.3756 li
376.895 17.3756 li
376.918 17.3756 li
376.943 17.3756 li
376.966 17.3756 li
376.989 17.3756 li
377.012 17.3756 li
377.034 17.3756 li
377.058 17.3756 li
377.08 17.3756 li
377.104 17.3756 li
377.126 17.3756 li
377.149 17.3756 li
377.172 17.3756 li
377.193 17.3756 li
377.215 17.3756 li
377.236 17.3756 li
377.259 17.3756 li
377.281 17.3756 li
377.301 17.3756 li
377.322 17.3756 li
377.343 17.3756 li
377.365 17.3756 li
377.386 17.3756 li
377.407 17.3756 li
377.428 17.3756 li
377.449 17.3756 li
377.469 17.3756 li
377.488 17.3756 li
377.509 17.3756 li
377.53 17.3756 li
377.549 17.3756 li
377.569 17.3756 li
377.589 17.3756 li
377.61 17.3756 li
377.629 17.3756 li
377.65 17.3756 li
377.67 17.3756 li
377.689 17.3756 li
377.71 17.3756 li
377.73 17.3756 li
377.749 17.3756 li
377.77 17.3756 li
377.788 17.3756 li
377.807 17.3756 li
377.827 17.3756 li
377.846 17.3756 li
377.865 17.3756 li
377.884 17.3756 li
377.902 17.3756 li
377.921 17.3756 li
377.94 17.3756 li
377.959 17.3756 li
377.977 17.3756 li
377.995 17.3756 li
378.013 17.3756 li
378.031 17.3756 li
378.048 17.3756 li
378.065 17.3756 li
378.083 17.3756 li
378.1 17.3756 li
378.117 17.3756 li
378.136 17.3756 li
378.153 17.3756 li
378.171 17.3756 li
378.187 17.3756 li
378.204 17.3756 li
378.222 17.3756 li
378.239 17.3756 li
378.256 17.3756 li
378.273 17.3756 li
378.289 17.3756 li
378.306 17.3756 li
378.323 17.3756 li
378.339 17.3756 li
378.354 17.3756 li
378.372 17.3756 li
378.388 17.3756 li
378.403 17.3756 li
378.42 17.3756 li
378.436 17.3756 li
378.451 17.3756 li
378.466 17.3756 li
378.481 17.3756 li
378.497 17.3756 li
378.511 17.3756 li
378.529 17.3756 li
378.543 17.3756 li
378.559 17.3756 li
378.574 17.3756 li
378.589 17.3756 li
378.604 17.3756 li
378.619 17.3756 li
378.634 17.3756 li
378.649 17.3756 li
378.664 17.3756 li
378.679 17.3756 li
378.693 17.3756 li
378.709 17.3756 li
378.724 17.3756 li
378.738 17.3756 li
378.753 17.3756 li
378.768 17.3756 li
378.781 17.3756 li
378.795 17.3756 li
378.81 17.3756 li
378.824 17.3756 li
378.839 17.3756 li
378.854 17.3756 li
378.869 17.3756 li
378.882 17.3756 li
378.897 17.3756 li
378.91 17.3756 li
378.924 17.3756 li
378.938 17.3756 li
378.952 17.3756 li
378.966 17.3756 li
378.979 17.3756 li
378.993 17.3756 li
379.006 17.3756 li
379.02 17.3756 li
379.035 17.3756 li
379.048 17.3756 li
379.061 17.3756 li
379.075 17.3756 li
379.089 17.3756 li
379.102 17.3756 li
379.114 17.3756 li
379.127 17.3756 li
379.139 17.3756 li
379.152 17.3756 li
379.166 17.3756 li
379.179 17.3756 li
379.191 17.3756 li
379.204 17.3756 li
379.217 17.3756 li
379.228 17.3756 li
379.242 17.3756 li
379.254 17.3756 li
379.266 17.3756 li
379.279 17.3756 li
379.291 17.3756 li
379.303 17.3756 li
379.316 17.3756 li
379.328 17.3756 li
379.34 17.3756 li
379.352 17.3756 li
379.363 17.3756 li
379.375 17.3756 li
379.388 17.3756 li
379.4 17.3756 li
379.412 17.3756 li
379.424 17.3756 li
379.436 17.3756 li
379.448 17.3756 li
379.461 17.3756 li
379.472 17.3756 li
379.484 17.3756 li
379.496 17.3756 li
379.508 17.3756 li
379.519 17.3756 li
379.53 17.3756 li
379.541 17.3756 li
379.552 17.3756 li
379.563 17.3756 li
379.575 17.3756 li
379.585 17.3756 li
379.597 17.3756 li
379.607 17.3756 li
379.618 17.3756 li
379.629 17.3756 li
379.639 17.3756 li
379.65 17.3756 li
379.661 17.3756 li
379.672 17.3756 li
379.683 17.3756 li
379.693 17.3756 li
379.703 17.3756 li
379.713 17.3756 li
379.723 17.3756 li
379.733 17.3756 li
379.744 17.3756 li
379.755 17.3756 li
379.765 17.3756 li
379.775 17.3756 li
379.786 17.3756 li
379.796 17.3756 li
379.806 17.3756 li
379.815 17.3756 li
379.825 17.3756 li
379.835 17.3756 li
379.845 17.3756 li
379.855 17.3756 li
379.866 17.3756 li
379.875 17.3756 li
379.884 17.3756 li
379.894 17.3756 li
379.904 17.3756 li
379.912 17.3756 li
379.922 17.3756 li
379.931 17.3756 li
379.941 17.3756 li
379.95 17.3756 li
379.959 17.3756 li
379.968 17.3756 li
379.977 17.3756 li
379.986 17.3756 li
379.995 17.3756 li
380.004 17.3756 li
380.013 17.3756 li
380.021 17.3756 li
380.031 17.3756 li
380.04 17.3756 li
380.05 17.3756 li
380.058 17.3756 li
380.067 17.3756 li
380.077 17.3756 li
380.085 17.3756 li
380.093 17.3756 li
380.102 17.3756 li
380.112 17.3756 li
380.12 17.3756 li
380.129 17.3756 li
380.137 17.3756 li
380.145 17.3756 li
380.154 17.3756 li
380.164 17.3756 li
380.171 17.3756 li
380.18 17.3756 li
380.188 17.3756 li
380.195 17.3756 li
380.204 17.3756 li
380.212 17.3756 li
380.22 17.3756 li
380.228 17.3756 li
380.236 17.3756 li
380.244 17.3756 li
380.252 17.3756 li
380.26 17.3756 li
380.268 17.3756 li
380.276 17.3756 li
380.285 17.3756 li
380.293 17.3756 li
380.301 17.3756 li
380.309 17.3756 li
380.317 17.3756 li
380.324 17.3756 li
380.332 17.3756 li
380.34 17.3756 li
380.347 17.3756 li
380.355 17.3756 li
380.362 17.3756 li
380.37 17.3756 li
380.377 17.3756 li
380.385 17.3756 li
380.391 17.3756 li
380.399 17.3756 li
380.407 17.3756 li
380.414 17.3756 li
380.422 17.3756 li
380.428 17.3756 li
380.436 17.3756 li
380.443 17.3756 li
380.45 17.3756 li
380.457 17.3756 li
380.464 17.3756 li
380.472 17.3756 li
380.479 17.3756 li
380.486 17.3756 li
380.493 17.3756 li
380.5 17.3756 li
380.507 17.3756 li
380.514 17.3756 li
380.52 17.3756 li
380.527 17.3756 li
380.533 17.3756 li
380.541 17.3756 li
380.548 17.3756 li
380.554 17.3756 li
380.561 17.3756 li
380.568 17.3756 li
380.574 17.3756 li
380.58 17.3756 li
380.586 17.3756 li
380.593 17.3756 li
380.599 17.3756 li
380.606 17.3756 li
380.613 17.3756 li
380.62 17.3756 li
380.625 17.3756 li
380.632 17.3756 li
380.638 17.3756 li
380.644 17.3756 li
380.65 17.3756 li
380.657 17.3756 li
380.663 17.3756 li
380.67 17.3756 li
380.677 17.3756 li
380.682 17.3756 li
380.689 17.3756 li
380.695 17.3756 li
380.701 17.3756 li
380.707 17.3756 li
380.712 17.3756 li
380.718 17.3756 li
380.724 17.3756 li
380.729 17.3756 li
380.734 17.3756 li
380.74 17.3756 li
380.746 17.3756 li
380.752 17.3756 li
380.757 17.3756 li
380.763 17.3756 li
380.769 17.3756 li
380.774 17.3756 li
380.779 17.3756 li
380.784 17.3756 li
380.789 17.3756 li
380.795 17.3756 li
380.8 17.3756 li
380.806 17.3756 li
380.811 17.3756 li
380.816 17.3756 li
380.821 17.3756 li
380.827 17.3756 li
380.832 17.3756 li
380.837 17.3756 li
380.842 17.3756 li
380.848 17.3756 li
380.853 17.3756 li
380.857 17.3756 li
380.862 17.3756 li
380.867 17.3756 li
380.872 17.3756 li
380.877 17.3756 li
380.881 17.3756 li
380.886 17.3756 li
380.892 17.3756 li
380.897 17.3756 li
380.902 17.3756 li
380.907 17.3756 li
380.911 17.3756 li
380.916 17.3756 li
380.922 17.3756 li
380.927 17.3756 li
380.932 17.3756 li
380.936 17.3756 li
380.941 17.3756 li
380.946 17.3756 li
380.951 17.3756 li
380.956 17.3756 li
380.961 17.3756 li
380.965 17.3756 li
380.97 17.3756 li
380.975 17.3756 li
380.98 17.3756 li
380.983 17.3756 li
380.987 17.3756 li
380.991 17.3756 li
380.997 17.3756 li
381.001 17.3756 li
381.005 17.3756 li
381.009 17.3756 li
381.013 17.3756 li
381.017 17.3756 li
381.022 17.3756 li
381.027 17.3756 li
381.031 17.3756 li
381.036 17.3756 li
381.04 17.3756 li
381.045 17.3756 li
381.049 17.3756 li
381.053 17.3756 li
381.057 17.3756 li
381.061 17.3756 li
381.066 17.3756 li
381.069 17.3756 li
381.073 17.3756 li
381.077 17.3756 li
381.081 17.3756 li
381.085 17.3756 li
381.089 17.3756 li
381.093 17.3756 li
381.097 17.3756 li
381.102 17.3756 li
381.106 17.3756 li
381.109 17.3756 li
381.113 17.3756 li
381.117 17.3756 li
381.12 17.3756 li
381.125 17.3756 li
381.129 17.3756 li
381.133 17.3756 li
381.136 17.3756 li
381.141 17.3756 li
381.145 17.3756 li
381.149 17.3756 li
381.153 17.3756 li
381.157 17.3756 li
381.159 17.3756 li
381.164 17.3756 li
381.168 17.3756 li
381.172 17.3756 li
381.175 17.3756 li
381.179 17.3756 li
381.183 17.3756 li
381.187 17.3756 li
381.19 17.3756 li
381.194 17.3756 li
381.198 17.3756 li
381.202 17.3756 li
381.205 17.3756 li
381.209 17.3756 li
381.212 17.3756 li
381.215 17.3756 li
381.219 17.3756 li
381.221 17.3756 li
381.224 17.3756 li
381.228 17.3756 li
381.231 17.3756 li
381.234 17.3756 li
381.237 17.3756 li
381.241 17.3756 li
381.243 17.3756 li
381.247 17.3756 li
381.251 17.3756 li
381.254 17.3756 li
381.257 17.3756 li
381.26 17.3756 li
381.263 17.3756 li
381.266 17.3756 li
381.27 17.3756 li
381.273 17.3756 li
381.275 17.3756 li
381.279 17.3756 li
381.281 17.3756 li
381.284 17.3756 li
381.287 17.3756 li
381.29 17.3756 li
381.293 17.3756 li
381.297 17.3756 li
381.299 17.3756 li
381.302 17.3756 li
381.305 17.3756 li
381.307 17.3756 li
381.31 17.3756 li
381.313 17.3756 li
381.317 17.3756 li
381.32 17.3756 li
381.323 17.3756 li
381.325 17.3756 li
381.328 17.3756 li
381.331 17.3756 li
381.334 17.3756 li
381.336 17.3756 li
381.339 17.3756 li
381.341 17.3756 li
381.344 17.3756 li
381.346 17.3756 li
381.349 17.3756 li
381.352 17.3756 li
381.355 17.3756 li
381.357 17.3756 li
381.36 17.3756 li
381.363 17.3756 li
381.365 17.3756 li
381.368 17.3756 li
381.371 17.3756 li
381.373 17.3756 li
381.376 17.3756 li
381.379 17.3756 li
381.381 17.3756 li
381.384 17.3756 li
381.386 17.3756 li
381.389 17.3756 li
381.391 17.3756 li
381.393 17.3756 li
381.396 17.3756 li
381.398 17.3756 li
381.401 17.3756 li
381.403 17.3756 li
381.406 17.3756 li
381.408 17.3756 li
381.41 17.3756 li
381.413 17.3756 li
381.415 17.3756 li
381.418 17.3756 li
381.42 17.3756 li
381.423 17.3756 li
381.425 17.3756 li
381.428 17.3756 li
381.43 17.3756 li
381.432 17.3756 li
381.435 17.3756 li
381.437 17.3756 li
381.439 17.3756 li
381.441 17.3756 li
381.444 17.3756 li
381.446 17.3756 li
381.448 17.3756 li
381.451 17.3756 li
381.454 17.3756 li
381.456 17.3756 li
381.459 17.3756 li
381.46 17.3756 li
381.463 17.3756 li
381.466 17.3756 li
381.467 17.3756 li
381.469 17.3756 li
381.472 17.3756 li
381.474 17.3756 li
381.476 17.3756 li
381.478 17.3756 li
381.481 17.3756 li
381.483 17.3756 li
381.485 17.3756 li
381.487 17.3756 li
381.489 17.3756 li
381.49 17.3756 li
381.493 17.3756 li
381.495 17.3756 li
381.496 17.3756 li
381.498 17.3756 li
381.501 17.3756 li
381.502 17.3756 li
381.504 17.3756 li
381.507 17.3756 li
381.509 17.3756 li
381.511 17.3756 li
381.513 17.3756 li
381.515 17.3756 li
381.516 17.3756 li
381.519 17.3756 li
381.521 17.3756 li
381.523 17.3756 li
381.525 17.3756 li
381.526 17.3756 li
381.529 17.3756 li
381.531 17.3756 li
381.533 17.3756 li
381.534 17.3756 li
381.536 17.3756 li
381.538 17.3756 li
381.54 17.3756 li
381.541 17.3756 li
381.543 17.3756 li
381.545 17.3756 li
381.547 17.3756 li
381.548 17.3756 li
381.55 17.3756 li
381.552 17.3756 li
381.553 17.3756 li
381.556 17.3756 li
381.557 17.3756 li
381.559 17.3756 li
381.56 17.3756 li
381.561 17.3756 li
381.563 17.3756 li
381.564 17.3756 li
381.566 17.3756 li
381.568 17.3756 li
381.57 17.3756 li
381.571 17.3756 li
381.573 17.3756 li
381.574 17.3756 li
381.576 17.3756 li
381.578 17.3756 li
381.579 17.3756 li
381.581 17.3756 li
381.582 17.3756 li
381.584 17.3756 li
381.586 17.3756 li
381.588 17.3756 li
381.59 17.3756 li
381.592 17.3756 li
381.594 17.3756 li
381.595 17.3756 li
381.597 17.3756 li
381.598 17.3756 li
381.6 17.3756 li
381.602 17.3756 li
381.604 17.3756 li
381.605 17.3756 li
381.606 17.3756 li
381.607 17.3756 li
381.609 17.3756 li
381.611 17.3756 li
381.613 17.3756 li
381.614 17.3756 li
381.616 17.3756 li
381.618 17.3756 li
381.62 17.3756 li
381.622 17.3756 li
381.623 17.3756 li
381.624 17.3756 li
381.625 17.3756 li
381.627 17.3756 li
381.63 17.3756 li
381.631 17.3756 li
381.632 17.3756 li
381.634 17.3756 li
381.636 17.3756 li
381.637 17.3756 li
381.639 17.3756 li
381.64 17.3756 li
381.642 17.3756 li
381.643 17.3756 li
381.644 17.3756 li
381.645 17.3756 li
381.647 17.3756 li
381.648 17.3756 li
381.649 17.3756 li
381.65 17.3756 li
381.652 17.3756 li
381.653 17.3756 li
381.654 17.3756 li
381.655 17.3756 li
381.656 17.3756 li
381.657 17.3756 li
381.658 17.3756 li
381.66 17.3756 li
381.661 17.3756 li
381.662 17.3756 li
381.663 17.3756 li
381.664 17.3756 li
381.665 17.3756 li
381.666 17.3756 li
381.667 17.3756 li
381.668 17.3756 li
381.669 17.3756 li
381.67 17.3756 li
381.671 17.3756 li
381.672 17.3756 li
381.673 17.3756 li
381.674 17.3756 li
381.675 17.3756 li
381.677 17.3756 li
381.678 17.3756 li
381.679 17.3756 li
381.68 17.3756 li
381.681 17.3756 li
381.682 17.3756 li
381.683 17.3756 li
381.684 17.3756 li
381.685 17.3756 li
381.686 17.3756 li
381.687 17.3756 li
381.688 17.3756 li
381.689 17.3756 li
381.691 17.3756 li
381.692 17.3756 li
381.693 17.3756 li
381.694 17.3756 li
381.695 17.3756 li
381.696 17.3756 li
381.697 17.3756 li
381.698 17.3756 li
381.699 17.3756 li
381.7 17.3756 li
381.701 17.3756 li
381.702 17.3756 li
381.703 17.3756 li
381.704 17.3756 li
381.705 17.3756 li
381.706 17.3756 li
381.707 17.3756 li
381.709 17.3756 li
381.71 17.3756 li
381.711 17.3756 li
381.712 17.3756 li
381.713 17.3756 li
381.714 17.3756 li
381.715 17.3756 li
381.716 17.3756 li
381.717 17.3756 li
381.718 17.3756 li
381.719 17.3756 li
381.72 17.3756 li
381.721 17.3756 li
381.722 17.3756 li
381.723 17.3756 li
381.724 17.3756 li
381.725 17.3756 li
381.726 17.3756 li
381.727 17.3756 li
381.728 17.3756 li
381.729 17.3756 li
381.73 17.3756 li
381.731 17.3756 li
381.732 17.3756 li
381.733 17.3756 li
381.734 17.3756 li
381.735 17.3756 li
381.736 17.3756 li
381.737 17.3756 li
381.738 17.3756 li
381.739 17.3756 li
381.74 17.3756 li
381.741 17.3756 li
381.742 17.3756 li
381.743 17.3756 li
381.744 17.3756 li
381.745 17.3756 li
381.746 17.3756 li
381.747 17.3756 li
381.748 17.3756 li
381.749 17.3756 li
381.75 17.3756 li
381.751 17.3756 li
381.752 17.3756 li
381.753 17.3756 li
381.754 17.3756 li
381.755 17.3756 li
381.756 17.3756 li
381.757 17.3756 li
381.758 17.3756 li
381.759 17.3756 li
381.76 17.3756 li
381.761 17.3756 li
381.762 17.3756 li
381.763 17.3756 li
381.764 17.3756 li
381.765 17.3756 li
381.766 17.3756 li
381.767 17.3756 li
381.768 17.3756 li
381.769 17.3756 li
381.77 17.3756 li
381.771 17.3756 li
381.772 17.3756 li
381.773 17.3756 li
381.774 17.3756 li
381.775 17.3756 li
381.776 17.3756 li
381.777 17.3756 li
381.778 17.3756 li
381.779 17.3756 li
381.78 17.3756 li
381.781 17.3756 li
381.782 17.3756 li
381.783 17.3756 li
381.784 17.3756 li
381.785 17.3756 li
381.786 17.3756 li
381.787 17.3756 li
381.788 17.3756 li
381.789 17.3756 li
381.79 17.3756 li
381.791 17.3756 li
381.792 17.3756 li
381.793 17.3756 li
381.794 17.3756 li
381.795 17.3756 li
381.796 17.3756 li
381.797 17.3756 li
381.798 17.3756 li
381.799 17.3756 li
381.8 17.3756 li
381.801 17.3756 li
381.802 17.3756 li
381.803 17.3756 li
381.804 17.3756 li
381.805 17.3756 li
381.806 17.3756 li
381.807 17.3756 li
381.808 17.3756 li
381.809 17.3756 li
381.81 17.3756 li
381.811 17.3756 li
381.812 17.3756 li
381.813 17.3756 li
381.814 17.3756 li
381.815 17.3756 li
381.816 17.3756 li
381.817 17.3756 li
381.818 17.3756 li
/1 
[/DeviceCMYK] /CSA add_res
.265019 .809232 0 0 cmyk
@
0 lj
48.0678 61.3936 mo
52.5678 61.3936 li
52.5678 56.8936 li
48.0678 56.8936 li
cp
@
113.644 41.2296 mo
118.144 41.2296 li
118.144 36.7296 li
113.644 36.7296 li
cp
@
164.636 28.2676 mo
169.136 28.2676 li
169.136 23.7676 li
164.636 23.7676 li
cp
@
198.525 26.8276 mo
203.025 26.8276 li
203.025 22.3276 li
198.525 22.3276 li
cp
@
222.226 24.6666 mo
226.726 24.6666 li
226.726 20.1666 li
222.226 20.1666 li
cp
@
241.885 23.2266 mo
246.385 23.2266 li
246.385 18.7266 li
241.885 18.7266 li
cp
@
258.222 22.5056 mo
262.722 22.5056 li
262.722 18.0056 li
258.222 18.0056 li
cp
@
271.184 21.0656 mo
275.684 21.0656 li
275.684 16.5656 li
271.184 16.5656 li
cp
@
282.181 20.3456 mo
286.681 20.3456 li
286.681 15.8456 li
282.181 15.8456 li
cp
@
291.515 20.3456 mo
296.015 20.3456 li
296.015 15.8456 li
291.515 15.8456 li
cp
@
299.557 20.3456 mo
304.057 20.3456 li
304.057 15.8456 li
299.557 15.8456 li
cp
@
306.514 20.3456 mo
311.014 20.3456 li
311.014 15.8456 li
306.514 15.8456 li
cp
@
312.638 20.3456 mo
317.138 20.3456 li
317.138 15.8456 li
312.638 15.8456 li
cp
@
317.941 20.3456 mo
322.441 20.3456 li
322.441 15.8456 li
317.941 15.8456 li
cp
@
322.541 19.6256 mo
327.041 19.6256 li
327.041 15.1256 li
322.541 15.1256 li
cp
@
326.641 19.6256 mo
331.141 19.6256 li
331.141 15.1256 li
326.641 15.1256 li
cp
@
330.281 19.6256 mo
334.781 19.6256 li
334.781 15.1256 li
330.281 15.1256 li
cp
@
333.581 19.6256 mo
338.081 19.6256 li
338.081 15.1256 li
333.581 15.1256 li
cp
@
336.532 19.6256 mo
341.032 19.6256 li
341.032 15.1256 li
336.532 15.1256 li
cp
@
339.266 19.6256 mo
343.766 19.6256 li
343.766 15.1256 li
339.266 15.1256 li
cp
@
341.761 19.6256 mo
346.261 19.6256 li
346.261 15.1256 li
341.761 15.1256 li
cp
@
344.05 19.6256 mo
348.55 19.6256 li
348.55 15.1256 li
344.05 15.1256 li
cp
@
346.148 19.6256 mo
350.648 19.6256 li
350.648 15.1256 li
346.148 15.1256 li
cp
@
348.07 19.6256 mo
352.57 19.6256 li
352.57 15.1256 li
348.07 15.1256 li
cp
@
349.839 19.6256 mo
354.339 19.6256 li
354.339 15.1256 li
349.839 15.1256 li
cp
@
351.51 19.6256 mo
356.01 19.6256 li
356.01 15.1256 li
351.51 15.1256 li
cp
@
353.041 19.6256 mo
357.541 19.6256 li
357.541 15.1256 li
353.041 15.1256 li
cp
@
354.45 19.6256 mo
358.95 19.6256 li
358.95 15.1256 li
354.45 15.1256 li
cp
@
355.775 19.6256 mo
360.275 19.6256 li
360.275 15.1256 li
355.775 15.1256 li
cp
@
357.014 19.6256 mo
361.514 19.6256 li
361.514 15.1256 li
357.014 15.1256 li
cp
@
358.191 19.6256 mo
362.691 19.6256 li
362.691 15.1256 li
358.191 15.1256 li
cp
@
359.284 19.6256 mo
363.784 19.6256 li
363.784 15.1256 li
359.284 15.1256 li
cp
@
360.32 19.6256 mo
364.82 19.6256 li
364.82 15.1256 li
360.32 15.1256 li
cp
@
361.286 19.6256 mo
365.786 19.6256 li
365.786 15.1256 li
361.286 15.1256 li
cp
@
362.178 19.6256 mo
366.678 19.6256 li
366.678 15.1256 li
362.178 15.1256 li
cp
@
363.027 19.6256 mo
367.527 19.6256 li
367.527 15.1256 li
363.027 15.1256 li
cp
@
363.84 19.6256 mo
368.34 19.6256 li
368.34 15.1256 li
363.84 15.1256 li
cp
@
364.595 19.6256 mo
369.095 19.6256 li
369.095 15.1256 li
364.595 15.1256 li
cp
@
365.315 19.6256 mo
369.815 19.6256 li
369.815 15.1256 li
365.315 15.1256 li
cp
@
366 19.6256 mo
370.5 19.6256 li
370.5 15.1256 li
366 15.1256 li
cp
@
366.645 19.6256 mo
371.145 19.6256 li
371.145 15.1256 li
366.645 15.1256 li
cp
@
367.254 19.6256 mo
371.754 19.6256 li
371.754 15.1256 li
367.254 15.1256 li
cp
@
367.834 19.6256 mo
372.334 19.6256 li
372.334 15.1256 li
367.834 15.1256 li
cp
@
368.391 19.6256 mo
372.891 19.6256 li
372.891 15.1256 li
368.391 15.1256 li
cp
@
368.907 19.6256 mo
373.407 19.6256 li
373.407 15.1256 li
368.907 15.1256 li
cp
@
369.402 19.6256 mo
373.902 19.6256 li
373.902 15.1256 li
369.402 15.1256 li
cp
@
369.87 19.6256 mo
374.37 19.6256 li
374.37 15.1256 li
369.87 15.1256 li
cp
@
370.315 19.6256 mo
374.815 19.6256 li
374.815 15.1256 li
370.315 15.1256 li
cp
@
370.739 19.6256 mo
375.239 19.6256 li
375.239 15.1256 li
370.739 15.1256 li
cp
@
371.143 19.6256 mo
375.643 19.6256 li
375.643 15.1256 li
371.143 15.1256 li
cp
@
371.523 19.6256 mo
376.023 19.6256 li
376.023 15.1256 li
371.523 15.1256 li
cp
@
371.89 19.6256 mo
376.39 19.6256 li
376.39 15.1256 li
371.89 15.1256 li
cp
@
372.242 19.6256 mo
376.742 19.6256 li
376.742 15.1256 li
372.242 15.1256 li
cp
@
372.572 19.6256 mo
377.072 19.6256 li
377.072 15.1256 li
372.572 15.1256 li
cp
@
372.894 19.6256 mo
377.394 19.6256 li
377.394 15.1256 li
372.894 15.1256 li
cp
@
373.199 19.6256 mo
377.699 19.6256 li
377.699 15.1256 li
373.199 15.1256 li
cp
@
373.49 19.6256 mo
377.99 19.6256 li
377.99 15.1256 li
373.49 15.1256 li
cp
@
373.773 19.6256 mo
378.273 19.6256 li
378.273 15.1256 li
373.773 15.1256 li
cp
@
374.044 19.6256 mo
378.544 19.6256 li
378.544 15.1256 li
374.044 15.1256 li
cp
@
374.301 19.6256 mo
378.801 19.6256 li
378.801 15.1256 li
374.301 15.1256 li
cp
@
374.55 19.6256 mo
379.05 19.6256 li
379.05 15.1256 li
374.55 15.1256 li
cp
@
374.784 19.6256 mo
379.284 19.6256 li
379.284 15.1256 li
374.784 15.1256 li
cp
@
375.009 19.6256 mo
379.509 19.6256 li
379.509 15.1256 li
375.009 15.1256 li
cp
@
375.219 19.6256 mo
379.719 19.6256 li
379.719 15.1256 li
375.219 15.1256 li
cp
@
375.421 19.6256 mo
379.921 19.6256 li
379.921 15.1256 li
375.421 15.1256 li
cp
@
375.615 19.6256 mo
380.115 19.6256 li
380.115 15.1256 li
375.615 15.1256 li
cp
@
375.798 19.6256 mo
380.298 19.6256 li
380.298 15.1256 li
375.798 15.1256 li
cp
@
375.972 19.6256 mo
380.472 19.6256 li
380.472 15.1256 li
375.972 15.1256 li
cp
@
376.138 19.6256 mo
380.638 19.6256 li
380.638 15.1256 li
376.138 15.1256 li
cp
@
376.294 19.6256 mo
380.794 19.6256 li
380.794 15.1256 li
376.294 15.1256 li
cp
@
376.443 19.6256 mo
380.943 19.6256 li
380.943 15.1256 li
376.443 15.1256 li
cp
@
376.589 19.6256 mo
381.089 19.6256 li
381.089 15.1256 li
376.589 15.1256 li
cp
@
376.729 19.6256 mo
381.229 19.6256 li
381.229 15.1256 li
376.729 15.1256 li
cp
@
376.864 19.6256 mo
381.364 19.6256 li
381.364 15.1256 li
376.864 15.1256 li
cp
@
376.992 19.6256 mo
381.492 19.6256 li
381.492 15.1256 li
376.992 15.1256 li
cp
@
377.114 19.6256 mo
381.614 19.6256 li
381.614 15.1256 li
377.114 15.1256 li
cp
@
377.234 19.6256 mo
381.734 19.6256 li
381.734 15.1256 li
377.234 15.1256 li
cp
@
377.347 19.6256 mo
381.847 19.6256 li
381.847 15.1256 li
377.347 15.1256 li
cp
@
377.453 19.6256 mo
381.953 19.6256 li
381.953 15.1256 li
377.453 15.1256 li
cp
@
377.556 19.6256 mo
382.056 19.6256 li
382.056 15.1256 li
377.556 15.1256 li
cp
@
377.654 19.6256 mo
382.154 19.6256 li
382.154 15.1256 li
377.654 15.1256 li
cp
@
377.745 19.6256 mo
382.245 19.6256 li
382.245 15.1256 li
377.745 15.1256 li
cp
@
377.835 19.6256 mo
382.335 19.6256 li
382.335 15.1256 li
377.835 15.1256 li
cp
@
377.921 19.6256 mo
382.421 19.6256 li
382.421 15.1256 li
377.921 15.1256 li
cp
@
378.002 19.6256 mo
382.502 19.6256 li
382.502 15.1256 li
378.002 15.1256 li
cp
@
378.082 19.6256 mo
382.582 19.6256 li
382.582 15.1256 li
378.082 15.1256 li
cp
@
378.156 19.6256 mo
382.656 19.6256 li
382.656 15.1256 li
378.156 15.1256 li
cp
@
378.229 19.6256 mo
382.729 19.6256 li
382.729 15.1256 li
378.229 15.1256 li
cp
@
378.298 19.6256 mo
382.798 19.6256 li
382.798 15.1256 li
378.298 15.1256 li
cp
@
378.363 19.6256 mo
382.863 19.6256 li
382.863 15.1256 li
378.363 15.1256 li
cp
@
378.427 19.6256 mo
382.927 19.6256 li
382.927 15.1256 li
378.427 15.1256 li
cp
@
378.484 19.6256 mo
382.984 19.6256 li
382.984 15.1256 li
378.484 15.1256 li
cp
@
378.539 19.6256 mo
383.039 19.6256 li
383.039 15.1256 li
378.539 15.1256 li
cp
@
378.592 19.6256 mo
383.092 19.6256 li
383.092 15.1256 li
378.592 15.1256 li
cp
@
378.642 19.6256 mo
383.142 19.6256 li
383.142 15.1256 li
378.642 15.1256 li
cp
@
378.691 19.6256 mo
383.191 19.6256 li
383.191 15.1256 li
378.691 15.1256 li
cp
@
378.737 19.6256 mo
383.237 19.6256 li
383.237 15.1256 li
378.737 15.1256 li
cp
@
378.781 19.6256 mo
383.281 19.6256 li
383.281 15.1256 li
378.781 15.1256 li
cp
@
378.823 19.6256 mo
383.323 19.6256 li
383.323 15.1256 li
378.823 15.1256 li
cp
@
378.863 19.6256 mo
383.363 19.6256 li
383.363 15.1256 li
378.863 15.1256 li
cp
@
378.903 19.6256 mo
383.403 19.6256 li
383.403 15.1256 li
378.903 15.1256 li
cp
@
378.94 19.6256 mo
383.44 19.6256 li
383.44 15.1256 li
378.94 15.1256 li
cp
@
378.974 19.6256 mo
383.474 19.6256 li
383.474 15.1256 li
378.974 15.1256 li
cp
@
379.007 19.6256 mo
383.507 19.6256 li
383.507 15.1256 li
379.007 15.1256 li
cp
@
379.037 19.6256 mo
383.537 19.6256 li
383.537 15.1256 li
379.037 15.1256 li
cp
@
379.067 19.6256 mo
383.567 19.6256 li
383.567 15.1256 li
379.067 15.1256 li
cp
@
379.094 19.6256 mo
383.594 19.6256 li
383.594 15.1256 li
379.094 15.1256 li
cp
@
379.121 19.6256 mo
383.621 19.6256 li
383.621 15.1256 li
379.121 15.1256 li
cp
@
379.146 19.6256 mo
383.646 19.6256 li
383.646 15.1256 li
379.146 15.1256 li
cp
@
379.17 19.6256 mo
383.67 19.6256 li
383.67 15.1256 li
379.17 15.1256 li
cp
@
379.194 19.6256 mo
383.694 19.6256 li
383.694 15.1256 li
379.194 15.1256 li
cp
@
379.217 19.6256 mo
383.717 19.6256 li
383.717 15.1256 li
379.217 15.1256 li
cp
@
379.239 19.6256 mo
383.739 19.6256 li
383.739 15.1256 li
379.239 15.1256 li
cp
@
379.259 19.6256 mo
383.759 19.6256 li
383.759 15.1256 li
379.259 15.1256 li
cp
@
379.279 19.6256 mo
383.779 19.6256 li
383.779 15.1256 li
379.279 15.1256 li
cp
@
379.297 19.6256 mo
383.797 19.6256 li
383.797 15.1256 li
379.297 15.1256 li
cp
@
379.313 19.6256 mo
383.813 19.6256 li
383.813 15.1256 li
379.313 15.1256 li
cp
@
379.33 19.6256 mo
383.83 19.6256 li
383.83 15.1256 li
379.33 15.1256 li
cp
@
379.345 19.6256 mo
383.845 19.6256 li
383.845 15.1256 li
379.345 15.1256 li
cp
@
379.36 19.6256 mo
383.86 19.6256 li
383.86 15.1256 li
379.36 15.1256 li
cp
@
379.373 19.6256 mo
383.873 19.6256 li
383.873 15.1256 li
379.373 15.1256 li
cp
@
379.386 19.6256 mo
383.886 19.6256 li
383.886 15.1256 li
379.386 15.1256 li
cp
@
379.398 19.6256 mo
383.898 19.6256 li
383.898 15.1256 li
379.398 15.1256 li
cp
@
379.41 19.6256 mo
383.91 19.6256 li
383.91 15.1256 li
379.41 15.1256 li
cp
@
379.42 19.6256 mo
383.92 19.6256 li
383.92 15.1256 li
379.42 15.1256 li
cp
@
379.43 19.6256 mo
383.93 19.6256 li
383.93 15.1256 li
379.43 15.1256 li
cp
@
379.439 19.6256 mo
383.939 19.6256 li
383.939 15.1256 li
379.439 15.1256 li
cp
@
379.448 19.6256 mo
383.948 19.6256 li
383.948 15.1256 li
379.448 15.1256 li
cp
@
379.456 19.6256 mo
383.956 19.6256 li
383.956 15.1256 li
379.456 15.1256 li
cp
@
379.463 19.6256 mo
383.963 19.6256 li
383.963 15.1256 li
379.463 15.1256 li
cp
@
379.47 19.6256 mo
383.97 19.6256 li
383.97 15.1256 li
379.47 15.1256 li
cp
@
379.477 19.6256 mo
383.977 19.6256 li
383.977 15.1256 li
379.477 15.1256 li
cp
@
379.482 19.6256 mo
383.982 19.6256 li
383.982 15.1256 li
379.482 15.1256 li
cp
@
379.488 19.6256 mo
383.988 19.6256 li
383.988 15.1256 li
379.488 15.1256 li
cp
@
379.494 19.6256 mo
383.994 19.6256 li
383.994 15.1256 li
379.494 15.1256 li
cp
@
379.499 19.6256 mo
383.999 19.6256 li
383.999 15.1256 li
379.499 15.1256 li
cp
@
379.503 19.6256 mo
384.003 19.6256 li
384.003 15.1256 li
379.503 15.1256 li
cp
@
379.507 19.6256 mo
384.007 19.6256 li
384.007 15.1256 li
379.507 15.1256 li
cp
@
379.511 19.6256 mo
384.011 19.6256 li
384.011 15.1256 li
379.511 15.1256 li
cp
@
379.514 19.6256 mo
384.014 19.6256 li
384.014 15.1256 li
379.514 15.1256 li
cp
@
379.518 19.6256 mo
384.018 19.6256 li
384.018 15.1256 li
379.518 15.1256 li
cp
@
379.522 19.6256 mo
384.022 19.6256 li
384.022 15.1256 li
379.522 15.1256 li
cp
@
379.525 19.6256 mo
384.025 19.6256 li
384.025 15.1256 li
379.525 15.1256 li
cp
@
379.528 19.6256 mo
384.028 19.6256 li
384.028 15.1256 li
379.528 15.1256 li
cp
@
379.531 19.6256 mo
384.031 19.6256 li
384.031 15.1256 li
379.531 15.1256 li
cp
@
379.534 19.6256 mo
384.034 19.6256 li
384.034 15.1256 li
379.534 15.1256 li
cp
@
379.537 19.6256 mo
384.037 19.6256 li
384.037 15.1256 li
379.537 15.1256 li
cp
@
379.539 19.6256 mo
384.039 19.6256 li
384.039 15.1256 li
379.539 15.1256 li
cp
@
379.542 19.6256 mo
384.042 19.6256 li
384.042 15.1256 li
379.542 15.1256 li
cp
@
379.544 19.6256 mo
384.044 19.6256 li
384.044 15.1256 li
379.544 15.1256 li
cp
@
379.546 19.6256 mo
384.046 19.6256 li
384.046 15.1256 li
379.546 15.1256 li
cp
@
379.548 19.6256 mo
384.048 19.6256 li
384.048 15.1256 li
379.548 15.1256 li
cp
@
379.55 19.6256 mo
384.05 19.6256 li
384.05 15.1256 li
379.55 15.1256 li
cp
@
379.551 19.6256 mo
384.051 19.6256 li
384.051 15.1256 li
379.551 15.1256 li
cp
@
379.552 19.6256 mo
384.052 19.6256 li
384.052 15.1256 li
379.552 15.1256 li
cp
@
379.554 19.6256 mo
384.054 19.6256 li
384.054 15.1256 li
379.554 15.1256 li
cp
@
379.555 19.6256 mo
384.055 19.6256 li
384.055 15.1256 li
379.555 15.1256 li
cp
@
379.556 19.6256 mo
384.056 19.6256 li
384.056 15.1256 li
379.556 15.1256 li
cp
@
379.557 19.6256 mo
384.057 19.6256 li
384.057 15.1256 li
379.557 15.1256 li
cp
@
379.558 19.6256 mo
384.058 19.6256 li
384.058 15.1256 li
379.558 15.1256 li
cp
@
379.559 19.6256 mo
384.059 19.6256 li
384.059 15.1256 li
379.559 15.1256 li
cp
@
379.559 19.6256 mo
384.059 19.6256 li
384.059 15.1256 li
379.559 15.1256 li
cp
@
379.56 19.6256 mo
384.06 19.6256 li
384.06 15.1256 li
379.56 15.1256 li
cp
@
379.561 19.6256 mo
384.061 19.6256 li
384.061 15.1256 li
379.561 15.1256 li
cp
@
379.561 19.6256 mo
384.061 19.6256 li
384.061 15.1256 li
379.561 15.1256 li
cp
@
379.562 19.6256 mo
384.062 19.6256 li
384.062 15.1256 li
379.562 15.1256 li
cp
@
379.563 19.6256 mo
384.063 19.6256 li
384.063 15.1256 li
379.563 15.1256 li
cp
@
379.563 19.6256 mo
384.063 19.6256 li
384.063 15.1256 li
379.563 15.1256 li
cp
@
379.564 19.6256 mo
384.064 19.6256 li
384.064 15.1256 li
379.564 15.1256 li
cp
@
379.564 19.6256 mo
384.064 19.6256 li
384.064 15.1256 li
379.564 15.1256 li
cp
@
379.564 19.6256 mo
384.064 19.6256 li
384.064 15.1256 li
379.564 15.1256 li
cp
@
379.564 19.6256 mo
384.064 19.6256 li
384.064 15.1256 li
379.564 15.1256 li
cp
@
379.565 19.6256 mo
384.065 19.6256 li
384.065 15.1256 li
379.565 15.1256 li
cp
@
379.565 19.6256 mo
384.065 19.6256 li
384.065 15.1256 li
379.565 15.1256 li
cp
@
379.565 19.6256 mo
384.065 19.6256 li
384.065 15.1256 li
379.565 15.1256 li
cp
@
379.565 19.6256 mo
384.065 19.6256 li
384.065 15.1256 li
379.565 15.1256 li
cp
@
379.566 19.6256 mo
384.066 19.6256 li
384.066 15.1256 li
379.566 15.1256 li
cp
@
379.566 19.6256 mo
384.066 19.6256 li
384.066 15.1256 li
379.566 15.1256 li
cp
@
379.566 19.6256 mo
384.066 19.6256 li
384.066 15.1256 li
379.566 15.1256 li
cp
@
379.566 19.6256 mo
384.066 19.6256 li
384.066 15.1256 li
379.566 15.1256 li
cp
@
379.566 19.6256 mo
384.066 19.6256 li
384.066 15.1256 li
379.566 15.1256 li
cp
@
379.566 19.6256 mo
384.066 19.6256 li
384.066 15.1256 li
379.566 15.1256 li
cp
@
379.567 19.6256 mo
384.067 19.6256 li
384.067 15.1256 li
379.567 15.1256 li
cp
@
379.567 19.6256 mo
384.067 19.6256 li
384.067 15.1256 li
379.567 15.1256 li
cp
@
379.567 19.6256 mo
384.067 19.6256 li
384.067 15.1256 li
379.567 15.1256 li
cp
@
379.567 19.6256 mo
384.067 19.6256 li
384.067 15.1256 li
379.567 15.1256 li
cp
@
379.567 19.6256 mo
384.067 19.6256 li
384.067 15.1256 li
379.567 15.1256 li
cp
@
379.567 19.6256 mo
384.067 19.6256 li
384.067 15.1256 li
379.567 15.1256 li
cp
@
379.568 19.6256 mo
384.068 19.6256 li
384.068 15.1256 li
379.568 15.1256 li
cp
@
379.568 19.6256 mo
384.068 19.6256 li
384.068 15.1256 li
379.568 15.1256 li
cp
@
379.568 19.6256 mo
384.068 19.6256 li
384.068 15.1256 li
379.568 15.1256 li
cp
@
379.568 19.6256 mo
384.068 19.6256 li
384.068 15.1256 li
379.568 15.1256 li
cp
@
379.568 19.6256 mo
384.068 19.6256 li
384.068 15.1256 li
379.568 15.1256 li
cp
@
379.568 19.6256 mo
384.068 19.6256 li
384.068 15.1256 li
379.568 15.1256 li
cp
@
379.568 19.6256 mo
384.068 19.6256 li
384.068 15.1256 li
379.568 15.1256 li
cp
@
379.568 19.6256 mo
384.068 19.6256 li
384.068 15.1256 li
379.568 15.1256 li
cp
@
379.568 19.6256 mo
384.068 19.6256 li
384.068 15.1256 li
379.568 15.1256 li
cp
@
379.568 19.6256 mo
384.068 19.6256 li
384.068 15.1256 li
379.568 15.1256 li
cp
@
379.568 19.6256 mo
384.068 19.6256 li
384.068 15.1256 li
379.568 15.1256 li
cp
@
1 lj
50.3178 247.101 mo
50.3178 240.619 li
72.7869 240.619 li
72.7869 221.175 li
77.2576 217.574 li
89.7842 217.574 li
94.2557 213.254 li
99.7278 212.534 li
101.311 208.933 li
101.311 207.492 li
104.199 207.492 li
104.199 206.772 li
110.209 206.052 li
119.794 204.612 li
127.734 200.292 li
130.681 200.292 li
133.723 198.851 li
139.195 197.411 li
142.263 195.971 li
145.502 194.53 li
149.677 193.81 li
155.361 193.81 li
158.38 193.09 li
161.859 191.65 li
164.675 190.21 li
169.774 189.49 li
173.189 186.609 li
176.041 185.169 li
178.986 185.169 li
181.96 184.448 li
183.777 184.448 li
186.772 181.568 li
189.186 180.848 li
192.111 180.128 li
194.589 179.408 li
197.546 177.967 li
199.523 176.527 li
202.591 175.807 li
205.404 175.087 li
207.69 174.367 li
210.181 174.367 li
212.64 174.367 li
215.068 173.647 li
217.276 173.647 li
219.526 173.647 li
221.023 172.926 li
223.149 172.926 li
225.329 172.926 li
227.143 170.046 li
229.158 170.046 li
230.904 167.885 li
232.513 167.165 li
234.124 165.725 li
235.879 165.725 li
237.758 164.285 li
239.422 161.404 li
241.138 159.964 li
242.665 158.524 li
244.369 158.524 li
245.929 157.804 li
247.404 157.804 li
248.761 157.804 li
250.177 157.804 li
251.638 157.804 li
252.877 157.083 li
254.379 157.083 li
255.703 157.083 li
256.988 157.083 li
258.307 157.083 li
259.644 157.083 li
260.93 156.363 li
262.231 156.363 li
263.389 156.363 li
264.557 156.363 li
265.849 156.363 li
267.07 156.363 li
268.101 154.923 li
269.189 154.923 li
270.31 154.923 li
271.432 154.923 li
272.549 154.923 li
273.666 154.923 li
274.62 154.923 li
275.613 154.203 li
276.673 154.203 li
277.632 154.203 li
278.622 154.203 li
279.567 154.203 li
280.469 153.482 li
281.422 153.482 li
282.372 152.762 li
283.273 152.042 li
284.104 152.042 li
284.991 149.881 li
285.881 149.881 li
286.761 149.162 li
287.601 147.721 li
288.463 144.841 li
289.344 144.841 li
290.171 144.841 li
290.999 144.841 li
291.784 144.121 li
292.591 143.401 li
293.371 142.681 li
294.141 141.96 li
294.878 139.8 li
295.63 139.8 li
296.343 137.639 li
297.085 136.919 li
297.846 135.479 li
298.52 134.759 li
299.165 134.759 li
299.839 134.038 li
300.488 134.038 li
301.101 133.319 li
301.723 133.319 li
302.355 133.319 li
302.968 133.319 li
303.582 132.599 li
304.204 131.878 li
304.808 131.158 li
305.428 131.158 li
306.01 128.998 li
306.6 128.278 li
307.149 128.278 li
307.733 128.278 li
308.313 128.278 li
308.877 128.278 li
309.395 127.558 li
309.946 127.558 li
310.509 127.558 li
311.05 126.837 li
311.575 126.837 li
312.076 124.677 li
312.596 123.957 li
313.089 121.796 li
313.568 121.076 li
314.056 121.076 li
314.508 121.076 li
315.009 119.636 li
315.48 118.915 li
315.962 118.196 li
316.435 116.035 li
316.909 116.035 li
317.348 115.315 li
317.774 114.595 li
318.211 114.595 li
318.649 113.875 li
319.087 113.155 li
319.523 112.435 li
319.964 112.435 li
320.4 111.715 li
320.817 111.715 li
321.226 110.994 li
321.639 110.274 li
322.038 109.554 li
322.422 109.554 li
322.831 109.554 li
323.209 108.114 li
323.616 108.114 li
324.016 108.114 li
324.4 107.393 li
324.786 106.673 li
325.166 106.673 li
325.542 106.673 li
325.892 105.953 li
326.27 105.953 li
326.634 105.953 li
327.004 105.953 li
327.361 105.953 li
327.722 105.953 li
328.065 105.233 li
328.419 104.513 li
328.76 104.513 li
329.09 103.072 li
329.422 103.072 li
329.775 103.072 li
330.116 103.072 li
330.463 102.353 li
330.784 102.353 li
331.111 101.633 li
331.435 101.633 li
331.753 100.192 li
332.064 99.4716 li
332.382 99.4716 li
332.7 99.4716 li
333.013 99.4716 li
333.317 99.4716 li
333.63 99.4716 li
333.926 99.4716 li
334.227 98.7516 li
334.516 98.7516 li
334.807 96.5916 li
335.103 96.5916 li
335.398 96.5916 li
335.687 95.8706 li
335.973 95.1506 li
336.256 95.1506 li
336.539 95.1506 li
336.816 95.1506 li
337.099 94.4306 li
337.375 93.7106 li
337.649 92.2696 li
337.919 92.2696 li
338.191 92.2696 li
338.448 91.5496 li
338.715 90.8296 li
338.976 90.8296 li
339.228 90.8296 li
339.485 89.3896 li
339.737 88.6696 li
339.994 87.9486 li
340.241 87.2296 li
340.492 87.2296 li
340.75 85.7896 li
340.993 83.6286 li
341.232 83.6286 li
341.476 82.9086 li
341.722 82.9086 li
341.959 82.9086 li
342.208 82.9086 li
342.443 81.4686 li
342.682 80.7476 li
342.912 80.0276 li
343.143 80.0276 li
343.367 79.3076 li
343.603 79.3076 li
343.826 79.3076 li
344.049 79.3076 li
344.269 79.3076 li
344.483 79.3076 li
344.701 78.5876 li
344.914 78.5876 li
345.13 77.8676 li
345.353 77.1476 li
345.569 77.1476 li
345.779 76.4266 li
345.99 76.4266 li
346.2 74.9866 li
346.404 74.9866 li
346.614 74.2666 li
346.824 73.5466 li
347.025 73.5466 li
347.226 72.8256 li
347.427 69.9456 li
347.627 69.9456 li
347.829 69.2256 li
348.024 67.0656 li
348.218 67.0656 li
348.409 67.0656 li
348.601 67.0656 li
348.801 67.0656 li
348.994 66.3456 li
349.187 66.3456 li
349.383 65.6256 li
349.575 65.6256 li
349.768 65.6256 li
349.955 64.9046 li
350.14 64.9046 li
350.325 64.1846 li
350.506 64.1846 li
350.691 63.4646 li
350.872 63.4646 li
351.048 63.4646 li
351.232 62.7446 li
351.406 62.7446 li
351.582 62.0246 li
351.759 62.0246 li
351.93 62.0246 li
352.1 62.0246 li
352.273 61.3036 li
352.442 60.5836 li
352.609 60.5836 li
352.776 60.5836 li
352.946 59.8636 li
353.109 59.8636 li
353.272 59.8636 li
353.435 59.1436 li
353.595 59.1436 li
353.76 59.1436 li
353.925 59.1436 li
354.087 59.1436 li
354.245 58.4236 li
354.405 57.7026 li
354.564 57.7026 li
354.716 57.7026 li
354.862 57.7026 li
355.023 57.7026 li
355.177 57.7026 li
355.333 57.7026 li
355.486 57.7026 li
355.636 56.9826 li
355.785 56.9826 li
355.939 56.9826 li
356.088 56.9826 li
356.233 54.8236 li
356.377 53.3826 li
356.522 53.3826 li
356.665 53.3826 li
356.808 52.6626 li
356.954 51.9426 li
357.099 51.9426 li
357.241 51.9426 li
357.384 51.9426 li
357.525 51.9426 li
357.669 50.5026 li
357.808 50.5026 li
357.956 50.5026 li
358.094 49.7816 li
358.229 49.7816 li
358.365 49.7816 li
358.499 49.7816 li
358.635 49.7816 li
358.773 49.0616 li
358.907 49.0616 li
359.046 48.3416 li
359.176 48.3416 li
359.309 47.6216 li
359.436 47.6216 li
359.566 47.6216 li
359.695 47.6216 li
359.827 47.6216 li
359.948 47.6216 li
360.075 47.6216 li
360.198 47.6216 li
360.325 46.9016 li
360.453 46.1806 li
360.573 46.1806 li
360.701 46.1806 li
360.822 46.1806 li
360.948 46.1806 li
361.069 45.4606 li
361.194 45.4606 li
361.309 44.7406 li
361.428 44.7406 li
361.55 44.7406 li
361.67 44.7406 li
361.784 44.7406 li
361.901 44.7406 li
362.02 44.7406 li
362.138 44.0206 li
362.254 43.3006 li
362.369 42.5806 li
362.484 42.5806 li
362.602 42.5806 li
362.717 42.5806 li
362.829 41.8596 li
362.941 41.8596 li
363.053 41.8596 li
363.166 41.8596 li
363.275 41.8596 li
363.385 41.1396 li
363.495 41.1396 li
363.602 40.4206 li
363.712 40.4206 li
363.821 39.7006 li
363.931 39.7006 li
364.038 38.2596 li
364.143 38.2596 li
364.248 38.2596 li
364.352 37.5396 li
364.451 37.5396 li
364.553 37.5396 li
364.656 37.5396 li
364.758 37.5396 li
364.86 37.5396 li
364.963 37.5396 li
365.065 37.5396 li
365.169 37.5396 li
365.268 37.5396 li
365.363 36.8196 li
365.461 36.8196 li
365.559 36.8196 li
365.658 36.8196 li
365.757 36.8196 li
365.851 36.0996 li
365.948 36.0996 li
366.043 35.3796 li
366.136 34.6586 li
366.234 34.6586 li
366.33 34.6586 li
366.42 33.9386 li
366.515 33.9386 li
366.608 33.9386 li
366.7 33.9386 li
366.792 33.9386 li
366.885 33.2186 li
366.976 32.4986 li
367.066 32.4986 li
367.156 32.4986 li
367.246 32.4986 li
367.337 32.4986 li
367.423 32.4986 li
367.511 32.4986 li
367.6 32.4986 li
367.687 32.4986 li
367.773 31.7786 li
367.859 31.7786 li
367.945 31.7786 li
368.031 31.7786 li
368.114 31.7786 li
368.197 30.3376 li
368.281 30.3376 li
368.36 30.3376 li
368.444 30.3376 li
368.527 30.3376 li
368.609 28.8976 li
368.694 28.8976 li
368.776 28.8976 li
368.858 28.8976 li
368.939 28.8976 li
369.018 28.8976 li
369.094 28.8976 li
369.174 28.8976 li
369.253 28.8976 li
369.331 28.8976 li
369.41 28.1776 li
369.487 28.1776 li
369.565 27.4576 li
369.643 27.4576 li
369.718 27.4576 li
369.793 27.4576 li
369.867 27.4576 li
369.941 27.4576 li
370.014 27.4576 li
370.086 27.4576 li
370.16 27.4576 li
370.234 27.4576 li
370.308 27.4576 li
370.377 27.4576 li
370.448 27.4576 li
370.52 27.4576 li
370.592 27.4576 li
370.662 27.4576 li
370.733 26.7366 li
370.8 26.7366 li
370.873 26.7366 li
370.94 26.7366 li
371.005 26.7366 li
371.075 26.7366 li
371.142 26.7366 li
371.21 26.7366 li
371.276 26.7366 li
371.344 26.7366 li
371.41 26.7366 li
371.477 26.7366 li
371.543 26.7366 li
371.609 26.7366 li
371.677 26.7366 li
371.739 26.7366 li
371.802 26.7366 li
371.868 26.7366 li
371.933 26.7366 li
371.995 26.0166 li
372.059 26.0166 li
372.123 26.0166 li
372.182 26.0166 li
372.248 25.2966 li
372.309 25.2966 li
372.372 25.2966 li
372.435 25.2966 li
372.496 25.2966 li
372.556 24.5776 li
372.614 24.5776 li
372.673 24.5776 li
372.732 24.5776 li
372.792 24.5776 li
372.85 24.5776 li
372.908 24.5776 li
372.965 24.5776 li
373.023 23.8576 li
373.079 23.8576 li
373.138 23.8576 li
373.191 23.8576 li
373.248 23.8576 li
373.302 23.8576 li
373.358 23.8576 li
373.413 23.8576 li
373.468 23.8576 li
373.522 23.8576 li
373.578 23.8576 li
373.633 23.1366 li
373.688 23.1366 li
373.743 23.1366 li
373.794 23.1366 li
373.846 23.1366 li
373.898 23.1366 li
373.951 23.1366 li
374.002 23.1366 li
374.053 23.1366 li
374.103 23.1366 li
374.153 23.1366 li
374.202 23.1366 li
374.254 23.1366 li
374.304 23.1366 li
374.356 23.1366 li
374.404 23.1366 li
374.454 23.1366 li
374.503 23.1366 li
374.551 23.1366 li
374.598 23.1366 li
374.647 23.1366 li
374.696 23.1366 li
374.742 23.1366 li
374.789 22.4166 li
374.834 22.4166 li
374.881 22.4166 li
374.929 22.4166 li
374.975 22.4166 li
375.022 22.4166 li
375.066 22.4166 li
375.113 22.4166 li
375.156 21.6966 li
375.2 21.6966 li
375.244 21.6966 li
375.288 21.6966 li
375.334 21.6966 li
375.375 21.6966 li
375.418 21.6966 li
375.463 21.6966 li
375.505 21.6966 li
375.55 21.6966 li
375.59 21.6966 li
375.634 21.6966 li
375.675 21.6966 li
375.718 21.6966 li
375.76 21.6966 li
375.802 21.6966 li
375.843 21.6966 li
375.884 21.6966 li
375.927 21.6966 li
375.968 21.6966 li
376.007 21.6966 li
376.047 21.6966 li
376.086 21.6966 li
376.125 21.6966 li
376.165 21.6966 li
376.204 21.6966 li
376.244 21.6966 li
376.283 21.6966 li
376.32 21.6966 li
376.359 21.6966 li
376.397 20.9766 li
376.434 20.9766 li
376.471 20.9766 li
376.509 20.9766 li
376.546 20.9766 li
376.583 20.9766 li
376.62 20.9766 li
376.654 20.9766 li
376.69 20.9766 li
376.726 20.9766 li
376.762 20.9766 li
376.797 20.9766 li
376.834 20.2566 li
376.869 20.2566 li
376.904 20.2566 li
376.937 20.2566 li
376.972 20.2566 li
377.006 20.2566 li
377.04 20.2566 li
377.073 20.2566 li
377.106 20.2566 li
377.139 20.2566 li
377.173 20.2566 li
377.205 20.2566 li
377.239 20.2566 li
377.272 20.2566 li
377.305 20.2566 li
377.338 20.2566 li
377.368 20.2566 li
377.399 20.2566 li
377.431 20.2566 li
377.461 19.5366 li
377.492 19.5366 li
377.523 19.5366 li
377.554 19.5366 li
377.584 19.5366 li
377.614 19.5366 li
377.643 19.5366 li
377.675 19.5366 li
377.704 19.5366 li
377.733 19.5366 li
377.762 19.5366 li
377.791 19.5366 li
377.82 19.5366 li
377.849 19.5366 li
377.878 19.5366 li
377.907 19.5366 li
377.934 19.5366 li
377.964 19.5366 li
377.993 19.5366 li
378.021 19.5366 li
378.047 19.5366 li
378.075 19.5366 li
378.102 19.5366 li
378.129 19.5366 li
378.157 19.5366 li
378.184 19.5366 li
378.211 19.5366 li
378.238 19.5366 li
378.264 19.5366 li
378.29 19.5366 li
378.317 19.5366 li
378.343 19.5366 li
378.37 19.5366 li
378.393 19.5366 li
378.419 19.5366 li
378.445 19.5366 li
378.472 19.5366 li
378.495 19.5366 li
378.519 19.5366 li
378.543 19.5366 li
378.568 19.5366 li
378.593 19.5366 li
378.616 19.5366 li
378.64 19.5366 li
378.664 19.5366 li
378.688 19.5366 li
378.709 19.5366 li
378.731 19.5366 li
378.754 19.5366 li
378.777 18.8156 li
378.799 18.8156 li
378.822 18.8156 li
378.844 18.8156 li
378.866 18.8156 li
378.889 18.8156 li
378.91 18.8156 li
378.934 18.8156 li
378.956 18.8156 li
378.977 18.8156 li
378.998 18.8156 li
379.018 18.8156 li
379.038 18.8156 li
379.059 18.8156 li
379.078 18.8156 li
379.098 18.8156 li
379.118 18.8156 li
379.138 18.8156 li
379.157 18.8156 li
379.177 18.8156 li
379.195 18.8156 li
379.216 18.8156 li
379.234 18.8156 li
379.253 18.8156 li
379.273 18.8156 li
379.29 18.8156 li
379.308 18.8156 li
379.326 18.8156 li
379.343 18.8156 li
379.36 18.8156 li
379.378 18.8156 li
379.395 18.8156 li
379.413 18.8156 li
379.431 18.0956 li
379.448 18.0956 li
379.466 18.0956 li
379.482 18.0956 li
379.5 18.0956 li
379.518 18.0956 li
379.535 18.0956 li
379.552 18.0956 li
379.568 18.0956 li
379.584 18.0956 li
379.6 18.0956 li
379.617 18.0956 li
379.632 18.0956 li
379.648 18.0956 li
379.664 18.0956 li
379.681 18.0956 li
379.696 18.0956 li
379.713 18.0956 li
379.728 18.0956 li
379.743 18.0956 li
379.76 18.0956 li
379.774 18.0956 li
379.791 18.0956 li
379.806 18.0956 li
379.821 18.0956 li
379.836 18.0956 li
379.851 18.0956 li
379.865 18.0956 li
379.879 18.0956 li
379.894 18.0956 li
379.908 18.0956 li
379.922 18.0956 li
379.936 18.0956 li
379.95 18.0956 li
379.965 18.0956 li
379.978 18.0956 li
379.993 18.0956 li
380.004 18.0956 li
380.018 18.0956 li
380.032 18.0956 li
380.044 18.0956 li
380.058 18.0956 li
380.071 18.0956 li
380.083 18.0956 li
380.097 18.0956 li
380.109 18.0956 li
380.122 18.0956 li
380.135 18.0956 li
380.148 18.0956 li
380.161 18.0956 li
380.173 18.0956 li
380.184 18.0956 li
380.198 18.0956 li
380.21 18.0956 li
380.223 18.0956 li
380.235 18.0956 li
380.247 18.0956 li
380.258 18.0956 li
380.271 18.0956 li
380.283 18.0956 li
380.294 18.0956 li
380.305 18.0956 li
380.317 18.0956 li
380.329 18.0956 li
380.34 18.0956 li
380.351 18.0956 li
380.363 18.0956 li
380.373 18.0956 li
380.385 18.0956 li
380.396 18.0956 li
380.407 18.0956 li
380.418 18.0956 li
380.427 18.0956 li
380.439 18.0956 li
380.448 18.0956 li
380.458 18.0956 li
380.469 18.0956 li
380.479 18.0956 li
380.488 18.0956 li
380.498 18.0956 li
380.508 18.0956 li
380.518 18.0956 li
380.527 18.0956 li
380.536 18.0956 li
380.546 18.0956 li
380.555 18.0956 li
380.564 18.0956 li
380.572 18.0956 li
380.582 18.0956 li
380.592 18.0956 li
380.602 18.0956 li
380.611 18.0956 li
380.62 18.0956 li
380.629 18.0956 li
380.638 18.0956 li
380.647 18.0956 li
380.656 18.0956 li
380.664 18.0956 li
380.673 18.0956 li
380.682 18.0956 li
380.69 18.0956 li
380.699 18.0956 li
380.707 18.0956 li
380.716 18.0956 li
380.725 18.0956 li
380.733 18.0956 li
380.741 18.0956 li
380.748 18.0956 li
380.756 18.0956 li
380.764 18.0956 li
380.771 18.0956 li
380.779 18.0956 li
380.788 18.0956 li
380.795 18.0956 li
380.802 18.0956 li
380.81 18.0956 li
380.818 18.0956 li
380.826 18.0956 li
380.832 18.0956 li
380.84 18.0956 li
380.847 18.0956 li
380.854 18.0956 li
380.86 18.0956 li
380.866 18.0956 li
380.873 18.0956 li
380.88 18.0956 li
380.886 18.0956 li
380.893 18.0956 li
380.899 18.0956 li
380.905 18.0956 li
380.912 18.0956 li
380.918 18.0956 li
380.925 18.0956 li
380.931 18.0956 li
380.938 18.0956 li
380.943 18.0956 li
380.95 18.0956 li
380.956 18.0956 li
380.962 18.0956 li
380.969 18.0956 li
380.975 18.0956 li
380.981 18.0956 li
380.987 18.0956 li
380.993 18.0956 li
380.999 18.0956 li
381.005 18.0956 li
381.011 17.3756 li
381.017 17.3756 li
381.023 17.3756 li
381.029 17.3756 li
381.035 17.3756 li
381.04 17.3756 li
381.046 17.3756 li
381.052 17.3756 li
381.057 17.3756 li
381.062 17.3756 li
381.068 17.3756 li
381.073 17.3756 li
381.079 17.3756 li
381.083 17.3756 li
381.089 17.3756 li
381.093 17.3756 li
381.099 17.3756 li
381.103 17.3756 li
381.109 17.3756 li
381.113 17.3756 li
381.118 17.3756 li
381.123 17.3756 li
381.128 17.3756 li
381.133 17.3756 li
381.138 17.3756 li
381.142 17.3756 li
381.148 17.3756 li
381.152 17.3756 li
381.158 17.3756 li
381.163 17.3756 li
381.167 17.3756 li
381.171 17.3756 li
381.175 17.3756 li
381.181 17.3756 li
381.184 17.3756 li
381.189 17.3756 li
381.193 17.3756 li
381.197 17.3756 li
381.202 17.3756 li
381.206 17.3756 li
381.21 17.3756 li
381.213 17.3756 li
381.218 17.3756 li
381.223 17.3756 li
381.226 17.3756 li
381.231 17.3756 li
381.234 17.3756 li
381.239 17.3756 li
381.243 17.3756 li
381.247 17.3756 li
381.25 17.3756 li
381.254 17.3756 li
381.258 17.3756 li
381.261 17.3756 li
381.265 17.3756 li
381.268 17.3756 li
381.272 17.3756 li
381.276 17.3756 li
381.28 17.3756 li
381.284 17.3756 li
381.287 17.3756 li
381.291 17.3756 li
381.295 17.3756 li
381.298 17.3756 li
381.301 17.3756 li
381.305 17.3756 li
381.308 17.3756 li
381.312 17.3756 li
381.315 17.3756 li
381.318 17.3756 li
381.322 17.3756 li
381.325 17.3756 li
381.327 17.3756 li
381.331 17.3756 li
381.334 17.3756 li
381.336 17.3756 li
381.339 17.3756 li
381.343 17.3756 li
381.346 17.3756 li
381.349 17.3756 li
381.352 17.3756 li
381.355 17.3756 li
381.357 17.3756 li
381.361 17.3756 li
381.363 17.3756 li
381.366 17.3756 li
381.369 17.3756 li
381.372 17.3756 li
381.375 17.3756 li
381.379 17.3756 li
381.382 17.3756 li
381.384 17.3756 li
381.387 17.3756 li
381.39 17.3756 li
381.393 17.3756 li
381.396 17.3756 li
381.399 17.3756 li
381.401 17.3756 li
381.403 17.3756 li
381.406 17.3756 li
381.409 17.3756 li
381.411 17.3756 li
381.414 17.3756 li
381.417 17.3756 li
381.42 17.3756 li
381.422 17.3756 li
381.425 17.3756 li
381.428 17.3756 li
381.43 17.3756 li
381.432 17.3756 li
381.436 17.3756 li
381.438 17.3756 li
381.44 17.3756 li
381.443 17.3756 li
381.445 17.3756 li
381.448 17.3756 li
381.45 17.3756 li
381.452 17.3756 li
381.454 17.3756 li
381.457 17.3756 li
381.459 17.3756 li
381.46 17.3756 li
381.463 17.3756 li
381.465 17.3756 li
381.467 17.3756 li
381.468 17.3756 li
381.471 17.3756 li
381.473 17.3756 li
381.475 17.3756 li
381.477 17.3756 li
381.48 17.3756 li
381.482 17.3756 li
381.484 17.3756 li
381.486 17.3756 li
381.488 17.3756 li
381.49 17.3756 li
381.493 17.3756 li
381.495 17.3756 li
381.496 17.3756 li
381.498 17.3756 li
381.5 17.3756 li
381.502 17.3756 li
381.504 17.3756 li
381.505 17.3756 li
381.507 17.3756 li
381.51 17.3756 li
381.511 17.3756 li
381.514 17.3756 li
381.515 17.3756 li
381.516 17.3756 li
381.519 17.3756 li
381.52 17.3756 li
381.523 17.3756 li
381.525 17.3756 li
381.526 17.3756 li
381.528 17.3756 li
381.53 17.3756 li
381.532 17.3756 li
381.533 17.3756 li
381.534 17.3756 li
381.536 17.3756 li
381.538 17.3756 li
381.539 17.3756 li
381.541 17.3756 li
381.542 17.3756 li
381.543 17.3756 li
381.546 17.3756 li
381.547 17.3756 li
381.549 17.3756 li
381.55 17.3756 li
381.552 17.3756 li
381.553 17.3756 li
381.556 17.3756 li
381.559 17.3756 li
381.561 17.3756 li
381.563 17.3756 li
381.564 17.3756 li
381.565 17.3756 li
381.567 17.3756 li
381.568 17.3756 li
381.57 17.3756 li
381.571 17.3756 li
381.573 17.3756 li
381.574 17.3756 li
381.575 17.3756 li
381.577 17.3756 li
381.578 17.3756 li
381.579 17.3756 li
381.58 17.3756 li
381.582 17.3756 li
381.583 17.3756 li
381.584 17.3756 li
381.586 17.3756 li
381.588 17.3756 li
381.589 17.3756 li
381.59 17.3756 li
381.591 17.3756 li
381.593 17.3756 li
381.594 17.3756 li
381.595 17.3756 li
381.597 17.3756 li
381.598 17.3756 li
381.599 17.3756 li
381.6 17.3756 li
381.602 17.3756 li
381.603 17.3756 li
381.604 17.3756 li
381.605 17.3756 li
381.606 17.3756 li
381.607 17.3756 li
381.608 17.3756 li
381.609 17.3756 li
381.611 17.3756 li
381.612 17.3756 li
381.613 17.3756 li
381.614 17.3756 li
381.616 17.3756 li
381.618 17.3756 li
381.619 17.3756 li
381.62 17.3756 li
381.621 17.3756 li
381.622 17.3756 li
381.623 17.3756 li
381.625 17.3756 li
381.626 17.3756 li
381.627 17.3756 li
381.628 17.3756 li
381.63 17.3756 li
381.631 17.3756 li
381.633 17.3756 li
381.634 17.3756 li
381.636 17.3756 li
381.638 17.3756 li
381.639 17.3756 li
381.64 17.3756 li
381.641 17.3756 li
381.643 17.3756 li
381.644 17.3756 li
381.645 17.3756 li
381.646 17.3756 li
381.647 17.3756 li
381.648 17.3756 li
381.65 17.3756 li
381.651 17.3756 li
381.652 17.3756 li
381.653 17.3756 li
381.654 17.3756 li
381.655 17.3756 li
381.656 17.3756 li
381.657 17.3756 li
381.658 17.3756 li
381.66 17.3756 li
381.661 17.3756 li
381.662 17.3756 li
381.663 17.3756 li
381.664 17.3756 li
381.665 17.3756 li
381.666 17.3756 li
381.667 17.3756 li
381.668 17.3756 li
381.669 17.3756 li
381.67 17.3756 li
381.671 17.3756 li
381.672 17.3756 li
381.673 17.3756 li
381.674 17.3756 li
381.675 17.3756 li
381.676 17.3756 li
381.677 17.3756 li
381.678 17.3756 li
381.679 17.3756 li
381.68 17.3756 li
381.681 17.3756 li
381.682 17.3756 li
381.683 17.3756 li
381.684 17.3756 li
381.685 17.3756 li
381.686 17.3756 li
381.687 17.3756 li
381.688 17.3756 li
381.689 17.3756 li
381.69 17.3756 li
381.691 17.3756 li
381.692 17.3756 li
381.693 17.3756 li
381.694 17.3756 li
381.695 17.3756 li
381.696 17.3756 li
381.697 17.3756 li
381.698 17.3756 li
381.699 17.3756 li
381.7 17.3756 li
381.701 17.3756 li
381.702 17.3756 li
381.703 17.3756 li
381.704 17.3756 li
381.705 17.3756 li
381.706 17.3756 li
381.707 17.3756 li
381.708 17.3756 li
381.709 17.3756 li
381.71 17.3756 li
381.711 17.3756 li
381.712 17.3756 li
381.713 17.3756 li
381.714 17.3756 li
381.715 17.3756 li
381.716 17.3756 li
381.717 17.3756 li
381.718 17.3756 li
381.719 17.3756 li
381.72 17.3756 li
381.721 17.3756 li
381.722 17.3756 li
381.723 17.3756 li
381.724 17.3756 li
381.725 17.3756 li
381.726 17.3756 li
381.727 17.3756 li
381.728 17.3756 li
381.729 17.3756 li
381.73 17.3756 li
381.731 17.3756 li
381.732 17.3756 li
381.733 17.3756 li
381.734 17.3756 li
381.735 17.3756 li
381.736 17.3756 li
381.737 17.3756 li
381.738 17.3756 li
381.739 17.3756 li
381.74 17.3756 li
381.741 17.3756 li
381.742 17.3756 li
381.743 17.3756 li
381.744 17.3756 li
381.745 17.3756 li
381.746 17.3756 li
381.747 17.3756 li
381.748 17.3756 li
381.749 17.3756 li
381.75 17.3756 li
381.751 17.3756 li
381.752 17.3756 li
381.753 17.3756 li
381.754 17.3756 li
381.755 17.3756 li
381.756 17.3756 li
381.757 17.3756 li
381.758 17.3756 li
381.759 17.3756 li
381.76 17.3756 li
381.761 17.3756 li
381.762 17.3756 li
381.763 17.3756 li
381.764 17.3756 li
381.765 17.3756 li
381.766 17.3756 li
381.767 17.3756 li
381.768 17.3756 li
381.769 17.3756 li
381.77 17.3756 li
381.771 17.3756 li
381.772 17.3756 li
381.773 17.3756 li
381.774 17.3756 li
381.775 17.3756 li
381.776 17.3756 li
381.777 17.3756 li
381.778 17.3756 li
381.779 17.3756 li
381.78 17.3756 li
381.781 17.3756 li
381.782 17.3756 li
381.783 17.3756 li
381.784 17.3756 li
381.785 17.3756 li
381.786 17.3756 li
381.787 17.3756 li
381.788 17.3756 li
381.789 17.3756 li
381.79 17.3756 li
381.791 17.3756 li
381.792 17.3756 li
381.793 17.3756 li
381.794 17.3756 li
381.795 17.3756 li
381.796 17.3756 li
381.797 17.3756 li
381.798 17.3756 li
381.799 17.3756 li
381.8 17.3756 li
381.801 17.3756 li
381.802 17.3756 li
381.803 17.3756 li
381.804 17.3756 li
381.805 17.3756 li
381.806 17.3756 li
381.807 17.3756 li
381.808 17.3756 li
381.809 17.3756 li
381.81 17.3756 li
381.811 17.3756 li
381.812 17.3756 li
381.813 17.3756 li
381.814 17.3756 li
381.815 17.3756 li
381.816 17.3756 li
381.817 17.3756 li
381.818 17.3756 li
1 /0 /CSD get_res sepcs
1 sep
@
0 lj
72.7873 223.936 mo
72.7873 229.936 li
@
104.198 203.773 mo
104.198 209.772 li
@
155.361 190.81 mo
155.361 196.81 li
@
186.772 178.568 mo
186.772 184.568 li
@
212.64 171.367 mo
212.64 177.367 li
@
232.513 164.165 mo
232.513 170.165 li
@
248.76 154.803 mo
248.76 160.803 li
@
262.231 153.363 mo
262.231 159.363 li
@
273.666 151.923 mo
273.666 157.923 li
@
283.273 149.042 mo
283.273 155.042 li
@
291.784 141.121 mo
291.784 147.121 li
@
299.165 131.759 mo
299.165 137.759 li
@
305.429 128.158 mo
305.429 134.158 li
@
311.05 123.837 mo
311.05 129.837 li
@
315.962 115.196 mo
315.962 121.196 li
@
320.4 108.714 mo
320.4 114.714 li
@
324.399 104.394 mo
324.399 110.394 li
@
328.064 102.233 mo
328.064 108.233 li
@
331.435 98.6316 mo
331.435 104.632 li
@
334.516 95.7516 mo
334.516 101.752 li
@
337.375 90.7106 mo
337.375 96.7106 li
@
339.994 84.9496 mo
339.994 90.9496 li
@
342.443 78.4686 mo
342.443 84.4686 li
@
344.701 75.5876 mo
344.701 81.5876 li
@
346.823 70.5466 mo
346.823 76.5466 li
@
348.8 64.0656 mo
348.8 70.0656 li
@
350.692 60.4646 mo
350.692 66.4646 li
@
352.442 57.5846 mo
352.442 63.5846 li
@
354.087 56.1436 mo
354.087 62.1436 li
@
355.636 53.9836 mo
355.636 59.9836 li
@
357.099 48.9426 mo
357.099 54.9426 li
@
358.499 46.7816 mo
358.499 52.7816 li
@
359.827 44.6216 mo
359.827 50.6216 li
@
361.069 42.4616 mo
361.069 48.4616 li
@
362.254 40.3006 mo
362.254 46.3006 li
@
363.386 38.1396 mo
363.386 44.1396 li
@
364.451 34.5396 mo
364.451 40.5396 li
@
365.461 33.8196 mo
365.461 39.8196 li
@
366.42 30.9386 mo
366.42 36.9386 li
@
367.337 29.4986 mo
367.337 35.4986 li
@
368.197 27.3376 mo
368.197 33.3376 li
@
369.018 25.8976 mo
369.018 31.8976 li
@
369.793 24.4576 mo
369.793 30.4576 li
@
370.52 24.4576 mo
370.52 30.4576 li
@
371.21 23.7376 mo
371.21 29.7376 li
@
371.868 23.7376 mo
371.868 29.7376 li
@
372.497 22.2966 mo
372.497 28.2966 li
@
373.079 20.8566 mo
373.079 26.8566 li
@
373.633 20.1366 mo
373.633 26.1366 li
@
374.153 20.1366 mo
374.153 26.1366 li
@
374.647 20.1366 mo
374.647 26.1366 li
@
375.113 19.4166 mo
375.113 25.4166 li
@
375.55 18.6966 mo
375.55 24.6966 li
@
375.968 18.6966 mo
375.968 24.6966 li
@
376.359 18.6966 mo
376.359 24.6966 li
@
376.726 17.9766 mo
376.726 23.9766 li
@
377.073 17.2556 mo
377.073 23.2556 li
@
377.399 17.2556 mo
377.399 23.2556 li
@
377.705 16.5366 mo
377.705 22.5366 li
@
377.993 16.5366 mo
377.993 22.5366 li
@
378.264 16.5366 mo
378.264 22.5366 li
@
378.519 16.5366 mo
378.519 22.5366 li
@
378.754 16.5366 mo
378.754 22.5366 li
@
378.977 15.8156 mo
378.977 21.8156 li
@
379.177 15.8156 mo
379.177 21.8156 li
@
379.36 15.8156 mo
379.36 21.8156 li
@
379.535 15.0956 mo
379.535 21.0956 li
@
379.697 15.0956 mo
379.697 21.0956 li
@
379.851 15.0956 mo
379.851 21.0956 li
@
379.992 15.0956 mo
379.992 21.0956 li
@
380.122 15.0956 mo
380.122 21.0956 li
@
380.247 15.0956 mo
380.247 21.0956 li
@
380.363 15.0956 mo
380.363 21.0956 li
@
380.468 15.0956 mo
380.468 21.0956 li
@
380.564 15.0956 mo
380.564 21.0956 li
@
380.656 15.0956 mo
380.656 21.0956 li
@
380.741 15.0956 mo
380.741 21.0956 li
@
380.818 15.0956 mo
380.818 21.0956 li
@
380.886 15.0956 mo
380.886 21.0956 li
@
380.95 15.0956 mo
380.95 21.0956 li
@
381.011 14.3756 mo
381.011 20.3756 li
@
381.068 14.3756 mo
381.068 20.3756 li
@
381.118 14.3756 mo
381.118 20.3756 li
@
381.167 14.3756 mo
381.167 20.3756 li
@
381.21 14.3756 mo
381.21 20.3756 li
@
381.25 14.3756 mo
381.25 20.3756 li
@
381.288 14.3756 mo
381.288 20.3756 li
@
381.322 14.3756 mo
381.322 20.3756 li
@
381.352 14.3756 mo
381.352 20.3756 li
@
381.381 14.3756 mo
381.381 20.3756 li
@
381.408 14.3756 mo
381.408 20.3756 li
@
381.435 14.3756 mo
381.435 20.3756 li
@
381.458 14.3756 mo
381.458 20.3756 li
@
381.48 14.3756 mo
381.48 20.3756 li
@
381.5 14.3756 mo
381.5 20.3756 li
@
381.519 14.3756 mo
381.519 20.3756 li
@
381.536 14.3756 mo
381.536 20.3756 li
@
381.552 14.3756 mo
381.552 20.3756 li
@
381.567 14.3756 mo
381.567 20.3756 li
@
381.581 14.3756 mo
381.581 20.3756 li
@
381.593 14.3756 mo
381.593 20.3756 li
@
381.605 14.3756 mo
381.605 20.3756 li
@
381.616 14.3756 mo
381.616 20.3756 li
@
381.627 14.3756 mo
381.627 20.3756 li
@
381.638 14.3756 mo
381.638 20.3756 li
@
381.648 14.3756 mo
381.648 20.3756 li
@
381.657 14.3756 mo
381.657 20.3756 li
@
381.665 14.3756 mo
381.665 20.3756 li
@
381.672 14.3756 mo
381.672 20.3756 li
@
381.68 14.3756 mo
381.68 20.3756 li
@
381.688 14.3756 mo
381.688 20.3756 li
@
381.693 14.3756 mo
381.693 20.3756 li
@
381.699 14.3756 mo
381.699 20.3756 li
@
381.705 14.3756 mo
381.705 20.3756 li
@
381.711 14.3756 mo
381.711 20.3756 li
@
381.716 14.3756 mo
381.716 20.3756 li
@
381.722 14.3756 mo
381.722 20.3756 li
@
381.727 14.3756 mo
381.727 20.3756 li
@
381.732 14.3756 mo
381.732 20.3756 li
@
381.736 14.3756 mo
381.736 20.3756 li
@
381.741 14.3756 mo
381.741 20.3756 li
@
381.745 14.3756 mo
381.745 20.3756 li
@
381.749 14.3756 mo
381.749 20.3756 li
@
381.752 14.3756 mo
381.752 20.3756 li
@
381.756 14.3756 mo
381.756 20.3756 li
@
381.76 14.3756 mo
381.76 20.3756 li
@
381.763 14.3756 mo
381.763 20.3756 li
@
381.766 14.3756 mo
381.766 20.3756 li
@
381.77 14.3756 mo
381.77 20.3756 li
@
381.773 14.3756 mo
381.773 20.3756 li
@
381.776 14.3756 mo
381.776 20.3756 li
@
381.779 14.3756 mo
381.779 20.3756 li
@
381.781 14.3756 mo
381.781 20.3756 li
@
381.784 14.3756 mo
381.784 20.3756 li
@
381.786 14.3756 mo
381.786 20.3756 li
@
381.789 14.3756 mo
381.789 20.3756 li
@
381.791 14.3756 mo
381.791 20.3756 li
@
381.793 14.3756 mo
381.793 20.3756 li
@
381.795 14.3756 mo
381.795 20.3756 li
@
381.796 14.3756 mo
381.796 20.3756 li
@
381.798 14.3756 mo
381.798 20.3756 li
@
381.8 14.3756 mo
381.8 20.3756 li
@
381.801 14.3756 mo
381.801 20.3756 li
@
381.802 14.3756 mo
381.802 20.3756 li
@
381.804 14.3756 mo
381.804 20.3756 li
@
381.805 14.3756 mo
381.805 20.3756 li
@
381.806 14.3756 mo
381.806 20.3756 li
@
381.807 14.3756 mo
381.807 20.3756 li
@
381.808 14.3756 mo
381.808 20.3756 li
@
381.809 14.3756 mo
381.809 20.3756 li
@
381.81 14.3756 mo
381.81 20.3756 li
@
381.811 14.3756 mo
381.811 20.3756 li
@
381.811 14.3756 mo
381.811 20.3756 li
@
381.812 14.3756 mo
381.812 20.3756 li
@
381.812 14.3756 mo
381.812 20.3756 li
@
381.813 14.3756 mo
381.813 20.3756 li
@
381.813 14.3756 mo
381.813 20.3756 li
@
381.813 14.3756 mo
381.813 20.3756 li
@
381.814 14.3756 mo
381.814 20.3756 li
@
381.814 14.3756 mo
381.814 20.3756 li
@
381.814 14.3756 mo
381.814 20.3756 li
@
381.815 14.3756 mo
381.815 20.3756 li
@
381.815 14.3756 mo
381.815 20.3756 li
@
381.816 14.3756 mo
381.816 20.3756 li
@
381.816 14.3756 mo
381.816 20.3756 li
@
381.816 14.3756 mo
381.816 20.3756 li
@
381.816 14.3756 mo
381.816 20.3756 li
@
381.817 14.3756 mo
381.817 20.3756 li
@
381.817 14.3756 mo
381.817 20.3756 li
@
381.817 14.3756 mo
381.817 20.3756 li
@
381.817 14.3756 mo
381.817 20.3756 li
@
381.817 14.3756 mo
381.817 20.3756 li
@
381.817 14.3756 mo
381.817 20.3756 li
@
381.817 14.3756 mo
381.817 20.3756 li
@
381.817 14.3756 mo
381.817 20.3756 li
@
381.817 14.3756 mo
381.817 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
381.818 14.3756 mo
381.818 20.3756 li
@
1 lj
50.3178 31.7786 mo
60.2604 31.7786 li
60.2604 29.6176 li
67.3151 29.6176 li
72.7869 28.8976 li
77.2576 28.8976 li
77.2576 28.1776 li
84.3123 28.1776 li
84.3123 27.4576 li
84.3123 26.7366 li
84.3123 26.0166 li
84.3123 25.2966 li
84.3123 24.5776 li
84.3123 23.8576 li
89.7842 23.8576 li
92.1221 23.8576 li
94.2557 23.8576 li
96.2188 23.8576 li
99.7278 23.8576 li
101.311 23.8576 li
106.782 23.1366 li
106.782 22.4166 li
111.253 22.4166 li
113.216 22.4166 li
114.141 22.4166 li
115.033 21.6966 li
118.308 21.6966 li
120.505 21.6966 li
121.868 21.6966 li
124.976 21.6966 li
125.553 21.6966 li
126.117 21.6966 li
130.213 21.6966 li
131.589 21.6966 li
132.465 20.9766 li
132.891 20.9766 li
133.31 20.9766 li
133.723 20.9766 li
134.127 20.9766 li
135.305 20.9766 li
136.429 20.9766 li
137.502 20.9766 li
138.193 20.9766 li
140.777 20.9766 li
141.382 20.9766 li
141.973 20.9766 li
142.263 20.9766 li
142.834 20.9766 li
143.936 20.9766 li
145.502 20.9766 li
145.753 20.9766 li
147.445 20.9766 li
148.586 20.9766 li
149.028 20.9766 li
149.889 20.9766 li
150.308 20.9766 li
150.72 20.9766 li
151.326 20.9766 li
151.524 20.9766 li
151.916 20.9766 li
153.242 20.9766 li
153.789 20.9766 li
154.147 20.9766 li
156.192 20.9766 li
158.38 20.9766 li
158.824 20.9766 li
159.69 20.9766 li
160.251 20.9766 li
161.068 20.9766 li
161.598 20.9766 li
162.876 20.9766 li
163.732 20.9766 li
164.791 20.9766 li
165.36 20.9766 li
166.78 20.9766 li
166.992 20.9766 li
168.022 20.9766 li
169.3 20.9766 li
170.696 20.9766 li
171.41 20.9766 li
172.527 20.9766 li
173.835 20.9766 li
175.001 20.9766 li
175.601 20.9766 li
176.616 20.9766 li
177.931 20.9766 li
179.115 20.9766 li
180.121 20.9766 li
181.441 20.9766 li
182.581 20.9766 li
183.777 20.9766 li
184.766 20.9766 li
185.96 20.9766 li
187.006 20.9766 li
187.829 20.9766 li
188.669 20.9766 li
189.44 20.9766 li
190.309 20.9766 li
190.911 20.9766 li
191.577 20.9766 li
192.3 20.9766 li
193.292 20.9766 li
194.623 20.9766 li
195.658 20.9766 li
196.304 20.9766 li
197.211 20.9766 li
197.425 20.9766 li
198.114 20.9766 li
198.957 20.9766 li
199.634 20.9766 li
200.615 20.9766 li
201.144 20.2566 li
201.814 20.2566 li
202.318 20.2566 li
203.247 20.2566 li
203.769 20.2566 li
204.418 20.2566 li
204.984 20.2566 li
205.689 20.2566 li
206.5 20.2566 li
207.123 20.2566 li
207.909 20.2566 li
208.651 20.2566 li
209.334 20.2566 li
210.109 20.2566 li
210.576 20.2566 li
211.329 20.2566 li
212.211 20.2566 li
212.9 20.2566 li
213.476 20.2566 li
214.039 20.2566 li
214.709 20.2566 li
215.479 20.2566 li
216.097 20.2566 li
216.976 20.2566 li
217.706 20.2566 li
218.491 20.2566 li
219.052 20.2566 li
219.625 20.2566 li
220.4 20.2566 li
221.243 20.2566 li
221.902 20.2566 li
222.556 20.2566 li
223.244 20.2566 li
224.017 20.2566 li
224.607 20.2566 li
225.388 20.2566 li
225.993 20.2566 li
226.482 20.2566 li
227.152 20.2566 li
227.777 20.2566 li
228.309 20.2566 li
228.813 20.2566 li
229.531 20.2566 li
230.203 20.2566 li
230.725 20.2566 li
231.32 20.2566 li
232.028 20.2566 li
232.556 20.2566 li
232.995 20.2566 li
233.657 20.2566 li
234.267 20.2566 li
234.961 20.2566 li
235.553 20.2566 li
236.219 20.2566 li
236.94 20.2566 li
237.51 20.2566 li
238.096 20.2566 li
238.675 20.2566 li
239.448 20.2566 li
240.146 20.2566 li
240.772 20.2566 li
241.433 20.2566 li
242.136 20.2566 li
242.689 20.2566 li
243.259 20.2566 li
243.839 20.2566 li
244.343 20.2566 li
244.893 20.2566 li
245.5 20.2566 li
246.139 20.2566 li
246.769 20.2566 li
247.443 20.2566 li
248.056 20.2566 li
248.704 20.2566 li
249.372 20.2566 li
250.117 20.2566 li
250.65 20.2566 li
251.173 20.2566 li
251.767 20.2566 li
252.338 20.2566 li
252.993 20.2566 li
253.567 20.2566 li
254.239 19.5366 li
254.841 19.5366 li
255.49 19.5366 li
256.079 19.5366 li
256.684 19.5366 li
257.263 19.5366 li
257.873 19.5366 li
258.445 19.5366 li
259.032 19.5366 li
259.612 19.5366 li
260.238 19.5366 li
260.85 19.5366 li
261.45 19.5366 li
262.029 19.5366 li
262.663 19.5366 li
263.248 19.5366 li
263.821 19.5366 li
264.365 19.5366 li
264.909 19.5366 li
265.507 19.5366 li
266.084 19.5366 li
266.66 19.5366 li
267.216 19.5366 li
267.8 19.5366 li
268.345 19.5366 li
268.891 19.5366 li
269.437 18.8156 li
270.005 18.8156 li
270.578 18.8156 li
271.148 18.8156 li
271.732 18.8156 li
272.266 18.8156 li
272.813 18.8156 li
273.317 18.8156 li
273.792 18.8156 li
274.318 18.8156 li
274.809 18.8156 li
275.346 18.8156 li
275.904 18.8156 li
276.394 18.8156 li
276.916 18.8156 li
277.464 18.8156 li
277.966 18.8156 li
278.462 18.8156 li
279 18.8156 li
279.512 18.8156 li
280.011 18.8156 li
280.49 18.8156 li
280.974 18.8156 li
281.475 18.8156 li
281.996 18.0956 li
282.509 18.0956 li
283.02 18.0956 li
283.518 18.0956 li
284.059 18.0956 li
284.551 18.0956 li
285.032 18.0956 li
285.484 18.0956 li
285.988 18.0956 li
286.462 18.0956 li
286.914 18.0956 li
287.379 18.0956 li
287.883 18.0956 li
288.319 18.0956 li
288.829 18.0956 li
289.307 18.0956 li
289.79 18.0956 li
290.236 18.0956 li
290.678 18.0956 li
291.147 18.0956 li
291.612 18.0956 li
292.084 18.0956 li
292.568 18.0956 li
293.038 18.0956 li
293.512 18.0956 li
293.959 18.0956 li
294.408 18.0956 li
294.844 18.0956 li
295.292 18.0956 li
295.698 18.0956 li
296.141 18.0956 li
296.568 18.0956 li
297.022 18.0956 li
297.482 18.0956 li
297.922 18.0956 li
298.362 18.0956 li
298.819 18.0956 li
299.266 18.0956 li
299.718 18.0956 li
300.157 18.0956 li
300.566 18.0956 li
301 18.0956 li
301.411 18.0956 li
301.831 18.0956 li
302.243 18.0956 li
302.656 18.0956 li
303.086 18.0956 li
303.468 18.0956 li
303.889 18.0956 li
304.298 18.0956 li
304.7 18.0956 li
305.113 18.0956 li
305.54 18.0956 li
305.984 18.0956 li
306.382 18.0956 li
306.815 18.0956 li
307.213 18.0956 li
307.639 18.0956 li
308.055 18.0956 li
308.472 18.0956 li
308.871 18.0956 li
309.286 18.0956 li
309.675 18.0956 li
310.083 18.0956 li
310.469 18.0956 li
310.876 18.0956 li
311.287 18.0956 li
311.699 18.0956 li
312.1 18.0956 li
312.465 18.0956 li
312.825 18.0956 li
313.225 18.0956 li
313.611 18.0956 li
313.995 18.0956 li
314.382 18.0956 li
314.77 18.0956 li
315.133 18.0956 li
315.494 18.0956 li
315.857 18.0956 li
316.229 18.0956 li
316.602 18.0956 li
316.986 18.0956 li
317.341 18.0956 li
317.697 18.0956 li
318.068 18.0956 li
318.463 18.0956 li
318.826 18.0956 li
319.161 18.0956 li
319.516 18.0956 li
319.885 18.0956 li
320.252 18.0956 li
320.624 18.0956 li
320.986 18.0956 li
321.316 18.0956 li
321.659 18.0956 li
322.025 18.0956 li
322.363 18.0956 li
322.711 18.0956 li
323.054 18.0956 li
323.394 18.0956 li
323.731 18.0956 li
324.072 18.0956 li
324.401 18.0956 li
324.723 18.0956 li
325.042 18.0956 li
325.379 18.0956 li
325.704 18.0956 li
326.03 18.0956 li
326.338 18.0956 li
326.648 18.0956 li
326.961 18.0956 li
327.283 18.0956 li
327.6 18.0956 li
327.922 18.0956 li
328.239 18.0956 li
328.553 18.0956 li
328.866 18.0956 li
329.182 18.0956 li
329.482 18.0956 li
329.791 18.0956 li
330.08 18.0956 li
330.38 18.0956 li
330.678 18.0956 li
330.975 18.0956 li
331.277 18.0956 li
331.584 18.0956 li
331.881 18.0956 li
332.166 18.0956 li
332.454 18.0956 li
332.743 18.0956 li
333.029 18.0956 li
333.311 18.0956 li
333.598 18.0956 li
333.883 18.0956 li
334.175 18.0956 li
334.455 18.0956 li
334.729 18.0956 li
335.003 18.0956 li
335.282 18.0956 li
335.559 18.0956 li
335.844 18.0956 li
336.118 18.0956 li
336.391 18.0956 li
336.664 18.0956 li
336.948 18.0956 li
337.213 18.0956 li
337.482 18.0956 li
337.744 18.0956 li
338.014 18.0956 li
338.279 18.0956 li
338.547 18.0956 li
338.811 18.0956 li
339.063 18.0956 li
339.322 18.0956 li
339.579 18.0956 li
339.837 18.0956 li
340.086 18.0956 li
340.337 18.0956 li
340.585 18.0956 li
340.827 18.0956 li
341.073 18.0956 li
341.325 18.0956 li
341.566 18.0956 li
341.809 18.0956 li
342.048 18.0956 li
342.292 18.0956 li
342.525 18.0956 li
342.768 18.0956 li
343.011 18.0956 li
343.248 18.0956 li
343.478 18.0956 li
343.715 18.0956 li
343.948 18.0956 li
344.176 18.0956 li
344.402 18.0956 li
344.635 18.0956 li
344.862 18.0956 li
345.093 18.0956 li
345.318 18.0956 li
345.544 18.0956 li
345.765 18.0956 li
345.98 18.0956 li
346.195 18.0956 li
346.414 18.0956 li
346.631 18.0956 li
346.843 18.0956 li
347.06 18.0956 li
347.272 18.0956 li
347.484 18.0956 li
347.695 18.0956 li
347.907 18.0956 li
348.118 18.0956 li
348.335 18.0956 li
348.541 18.0956 li
348.75 18.0956 li
348.961 18.0956 li
349.164 18.0956 li
349.376 18.0956 li
349.58 18.0956 li
349.779 18.0956 li
349.979 18.0956 li
350.181 18.0956 li
350.377 18.0956 li
350.575 18.0956 li
350.77 18.0956 li
350.968 18.0956 li
351.163 18.0956 li
351.354 18.0956 li
351.542 18.0956 li
351.723 18.0956 li
351.91 18.0956 li
352.098 18.0956 li
352.286 18.0956 li
352.47 18.0956 li
352.655 18.0956 li
352.842 18.0956 li
353.025 18.0956 li
353.209 18.0956 li
353.391 18.0956 li
353.563 18.0956 li
353.749 18.0956 li
353.929 18.0956 li
354.102 18.0956 li
354.284 18.0956 li
354.459 18.0956 li
354.632 18.0956 li
354.804 18.0956 li
354.981 18.0956 li
355.151 18.0956 li
355.32 18.0956 li
355.486 18.0956 li
355.654 18.0956 li
355.819 18.0956 li
355.983 18.0956 li
356.147 18.0956 li
356.31 18.0956 li
356.473 18.0956 li
356.637 18.0956 li
356.8 18.0956 li
356.96 18.0956 li
357.112 18.0956 li
357.274 18.0956 li
357.432 18.0956 li
357.591 18.0956 li
357.746 18.0956 li
357.899 18.0956 li
358.051 18.0956 li
358.204 18.0956 li
358.357 18.0956 li
358.509 18.0956 li
358.661 18.0956 li
358.809 18.0956 li
358.955 18.0956 li
359.103 18.0956 li
359.248 18.0956 li
359.391 18.0956 li
359.537 18.0956 li
359.677 18.0956 li
359.819 18.0956 li
359.956 18.0956 li
360.096 18.0956 li
360.229 18.0956 li
360.366 18.0956 li
360.498 18.0956 li
360.635 18.0956 li
360.771 18.0956 li
360.907 18.0956 li
361.042 18.0956 li
361.171 18.0956 li
361.307 18.0956 li
361.441 18.0956 li
361.569 18.0956 li
361.699 18.0956 li
361.829 18.0956 li
361.96 18.0956 li
362.09 18.0956 li
362.222 18.0956 li
362.349 18.0956 li
362.475 18.0956 li
362.598 18.0956 li
362.723 18.0956 li
362.848 18.0956 li
362.968 18.0956 li
363.089 18.0956 li
363.208 18.0956 li
363.328 18.0956 li
363.444 18.0956 li
363.564 18.0956 li
363.679 18.0956 li
363.798 18.0956 li
363.914 18.0956 li
364.031 18.0956 li
364.143 18.0956 li
364.254 18.0956 li
364.369 18.0956 li
364.485 18.0956 li
364.597 18.0956 li
364.71 18.0956 li
364.824 18.0956 li
364.933 18.0956 li
365.043 18.0956 li
365.152 18.0956 li
365.259 18.0956 li
365.367 18.0956 li
365.473 18.0956 li
365.583 18.0956 li
365.683 18.0956 li
365.784 18.0956 li
365.888 18.0956 li
365.994 18.0956 li
366.099 18.0956 li
366.206 18.0956 li
366.304 18.0956 li
366.406 18.0956 li
366.512 18.0956 li
366.612 18.0956 li
366.709 18.0956 li
366.806 18.0956 li
366.906 18.0956 li
366.998 18.0956 li
367.095 18.0956 li
367.196 18.0956 li
367.294 18.0956 li
367.386 18.0956 li
367.48 18.0956 li
367.575 18.0956 li
367.667 18.0956 li
367.763 18.0956 li
367.855 18.0956 li
367.944 18.0956 li
368.034 18.0956 li
368.126 18.0956 li
368.215 18.0956 li
368.302 18.0956 li
368.39 18.0956 li
368.479 18.0956 li
368.568 18.0956 li
368.657 18.0956 li
368.744 18.0956 li
368.832 18.0956 li
368.918 18.0956 li
369.007 18.0956 li
369.091 18.0956 li
369.176 18.0956 li
369.259 18.0956 li
369.344 18.0956 li
369.425 18.0956 li
369.509 18.0956 li
369.591 18.0956 li
369.675 18.0956 li
369.753 18.0956 li
369.834 18.0956 li
369.915 18.0956 li
369.994 18.0956 li
370.074 18.0956 li
370.152 18.0956 li
370.228 18.0956 li
370.304 18.0956 li
370.381 18.0956 li
370.459 18.0956 li
370.534 18.0956 li
370.609 18.0956 li
370.684 18.0956 li
370.76 18.0956 li
370.834 18.0956 li
370.909 18.0956 li
370.984 18.0956 li
371.056 18.0956 li
371.129 18.0956 li
371.202 18.0956 li
371.271 18.0956 li
371.341 18.0956 li
371.412 18.0956 li
371.481 18.0956 li
371.548 18.0956 li
371.616 18.0956 li
371.686 18.0956 li
371.754 18.0956 li
371.821 18.0956 li
371.886 18.0956 li
371.951 18.0956 li
372.016 18.0956 li
372.083 18.0956 li
372.149 18.0956 li
372.214 18.0956 li
372.281 18.0956 li
372.343 18.0956 li
372.406 18.0956 li
372.469 18.0956 li
372.531 18.0956 li
372.595 18.0956 li
372.659 18.0956 li
372.72 18.0956 li
372.782 18.0956 li
372.843 18.0956 li
372.9 18.0956 li
372.958 18.0956 li
373.018 18.0956 li
373.076 18.0956 li
373.134 18.0956 li
373.191 18.0956 li
373.248 18.0956 li
373.307 18.0956 li
373.366 18.0956 li
373.423 18.0956 li
373.479 18.0956 li
373.536 18.0956 li
373.591 18.0956 li
373.648 18.0956 li
373.705 18.0956 li
373.761 18.0956 li
373.816 18.0956 li
373.869 18.0956 li
373.924 18.0956 li
373.978 18.0956 li
374.032 18.0956 li
374.089 18.0956 li
374.136 18.0956 li
374.19 18.0956 li
374.242 18.0956 li
374.293 18.0956 li
374.341 18.0956 li
374.391 18.0956 li
374.442 18.0956 li
374.493 18.0956 li
374.545 18.0956 li
374.595 18.0956 li
374.647 18.0956 li
374.695 18.0956 li
374.743 18.0956 li
374.792 18.0956 li
374.84 18.0956 li
374.887 18.0956 li
374.934 18.0956 li
374.981 18.0956 li
375.027 18.0956 li
375.073 18.0956 li
375.119 18.0956 li
375.163 18.0956 li
375.208 18.0956 li
375.253 18.0956 li
375.299 18.0956 li
375.343 18.0956 li
375.389 18.0956 li
375.436 18.0956 li
375.477 18.0956 li
375.522 18.0956 li
375.565 18.0956 li
375.61 18.0956 li
375.654 18.0956 li
375.697 18.0956 li
375.739 18.0956 li
375.782 18.0956 li
375.823 18.0956 li
375.863 18.0956 li
375.907 18.0956 li
375.946 18.0956 li
375.986 18.0956 li
376.028 18.0956 li
376.068 18.0956 li
376.107 18.0956 li
376.146 18.0956 li
376.186 18.0956 li
376.225 18.0956 li
376.265 18.0956 li
376.306 18.0956 li
376.346 18.0956 li
376.384 18.0956 li
376.422 18.0956 li
376.461 18.0956 li
376.5 18.0956 li
376.539 18.0956 li
376.575 18.0956 li
376.611 18.0956 li
376.649 18.0956 li
376.685 18.0956 li
376.72 18.0956 li
376.758 18.0956 li
376.794 18.0956 li
376.829 18.0956 li
376.865 18.0956 li
376.9 18.0956 li
376.934 18.0956 li
376.968 18.0956 li
377.004 18.0956 li
377.04 18.0956 li
377.073 18.0956 li
377.107 18.0956 li
377.14 18.0956 li
377.176 18.0956 li
377.209 18.0956 li
377.243 18.0956 li
377.275 18.0956 li
377.309 18.0956 li
377.343 18.0956 li
377.376 18.0956 li
377.408 18.0956 li
377.441 18.0956 li
377.474 18.0956 li
377.504 18.0956 li
377.534 18.0956 li
377.567 18.0956 li
377.597 18.0956 li
377.627 18.0956 li
377.657 18.0956 li
377.688 18.0956 li
377.718 18.0956 li
377.749 18.0956 li
377.779 18.0956 li
377.811 18.0956 li
377.84 18.0956 li
377.871 17.3756 li
377.901 17.3756 li
377.929 17.3756 li
377.959 17.3756 li
377.986 17.3756 li
378.016 17.3756 li
378.043 17.3756 li
378.072 17.3756 li
378.098 17.3756 li
378.127 17.3756 li
378.155 17.3756 li
378.183 17.3756 li
378.209 17.3756 li
378.237 17.3756 li
378.262 17.3756 li
378.288 17.3756 li
378.313 17.3756 li
378.34 17.3756 li
378.366 17.3756 li
378.393 17.3756 li
378.42 17.3756 li
378.444 17.3756 li
378.469 17.3756 li
378.494 17.3756 li
378.52 17.3756 li
378.543 17.3756 li
378.569 17.3756 li
378.593 17.3756 li
378.618 17.3756 li
378.641 17.3756 li
378.664 17.3756 li
378.688 17.3756 li
378.712 17.3756 li
378.736 17.3756 li
378.759 17.3756 li
378.781 17.3756 li
378.803 17.3756 li
378.825 17.3756 li
378.848 17.3756 li
378.871 17.3756 li
378.894 17.3756 li
378.917 17.3756 li
378.939 17.3756 li
378.963 17.3756 li
378.984 17.3756 li
379.006 17.3756 li
379.028 17.3756 li
379.05 17.3756 li
379.072 17.3756 li
379.093 17.3756 li
379.113 17.3756 li
379.136 17.3756 li
379.156 17.3756 li
379.178 17.3756 li
379.198 17.3756 li
379.218 17.3756 li
379.24 17.3756 li
379.26 17.3756 li
379.279 17.3756 li
379.299 17.3756 li
379.319 17.3756 li
379.338 17.3756 li
379.358 17.3756 li
379.377 17.3756 li
379.396 17.3756 li
379.415 17.3756 li
379.434 17.3756 li
379.452 17.3756 li
379.471 17.3756 li
379.49 17.3756 li
379.509 17.3756 li
379.527 17.3756 li
379.546 17.3756 li
379.566 17.3756 li
379.584 17.3756 li
379.602 17.3756 li
379.62 17.3756 li
379.638 17.3756 li
379.655 17.3756 li
379.672 17.3756 li
379.689 17.3756 li
379.707 17.3756 li
379.725 17.3756 li
379.743 17.3756 li
379.761 17.3756 li
379.778 17.3756 li
379.795 17.3756 li
379.812 17.3756 li
379.828 17.3756 li
379.846 17.3756 li
379.863 17.3756 li
379.879 17.3756 li
379.896 17.3756 li
379.911 17.3756 li
379.929 17.3756 li
379.944 17.3756 li
379.959 17.3756 li
379.975 17.3756 li
379.99 17.3756 li
380.005 17.3756 li
380.02 17.3756 li
380.035 17.3756 li
380.05 17.3756 li
380.066 17.3756 li
380.081 17.3756 li
380.096 17.3756 li
380.11 17.3756 li
380.125 17.3756 li
380.139 17.3756 li
380.154 17.3756 li
380.168 17.3756 li
380.182 17.3756 li
380.196 17.3756 li
380.209 17.3756 li
380.223 17.3756 li
380.236 17.3756 li
380.249 17.3756 li
380.262 17.3756 li
380.275 17.3756 li
380.289 17.3756 li
380.302 17.3756 li
380.315 17.3756 li
380.328 17.3756 li
380.341 17.3756 li
380.354 17.3756 li
380.367 17.3756 li
380.379 17.3756 li
380.391 17.3756 li
380.404 17.3756 li
380.416 17.3756 li
380.428 17.3756 li
380.441 17.3756 li
380.453 17.3756 li
380.465 17.3756 li
380.476 17.3756 li
380.489 17.3756 li
380.501 17.3756 li
380.512 17.3756 li
380.523 17.3756 li
380.535 17.3756 li
380.546 17.3756 li
380.557 17.3756 li
380.568 17.3756 li
380.58 17.3756 li
380.591 17.3756 li
380.602 17.3756 li
380.613 17.3756 li
380.623 17.3756 li
380.634 17.3756 li
380.646 17.3756 li
380.656 17.3756 li
380.667 17.3756 li
380.677 17.3756 li
380.686 17.3756 li
380.696 17.3756 li
380.707 17.3756 li
380.717 17.3756 li
380.727 17.3756 li
380.736 17.3756 li
380.746 17.3756 li
380.757 17.3756 li
380.766 17.3756 li
380.776 17.3756 li
380.786 17.3756 li
380.797 17.3756 li
380.806 17.3756 li
380.815 17.3756 li
380.824 17.3756 li
380.833 17.3756 li
380.843 17.3756 li
380.852 17.3756 li
380.861 17.3756 li
380.869 17.3756 li
380.879 17.3756 li
380.887 17.3756 li
380.897 17.3756 li
380.905 17.3756 li
380.914 17.3756 li
380.923 17.3756 li
380.931 17.3756 li
380.938 17.3756 li
380.946 17.3756 li
380.954 17.3756 li
380.962 17.3756 li
380.97 17.3756 li
380.977 17.3756 li
380.986 17.3756 li
380.994 17.3756 li
381.001 17.3756 li
381.009 17.3756 li
381.016 17.3756 li
381.025 17.3756 li
381.032 17.3756 li
381.039 17.3756 li
381.047 17.3756 li
381.054 17.3756 li
381.063 17.3756 li
381.069 17.3756 li
381.076 17.3756 li
381.083 17.3756 li
381.09 17.3756 li
381.097 17.3756 li
381.104 17.3756 li
381.111 17.3756 li
381.118 17.3756 li
381.124 17.3756 li
381.13 17.3756 li
381.137 17.3756 li
381.143 17.3756 li
381.15 17.3756 li
381.156 17.3756 li
381.163 17.3756 li
381.168 17.3756 li
381.175 17.3756 li
381.181 17.3756 li
381.187 17.3756 li
381.193 17.3756 li
381.198 17.3756 li
381.204 17.3756 li
381.211 17.3756 li
381.216 17.3756 li
381.222 17.3756 li
381.227 17.3756 li
381.232 17.3756 li
381.239 17.3756 li
381.245 17.3756 li
381.25 17.3756 li
381.256 17.3756 li
381.261 17.3756 li
381.268 17.3756 li
381.273 17.3756 li
381.278 17.3756 li
381.283 17.3756 li
381.289 17.3756 li
381.295 17.3756 li
381.3 17.3756 li
381.306 17.3756 li
381.31 17.3756 li
381.316 17.3756 li
381.32 17.3756 li
381.325 17.3756 li
381.331 17.3756 li
381.335 17.3756 li
381.34 17.3756 li
381.345 17.3756 li
381.35 17.3756 li
381.355 17.3756 li
381.36 17.3756 li
381.365 17.3756 li
381.369 17.3756 li
381.374 17.3756 li
381.379 17.3756 li
381.383 17.3756 li
381.387 17.3756 li
381.391 17.3756 li
381.396 17.3756 li
381.4 17.3756 li
381.404 17.3756 li
381.409 17.3756 li
381.412 17.3756 li
381.417 17.3756 li
381.421 17.3756 li
381.425 17.3756 li
381.429 17.3756 li
381.432 17.3756 li
381.437 17.3756 li
381.441 17.3756 li
381.445 17.3756 li
381.449 17.3756 li
381.453 17.3756 li
381.457 17.3756 li
381.46 17.3756 li
381.464 17.3756 li
381.468 17.3756 li
381.472 17.3756 li
381.475 17.3756 li
381.479 17.3756 li
381.482 17.3756 li
381.485 17.3756 li
381.489 17.3756 li
381.492 17.3756 li
381.495 17.3756 li
381.499 17.3756 li
381.502 17.3756 li
381.506 17.3756 li
381.509 17.3756 li
381.512 17.3756 li
381.515 17.3756 li
381.519 17.3756 li
381.522 17.3756 li
381.525 17.3756 li
381.529 17.3756 li
381.531 17.3756 li
381.534 17.3756 li
381.537 17.3756 li
381.54 17.3756 li
381.543 17.3756 li
381.546 17.3756 li
381.549 17.3756 li
381.552 17.3756 li
381.554 17.3756 li
381.558 17.3756 li
381.561 17.3756 li
381.564 17.3756 li
381.567 17.3756 li
381.57 17.3756 li
381.572 17.3756 li
381.575 17.3756 li
381.578 17.3756 li
381.58 17.3756 li
381.583 17.3756 li
381.586 17.3756 li
381.588 17.3756 li
381.591 17.3756 li
381.594 17.3756 li
381.596 17.3756 li
381.599 17.3756 li
381.601 17.3756 li
381.604 17.3756 li
381.607 17.3756 li
381.609 17.3756 li
381.611 17.3756 li
381.613 17.3756 li
381.616 17.3756 li
381.618 17.3756 li
381.62 17.3756 li
381.622 17.3756 li
381.624 17.3756 li
381.627 17.3756 li
381.629 17.3756 li
381.631 17.3756 li
381.634 17.3756 li
381.636 17.3756 li
381.638 17.3756 li
381.64 17.3756 li
381.643 17.3756 li
381.644 17.3756 li
381.646 17.3756 li
381.648 17.3756 li
381.65 17.3756 li
381.652 17.3756 li
381.654 17.3756 li
381.655 17.3756 li
381.657 17.3756 li
381.658 17.3756 li
381.661 17.3756 li
381.663 17.3756 li
381.665 17.3756 li
381.666 17.3756 li
381.669 17.3756 li
381.67 17.3756 li
381.672 17.3756 li
381.673 17.3756 li
381.675 17.3756 li
381.677 17.3756 li
381.678 17.3756 li
381.679 17.3756 li
381.681 17.3756 li
381.683 17.3756 li
381.684 17.3756 li
381.686 17.3756 li
381.688 17.3756 li
381.689 17.3756 li
381.69 17.3756 li
381.691 17.3756 li
381.693 17.3756 li
381.694 17.3756 li
381.696 17.3756 li
381.697 17.3756 li
381.699 17.3756 li
381.7 17.3756 li
381.702 17.3756 li
381.703 17.3756 li
381.705 17.3756 li
381.706 17.3756 li
381.708 17.3756 li
381.709 17.3756 li
381.711 17.3756 li
381.713 17.3756 li
381.714 17.3756 li
381.715 17.3756 li
381.717 17.3756 li
381.718 17.3756 li
381.719 17.3756 li
381.72 17.3756 li
381.722 17.3756 li
381.723 17.3756 li
381.724 17.3756 li
381.726 17.3756 li
381.727 17.3756 li
381.728 17.3756 li
381.73 17.3756 li
381.732 17.3756 li
381.733 17.3756 li
381.735 17.3756 li
381.736 17.3756 li
381.737 17.3756 li
381.738 17.3756 li
381.739 17.3756 li
381.74 17.3756 li
381.741 17.3756 li
381.742 17.3756 li
381.744 17.3756 li
381.745 17.3756 li
381.746 17.3756 li
381.747 17.3756 li
381.748 17.3756 li
381.75 17.3756 li
381.752 17.3756 li
381.753 17.3756 li
381.754 17.3756 li
381.755 17.3756 li
381.756 17.3756 li
381.757 17.3756 li
381.758 17.3756 li
381.759 17.3756 li
381.76 17.3756 li
381.761 17.3756 li
381.762 17.3756 li
381.763 17.3756 li
381.764 17.3756 li
381.765 17.3756 li
381.766 17.3756 li
381.767 17.3756 li
381.768 17.3756 li
381.769 17.3756 li
381.77 17.3756 li
381.771 17.3756 li
381.772 17.3756 li
381.773 17.3756 li
381.774 17.3756 li
381.775 17.3756 li
381.776 17.3756 li
381.777 17.3756 li
381.778 17.3756 li
381.779 17.3756 li
381.78 17.3756 li
381.781 17.3756 li
381.782 17.3756 li
381.783 17.3756 li
381.784 17.3756 li
381.785 17.3756 li
381.786 17.3756 li
381.787 17.3756 li
381.788 17.3756 li
381.789 17.3756 li
381.79 17.3756 li
381.791 17.3756 li
381.792 17.3756 li
381.793 17.3756 li
381.794 17.3756 li
381.795 17.3756 li
381.796 17.3756 li
381.797 17.3756 li
381.798 17.3756 li
381.799 17.3756 li
381.8 17.3756 li
381.801 17.3756 li
381.802 17.3756 li
381.803 17.3756 li
381.804 17.3756 li
381.805 17.3756 li
381.806 17.3756 li
381.807 17.3756 li
381.808 17.3756 li
381.809 17.3756 li
381.81 17.3756 li
381.811 17.3756 li
381.812 17.3756 li
381.813 17.3756 li
381.814 17.3756 li
381.815 17.3756 li
381.816 17.3756 li
381.817 17.3756 li
381.818 17.3756 li
0 .990631 1 .000396735 cmyk
@
50.3178 90.8296 mo
60.2604 90.8296 li
72.7869 88.6696 li
77.2576 87.9486 li
84.3123 87.2296 li
84.3123 86.5096 li
84.3123 85.0686 li
89.7842 85.0686 li
89.7842 82.9086 li
94.2557 81.4686 li
102.797 81.4686 li
104.199 80.0276 li
109.12 80.0276 li
112.254 78.5876 li
112.254 75.7066 li
114.141 74.2666 li
119.062 74.2666 li
119.794 73.5466 li
124.976 72.8256 li
127.207 69.9456 li
130.681 69.2256 li
134.527 67.7856 li
137.15 67.0656 li
140.469 65.6256 li
145.248 64.1846 li
147.445 64.1846 li
150.924 61.3036 li
153.789 60.5836 li
156.516 60.5836 li
157.774 59.1436 li
159.832 58.4236 li
161.988 58.4236 li
165.247 57.7026 li
166.886 57.7026 li
169.011 56.2626 li
170.787 54.8236 li
172.694 54.8236 li
173.352 54.8236 li
176.114 53.3826 li
178.066 52.6626 li
180.243 51.9426 li
181.731 51.9426 li
183.671 51.9426 li
185.765 51.9426 li
187.694 51.2226 li
189.608 49.7816 li
191.5 49.7816 li
193.328 49.7816 li
194.793 48.3416 li
196.62 48.3416 li
197.637 46.9016 li
199.129 46.9016 li
200.508 46.1806 li
202.093 46.1806 li
203.533 46.1806 li
205.184 44.7406 li
206.479 44.7406 li
208.126 44.7406 li
209.502 44.0206 li
210.859 44.0206 li
212.194 44.0206 li
213.429 44.0206 li
214.904 44.0206 li
216.394 43.3006 li
217.971 43.3006 li
219.327 43.3006 li
220.79 43.3006 li
222.247 42.5806 li
223.529 40.4206 li
224.637 39.7006 li
225.802 39.7006 li
227.134 38.9806 li
228.448 38.9806 li
229.702 38.2596 li
231.144 38.2596 li
232.513 37.5396 li
233.788 36.8196 li
235.223 36.0996 li
236.381 36.0996 li
237.569 34.6586 li
238.539 34.6586 li
239.737 34.6586 li
240.829 34.6586 li
241.819 34.6586 li
242.876 33.9386 li
243.981 33.9386 li
245.064 32.4986 li
245.997 32.4986 li
247.164 31.7786 li
248.134 31.0586 li
248.98 30.3376 li
250.028 30.3376 li
250.995 29.6176 li
251.975 29.6176 li
252.864 28.8976 li
253.818 28.8976 li
254.735 28.1776 li
255.686 28.1776 li
256.637 28.1776 li
257.466 28.1776 li
258.364 28.1776 li
259.3 27.4576 li
260.156 26.7366 li
261.114 26.7366 li
261.979 26.7366 li
262.903 26.7366 li
263.738 26.7366 li
264.589 26.7366 li
265.389 26.7366 li
266.145 26.0166 li
266.956 26.0166 li
267.698 26.0166 li
268.563 26.0166 li
269.267 26.0166 li
270.045 26.0166 li
270.841 26.0166 li
271.579 26.0166 li
272.37 26.0166 li
273.096 26.0166 li
273.878 25.2966 li
274.561 25.2966 li
275.344 25.2966 li
275.957 25.2966 li
276.655 25.2966 li
277.45 24.5776 li
278.184 24.5776 li
278.883 23.8576 li
279.538 23.8576 li
280.193 23.8576 li
280.89 23.8576 li
281.535 23.8576 li
282.233 23.8576 li
282.894 23.8576 li
283.553 23.8576 li
284.152 23.8576 li
284.761 23.8576 li
285.354 23.8576 li
285.994 23.8576 li
286.619 23.8576 li
287.209 23.8576 li
287.797 23.8576 li
288.394 23.8576 li
288.934 23.8576 li
289.508 23.8576 li
290.074 23.8576 li
290.591 23.8576 li
291.194 23.8576 li
291.787 23.1366 li
292.353 22.4166 li
292.888 22.4166 li
293.409 22.4166 li
294.004 22.4166 li
294.547 21.6966 li
295.051 21.6966 li
295.566 21.6966 li
296.074 21.6966 li
296.582 21.6966 li
297.077 21.6966 li
297.592 21.6966 li
298.096 21.6966 li
298.594 21.6966 li
299.102 21.6966 li
299.589 21.6966 li
300.065 21.6966 li
300.533 21.6966 li
301.008 21.6966 li
301.453 21.6966 li
301.905 21.6966 li
302.356 21.6966 li
302.82 20.9766 li
303.262 20.9766 li
303.708 20.9766 li
304.141 20.9766 li
304.56 20.9766 li
304.991 20.9766 li
305.443 20.9766 li
305.859 20.9766 li
306.272 20.9766 li
306.687 20.9766 li
307.086 20.9766 li
307.504 20.9766 li
307.906 20.9766 li
308.305 20.9766 li
308.688 20.9766 li
309.073 20.9766 li
309.467 20.9766 li
309.852 20.9766 li
310.251 20.2566 li
310.642 20.2566 li
311.029 19.5366 li
311.418 19.5366 li
311.789 19.5366 li
312.164 19.5366 li
312.516 19.5366 li
312.883 19.5366 li
313.239 19.5366 li
313.599 19.5366 li
313.961 19.5366 li
314.316 19.5366 li
314.673 19.5366 li
315.016 19.5366 li
315.37 19.5366 li
315.716 19.5366 li
316.05 18.8156 li
316.376 18.8156 li
316.695 18.8156 li
317.025 18.8156 li
317.35 18.8156 li
317.688 18.8156 li
318 18.8156 li
318.318 18.8156 li
318.635 18.8156 li
318.955 18.8156 li
319.256 18.8156 li
319.588 18.8156 li
319.897 18.8156 li
320.222 18.8156 li
320.52 18.8156 li
320.811 18.8156 li
321.116 18.8156 li
321.417 18.8156 li
321.711 18.8156 li
322.001 18.8156 li
322.303 18.8156 li
322.593 18.8156 li
322.889 18.8156 li
323.164 18.8156 li
323.43 18.8156 li
323.714 18.8156 li
323.997 18.8156 li
324.268 18.8156 li
324.546 18.8156 li
324.821 18.8156 li
325.097 18.8156 li
325.383 18.8156 li
325.662 18.8156 li
325.932 18.8156 li
326.2 18.8156 li
326.47 18.8156 li
326.737 18.8156 li
327.004 18.8156 li
327.277 18.8156 li
327.54 18.8156 li
327.8 18.8156 li
328.058 18.8156 li
328.324 18.8156 li
328.583 18.8156 li
328.836 18.8156 li
329.093 18.8156 li
329.333 18.8156 li
329.593 18.8156 li
329.836 18.8156 li
330.081 18.8156 li
330.331 18.8156 li
330.573 18.8156 li
330.811 18.8156 li
331.047 18.8156 li
331.277 18.8156 li
331.509 18.8156 li
331.74 18.0956 li
331.984 18.0956 li
332.223 18.0956 li
332.446 18.0956 li
332.676 18.0956 li
332.906 18.0956 li
333.127 18.0956 li
333.354 18.0956 li
333.584 18.0956 li
333.802 18.0956 li
334.028 18.0956 li
334.244 18.0956 li
334.459 18.0956 li
334.672 18.0956 li
334.884 18.0956 li
335.09 18.0956 li
335.32 18.0956 li
335.534 18.0956 li
335.745 18.0956 li
335.956 18.0956 li
336.173 18.0956 li
336.391 18.0956 li
336.6 18.0956 li
336.808 18.0956 li
337.026 18.0956 li
337.246 18.0956 li
337.462 18.0956 li
337.672 18.0956 li
337.875 18.0956 li
338.095 18.0956 li
338.301 18.0956 li
338.497 18.0956 li
338.692 18.0956 li
338.894 18.0956 li
339.095 18.0956 li
339.289 18.0956 li
339.501 18.0956 li
339.705 18.0956 li
339.91 18.0956 li
340.102 18.0956 li
340.298 18.0956 li
340.498 18.0956 li
340.684 18.0956 li
340.873 18.0956 li
341.071 18.0956 li
341.264 18.0956 li
341.454 18.0956 li
341.65 18.0956 li
341.836 18.0956 li
342.03 18.0956 li
342.223 18.0956 li
342.418 18.0956 li
342.613 18.0956 li
342.8 18.0956 li
342.986 18.0956 li
343.168 18.0956 li
343.353 18.0956 li
343.539 18.0956 li
343.714 18.0956 li
343.892 18.0956 li
344.073 18.0956 li
344.252 18.0956 li
344.428 18.0956 li
344.612 18.0956 li
344.789 17.3756 li
344.967 17.3756 li
345.141 17.3756 li
345.313 17.3756 li
345.482 17.3756 li
345.653 17.3756 li
345.822 17.3756 li
345.997 17.3756 li
346.168 17.3756 li
346.347 17.3756 li
346.516 17.3756 li
346.692 17.3756 li
346.863 17.3756 li
347.033 17.3756 li
347.202 17.3756 li
347.361 17.3756 li
347.527 17.3756 li
347.702 17.3756 li
347.863 17.3756 li
348.025 17.3756 li
348.189 17.3756 li
348.356 17.3756 li
348.516 17.3756 li
348.677 17.3756 li
348.839 17.3756 li
348.997 17.3756 li
349.152 17.3756 li
349.306 17.3756 li
349.468 17.3756 li
349.618 17.3756 li
349.773 17.3756 li
349.927 17.3756 li
350.081 17.3756 li
350.232 17.3756 li
350.391 17.3756 li
350.543 17.3756 li
350.697 17.3756 li
350.85 17.3756 li
351 17.3756 li
351.156 17.3756 li
351.305 17.3756 li
351.452 17.3756 li
351.598 17.3756 li
351.748 17.3756 li
351.903 17.3756 li
352.049 17.3756 li
352.2 17.3756 li
352.341 17.3756 li
352.489 17.3756 li
352.636 17.3756 li
352.785 17.3756 li
352.928 17.3756 li
353.074 17.3756 li
353.215 17.3756 li
353.355 17.3756 li
353.496 17.3756 li
353.638 17.3756 li
353.774 17.3756 li
353.912 17.3756 li
354.051 17.3756 li
354.191 17.3756 li
354.329 17.3756 li
354.464 17.3756 li
354.6 17.3756 li
354.738 17.3756 li
354.871 17.3756 li
355.001 17.3756 li
355.136 17.3756 li
355.273 17.3756 li
355.402 17.3756 li
355.529 17.3756 li
355.663 17.3756 li
355.794 17.3756 li
355.924 17.3756 li
356.056 17.3756 li
356.191 17.3756 li
356.319 17.3756 li
356.445 17.3756 li
356.574 17.3756 li
356.698 17.3756 li
356.828 17.3756 li
356.958 17.3756 li
357.086 17.3756 li
357.207 17.3756 li
357.329 17.3756 li
357.457 17.3756 li
357.577 17.3756 li
357.697 17.3756 li
357.825 17.3756 li
357.942 17.3756 li
358.068 17.3756 li
358.191 17.3756 li
358.306 17.3756 li
358.427 17.3756 li
358.545 17.3756 li
358.657 17.3756 li
358.777 17.3756 li
358.896 17.3756 li
359.012 17.3756 li
359.127 17.3756 li
359.241 17.3756 li
359.356 17.3756 li
359.471 17.3756 li
359.585 17.3756 li
359.7 17.3756 li
359.813 17.3756 li
359.928 17.3756 li
360.046 17.3756 li
360.157 17.3756 li
360.266 17.3756 li
360.378 17.3756 li
360.486 17.3756 li
360.595 17.3756 li
360.703 17.3756 li
360.81 17.3756 li
360.916 17.3756 li
361.022 17.3756 li
361.127 17.3756 li
361.234 17.3756 li
361.338 17.3756 li
361.444 17.3756 li
361.548 17.3756 li
361.649 17.3756 li
361.756 17.3756 li
361.861 17.3756 li
361.965 17.3756 li
362.066 17.3756 li
362.166 17.3756 li
362.27 17.3756 li
362.372 17.3756 li
362.474 17.3756 li
362.575 17.3756 li
362.671 17.3756 li
362.768 17.3756 li
362.868 17.3756 li
362.964 17.3756 li
363.065 17.3756 li
363.16 17.3756 li
363.254 17.3756 li
363.352 17.3756 li
363.45 17.3756 li
363.545 17.3756 li
363.635 17.3756 li
363.729 17.3756 li
363.823 17.3756 li
363.914 17.3756 li
364.005 17.3756 li
364.098 17.3756 li
364.191 17.3756 li
364.283 17.3756 li
364.375 17.3756 li
364.463 17.3756 li
364.554 17.3756 li
364.641 17.3756 li
364.732 17.3756 li
364.821 17.3756 li
364.91 17.3756 li
364.995 17.3756 li
365.082 17.3756 li
365.168 17.3756 li
365.257 17.3756 li
365.347 17.3756 li
365.434 17.3756 li
365.52 17.3756 li
365.605 17.3756 li
365.688 17.3756 li
365.773 17.3756 li
365.855 17.3756 li
365.94 17.3756 li
366.02 17.3756 li
366.1 17.3756 li
366.181 17.3756 li
366.261 17.3756 li
366.339 17.3756 li
366.42 17.3756 li
366.5 17.3756 li
366.58 17.3756 li
366.66 17.3756 li
366.74 17.3756 li
366.818 17.3756 li
366.894 17.3756 li
366.973 17.3756 li
367.05 17.3756 li
367.125 17.3756 li
367.203 17.3756 li
367.277 17.3756 li
367.352 17.3756 li
367.428 17.3756 li
367.504 17.3756 li
367.577 17.3756 li
367.653 17.3756 li
367.725 17.3756 li
367.798 17.3756 li
367.874 17.3756 li
367.948 17.3756 li
368.022 17.3756 li
368.095 17.3756 li
368.166 17.3756 li
368.239 17.3756 li
368.307 17.3756 li
368.38 17.3756 li
368.449 17.3756 li
368.523 17.3756 li
368.592 17.3756 li
368.661 17.3756 li
368.728 17.3756 li
368.795 17.3756 li
368.861 17.3756 li
368.929 17.3756 li
368.997 17.3756 li
369.066 17.3756 li
369.13 17.3756 li
369.197 17.3756 li
369.264 17.3756 li
369.33 17.3756 li
369.396 17.3756 li
369.463 17.3756 li
369.53 17.3756 li
369.595 17.3756 li
369.659 17.3756 li
369.726 17.3756 li
369.789 17.3756 li
369.85 17.3756 li
369.914 17.3756 li
369.977 17.3756 li
370.04 17.3756 li
370.1 17.3756 li
370.162 17.3756 li
370.225 17.3756 li
370.288 17.3756 li
370.347 17.3756 li
370.409 17.3756 li
370.47 17.3756 li
370.531 17.3756 li
370.591 17.3756 li
370.649 17.3756 li
370.707 17.3756 li
370.767 17.3756 li
370.826 17.3756 li
370.884 17.3756 li
370.94 17.3756 li
370.998 17.3756 li
371.057 17.3756 li
371.115 17.3756 li
371.172 17.3756 li
371.228 17.3756 li
371.284 17.3756 li
371.34 17.3756 li
371.394 17.3756 li
371.448 17.3756 li
371.502 17.3756 li
371.557 17.3756 li
371.611 17.3756 li
371.665 17.3756 li
371.72 17.3756 li
371.773 17.3756 li
371.825 17.3756 li
371.877 17.3756 li
371.928 17.3756 li
371.981 17.3756 li
372.034 17.3756 li
372.084 17.3756 li
372.137 17.3756 li
372.189 17.3756 li
372.239 17.3756 li
372.292 17.3756 li
372.345 17.3756 li
372.397 17.3756 li
372.448 17.3756 li
372.498 17.3756 li
372.547 17.3756 li
372.595 17.3756 li
372.643 17.3756 li
372.691 17.3756 li
372.739 17.3756 li
372.787 17.3756 li
372.836 17.3756 li
372.885 17.3756 li
372.931 17.3756 li
372.977 17.3756 li
373.023 17.3756 li
373.069 17.3756 li
373.114 17.3756 li
373.158 17.3756 li
373.204 17.3756 li
373.251 17.3756 li
373.297 17.3756 li
373.344 17.3756 li
373.389 17.3756 li
373.432 17.3756 li
373.477 17.3756 li
373.521 17.3756 li
373.566 17.3756 li
373.611 17.3756 li
373.657 17.3756 li
373.702 17.3756 li
373.743 17.3756 li
373.785 17.3756 li
373.828 17.3756 li
373.872 17.3756 li
373.915 17.3756 li
373.956 17.3756 li
373.998 17.3756 li
374.04 17.3756 li
374.083 17.3756 li
374.124 17.3756 li
374.164 17.3756 li
374.204 17.3756 li
374.244 17.3756 li
374.284 17.3756 li
374.324 17.3756 li
374.364 17.3756 li
374.402 17.3756 li
374.443 17.3756 li
374.484 17.3756 li
374.522 17.3756 li
374.563 17.3756 li
374.603 17.3756 li
374.64 17.3756 li
374.677 17.3756 li
374.715 17.3756 li
374.753 17.3756 li
374.793 17.3756 li
374.829 17.3756 li
374.866 17.3756 li
374.902 17.3756 li
374.938 17.3756 li
374.973 17.3756 li
375.009 17.3756 li
375.046 17.3756 li
375.082 17.3756 li
375.119 17.3756 li
375.155 17.3756 li
375.192 17.3756 li
375.228 17.3756 li
375.26 17.3756 li
375.295 17.3756 li
375.329 17.3756 li
375.363 17.3756 li
375.397 17.3756 li
375.429 17.3756 li
375.462 17.3756 li
375.493 17.3756 li
375.525 17.3756 li
375.559 17.3756 li
375.592 17.3756 li
375.625 17.3756 li
375.657 17.3756 li
375.69 17.3756 li
375.722 17.3756 li
375.754 17.3756 li
375.786 17.3756 li
375.816 17.3756 li
375.849 17.3756 li
375.879 17.3756 li
375.913 17.3756 li
375.941 17.3756 li
375.973 17.3756 li
376.003 17.3756 li
376.034 17.3756 li
376.065 17.3756 li
376.094 17.3756 li
376.125 17.3756 li
376.156 17.3756 li
376.185 17.3756 li
376.213 17.3756 li
376.243 17.3756 li
376.271 17.3756 li
376.301 17.3756 li
376.33 17.3756 li
376.359 17.3756 li
376.387 17.3756 li
376.416 17.3756 li
376.445 17.3756 li
376.473 17.3756 li
376.502 17.3756 li
376.53 17.3756 li
376.557 17.3756 li
376.584 17.3756 li
376.611 17.3756 li
376.638 17.3756 li
376.663 17.3756 li
376.692 17.3756 li
376.719 17.3756 li
376.747 17.3756 li
376.774 17.3756 li
376.801 17.3756 li
376.826 17.3756 li
376.852 17.3756 li
376.879 17.3756 li
376.904 17.3756 li
376.929 17.3756 li
376.955 17.3756 li
376.982 17.3756 li
377.007 17.3756 li
377.033 17.3756 li
377.056 17.3756 li
377.082 17.3756 li
377.107 17.3756 li
377.133 17.3756 li
377.157 17.3756 li
377.181 17.3756 li
377.205 17.3756 li
377.23 17.3756 li
377.254 17.3756 li
377.278 17.3756 li
377.303 17.3756 li
377.327 17.3756 li
377.35 17.3756 li
377.373 17.3756 li
377.397 17.3756 li
377.42 17.3756 li
377.443 17.3756 li
377.466 17.3756 li
377.489 17.3756 li
377.511 17.3756 li
377.534 17.3756 li
377.558 17.3756 li
377.581 17.3756 li
377.604 17.3756 li
377.626 17.3756 li
377.649 17.3756 li
377.672 17.3756 li
377.693 17.3756 li
377.716 17.3756 li
377.736 17.3756 li
377.758 17.3756 li
377.781 17.3756 li
377.804 17.3756 li
377.826 17.3756 li
377.847 17.3756 li
377.866 17.3756 li
377.887 17.3756 li
377.908 17.3756 li
377.929 17.3756 li
377.949 17.3756 li
377.97 17.3756 li
377.991 17.3756 li
378.012 17.3756 li
378.034 17.3756 li
378.053 17.3756 li
378.073 17.3756 li
378.091 17.3756 li
378.111 17.3756 li
378.129 17.3756 li
378.148 17.3756 li
378.168 17.3756 li
378.185 17.3756 li
378.204 17.3756 li
378.224 17.3756 li
378.243 17.3756 li
378.261 17.3756 li
378.28 17.3756 li
378.3 17.3756 li
378.318 17.3756 li
378.338 17.3756 li
378.357 17.3756 li
378.375 17.3756 li
378.392 17.3756 li
378.411 17.3756 li
378.429 17.3756 li
378.448 17.3756 li
378.466 17.3756 li
378.484 17.3756 li
378.502 17.3756 li
378.52 17.3756 li
378.538 17.3756 li
378.555 17.3756 li
378.573 17.3756 li
378.591 17.3756 li
378.607 17.3756 li
378.625 17.3756 li
378.642 17.3756 li
378.659 17.3756 li
378.675 17.3756 li
378.691 17.3756 li
378.709 17.3756 li
378.725 17.3756 li
378.741 17.3756 li
378.759 17.3756 li
378.775 17.3756 li
378.791 17.3756 li
378.807 17.3756 li
378.823 17.3756 li
378.838 17.3756 li
378.852 17.3756 li
378.868 17.3756 li
378.884 17.3756 li
378.9 17.3756 li
378.915 17.3756 li
378.931 17.3756 li
378.948 17.3756 li
378.963 17.3756 li
378.979 17.3756 li
378.995 17.3756 li
379.01 17.3756 li
379.025 17.3756 li
379.041 17.3756 li
379.057 17.3756 li
379.072 17.3756 li
379.087 17.3756 li
379.103 17.3756 li
379.118 17.3756 li
379.133 17.3756 li
379.147 17.3756 li
379.163 17.3756 li
379.177 17.3756 li
379.191 17.3756 li
379.207 17.3756 li
379.221 17.3756 li
379.236 17.3756 li
379.249 17.3756 li
379.264 17.3756 li
379.278 17.3756 li
379.293 17.3756 li
379.307 17.3756 li
379.32 17.3756 li
379.335 17.3756 li
379.35 17.3756 li
379.363 17.3756 li
379.377 17.3756 li
379.39 17.3756 li
379.404 17.3756 li
379.417 17.3756 li
379.433 17.3756 li
379.447 17.3756 li
379.46 17.3756 li
379.473 17.3756 li
379.487 17.3756 li
379.501 17.3756 li
379.513 17.3756 li
379.526 17.3756 li
379.539 17.3756 li
379.552 17.3756 li
379.564 17.3756 li
379.579 17.3756 li
379.591 17.3756 li
379.603 17.3756 li
379.617 17.3756 li
379.629 17.3756 li
379.641 17.3756 li
379.654 17.3756 li
379.667 17.3756 li
379.678 17.3756 li
379.69 17.3756 li
379.702 17.3756 li
379.714 17.3756 li
379.726 17.3756 li
379.738 17.3756 li
379.751 17.3756 li
379.762 17.3756 li
379.773 17.3756 li
379.785 17.3756 li
379.797 17.3756 li
379.808 17.3756 li
379.821 17.3756 li
379.833 17.3756 li
379.845 17.3756 li
379.855 17.3756 li
379.868 17.3756 li
379.88 17.3756 li
379.891 17.3756 li
379.902 17.3756 li
379.914 17.3756 li
379.925 17.3756 li
379.937 17.3756 li
379.949 17.3756 li
379.959 17.3756 li
379.969 17.3756 li
379.98 17.3756 li
379.991 17.3756 li
380.002 17.3756 li
380.014 17.3756 li
380.024 17.3756 li
380.035 17.3756 li
380.046 17.3756 li
380.056 17.3756 li
380.067 17.3756 li
380.077 17.3756 li
380.086 17.3756 li
380.098 17.3756 li
380.108 17.3756 li
380.118 17.3756 li
380.128 17.3756 li
380.139 17.3756 li
380.15 17.3756 li
380.16 17.3756 li
380.17 17.3756 li
380.18 17.3756 li
380.191 17.3756 li
380.2 17.3756 li
380.209 17.3756 li
380.22 17.3756 li
380.23 17.3756 li
380.239 17.3756 li
380.249 17.3756 li
380.259 17.3756 li
380.268 17.3756 li
380.277 17.3756 li
380.286 17.3756 li
380.295 17.3756 li
380.305 17.3756 li
380.315 17.3756 li
380.324 17.3756 li
380.334 17.3756 li
380.343 17.3756 li
380.352 17.3756 li
380.361 17.3756 li
380.37 17.3756 li
380.379 17.3756 li
380.388 17.3756 li
380.397 17.3756 li
380.407 17.3756 li
380.416 17.3756 li
380.425 17.3756 li
380.435 17.3756 li
380.443 17.3756 li
380.452 17.3756 li
380.461 17.3756 li
380.47 17.3756 li
380.477 17.3756 li
380.486 17.3756 li
380.493 17.3756 li
380.502 17.3756 li
380.511 17.3756 li
380.519 17.3756 li
380.527 17.3756 li
380.536 17.3756 li
380.543 17.3756 li
380.55 17.3756 li
380.559 17.3756 li
380.566 17.3756 li
380.574 17.3756 li
380.581 17.3756 li
380.589 17.3756 li
380.598 17.3756 li
380.605 17.3756 li
380.613 17.3756 li
380.62 17.3756 li
380.627 17.3756 li
380.635 17.3756 li
380.642 17.3756 li
380.65 17.3756 li
380.657 17.3756 li
380.664 17.3756 li
380.67 17.3756 li
380.678 17.3756 li
380.686 17.3756 li
380.694 17.3756 li
380.7 17.3756 li
380.707 17.3756 li
380.715 17.3756 li
380.722 17.3756 li
380.73 17.3756 li
380.736 17.3756 li
380.743 17.3756 li
380.751 17.3756 li
380.757 17.3756 li
380.764 17.3756 li
380.771 17.3756 li
380.779 17.3756 li
380.785 17.3756 li
380.792 17.3756 li
380.799 17.3756 li
380.806 17.3756 li
380.812 17.3756 li
380.819 17.3756 li
380.826 17.3756 li
380.832 17.3756 li
380.838 17.3756 li
380.845 17.3756 li
380.851 17.3756 li
380.858 17.3756 li
380.865 17.3756 li
380.871 17.3756 li
380.877 17.3756 li
380.883 17.3756 li
380.889 17.3756 li
380.895 17.3756 li
380.902 17.3756 li
380.909 17.3756 li
380.915 17.3756 li
380.921 17.3756 li
380.928 17.3756 li
380.934 17.3756 li
380.94 17.3756 li
380.947 17.3756 li
380.953 17.3756 li
380.959 17.3756 li
380.965 17.3756 li
380.971 17.3756 li
380.977 17.3756 li
380.982 17.3756 li
380.987 17.3756 li
380.992 17.3756 li
380.998 17.3756 li
381.004 17.3756 li
381.01 17.3756 li
381.016 17.3756 li
381.022 17.3756 li
381.027 17.3756 li
381.033 17.3756 li
381.039 17.3756 li
381.044 17.3756 li
381.049 17.3756 li
381.054 17.3756 li
381.06 17.3756 li
381.065 17.3756 li
381.07 17.3756 li
381.075 17.3756 li
381.08 17.3756 li
381.085 17.3756 li
381.09 17.3756 li
381.096 17.3756 li
381.101 17.3756 li
381.106 17.3756 li
381.111 17.3756 li
381.115 17.3756 li
381.12 17.3756 li
381.125 17.3756 li
381.13 17.3756 li
381.135 17.3756 li
381.139 17.3756 li
381.144 17.3756 li
381.149 17.3756 li
381.154 17.3756 li
381.159 17.3756 li
381.164 17.3756 li
381.169 17.3756 li
381.174 17.3756 li
381.179 17.3756 li
381.184 17.3756 li
381.189 17.3756 li
381.194 17.3756 li
381.198 17.3756 li
381.202 17.3756 li
381.206 17.3756 li
381.211 17.3756 li
381.215 17.3756 li
381.22 17.3756 li
381.224 17.3756 li
381.229 17.3756 li
381.233 17.3756 li
381.238 17.3756 li
381.242 17.3756 li
381.247 17.3756 li
381.251 17.3756 li
381.256 17.3756 li
381.259 17.3756 li
381.264 17.3756 li
381.268 17.3756 li
381.272 17.3756 li
381.277 17.3756 li
381.281 17.3756 li
381.285 17.3756 li
381.289 17.3756 li
381.292 17.3756 li
381.297 17.3756 li
381.3 17.3756 li
381.304 17.3756 li
381.308 17.3756 li
381.312 17.3756 li
381.316 17.3756 li
381.319 17.3756 li
381.323 17.3756 li
381.327 17.3756 li
381.331 17.3756 li
381.334 17.3756 li
381.338 17.3756 li
381.342 17.3756 li
381.345 17.3756 li
381.348 17.3756 li
381.352 17.3756 li
381.356 17.3756 li
381.36 17.3756 li
381.363 17.3756 li
381.366 17.3756 li
381.369 17.3756 li
381.373 17.3756 li
381.376 17.3756 li
381.379 17.3756 li
381.383 17.3756 li
381.386 17.3756 li
381.391 17.3756 li
381.394 17.3756 li
381.398 17.3756 li
381.401 17.3756 li
381.404 17.3756 li
381.407 17.3756 li
381.41 17.3756 li
381.414 17.3756 li
381.417 17.3756 li
381.419 17.3756 li
381.422 17.3756 li
381.425 17.3756 li
381.428 17.3756 li
381.431 17.3756 li
381.434 17.3756 li
381.437 17.3756 li
381.44 17.3756 li
381.443 17.3756 li
381.447 17.3756 li
381.45 17.3756 li
381.452 17.3756 li
381.455 17.3756 li
381.458 17.3756 li
381.46 17.3756 li
381.464 17.3756 li
381.467 17.3756 li
381.469 17.3756 li
381.472 17.3756 li
381.475 17.3756 li
381.477 17.3756 li
381.481 17.3756 li
381.483 17.3756 li
381.486 17.3756 li
381.488 17.3756 li
381.491 17.3756 li
381.493 17.3756 li
381.496 17.3756 li
381.498 17.3756 li
381.501 17.3756 li
381.503 17.3756 li
381.506 17.3756 li
381.509 17.3756 li
381.511 17.3756 li
381.514 17.3756 li
381.516 17.3756 li
381.519 17.3756 li
381.521 17.3756 li
381.523 17.3756 li
381.526 17.3756 li
381.528 17.3756 li
381.531 17.3756 li
381.532 17.3756 li
381.534 17.3756 li
381.537 17.3756 li
381.539 17.3756 li
381.541 17.3756 li
381.543 17.3756 li
381.544 17.3756 li
381.547 17.3756 li
381.548 17.3756 li
381.55 17.3756 li
381.552 17.3756 li
381.554 17.3756 li
381.556 17.3756 li
381.559 17.3756 li
381.56 17.3756 li
381.562 17.3756 li
381.564 17.3756 li
381.566 17.3756 li
381.568 17.3756 li
381.57 17.3756 li
381.571 17.3756 li
381.573 17.3756 li
381.575 17.3756 li
381.577 17.3756 li
381.578 17.3756 li
381.579 17.3756 li
381.582 17.3756 li
381.583 17.3756 li
381.586 17.3756 li
381.587 17.3756 li
381.589 17.3756 li
381.591 17.3756 li
381.592 17.3756 li
381.593 17.3756 li
381.595 17.3756 li
381.597 17.3756 li
381.598 17.3756 li
381.6 17.3756 li
381.601 17.3756 li
381.603 17.3756 li
381.604 17.3756 li
381.607 17.3756 li
381.608 17.3756 li
381.609 17.3756 li
381.611 17.3756 li
381.613 17.3756 li
381.614 17.3756 li
381.616 17.3756 li
381.618 17.3756 li
381.619 17.3756 li
381.62 17.3756 li
381.622 17.3756 li
381.623 17.3756 li
381.625 17.3756 li
381.626 17.3756 li
381.627 17.3756 li
381.629 17.3756 li
381.631 17.3756 li
381.632 17.3756 li
381.634 17.3756 li
381.635 17.3756 li
381.636 17.3756 li
381.638 17.3756 li
381.639 17.3756 li
381.641 17.3756 li
381.643 17.3756 li
381.644 17.3756 li
381.645 17.3756 li
381.646 17.3756 li
381.648 17.3756 li
381.65 17.3756 li
381.651 17.3756 li
381.652 17.3756 li
381.653 17.3756 li
381.654 17.3756 li
381.655 17.3756 li
381.657 17.3756 li
381.659 17.3756 li
381.66 17.3756 li
381.661 17.3756 li
381.663 17.3756 li
381.664 17.3756 li
381.665 17.3756 li
381.666 17.3756 li
381.667 17.3756 li
381.669 17.3756 li
381.67 17.3756 li
381.671 17.3756 li
381.673 17.3756 li
381.674 17.3756 li
381.675 17.3756 li
381.676 17.3756 li
381.677 17.3756 li
381.678 17.3756 li
381.679 17.3756 li
381.681 17.3756 li
381.682 17.3756 li
381.683 17.3756 li
381.684 17.3756 li
381.685 17.3756 li
381.686 17.3756 li
381.687 17.3756 li
381.688 17.3756 li
381.689 17.3756 li
381.69 17.3756 li
381.691 17.3756 li
381.692 17.3756 li
381.693 17.3756 li
381.694 17.3756 li
381.696 17.3756 li
381.697 17.3756 li
381.698 17.3756 li
381.699 17.3756 li
381.7 17.3756 li
381.701 17.3756 li
381.702 17.3756 li
381.703 17.3756 li
381.704 17.3756 li
381.705 17.3756 li
381.706 17.3756 li
381.707 17.3756 li
381.708 17.3756 li
381.709 17.3756 li
381.71 17.3756 li
381.711 17.3756 li
381.712 17.3756 li
381.714 17.3756 li
381.716 17.3756 li
381.717 17.3756 li
381.718 17.3756 li
381.719 17.3756 li
381.72 17.3756 li
381.721 17.3756 li
381.722 17.3756 li
381.723 17.3756 li
381.724 17.3756 li
381.725 17.3756 li
381.726 17.3756 li
381.727 17.3756 li
381.728 17.3756 li
381.729 17.3756 li
381.73 17.3756 li
381.731 17.3756 li
381.732 17.3756 li
381.733 17.3756 li
381.734 17.3756 li
381.735 17.3756 li
381.736 17.3756 li
381.737 17.3756 li
381.738 17.3756 li
381.739 17.3756 li
381.74 17.3756 li
381.741 17.3756 li
381.742 17.3756 li
381.743 17.3756 li
381.744 17.3756 li
381.745 17.3756 li
381.746 17.3756 li
381.747 17.3756 li
381.748 17.3756 li
381.749 17.3756 li
381.75 17.3756 li
381.751 17.3756 li
381.752 17.3756 li
381.753 17.3756 li
381.754 17.3756 li
381.755 17.3756 li
381.756 17.3756 li
381.757 17.3756 li
381.758 17.3756 li
381.759 17.3756 li
381.76 17.3756 li
381.761 17.3756 li
381.762 17.3756 li
381.763 17.3756 li
381.764 17.3756 li
381.765 17.3756 li
381.766 17.3756 li
381.767 17.3756 li
381.768 17.3756 li
381.769 17.3756 li
381.77 17.3756 li
381.771 17.3756 li
381.772 17.3756 li
381.773 17.3756 li
381.774 17.3756 li
381.775 17.3756 li
381.776 17.3756 li
381.777 17.3756 li
381.778 17.3756 li
381.779 17.3756 li
381.78 17.3756 li
381.781 17.3756 li
381.782 17.3756 li
381.783 17.3756 li
381.784 17.3756 li
381.785 17.3756 li
381.786 17.3756 li
381.787 17.3756 li
381.788 17.3756 li
381.789 17.3756 li
381.79 17.3756 li
381.791 17.3756 li
381.792 17.3756 li
381.793 17.3756 li
381.794 17.3756 li
381.795 17.3756 li
381.796 17.3756 li
381.797 17.3756 li
381.798 17.3756 li
381.799 17.3756 li
381.8 17.3756 li
381.801 17.3756 li
381.802 17.3756 li
381.803 17.3756 li
381.804 17.3756 li
381.805 17.3756 li
381.806 17.3756 li
381.807 17.3756 li
381.808 17.3756 li
381.809 17.3756 li
381.81 17.3756 li
381.811 17.3756 li
381.812 17.3756 li
381.813 17.3756 li
381.814 17.3756 li
381.815 17.3756 li
381.816 17.3756 li
381.817 17.3756 li
381.818 17.3756 li
.895628 .7673 0 0 cmyk
@
0 lj
72.7873 85.6696 mo
72.7873 91.6696 li
69.7873 88.6696 mo
75.7873 88.6696 li
70.6662 86.5486 mo
74.908 90.7906 li
70.6662 90.7906 mo
74.908 86.5486 li
@
104.198 77.0276 mo
104.198 83.0276 li
101.198 80.0276 mo
107.198 80.0276 li
102.077 77.9066 mo
106.32 82.1486 li
102.077 82.1486 mo
106.32 77.9066 li
@
134.527 64.7856 mo
134.527 70.7856 li
131.527 67.7856 mo
137.527 67.7856 li
132.406 65.6646 mo
136.648 69.9066 li
132.406 69.9066 mo
136.648 65.6646 li
@
161.989 55.4236 mo
161.989 61.4236 li
158.989 58.4236 mo
164.989 58.4236 li
159.868 56.3026 mo
164.109 60.5446 li
159.868 60.5446 mo
164.109 56.3026 li
@
181.731 48.9426 mo
181.731 54.9426 li
178.731 51.9426 mo
184.731 51.9426 li
179.609 49.8216 mo
183.852 54.0636 li
179.609 54.0636 mo
183.852 49.8216 li
@
199.129 43.9016 mo
199.129 49.9016 li
196.129 46.9016 mo
202.129 46.9016 li
197.007 44.7806 mo
201.25 49.0226 li
197.007 49.0226 mo
201.25 44.7806 li
@
213.429 41.0206 mo
213.429 47.0206 li
210.429 44.0206 mo
216.429 44.0206 li
211.307 41.8996 mo
215.55 46.1416 li
211.307 46.1416 mo
215.55 41.8996 li
@
227.133 35.9796 mo
227.133 41.9796 li
224.133 38.9796 mo
230.133 38.9796 li
225.012 36.8586 mo
229.254 41.1006 li
225.012 41.1006 mo
229.254 36.8586 li
@
239.738 31.6586 mo
239.738 37.6586 li
236.738 34.6586 mo
242.738 34.6586 li
237.616 32.5376 mo
241.859 36.7796 li
237.616 36.7796 mo
241.859 32.5376 li
@
250.028 27.3376 mo
250.028 33.3376 li
247.028 30.3376 mo
253.028 30.3376 li
247.907 28.2166 mo
252.149 32.4596 li
247.907 32.4596 mo
252.149 28.2166 li
@
259.3 24.4576 mo
259.3 30.4576 li
256.3 27.4576 mo
262.3 27.4576 li
257.179 25.3366 mo
261.421 29.5786 li
257.179 29.5786 mo
261.421 25.3366 li
@
267.698 23.0176 mo
267.698 29.0176 li
264.698 26.0176 mo
270.698 26.0176 li
265.577 23.8966 mo
269.82 28.1385 li
265.577 28.1385 mo
269.82 23.8966 li
@
275.344 22.2966 mo
275.344 28.2966 li
272.344 25.2966 mo
278.344 25.2966 li
273.223 23.1756 mo
277.465 27.4186 li
273.223 27.4186 mo
277.465 23.1756 li
@
282.233 20.8566 mo
282.233 26.8566 li
279.233 23.8566 mo
285.233 23.8566 li
280.112 21.7356 mo
284.354 25.9776 li
280.112 25.9776 mo
284.354 21.7356 li
@
288.395 20.8566 mo
288.395 26.8566 li
285.395 23.8566 mo
291.395 23.8566 li
286.273 21.7356 mo
290.516 25.9776 li
286.273 25.9776 mo
290.516 21.7356 li
@
294.005 19.4166 mo
294.005 25.4166 li
291.005 22.4166 mo
297.005 22.4166 li
291.884 20.2956 mo
296.125 24.5376 li
291.884 24.5376 mo
296.125 20.2956 li
@
299.102 18.6966 mo
299.102 24.6966 li
296.102 21.6966 mo
302.102 21.6966 li
296.981 19.5756 mo
301.223 23.8176 li
296.981 23.8176 mo
301.223 19.5756 li
@
303.708 17.9766 mo
303.708 23.9766 li
300.708 20.9766 mo
306.708 20.9766 li
301.587 18.8556 mo
305.829 23.0976 li
301.587 23.0976 mo
305.829 18.8556 li
@
307.906 17.9766 mo
307.906 23.9766 li
304.906 20.9766 mo
310.906 20.9766 li
305.784 18.8556 mo
310.026 23.0976 li
305.784 23.0976 mo
310.026 18.8556 li
@
311.789 16.5366 mo
311.789 22.5366 li
308.789 19.5366 mo
314.789 19.5366 li
309.668 17.4146 mo
313.91 21.6566 li
309.668 21.6566 mo
313.91 17.4146 li
@
315.37 16.5366 mo
315.37 22.5366 li
312.37 19.5366 mo
318.37 19.5366 li
313.248 17.4146 mo
317.491 21.6566 li
313.248 21.6566 mo
317.491 17.4146 li
@
318.635 15.8156 mo
318.635 21.8156 li
315.635 18.8156 mo
321.635 18.8156 li
316.514 16.6946 mo
320.756 20.9366 li
316.514 20.9366 mo
320.756 16.6946 li
@
321.712 15.8156 mo
321.712 21.8156 li
318.712 18.8156 mo
324.712 18.8156 li
319.591 16.6946 mo
323.833 20.9366 li
319.591 20.9366 mo
323.833 16.6946 li
@
324.545 15.8156 mo
324.545 21.8156 li
321.545 18.8156 mo
327.545 18.8156 li
322.424 16.6946 mo
326.666 20.9366 li
322.424 20.9366 mo
326.666 16.6946 li
@
327.277 15.8156 mo
327.277 21.8156 li
324.277 18.8156 mo
330.277 18.8156 li
325.156 16.6946 mo
329.398 20.9366 li
325.156 20.9366 mo
329.398 16.6946 li
@
329.836 15.8156 mo
329.836 21.8156 li
326.836 18.8156 mo
332.836 18.8156 li
327.714 16.6946 mo
331.957 20.9366 li
327.714 20.9366 mo
331.957 16.6946 li
@
332.223 15.0956 mo
332.223 21.0956 li
329.223 18.0956 mo
335.223 18.0956 li
330.102 15.9746 mo
334.344 20.2166 li
330.102 20.2166 mo
334.344 15.9746 li
@
334.459 15.0956 mo
334.459 21.0956 li
331.459 18.0956 mo
337.459 18.0956 li
332.338 15.9746 mo
336.58 20.2166 li
332.338 20.2166 mo
336.58 15.9746 li
@
336.6 15.0956 mo
336.6 21.0956 li
333.6 18.0956 mo
339.6 18.0956 li
334.479 15.9746 mo
338.722 20.2166 li
334.479 20.2166 mo
338.722 15.9746 li
@
338.693 15.0956 mo
338.693 21.0956 li
335.693 18.0956 mo
341.693 18.0956 li
336.572 15.9746 mo
340.814 20.2166 li
336.572 20.2166 mo
340.814 15.9746 li
@
340.684 15.0956 mo
340.684 21.0956 li
337.684 18.0956 mo
343.684 18.0956 li
338.563 15.9746 mo
342.805 20.2166 li
338.563 20.2166 mo
342.805 15.9746 li
@
342.613 15.0956 mo
342.613 21.0956 li
339.613 18.0956 mo
345.613 18.0956 li
340.492 15.9746 mo
344.734 20.2166 li
340.492 20.2166 mo
344.734 15.9746 li
@
344.428 15.0956 mo
344.428 21.0956 li
341.428 18.0956 mo
347.428 18.0956 li
342.307 15.9746 mo
346.549 20.2166 li
342.307 20.2166 mo
346.549 15.9746 li
@
346.167 14.3756 mo
346.167 20.3756 li
343.167 17.3756 mo
349.167 17.3756 li
344.046 15.2546 mo
348.288 19.4966 li
344.046 19.4966 mo
348.288 15.2546 li
@
347.863 14.3756 mo
347.863 20.3756 li
344.863 17.3756 mo
350.863 17.3756 li
345.741 15.2546 mo
349.983 19.4966 li
345.741 19.4966 mo
349.983 15.2546 li
@
349.468 14.3756 mo
349.468 20.3756 li
346.468 17.3756 mo
352.468 17.3756 li
347.347 15.2546 mo
351.589 19.4966 li
347.347 19.4966 mo
351.589 15.2546 li
@
351 14.3756 mo
351 20.3756 li
348 17.3756 mo
354 17.3756 li
348.879 15.2546 mo
353.121 19.4966 li
348.879 19.4966 mo
353.121 15.2546 li
@
352.489 14.3756 mo
352.489 20.3756 li
349.489 17.3756 mo
355.489 17.3756 li
350.368 15.2546 mo
354.61 19.4966 li
350.368 19.4966 mo
354.61 15.2546 li
@
353.912 14.3756 mo
353.912 20.3756 li
350.912 17.3756 mo
356.912 17.3756 li
351.791 15.2546 mo
356.033 19.4966 li
351.791 19.4966 mo
356.033 15.2546 li
@
355.273 14.3756 mo
355.273 20.3756 li
352.273 17.3756 mo
358.273 17.3756 li
353.152 15.2546 mo
357.394 19.4966 li
353.152 19.4966 mo
357.394 15.2546 li
@
356.573 14.3756 mo
356.573 20.3756 li
353.573 17.3756 mo
359.573 17.3756 li
354.452 15.2546 mo
358.695 19.4966 li
354.452 19.4966 mo
358.695 15.2546 li
@
357.825 14.3756 mo
357.825 20.3756 li
354.825 17.3756 mo
360.825 17.3756 li
355.704 15.2546 mo
359.946 19.4966 li
355.704 19.4966 mo
359.946 15.2546 li
@
359.012 14.3756 mo
359.012 20.3756 li
356.012 17.3756 mo
362.012 17.3756 li
356.891 15.2546 mo
361.133 19.4966 li
356.891 19.4966 mo
361.133 15.2546 li
@
360.157 14.3756 mo
360.157 20.3756 li
357.157 17.3756 mo
363.157 17.3756 li
358.036 15.2546 mo
362.278 19.4966 li
358.036 19.4966 mo
362.278 15.2546 li
@
361.234 14.3756 mo
361.234 20.3756 li
358.234 17.3756 mo
364.234 17.3756 li
359.113 15.2546 mo
363.355 19.4966 li
359.113 19.4966 mo
363.355 15.2546 li
@
362.27 14.3756 mo
362.27 20.3756 li
359.27 17.3756 mo
365.27 17.3756 li
360.149 15.2546 mo
364.391 19.4966 li
360.149 19.4966 mo
364.391 15.2546 li
@
363.254 14.3756 mo
363.254 20.3756 li
360.254 17.3756 mo
366.254 17.3756 li
361.133 15.2546 mo
365.375 19.4966 li
361.133 19.4966 mo
365.375 15.2546 li
@
364.191 14.3756 mo
364.191 20.3756 li
361.191 17.3756 mo
367.191 17.3756 li
362.07 15.2546 mo
366.312 19.4966 li
362.07 19.4966 mo
366.312 15.2546 li
@
365.081 14.3756 mo
365.081 20.3756 li
362.081 17.3756 mo
368.081 17.3756 li
362.961 15.2546 mo
367.202 19.4966 li
362.961 19.4966 mo
367.202 15.2546 li
@
365.94 14.3756 mo
365.94 20.3756 li
362.94 17.3756 mo
368.94 17.3756 li
363.819 15.2546 mo
368.061 19.4966 li
363.819 19.4966 mo
368.061 15.2546 li
@
366.739 14.3756 mo
366.739 20.3756 li
363.739 17.3756 mo
369.739 17.3756 li
364.619 15.2546 mo
368.861 19.4966 li
364.619 19.4966 mo
368.861 15.2546 li
@
367.504 14.3756 mo
367.504 20.3756 li
364.504 17.3756 mo
370.504 17.3756 li
365.382 15.2546 mo
369.624 19.4966 li
365.382 19.4966 mo
369.624 15.2546 li
@
368.239 14.3756 mo
368.239 20.3756 li
365.239 17.3756 mo
371.239 17.3756 li
366.118 15.2546 mo
370.359 19.4966 li
366.118 19.4966 mo
370.359 15.2546 li
@
368.929 14.3756 mo
368.929 20.3756 li
365.929 17.3756 mo
371.929 17.3756 li
366.808 15.2546 mo
371.05 19.4966 li
366.808 19.4966 mo
371.05 15.2546 li
@
369.595 14.3756 mo
369.595 20.3756 li
366.595 17.3756 mo
372.595 17.3756 li
367.474 15.2546 mo
371.716 19.4966 li
367.474 19.4966 mo
371.716 15.2546 li
@
370.224 14.3756 mo
370.224 20.3756 li
367.224 17.3756 mo
373.224 17.3756 li
368.103 15.2546 mo
372.345 19.4966 li
368.103 19.4966 mo
372.345 15.2546 li
@
370.826 14.3756 mo
370.826 20.3756 li
367.826 17.3756 mo
373.826 17.3756 li
368.705 15.2546 mo
372.947 19.4966 li
368.705 19.4966 mo
372.947 15.2546 li
@
371.393 14.3756 mo
371.393 20.3756 li
368.393 17.3756 mo
374.393 17.3756 li
369.272 15.2546 mo
373.514 19.4966 li
369.272 19.4966 mo
373.514 15.2546 li
@
371.928 14.3756 mo
371.928 20.3756 li
368.928 17.3756 mo
374.928 17.3756 li
369.807 15.2546 mo
374.049 19.4966 li
369.807 19.4966 mo
374.049 15.2546 li
@
372.448 14.3756 mo
372.448 20.3756 li
369.448 17.3756 mo
375.448 17.3756 li
370.327 15.2546 mo
374.569 19.4966 li
370.327 19.4966 mo
374.569 15.2546 li
@
372.931 14.3756 mo
372.931 20.3756 li
369.931 17.3756 mo
375.931 17.3756 li
370.809 15.2546 mo
375.052 19.4966 li
370.809 19.4966 mo
375.052 15.2546 li
@
373.389 14.3756 mo
373.389 20.3756 li
370.389 17.3756 mo
376.389 17.3756 li
371.268 15.2546 mo
375.51 19.4966 li
371.268 19.4966 mo
375.51 15.2546 li
@
373.829 14.3756 mo
373.829 20.3756 li
370.829 17.3756 mo
376.829 17.3756 li
371.707 15.2546 mo
375.949 19.4966 li
371.707 19.4966 mo
375.949 15.2546 li
@
374.244 14.3756 mo
374.244 20.3756 li
371.244 17.3756 mo
377.244 17.3756 li
372.123 15.2546 mo
376.365 19.4966 li
372.123 19.4966 mo
376.365 15.2546 li
@
374.64 14.3756 mo
374.64 20.3756 li
371.64 17.3756 mo
377.64 17.3756 li
372.519 15.2546 mo
376.761 19.4966 li
372.519 19.4966 mo
376.761 15.2546 li
@
375.01 14.3756 mo
375.01 20.3756 li
372.01 17.3756 mo
378.01 17.3756 li
372.889 15.2546 mo
377.131 19.4966 li
372.889 19.4966 mo
377.131 15.2546 li
@
375.363 14.3756 mo
375.363 20.3756 li
372.363 17.3756 mo
378.363 17.3756 li
373.242 15.2546 mo
377.484 19.4966 li
373.242 19.4966 mo
377.484 15.2546 li
@
375.689 14.3756 mo
375.689 20.3756 li
372.689 17.3756 mo
378.689 17.3756 li
373.568 15.2546 mo
377.811 19.4966 li
373.568 19.4966 mo
377.811 15.2546 li
@
376.004 14.3756 mo
376.004 20.3756 li
373.004 17.3756 mo
379.004 17.3756 li
373.882 15.2546 mo
378.125 19.4966 li
373.882 19.4966 mo
378.125 15.2546 li
@
376.301 14.3756 mo
376.301 20.3756 li
373.301 17.3756 mo
379.301 17.3756 li
374.18 15.2546 mo
378.422 19.4966 li
374.18 19.4966 mo
378.422 15.2546 li
@
376.584 14.3756 mo
376.584 20.3756 li
373.584 17.3756 mo
379.584 17.3756 li
374.463 15.2546 mo
378.705 19.4966 li
374.463 19.4966 mo
378.705 15.2546 li
@
376.852 14.3756 mo
376.852 20.3756 li
373.852 17.3756 mo
379.852 17.3756 li
374.731 15.2546 mo
378.973 19.4966 li
374.731 19.4966 mo
378.973 15.2546 li
@
377.107 14.3756 mo
377.107 20.3756 li
374.107 17.3756 mo
380.107 17.3756 li
374.986 15.2546 mo
379.229 19.4966 li
374.986 19.4966 mo
379.229 15.2546 li
@
377.35 14.3756 mo
377.35 20.3756 li
374.35 17.3756 mo
380.35 17.3756 li
375.229 15.2546 mo
379.471 19.4966 li
375.229 19.4966 mo
379.471 15.2546 li
@
377.581 14.3756 mo
377.581 20.3756 li
374.581 17.3756 mo
380.581 17.3756 li
375.46 15.2546 mo
379.702 19.4966 li
375.46 19.4966 mo
379.702 15.2546 li
@
377.804 14.3756 mo
377.804 20.3756 li
374.804 17.3756 mo
380.804 17.3756 li
375.682 15.2546 mo
379.925 19.4966 li
375.682 19.4966 mo
379.925 15.2546 li
@
378.012 14.3756 mo
378.012 20.3756 li
375.012 17.3756 mo
381.012 17.3756 li
375.891 15.2546 mo
380.133 19.4966 li
375.891 19.4966 mo
380.133 15.2546 li
@
378.204 14.3756 mo
378.204 20.3756 li
375.204 17.3756 mo
381.204 17.3756 li
376.082 15.2546 mo
380.325 19.4966 li
376.082 19.4966 mo
380.325 15.2546 li
@
378.392 14.3756 mo
378.392 20.3756 li
375.392 17.3756 mo
381.392 17.3756 li
376.272 15.2546 mo
380.513 19.4966 li
376.272 19.4966 mo
380.513 15.2546 li
@
378.573 14.3756 mo
378.573 20.3756 li
375.573 17.3756 mo
381.573 17.3756 li
376.452 15.2546 mo
380.694 19.4966 li
376.452 19.4966 mo
380.694 15.2546 li
@
378.741 14.3756 mo
378.741 20.3756 li
375.741 17.3756 mo
381.741 17.3756 li
376.62 15.2546 mo
380.862 19.4966 li
376.62 19.4966 mo
380.862 15.2546 li
@
378.9 14.3756 mo
378.9 20.3756 li
375.9 17.3756 mo
381.9 17.3756 li
376.779 15.2546 mo
381.021 19.4966 li
376.779 19.4966 mo
381.021 15.2546 li
@
379.056 14.3756 mo
379.056 20.3756 li
376.056 17.3756 mo
382.056 17.3756 li
376.935 15.2546 mo
381.177 19.4966 li
376.935 19.4966 mo
381.177 15.2546 li
@
379.206 14.3756 mo
379.206 20.3756 li
376.206 17.3756 mo
382.206 17.3756 li
377.085 15.2546 mo
381.327 19.4966 li
377.085 19.4966 mo
381.327 15.2546 li
@
379.35 14.3756 mo
379.35 20.3756 li
376.35 17.3756 mo
382.35 17.3756 li
377.229 15.2546 mo
381.471 19.4966 li
377.229 19.4966 mo
381.471 15.2546 li
@
379.487 14.3756 mo
379.487 20.3756 li
376.487 17.3756 mo
382.487 17.3756 li
377.366 15.2546 mo
381.608 19.4966 li
377.366 19.4966 mo
381.608 15.2546 li
@
379.616 14.3756 mo
379.616 20.3756 li
376.616 17.3756 mo
382.616 17.3756 li
377.496 15.2546 mo
381.738 19.4966 li
377.496 19.4966 mo
381.738 15.2546 li
@
379.738 14.3756 mo
379.738 20.3756 li
376.738 17.3756 mo
382.738 17.3756 li
377.617 15.2546 mo
381.859 19.4966 li
377.617 19.4966 mo
381.859 15.2546 li
@
379.856 14.3756 mo
379.856 20.3756 li
376.856 17.3756 mo
382.856 17.3756 li
377.734 15.2546 mo
381.976 19.4966 li
377.734 19.4966 mo
381.976 15.2546 li
@
379.969 14.3756 mo
379.969 20.3756 li
376.969 17.3756 mo
382.969 17.3756 li
377.848 15.2546 mo
382.09 19.4966 li
377.848 19.4966 mo
382.09 15.2546 li
@
380.077 14.3756 mo
380.077 20.3756 li
377.077 17.3756 mo
383.077 17.3756 li
377.956 15.2546 mo
382.198 19.4966 li
377.956 19.4966 mo
382.198 15.2546 li
@
380.18 14.3756 mo
380.18 20.3756 li
377.18 17.3756 mo
383.18 17.3756 li
378.059 15.2546 mo
382.301 19.4966 li
378.059 19.4966 mo
382.301 15.2546 li
@
380.277 14.3756 mo
380.277 20.3756 li
377.277 17.3756 mo
383.277 17.3756 li
378.156 15.2546 mo
382.398 19.4966 li
378.156 19.4966 mo
382.398 15.2546 li
@
380.37 14.3756 mo
380.37 20.3756 li
377.37 17.3756 mo
383.37 17.3756 li
378.248 15.2546 mo
382.49 19.4966 li
378.248 19.4966 mo
382.49 15.2546 li
@
380.461 14.3756 mo
380.461 20.3756 li
377.461 17.3756 mo
383.461 17.3756 li
378.34 15.2546 mo
382.582 19.4966 li
378.34 19.4966 mo
382.582 15.2546 li
@
380.543 14.3756 mo
380.543 20.3756 li
377.543 17.3756 mo
383.543 17.3756 li
378.422 15.2546 mo
382.664 19.4966 li
378.422 19.4966 mo
382.664 15.2546 li
@
380.62 14.3756 mo
380.62 20.3756 li
377.62 17.3756 mo
383.62 17.3756 li
378.499 15.2546 mo
382.741 19.4966 li
378.499 19.4966 mo
382.741 15.2546 li
@
380.693 14.3756 mo
380.693 20.3756 li
377.693 17.3756 mo
383.693 17.3756 li
378.572 15.2546 mo
382.814 19.4966 li
378.572 19.4966 mo
382.814 15.2546 li
@
380.764 14.3756 mo
380.764 20.3756 li
377.764 17.3756 mo
383.764 17.3756 li
378.643 15.2546 mo
382.885 19.4966 li
378.643 19.4966 mo
382.885 15.2546 li
@
380.832 14.3756 mo
380.832 20.3756 li
377.832 17.3756 mo
383.832 17.3756 li
378.711 15.2546 mo
382.954 19.4966 li
378.711 19.4966 mo
382.954 15.2546 li
@
380.895 14.3756 mo
380.895 20.3756 li
377.895 17.3756 mo
383.895 17.3756 li
378.774 15.2546 mo
383.016 19.4966 li
378.774 19.4966 mo
383.016 15.2546 li
@
380.959 14.3756 mo
380.959 20.3756 li
377.959 17.3756 mo
383.959 17.3756 li
378.838 15.2546 mo
383.08 19.4966 li
378.838 19.4966 mo
383.08 15.2546 li
@
381.016 14.3756 mo
381.016 20.3756 li
378.016 17.3756 mo
384.016 17.3756 li
378.895 15.2546 mo
383.137 19.4966 li
378.895 19.4966 mo
383.137 15.2546 li
@
381.07 14.3756 mo
381.07 20.3756 li
378.07 17.3756 mo
384.07 17.3756 li
378.949 15.2546 mo
383.191 19.4966 li
378.949 19.4966 mo
383.191 15.2546 li
@
381.12 14.3756 mo
381.12 20.3756 li
378.12 17.3756 mo
384.12 17.3756 li
378.999 15.2546 mo
383.241 19.4966 li
378.999 19.4966 mo
383.241 15.2546 li
@
381.169 14.3756 mo
381.169 20.3756 li
378.169 17.3756 mo
384.169 17.3756 li
379.048 15.2546 mo
383.29 19.4966 li
379.048 19.4966 mo
383.29 15.2546 li
@
381.215 14.3756 mo
381.215 20.3756 li
378.215 17.3756 mo
384.215 17.3756 li
379.094 15.2546 mo
383.336 19.4966 li
379.094 19.4966 mo
383.336 15.2546 li
@
381.259 14.3756 mo
381.259 20.3756 li
378.259 17.3756 mo
384.259 17.3756 li
379.138 15.2546 mo
383.381 19.4966 li
379.138 19.4966 mo
383.381 15.2546 li
@
381.3 14.3756 mo
381.3 20.3756 li
378.3 17.3756 mo
384.3 17.3756 li
379.179 15.2546 mo
383.422 19.4966 li
379.179 19.4966 mo
383.422 15.2546 li
@
381.338 14.3756 mo
381.338 20.3756 li
378.338 17.3756 mo
384.338 17.3756 li
379.217 15.2546 mo
383.459 19.4966 li
379.217 19.4966 mo
383.459 15.2546 li
@
381.373 14.3756 mo
381.373 20.3756 li
378.373 17.3756 mo
384.373 17.3756 li
379.252 15.2546 mo
383.494 19.4966 li
379.252 19.4966 mo
383.494 15.2546 li
@
381.407 14.3756 mo
381.407 20.3756 li
378.407 17.3756 mo
384.407 17.3756 li
379.286 15.2546 mo
383.528 19.4966 li
379.286 19.4966 mo
383.528 15.2546 li
@
381.437 14.3756 mo
381.437 20.3756 li
378.437 17.3756 mo
384.437 17.3756 li
379.316 15.2546 mo
383.558 19.4966 li
379.316 19.4966 mo
383.558 15.2546 li
@
381.467 14.3756 mo
381.467 20.3756 li
378.467 17.3756 mo
384.467 17.3756 li
379.346 15.2546 mo
383.588 19.4966 li
379.346 19.4966 mo
383.588 15.2546 li
@
381.493 14.3756 mo
381.493 20.3756 li
378.493 17.3756 mo
384.493 17.3756 li
379.372 15.2546 mo
383.614 19.4966 li
379.372 19.4966 mo
383.614 15.2546 li
@
381.518 14.3756 mo
381.518 20.3756 li
378.518 17.3756 mo
384.518 17.3756 li
379.398 15.2546 mo
383.639 19.4966 li
379.398 19.4966 mo
383.639 15.2546 li
@
381.541 14.3756 mo
381.541 20.3756 li
378.541 17.3756 mo
384.541 17.3756 li
379.42 15.2546 mo
383.662 19.4966 li
379.42 19.4966 mo
383.662 15.2546 li
@
381.56 14.3756 mo
381.56 20.3756 li
378.56 17.3756 mo
384.56 17.3756 li
379.439 15.2546 mo
383.681 19.4966 li
379.439 19.4966 mo
383.681 15.2546 li
@
381.578 14.3756 mo
381.578 20.3756 li
378.578 17.3756 mo
384.578 17.3756 li
379.457 15.2546 mo
383.699 19.4966 li
379.457 19.4966 mo
383.699 15.2546 li
@
381.595 14.3756 mo
381.595 20.3756 li
378.595 17.3756 mo
384.595 17.3756 li
379.474 15.2546 mo
383.716 19.4966 li
379.474 19.4966 mo
383.716 15.2546 li
@
381.611 14.3756 mo
381.611 20.3756 li
378.611 17.3756 mo
384.611 17.3756 li
379.49 15.2546 mo
383.732 19.4966 li
379.49 19.4966 mo
383.732 15.2546 li
@
381.626 14.3756 mo
381.626 20.3756 li
378.626 17.3756 mo
384.626 17.3756 li
379.505 15.2546 mo
383.747 19.4966 li
379.505 19.4966 mo
383.747 15.2546 li
@
381.641 14.3756 mo
381.641 20.3756 li
378.641 17.3756 mo
384.641 17.3756 li
379.52 15.2546 mo
383.762 19.4966 li
379.52 19.4966 mo
383.762 15.2546 li
@
381.653 14.3756 mo
381.653 20.3756 li
378.653 17.3756 mo
384.653 17.3756 li
379.532 15.2546 mo
383.774 19.4966 li
379.532 19.4966 mo
383.774 15.2546 li
@
381.665 14.3756 mo
381.665 20.3756 li
378.665 17.3756 mo
384.665 17.3756 li
379.544 15.2546 mo
383.786 19.4966 li
379.544 19.4966 mo
383.786 15.2546 li
@
381.675 14.3756 mo
381.675 20.3756 li
378.675 17.3756 mo
384.675 17.3756 li
379.554 15.2546 mo
383.796 19.4966 li
379.554 19.4966 mo
383.796 15.2546 li
@
381.684 14.3756 mo
381.684 20.3756 li
378.684 17.3756 mo
384.684 17.3756 li
379.563 15.2546 mo
383.806 19.4966 li
379.563 19.4966 mo
383.806 15.2546 li
@
381.693 14.3756 mo
381.693 20.3756 li
378.693 17.3756 mo
384.693 17.3756 li
379.572 15.2546 mo
383.814 19.4966 li
379.572 19.4966 mo
383.814 15.2546 li
@
381.701 14.3756 mo
381.701 20.3756 li
378.701 17.3756 mo
384.701 17.3756 li
379.581 15.2546 mo
383.822 19.4966 li
379.581 19.4966 mo
383.822 15.2546 li
@
381.709 14.3756 mo
381.709 20.3756 li
378.709 17.3756 mo
384.709 17.3756 li
379.588 15.2546 mo
383.83 19.4966 li
379.588 19.4966 mo
383.83 15.2546 li
@
381.716 14.3756 mo
381.716 20.3756 li
378.716 17.3756 mo
384.716 17.3756 li
379.595 15.2546 mo
383.838 19.4966 li
379.595 19.4966 mo
383.838 15.2546 li
@
381.722 14.3756 mo
381.722 20.3756 li
378.722 17.3756 mo
384.722 17.3756 li
379.601 15.2546 mo
383.843 19.4966 li
379.601 19.4966 mo
383.843 15.2546 li
@
381.729 14.3756 mo
381.729 20.3756 li
378.729 17.3756 mo
384.729 17.3756 li
379.608 15.2546 mo
383.85 19.4966 li
379.608 19.4966 mo
383.85 15.2546 li
@
381.735 14.3756 mo
381.735 20.3756 li
378.735 17.3756 mo
384.735 17.3756 li
379.614 15.2546 mo
383.856 19.4966 li
379.614 19.4966 mo
383.856 15.2546 li
@
381.741 14.3756 mo
381.741 20.3756 li
378.741 17.3756 mo
384.741 17.3756 li
379.62 15.2546 mo
383.861 19.4966 li
379.62 19.4966 mo
383.861 15.2546 li
@
381.746 14.3756 mo
381.746 20.3756 li
378.746 17.3756 mo
384.746 17.3756 li
379.625 15.2546 mo
383.867 19.4966 li
379.625 19.4966 mo
383.867 15.2546 li
@
381.75 14.3756 mo
381.75 20.3756 li
378.75 17.3756 mo
384.75 17.3756 li
379.629 15.2546 mo
383.871 19.4966 li
379.629 19.4966 mo
383.871 15.2546 li
@
381.755 14.3756 mo
381.755 20.3756 li
378.755 17.3756 mo
384.755 17.3756 li
379.634 15.2546 mo
383.876 19.4966 li
379.634 19.4966 mo
383.876 15.2546 li
@
381.759 14.3756 mo
381.759 20.3756 li
378.759 17.3756 mo
384.759 17.3756 li
379.638 15.2546 mo
383.88 19.4966 li
379.638 19.4966 mo
383.88 15.2546 li
@
381.763 14.3756 mo
381.763 20.3756 li
378.763 17.3756 mo
384.763 17.3756 li
379.642 15.2546 mo
383.884 19.4966 li
379.642 19.4966 mo
383.884 15.2546 li
@
381.767 14.3756 mo
381.767 20.3756 li
378.767 17.3756 mo
384.767 17.3756 li
379.646 15.2546 mo
383.888 19.4966 li
379.646 19.4966 mo
383.888 15.2546 li
@
381.771 14.3756 mo
381.771 20.3756 li
378.771 17.3756 mo
384.771 17.3756 li
379.65 15.2546 mo
383.892 19.4966 li
379.65 19.4966 mo
383.892 15.2546 li
@
381.775 14.3756 mo
381.775 20.3756 li
378.775 17.3756 mo
384.775 17.3756 li
379.654 15.2546 mo
383.896 19.4966 li
379.654 19.4966 mo
383.896 15.2546 li
@
381.778 14.3756 mo
381.778 20.3756 li
378.778 17.3756 mo
384.778 17.3756 li
379.657 15.2546 mo
383.899 19.4966 li
379.657 19.4966 mo
383.899 15.2546 li
@
381.782 14.3756 mo
381.782 20.3756 li
378.782 17.3756 mo
384.782 17.3756 li
379.661 15.2546 mo
383.902 19.4966 li
379.661 19.4966 mo
383.902 15.2546 li
@
381.784 14.3756 mo
381.784 20.3756 li
378.784 17.3756 mo
384.784 17.3756 li
379.663 15.2546 mo
383.906 19.4966 li
379.663 19.4966 mo
383.906 15.2546 li
@
381.788 14.3756 mo
381.788 20.3756 li
378.788 17.3756 mo
384.788 17.3756 li
379.667 15.2546 mo
383.909 19.4966 li
379.667 19.4966 mo
383.909 15.2546 li
@
381.79 14.3756 mo
381.79 20.3756 li
378.79 17.3756 mo
384.79 17.3756 li
379.669 15.2546 mo
383.911 19.4966 li
379.669 19.4966 mo
383.911 15.2546 li
@
381.793 14.3756 mo
381.793 20.3756 li
378.793 17.3756 mo
384.793 17.3756 li
379.672 15.2546 mo
383.914 19.4966 li
379.672 19.4966 mo
383.914 15.2546 li
@
381.795 14.3756 mo
381.795 20.3756 li
378.795 17.3756 mo
384.795 17.3756 li
379.674 15.2546 mo
383.916 19.4966 li
379.674 19.4966 mo
383.916 15.2546 li
@
381.797 14.3756 mo
381.797 20.3756 li
378.797 17.3756 mo
384.797 17.3756 li
379.676 15.2546 mo
383.918 19.4966 li
379.676 19.4966 mo
383.918 15.2546 li
@
381.799 14.3756 mo
381.799 20.3756 li
378.799 17.3756 mo
384.799 17.3756 li
379.678 15.2546 mo
383.92 19.4966 li
379.678 19.4966 mo
383.92 15.2546 li
@
381.801 14.3756 mo
381.801 20.3756 li
378.801 17.3756 mo
384.801 17.3756 li
379.68 15.2546 mo
383.922 19.4966 li
379.68 19.4966 mo
383.922 15.2546 li
@
381.802 14.3756 mo
381.802 20.3756 li
378.802 17.3756 mo
384.802 17.3756 li
379.682 15.2546 mo
383.923 19.4966 li
379.682 19.4966 mo
383.923 15.2546 li
@
381.804 14.3756 mo
381.804 20.3756 li
378.804 17.3756 mo
384.804 17.3756 li
379.683 15.2546 mo
383.925 19.4966 li
379.683 19.4966 mo
383.925 15.2546 li
@
381.806 14.3756 mo
381.806 20.3756 li
378.806 17.3756 mo
384.806 17.3756 li
379.685 15.2546 mo
383.927 19.4966 li
379.685 19.4966 mo
383.927 15.2546 li
@
381.807 14.3756 mo
381.807 20.3756 li
378.807 17.3756 mo
384.807 17.3756 li
379.686 15.2546 mo
383.928 19.4966 li
379.686 19.4966 mo
383.928 15.2546 li
@
381.809 14.3756 mo
381.809 20.3756 li
378.809 17.3756 mo
384.809 17.3756 li
379.688 15.2546 mo
383.93 19.4966 li
379.688 19.4966 mo
383.93 15.2546 li
@
381.81 14.3756 mo
381.81 20.3756 li
378.81 17.3756 mo
384.81 17.3756 li
379.689 15.2546 mo
383.931 19.4966 li
379.689 19.4966 mo
383.931 15.2546 li
@
381.811 14.3756 mo
381.811 20.3756 li
378.811 17.3756 mo
384.811 17.3756 li
379.69 15.2546 mo
383.932 19.4966 li
379.69 19.4966 mo
383.932 15.2546 li
@
381.812 14.3756 mo
381.812 20.3756 li
378.812 17.3756 mo
384.812 17.3756 li
379.691 15.2546 mo
383.933 19.4966 li
379.691 19.4966 mo
383.933 15.2546 li
@
381.813 14.3756 mo
381.813 20.3756 li
378.813 17.3756 mo
384.813 17.3756 li
379.691 15.2546 mo
383.934 19.4966 li
379.691 19.4966 mo
383.934 15.2546 li
@
381.813 14.3756 mo
381.813 20.3756 li
378.813 17.3756 mo
384.813 17.3756 li
379.692 15.2546 mo
383.934 19.4966 li
379.692 19.4966 mo
383.934 15.2546 li
@
381.814 14.3756 mo
381.814 20.3756 li
378.814 17.3756 mo
384.814 17.3756 li
379.693 15.2546 mo
383.935 19.4966 li
379.693 19.4966 mo
383.935 15.2546 li
@
381.814 14.3756 mo
381.814 20.3756 li
378.814 17.3756 mo
384.814 17.3756 li
379.693 15.2546 mo
383.935 19.4966 li
379.693 19.4966 mo
383.935 15.2546 li
@
381.815 14.3756 mo
381.815 20.3756 li
378.815 17.3756 mo
384.815 17.3756 li
379.694 15.2546 mo
383.936 19.4966 li
379.694 19.4966 mo
383.936 15.2546 li
@
381.815 14.3756 mo
381.815 20.3756 li
378.815 17.3756 mo
384.815 17.3756 li
379.694 15.2546 mo
383.936 19.4966 li
379.694 19.4966 mo
383.936 15.2546 li
@
381.816 14.3756 mo
381.816 20.3756 li
378.816 17.3756 mo
384.816 17.3756 li
379.695 15.2546 mo
383.937 19.4966 li
379.695 19.4966 mo
383.937 15.2546 li
@
381.816 14.3756 mo
381.816 20.3756 li
378.816 17.3756 mo
384.816 17.3756 li
379.695 15.2546 mo
383.937 19.4966 li
379.695 19.4966 mo
383.937 15.2546 li
@
381.816 14.3756 mo
381.816 20.3756 li
378.816 17.3756 mo
384.816 17.3756 li
379.696 15.2546 mo
383.938 19.4966 li
379.696 19.4966 mo
383.938 15.2546 li
@
381.817 14.3756 mo
381.817 20.3756 li
378.817 17.3756 mo
384.817 17.3756 li
379.696 15.2546 mo
383.938 19.4966 li
379.696 19.4966 mo
383.938 15.2546 li
@
381.817 14.3756 mo
381.817 20.3756 li
378.817 17.3756 mo
384.817 17.3756 li
379.696 15.2546 mo
383.938 19.4966 li
379.696 19.4966 mo
383.938 15.2546 li
@
381.817 14.3756 mo
381.817 20.3756 li
378.817 17.3756 mo
384.817 17.3756 li
379.696 15.2546 mo
383.938 19.4966 li
379.696 19.4966 mo
383.938 15.2546 li
@
381.817 14.3756 mo
381.817 20.3756 li
378.817 17.3756 mo
384.817 17.3756 li
379.697 15.2546 mo
383.938 19.4966 li
379.697 19.4966 mo
383.938 15.2546 li
@
381.817 14.3756 mo
381.817 20.3756 li
378.817 17.3756 mo
384.817 17.3756 li
379.697 15.2546 mo
383.938 19.4966 li
379.697 19.4966 mo
383.938 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
381.818 14.3756 mo
381.818 20.3756 li
378.818 17.3756 mo
384.818 17.3756 li
379.697 15.2546 mo
383.939 19.4966 li
379.697 19.4966 mo
383.939 15.2546 li
@
52.5678 257.376 mo
379.568 257.376 li
379.568 169.626 li
52.5678 169.626 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
XAIQUV+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/N <1C60D8A8C9B6079F1E49523970A7CE614BC1CB2AC135B49A6B33564AFCCA
E69F17C685A8629597666C835EDDD27239AEF884B91696774A2A> |-
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B
61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1
E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36
DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B
7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-
/V <1C60D8A8C9B64EDF88209F74DE48C31924050FF0040AA5A034E0BA481252
B18875F38C0C76ED1A659C37AD61> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
/f <1C60D8A8C9B854D08882A1CDE4CC8CF82C721397EF3C1B7F275F9E0F93B7
3057EE87F13D1A76347F24278F0AAB6C40024DD0CC30E14D035B17B8421125C0
8D6E5ECF0FD989FD11DB950870FC66> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XAIQUV+Helvetica /Encoding get
dup 37 /percent put
dup 55 /seven put
dup 58 /colon put
dup 59 /semicolon put
dup 69 /E put
dup 78 /N put
dup 83 /S put
dup 86 /V put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 102 /f put
pop
%ADOEndSubsetFont
/XAIQUV+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /.notdef /four /.notdef /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 6{/.notdef}rp /N 3{/.notdef}rp /R /S 2{/.notdef}rp 
/V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef 
/c /.notdef /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t /u 
138{/.notdef}rp]
XAIQUV+Helvetica nf
XAIQUV+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
87.8178 187.575 mo
(EfficientNetV2-S [17]; EER: 0.24%)
[11.3393 4.72605 4.72605 3.77405 8.5001 3.77406 9.4521 9.4521 4.72606 12.2741 9.4521 4.72606 
11.3393 9.4521 5.66095 11.3393 4.72604 4.72606 9.4521 9.4521 4.72606 4.72604 4.72604 11.3393 
11.3392 12.2742 4.72604 4.72604 9.45212 4.72604 9.45212 9.45212 0 ]xsh
1 lj
55.5678 181.575 mo
85.5678 181.575 li
.265019 .809232 0 0 cmyk
@
0 lj
68.3178 183.825 mo
72.8178 183.825 li
72.8178 179.325 li
68.3178 179.325 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
XAIQUV+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/K <1C60D8A8C9B64EDF88209F74DE48C33B4B0B93D0D9C0FD0B4C3ED394623E
3A80B45D329FC06BB55248F78872AA55981B9FC8E5ADA631A9747A6CEB10FCCD
65D75EFC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XAIQUV+Helvetica /Encoding get
dup 75 /K put
pop
%ADOEndSubsetFont
/XAIQUV+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /.notdef /four /.notdef /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 3{/.notdef}rp /R 
/S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /.notdef /n /.notdef /p 2{/.notdef}rp /s 
/t /u 138{/.notdef}rp]
XAIQUV+Helvetica nf
XAIQUV+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
87.8178 208.858 mo
(FKNet [8]; EER: 6.00%)
[10.387 11.3393 12.2741 9.45212 4.72604 4.72606 4.72606 9.4521 4.72606 4.72604 4.72604 11.3393 
11.3393 12.2741 4.72607 4.72604 9.4521 4.72606 9.4521 9.45212 0 ]xsh
1 lj
55.5678 202.859 mo
85.5678 202.859 li
@
0 lj
70.5678 199.859 mo
70.5678 205.858 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
XAIQUV+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E2
2FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D216
1CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361
A4431D76AF6F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XAIQUV+Helvetica /Encoding get
dup 79 /O put
dup 114 /r put
pop
%ADOEndSubsetFont
/XAIQUV+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /.notdef /four /.notdef /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N /O 2{/.notdef}rp 
/R /S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 
3{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n /.notdef /p /.notdef 
/r /s /t /u 138{/.notdef}rp]
XAIQUV+Helvetica nf
XAIQUV+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
87.8178 230.143 mo
(Ours; E)sh
145.448 230.143 mo
(ER: 0.16%)
[11.3392 12.2742 4.72604 4.72606 9.4521 4.72606 9.4521 9.45212 0 ]xsh
1 lj
55.5678 224.142 mo
85.5678 224.142 li
0 .990631 1 .000396735 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
XAIQUV+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/C <1C60D8A8C9B6079FE1CE316282F0E84E7EAE56817E527B1A2FBA7D6E6E3E
84761CC128BB54A99A2A93B5D172E1531D29A45A5EC52E28A860DB78AEF5044D
D841ADA187A0971E5C6028FECC99F95A89CDEF60FF9739318C6CDCFD940AFB97
77EC1EB041B6AC82C7B827BCFC6CB4C10A94B6280806B13F83> |-
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/v <1C60D8A8C9B7A73DC54C6E6FD58E3FF02EC0039EA78A08B0B838392D2447
0C9B580A1092E3692A4C20563FB5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XAIQUV+Helvetica /Encoding get
dup 53 /five put
dup 67 /C put
dup 68 /D put
dup 111 /o put
dup 118 /v put
pop
%ADOEndSubsetFont
/XAIQUV+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /.notdef /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/D /E /F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 
/O 2{/.notdef}rp /R /S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e 
/f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /s /t /u /v 137{/.notdef}rp]
XAIQUV+Helvetica nf
XAIQUV+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
87.8178 251.427 mo
(DefConvNet [45]; EER:0.61%)
[12.2741 9.45211 4.72605 12.2741 9.4521 9.45212 8.50009 12.2741 9.45212 4.72604 4.72606 4.72606 
9.4521 9.4521 4.72606 4.72606 4.72604 11.3393 11.3393 12.2741 4.72604 9.45212 4.72604 9.45212 
9.45212 0 ]xsh
55.5678 245.427 mo
85.5678 245.427 li
.895628 .7673 0 0 cmyk
@
0 lj
70.5678 242.427 mo
70.5678 248.427 li
67.5678 245.427 mo
73.5678 245.427 li
68.4467 243.306 mo
72.6889 247.547 li
68.4467 247.547 mo
72.6889 243.306 li
@
52.5678 257.376 mo
379.568 257.376 li
379.568 169.626 li
52.5678 169.626 li
cp
1 /0 /CSD get_res sepcs
.851074 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/XAIQUW+Helvetica-Bold*1 uf
/XAIQUW+Helvetica-Bold uf
/JAAAAA+Helvetica-Bold uf
/XAIQUV+Helvetica*1 uf
/XAIQUV+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
