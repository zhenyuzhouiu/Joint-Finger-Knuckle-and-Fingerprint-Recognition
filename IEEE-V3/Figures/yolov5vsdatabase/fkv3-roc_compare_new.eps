%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fkv3-roc_compare_new.eps-40630.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/16/2022, 11:00:33 AM
%%BoundingBox: -1 0 412 292
%%HiResBoundingBox: 0 0 411.6123 291.7445
%%CropBox: 0 0 411.6123 291.7445
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1020 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-16T10:59:59+08:00"
   xmp:CreateDate="2022-08-16T10:59:59+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.9.0.1467703 \(R2020b\). Operating System: Linux)"
   xmpMM:DocumentID="uuid:03c35feb-1f6b-11ed-0000-8147cf7b883e"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/zhenyuzhou/Desktop/finger-knuckle/deep-learning/codekevin/fknet/test/yolov5vsdatabase/fkv3-roc_compare_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -291.744 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 291.744 li
411.612 291.744 li
411.612 0 li
cp
clp
-9.41113 292.019 mo
440.589 292.019 li
440.589 -1.98129 li
-9.41113 -1.98129 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
-9.41113 292.019 mo
440.589 292.019 li
440.589 -1.98129 li
-9.41113 -1.98129 li
cp
f
49.0889 252.269 mo
397.839 252.269 li
397.839 19.7687 li
49.0889 19.7687 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
49.628 252.269 mo
49.628 19.7687 li
1 /0 /CSD get_res sepcs
.224609 sep
@
53.1233 252.269 mo
53.1233 19.7687 li
@
56.2491 252.269 mo
56.2491 19.7687 li
@
76.8151 252.269 mo
76.8151 19.7687 li
@
88.8448 252.269 mo
88.8448 19.7687 li
@
97.3809 252.269 mo
97.3809 19.7687 li
@
104.001 252.269 mo
104.001 19.7687 li
@
109.411 252.269 mo
109.411 19.7687 li
@
113.984 252.269 mo
113.984 19.7687 li
@
117.946 252.269 mo
117.946 19.7687 li
@
121.441 252.269 mo
121.441 19.7687 li
@
124.567 252.269 mo
124.567 19.7687 li
@
145.132 252.269 mo
145.132 19.7687 li
@
157.163 252.269 mo
157.163 19.7687 li
@
165.698 252.269 mo
165.698 19.7687 li
@
172.319 252.269 mo
172.319 19.7687 li
@
177.729 252.269 mo
177.729 19.7687 li
@
182.303 252.269 mo
182.303 19.7687 li
@
186.264 252.269 mo
186.264 19.7687 li
@
189.759 252.269 mo
189.759 19.7687 li
@
192.885 252.269 mo
192.885 19.7687 li
@
213.451 252.269 mo
213.451 19.7687 li
@
225.481 252.269 mo
225.481 19.7687 li
@
234.016 252.269 mo
234.016 19.7687 li
@
240.637 252.269 mo
240.637 19.7687 li
@
246.046 252.269 mo
246.046 19.7687 li
@
250.621 252.269 mo
250.621 19.7687 li
@
254.582 252.269 mo
254.582 19.7687 li
@
258.077 252.269 mo
258.077 19.7687 li
@
281.769 252.269 mo
281.769 19.7687 li
@
293.799 252.269 mo
293.799 19.7687 li
@
302.335 252.269 mo
302.335 19.7687 li
@
308.955 252.269 mo
308.955 19.7687 li
@
314.365 252.269 mo
314.365 19.7687 li
@
318.938 252.269 mo
318.938 19.7687 li
@
322.9 252.269 mo
322.9 19.7687 li
@
326.395 252.269 mo
326.395 19.7687 li
@
329.521 252.269 mo
329.521 19.7687 li
@
350.087 252.269 mo
350.087 19.7687 li
@
362.117 252.269 mo
362.117 19.7687 li
@
370.652 252.269 mo
370.652 19.7687 li
@
377.273 252.269 mo
377.273 19.7687 li
@
382.683 252.269 mo
382.683 19.7687 li
@
387.257 252.269 mo
387.257 19.7687 li
@
391.218 252.269 mo
391.218 19.7687 li
@
394.713 252.269 mo
394.713 19.7687 li
@
1 lj
[] 0 dsh
124.567 252.269 mo
124.567 19.7687 li
1 /0 /CSD get_res sepcs
.126953 sep
@
261.203 252.269 mo
261.203 19.7687 li
@
397.839 252.269 mo
397.839 19.7687 li
@
397.839 252.269 mo
49.0889 252.269 li
@
397.839 223.206 mo
49.0889 223.206 li
@
397.839 194.144 mo
49.0889 194.144 li
@
397.839 165.081 mo
49.0889 165.081 li
@
397.839 136.019 mo
49.0889 136.019 li
@
397.839 106.956 mo
49.0889 106.956 li
@
397.839 77.8937 mo
49.0889 77.8937 li
@
397.839 48.8307 mo
49.0889 48.8307 li
@
397.839 19.7687 mo
49.0889 19.7687 li
@
2 lc
49.0889 252.269 mo
397.839 252.269 li
1 /0 /CSD get_res sepcs
.851074 sep
@
49.0889 19.7687 mo
397.839 19.7687 li
@
124.567 252.269 mo
124.567 248.781 li
@
261.203 252.269 mo
261.203 248.781 li
@
397.839 252.269 mo
397.839 248.781 li
@
124.567 19.7687 mo
124.567 23.2557 li
@
261.203 19.7687 mo
261.203 23.2557 li
@
397.839 19.7687 mo
397.839 23.2557 li
@
49.628 252.269 mo
49.628 250.525 li
@
53.1233 252.269 mo
53.1233 250.525 li
@
56.2491 252.269 mo
56.2491 250.525 li
@
76.8151 252.269 mo
76.8151 250.525 li
@
88.8448 252.269 mo
88.8448 250.525 li
@
97.3809 252.269 mo
97.3809 250.525 li
@
104.001 252.269 mo
104.001 250.525 li
@
109.411 252.269 mo
109.411 250.525 li
@
113.984 252.269 mo
113.984 250.525 li
@
117.946 252.269 mo
117.946 250.525 li
@
121.441 252.269 mo
121.441 250.525 li
@
124.567 252.269 mo
124.567 250.525 li
@
124.567 252.269 mo
124.567 250.525 li
@
145.132 252.269 mo
145.132 250.525 li
@
157.163 252.269 mo
157.163 250.525 li
@
165.698 252.269 mo
165.698 250.525 li
@
172.319 252.269 mo
172.319 250.525 li
@
177.729 252.269 mo
177.729 250.525 li
@
182.303 252.269 mo
182.303 250.525 li
@
186.264 252.269 mo
186.264 250.525 li
@
189.759 252.269 mo
189.759 250.525 li
@
192.885 252.269 mo
192.885 250.525 li
@
213.451 252.269 mo
213.451 250.525 li
@
225.481 252.269 mo
225.481 250.525 li
@
234.016 252.269 mo
234.016 250.525 li
@
240.637 252.269 mo
240.637 250.525 li
@
246.046 252.269 mo
246.046 250.525 li
@
250.621 252.269 mo
250.621 250.525 li
@
254.582 252.269 mo
254.582 250.525 li
@
258.077 252.269 mo
258.077 250.525 li
@
261.203 252.269 mo
261.203 250.525 li
@
281.769 252.269 mo
281.769 250.525 li
@
293.799 252.269 mo
293.799 250.525 li
@
302.335 252.269 mo
302.335 250.525 li
@
308.955 252.269 mo
308.955 250.525 li
@
314.365 252.269 mo
314.365 250.525 li
@
318.938 252.269 mo
318.938 250.525 li
@
322.9 252.269 mo
322.9 250.525 li
@
326.395 252.269 mo
326.395 250.525 li
@
329.521 252.269 mo
329.521 250.525 li
@
350.087 252.269 mo
350.087 250.525 li
@
362.117 252.269 mo
362.117 250.525 li
@
370.652 252.269 mo
370.652 250.525 li
@
377.273 252.269 mo
377.273 250.525 li
@
382.683 252.269 mo
382.683 250.525 li
@
387.257 252.269 mo
387.257 250.525 li
@
391.218 252.269 mo
391.218 250.525 li
@
394.713 252.269 mo
394.713 250.525 li
@
397.839 252.269 mo
397.839 250.525 li
@
49.628 19.7687 mo
49.628 21.5127 li
@
53.1233 19.7687 mo
53.1233 21.5127 li
@
56.2491 19.7687 mo
56.2491 21.5127 li
@
76.8151 19.7687 mo
76.8151 21.5127 li
@
88.8448 19.7687 mo
88.8448 21.5127 li
@
97.3809 19.7687 mo
97.3809 21.5127 li
@
104.001 19.7687 mo
104.001 21.5127 li
@
109.411 19.7687 mo
109.411 21.5127 li
@
113.984 19.7687 mo
113.984 21.5127 li
@
117.946 19.7687 mo
117.946 21.5127 li
@
121.441 19.7687 mo
121.441 21.5127 li
@
124.567 19.7687 mo
124.567 21.5127 li
@
124.567 19.7687 mo
124.567 21.5127 li
@
145.132 19.7687 mo
145.132 21.5127 li
@
157.163 19.7687 mo
157.163 21.5127 li
@
165.698 19.7687 mo
165.698 21.5127 li
@
172.319 19.7687 mo
172.319 21.5127 li
@
177.729 19.7687 mo
177.729 21.5127 li
@
182.303 19.7687 mo
182.303 21.5127 li
@
186.264 19.7687 mo
186.264 21.5127 li
@
189.759 19.7687 mo
189.759 21.5127 li
@
192.885 19.7687 mo
192.885 21.5127 li
@
213.451 19.7687 mo
213.451 21.5127 li
@
225.481 19.7687 mo
225.481 21.5127 li
@
234.016 19.7687 mo
234.016 21.5127 li
@
240.637 19.7687 mo
240.637 21.5127 li
@
246.046 19.7687 mo
246.046 21.5127 li
@
250.621 19.7687 mo
250.621 21.5127 li
@
254.582 19.7687 mo
254.582 21.5127 li
@
258.077 19.7687 mo
258.077 21.5127 li
@
261.203 19.7687 mo
261.203 21.5127 li
@
281.769 19.7687 mo
281.769 21.5127 li
@
293.799 19.7687 mo
293.799 21.5127 li
@
302.335 19.7687 mo
302.335 21.5127 li
@
308.955 19.7687 mo
308.955 21.5127 li
@
314.365 19.7687 mo
314.365 21.5127 li
@
318.938 19.7687 mo
318.938 21.5127 li
@
322.9 19.7687 mo
322.9 21.5127 li
@
326.395 19.7687 mo
326.395 21.5127 li
@
329.521 19.7687 mo
329.521 21.5127 li
@
350.087 19.7687 mo
350.087 21.5127 li
@
362.117 19.7687 mo
362.117 21.5127 li
@
370.652 19.7687 mo
370.652 21.5127 li
@
377.273 19.7687 mo
377.273 21.5127 li
@
382.683 19.7687 mo
382.683 21.5127 li
@
387.257 19.7687 mo
387.257 21.5127 li
@
391.218 19.7687 mo
391.218 21.5127 li
@
394.713 19.7687 mo
394.713 21.5127 li
@
397.839 19.7687 mo
397.839 21.5127 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ELKGXF+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/ELKGXF+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/.notdef /four 12{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t 139{/.notdef}rp]
ELKGXF+Helvetica nf
ELKGXF+Helvetica*1 [12 0 0 -12 0 0 ]msf
112.089 271.769 mo
(10)
[6.672 0 ]xsh
ELKGXF+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
127.839 265.769 mo
(-4)
[3.19673 0 ]xsh
ELKGXF+Helvetica*1 [12 0 0 -12 0 0 ]msf
248.589 271.769 mo
(10)
[6.672 0 ]xsh
ELKGXF+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
264.339 265.769 mo
(-2)
[3.19672 0 ]xsh
ELKGXF+Helvetica*1 [12 0 0 -12 0 0 ]msf
386.589 271.769 mo
(10)
[6.672 0 ]xsh
ELKGXF+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
402.339 265.769 mo
(0)sh
ELKGXF+Helvetica*1 [13.2 0 0 -13.2 0 0 ]msf
148.089 288.419 mo
(Fal)sh
166.424 288.419 mo
(se Acceptance R)sh
266.202 288.419 mo
(ate)sh
49.0889 252.269 mo
49.0889 19.7687 li
@
397.839 252.269 mo
397.839 19.7687 li
@
49.0889 252.269 mo
52.5764 252.269 li
@
49.0889 223.206 mo
52.5764 223.206 li
@
49.0889 194.144 mo
52.5764 194.144 li
@
49.0889 165.081 mo
52.5764 165.081 li
@
49.0889 136.019 mo
52.5764 136.019 li
@
49.0889 106.956 mo
52.5764 106.956 li
@
49.0889 77.8937 mo
52.5764 77.8937 li
@
49.0889 48.8307 mo
52.5764 48.8307 li
@
49.0889 19.7687 mo
52.5764 19.7687 li
@
397.839 252.269 mo
394.352 252.269 li
@
397.839 223.206 mo
394.352 223.206 li
@
397.839 194.144 mo
394.352 194.144 li
@
397.839 165.081 mo
394.352 165.081 li
@
397.839 136.019 mo
394.352 136.019 li
@
397.839 106.956 mo
394.352 106.956 li
@
397.839 77.8937 mo
394.352 77.8937 li
@
397.839 48.8307 mo
394.352 48.8307 li
@
397.839 19.7687 mo
394.352 19.7687 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
ELKGXF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ELKGXF+Helvetica /Encoding get
dup 46 /period put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/ELKGXF+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /.notdef /four /five /six /seven /eight /nine 
7{/.notdef}rp /A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
ELKGXF+Helvetica nf
ELKGXF+Helvetica*1 [12 0 0 -12 0 0 ]msf
25.1889 256.394 mo
(0.6)sh
17.6889 227.331 mo
(0.65)sh
25.1889 198.269 mo
(0.7)sh
17.6889 169.206 mo
(0.75)sh
25.1889 140.144 mo
(0.8)sh
17.6889 111.081 mo
(0.85)sh
25.1889 82.0187 mo
(0.9)sh
17.6889 52.9562 mo
(0.95)sh
36.4389 23.8937 mo
(1)sh
ELKGXF+Helvetica*1 [0 -13.2 -13.2 0 0 0 ]msf
10.9389 221.894 mo
(Genuine Acceptance Rate)
[-10.2696 -7.3392 -7.3392 -7.33919 -2.9304 -7.3392 -7.33919 -3.6696 -8.8045 -6.59999 -6.59999 -7.3392 
-7.3392 -3.66959 -7.3392 -7.3392 -6.60001 -7.33919 -3.6696 -9.5304 -7.3392 -3.6696 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ELKGXG+Helvetica-Bold /JAAAAA+Helvetica-Bold findfont ct_VMDictPut
/ELKGXG+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
ELKGXG+Helvetica-Bold nf
ELKGXG+Helvetica-Bold*1 [13.2 0 0 -13.2 0 0 ]msf
93.3389 13.5437 mo
(Receiver Operating Characteristics)
[9.5304 7.3392 7.3392 7.3392 3.6696 7.3392 7.33919 5.1349 3.6696 10.2696 8.06511 7.33919 
5.1349 7.3392 4.39549 3.6696 8.06509 8.06509 3.66962 9.5304 8.06509 7.3392 5.13489 7.3392 
7.3392 4.39551 7.33917 5.13492 3.66959 7.3392 4.39551 3.66959 7.3392 0 ]xsh
0 lc
49.0475 230.444 mo
65.6151 229.738 li
65.6151 228.423 li
77.6452 226.669 li
77.6452 226.231 li
77.6452 225.792 li
92.8009 225.792 li
92.8009 223.163 li
92.8009 221.409 li
92.8009 220.97 li
92.8009 219.656 li
98.2109 219.217 li
102.784 217.464 li
102.784 216.587 li
102.784 215.272 li
104.832 213.957 li
108.545 213.957 li
110.241 211.765 li
111.845 211.327 li
111.845 209.135 li
114.814 208.697 li
114.814 208.259 li
117.514 207.382 li
117.514 206.066 li
119.988 206.066 li
122.272 205.629 li
124.391 204.751 li
126.371 203.875 li
126.371 202.998 li
126.371 202.121 li
126.371 201.684 li
126.371 200.807 li
126.371 199.93 li
126.371 199.491 li
126.371 199.053 li
128.225 198.177 li
128.225 197.3 li
128.225 195.985 li
128.225 195.546 li
128.225 195.108 li
129.971 195.108 li
132.411 193.793 li
132.411 193.355 li
133.933 191.601 li
135.38 191.601 li
137.428 191.164 li
137.428 190.725 li
138.718 189.41 li
139.955 188.533 li
141.141 187.218 li
143.381 186.342 li
144.441 185.903 li
145.465 185.026 li
147.411 185.026 li
149.237 184.149 li
149.237 182.396 li
150.11 181.958 li
151.782 181.081 li
153.364 181.081 li
154.868 180.642 li
156.298 179.328 li
156.298 178.89 li
156.988 178.013 li
157.662 176.698 li
157.994 176.698 li
158.645 175.821 li
159.598 175.821 li
160.216 175.383 li
160.821 175.383 li
160.821 174.506 li
160.821 173.191 li
160.821 172.314 li
161.119 172.314 li
161.707 170.999 li
161.707 170.122 li
162.284 169.684 li
162.567 168.808 li
163.676 167.931 li
164.216 167.931 li
164.482 167.054 li
165.266 166.616 li
166.281 164.862 li
167.977 164.424 li
167.977 163.109 li
170.023 162.232 li
171.523 161.794 li
171.523 161.355 li
173.15 161.355 li
174.691 161.355 li
175.433 160.041 li
175.978 159.602 li
176.688 159.164 li
177.21 157.41 li
178.06 156.534 li
179.05 154.78 li
179.849 153.903 li
180.474 153.027 li
181.387 152.589 li
181.685 152.15 li
181.833 151.273 li
181.981 149.521 li
182.562 149.082 li
183.414 148.644 li
183.414 146.89 li
184.513 146.014 li
184.781 146.014 li
185.18 146.014 li
186.847 146.014 li
187.095 145.137 li
188.068 143.821 li
188.543 142.945 li
189.125 141.63 li
190.147 140.753 li
191.134 139.876 li
191.562 139.876 li
191.562 137.685 li
192.298 136.37 li
192.914 135.931 li
193.418 135.493 li
193.517 135.493 li
195.351 135.055 li
195.63 132.424 li
196.453 131.548 li
197.078 131.11 li
197.776 130.671 li
198.119 130.233 li
199.043 129.795 li
199.696 128.479 li
201.04 128.041 li
201.803 126.726 li
201.878 125.849 li
202.693 125.411 li
203.698 124.534 li
204.808 123.658 li
206.139 123.658 li
206.462 122.343 li
207.412 121.027 li
208.151 121.027 li
208.694 120.589 li
209.343 120.151 li
209.459 119.274 li
210.376 118.836 li
211.155 117.521 li
211.646 117.521 li
212.075 115.767 li
213.019 114.891 li
213.632 114.014 li
214.674 114.014 li
215.492 113.137 li
216.289 112.26 li
217.422 112.26 li
217.995 112.26 li
218.6 111.384 li
219.234 111.384 li
219.937 110.946 li
220.504 110.507 li
221.021 110.069 li
221.989 110.069 li
222.518 109.192 li
223.259 109.192 li
224.264 108.753 li
224.825 108.753 li
225.373 107.439 li
226.08 106.562 li
226.899 104.808 li
227.475 104.808 li
227.885 104.808 li
228.869 104.808 li
229.438 104.371 li
230.141 104.371 li
231.054 103.932 li
231.803 103.932 li
232.427 103.932 li
232.932 103.494 li
233.61 102.617 li
234.248 101.74 li
234.971 101.301 li
235.58 101.301 li
236.153 99.9867 li
236.97 99.9867 li
237.427 99.9867 li
237.921 99.5487 li
238.626 99.1097 li
239.378 99.1097 li
239.925 98.2327 li
240.625 97.7947 li
241.329 97.3557 li
241.861 97.3557 li
242.46 97.3557 li
242.953 97.3557 li
243.494 97.3557 li
244.133 96.4797 li
244.76 96.4797 li
245.338 95.6027 li
246.041 93.8497 li
246.646 93.4117 li
247.271 93.4117 li
248.088 92.9737 li
248.946 92.5347 li
249.479 92.0967 li
250.136 91.6577 li
250.605 91.6577 li
251.124 91.2197 li
252.149 90.7807 li
252.979 89.9047 li
253.656 89.4667 li
254.111 89.0277 li
254.699 88.5897 li
255.177 88.1507 li
255.475 87.7127 li
256.169 85.9597 li
256.707 85.5207 li
257.408 85.5207 li
258.06 85.5207 li
258.453 85.5207 li
259.235 85.0827 li
259.848 84.6447 li
260.553 84.6447 li
261.007 84.2057 li
261.565 83.7677 li
261.914 82.4527 li
262.456 82.4527 li
262.968 82.4527 li
263.706 81.1377 li
264.335 80.6997 li
264.897 80.6997 li
265.555 80.2607 li
266.171 80.2607 li
266.7 80.2607 li
267.228 79.3837 li
267.779 78.9457 li
268.336 78.9457 li
268.844 78.9457 li
269.273 78.5077 li
269.81 78.5077 li
270.428 77.6307 li
271.091 77.1927 li
271.69 76.7537 li
272.164 76.7537 li
272.763 76.3157 li
273.153 76.3157 li
273.725 76.3157 li
274.189 75.4387 li
274.67 75.4387 li
275.125 75.4387 li
275.73 75.0007 li
276.225 74.1237 li
276.711 72.8087 li
277.148 72.8087 li
277.625 72.8087 li
278.147 72.3707 li
278.694 71.9317 li
279.197 71.9317 li
279.741 71.9317 li
280.222 71.4937 li
280.631 70.1787 li
281.238 70.1787 li
281.721 69.7407 li
282.201 69.7407 li
282.698 69.7407 li
283.162 69.3017 li
283.562 68.8637 li
284.042 68.8637 li
284.463 68.4257 li
285.052 68.4257 li
285.512 67.9867 li
286.028 67.5487 li
286.469 67.5487 li
286.969 67.1097 li
287.481 67.1097 li
287.955 67.1097 li
288.434 67.1097 li
288.797 67.1097 li
289.232 67.1097 li
289.648 67.1097 li
290.047 65.7957 li
290.52 65.7957 li
290.941 65.7957 li
291.408 65.7957 li
291.831 65.3567 li
292.324 65.3567 li
292.748 64.4797 li
293.201 63.6027 li
293.725 61.8507 li
294.155 61.4117 li
294.623 60.0967 li
295.058 60.0967 li
295.475 59.6577 li
295.929 59.6577 li
296.327 58.7817 li
296.707 58.3437 li
297.171 57.9047 li
297.583 57.9047 li
298.028 57.9047 li
298.41 57.4667 li
298.744 57.0277 li
299.262 57.0277 li
299.669 56.5897 li
300.11 56.1517 li
300.516 56.1517 li
300.959 55.2757 li
301.369 55.2757 li
301.812 55.2757 li
302.198 53.9597 li
302.535 53.9597 li
302.924 53.9597 li
303.301 53.9597 li
303.665 53.5217 li
304.071 53.5217 li
304.464 53.5217 li
304.859 53.0827 li
305.294 53.0827 li
305.697 53.0827 li
306.168 52.6447 li
306.569 52.2057 li
306.966 52.2057 li
307.397 52.2057 li
307.753 51.7687 li
308.162 51.7687 li
308.595 51.3297 li
308.951 51.3297 li
309.325 51.3297 li
309.71 51.3297 li
310.144 51.3297 li
310.532 50.8917 li
310.875 50.4537 li
311.23 50.0147 li
311.57 50.0147 li
311.918 50.0147 li
312.312 49.1377 li
312.683 48.6997 li
313.104 47.8237 li
313.506 47.8237 li
313.871 47.8237 li
314.193 46.9467 li
314.594 46.9467 li
314.952 46.9467 li
315.355 46.9467 li
315.726 46.9467 li
316.109 46.9467 li
316.487 46.5077 li
316.896 46.0697 li
317.287 46.0697 li
317.622 45.6307 li
317.96 45.6307 li
318.337 45.6307 li
318.671 44.7547 li
318.985 43.8777 li
319.37 43.4397 li
319.744 43.4397 li
320.106 43.0017 li
320.42 43.0017 li
320.702 43.0017 li
321.038 43.0017 li
321.4 43.0017 li
321.785 42.5627 li
322.137 42.5627 li
322.559 42.1247 li
322.92 42.1247 li
323.284 41.6857 li
323.621 41.6857 li
323.959 41.2477 li
324.306 41.2477 li
324.646 40.8097 li
324.95 40.8097 li
325.284 40.8097 li
325.618 40.8097 li
325.954 40.8097 li
326.263 40.8097 li
326.596 40.3707 li
326.921 40.3707 li
327.222 40.3707 li
327.545 39.9327 li
327.868 38.6177 li
328.167 38.1797 li
328.478 37.7407 li
328.807 37.7407 li
329.124 37.7407 li
329.465 37.7407 li
329.784 37.7407 li
330.094 36.8637 li
330.43 36.4257 li
330.764 36.4257 li
331.016 36.4257 li
331.352 36.4257 li
331.677 36.4257 li
331.987 35.9877 li
332.323 35.5497 li
332.603 35.5497 li
332.952 35.5497 li
333.262 35.5497 li
333.566 35.5497 li
333.862 35.5497 li
334.184 35.1107 li
334.514 35.1107 li
334.825 35.1107 li
335.148 35.1107 li
335.465 35.1107 li
335.751 35.1107 li
336.067 35.1107 li
336.355 35.1107 li
336.664 35.1107 li
336.956 35.1107 li
337.219 35.1107 li
337.502 35.1107 li
337.787 35.1107 li
338.124 35.1107 li
338.444 35.1107 li
338.737 35.1107 li
339.009 35.1107 li
339.313 34.6727 li
339.554 34.2337 li
339.82 33.7957 li
340.107 33.7957 li
340.395 33.7957 li
340.665 33.7957 li
340.977 33.3577 li
341.259 33.3577 li
341.542 33.3577 li
341.819 33.3577 li
342.093 32.4807 li
342.389 32.4807 li
342.65 32.4807 li
342.928 32.0427 li
343.205 31.6047 li
343.505 31.6047 li
343.777 31.6047 li
344.044 31.6047 li
344.327 31.6047 li
344.562 30.7277 li
344.843 30.7277 li
345.11 30.7277 li
345.371 30.7277 li
345.635 30.7277 li
345.91 30.7277 li
346.175 30.7277 li
346.426 30.7277 li
346.684 30.7277 li
346.93 30.2887 li
347.186 30.2887 li
347.455 29.8507 li
347.718 29.8507 li
347.956 29.8507 li
348.218 29.8507 li
348.476 29.4117 li
348.717 29.4117 li
348.97 29.4117 li
349.218 29.4117 li
349.458 29.4117 li
349.7 29.4117 li
349.953 29.4117 li
350.18 28.9737 li
350.427 28.9737 li
350.663 28.0977 li
350.925 28.0977 li
351.182 27.6587 li
351.427 27.6587 li
351.653 27.6587 li
351.913 27.2207 li
352.133 27.2207 li
352.4 27.2207 li
352.63 27.2207 li
352.893 27.2207 li
353.137 27.2207 li
353.369 27.2207 li
353.59 26.7817 li
353.821 26.7817 li
354.06 26.7817 li
354.275 26.7817 li
354.518 26.7817 li
354.778 26.7817 li
355.036 26.7817 li
355.268 26.7817 li
355.487 26.7817 li
355.706 26.3437 li
355.927 26.3437 li
356.16 26.3437 li
356.383 26.3437 li
356.589 25.9057 li
356.806 25.0297 li
357.022 25.0297 li
357.249 25.0297 li
357.475 25.0297 li
357.683 25.0297 li
357.893 25.0297 li
358.102 25.0297 li
358.31 25.0297 li
358.513 25.0297 li
358.728 25.0297 li
358.93 25.0297 li
359.142 25.0297 li
359.349 25.0297 li
359.557 25.0297 li
359.762 25.0297 li
359.969 25.0297 li
360.16 25.0297 li
360.354 25.0297 li
360.55 25.0297 li
360.767 25.0297 li
360.989 25.0297 li
361.192 25.0297 li
361.39 25.0297 li
361.581 25.0297 li
361.788 25.0297 li
361.99 25.0297 li
362.194 25.0297 li
362.387 25.0297 li
362.591 25.0297 li
362.806 24.5907 li
363.007 24.5907 li
363.191 24.5907 li
363.39 24.5907 li
363.59 24.5907 li
363.787 24.5907 li
363.979 24.5907 li
364.166 24.5907 li
364.356 24.5907 li
364.552 24.5907 li
364.757 24.1527 li
364.939 24.1527 li
365.135 24.1527 li
365.331 24.1527 li
365.502 24.1527 li
365.684 23.7137 li
365.872 23.7137 li
366.072 23.7137 li
366.26 23.7137 li
366.435 23.7137 li
366.625 23.7137 li
366.815 23.2757 li
367.014 23.2757 li
367.198 23.2757 li
367.383 23.2757 li
367.559 23.2757 li
367.719 23.2757 li
367.896 23.2757 li
368.087 23.2757 li
368.266 23.2757 li
368.435 23.2757 li
368.613 23.2757 li
368.777 23.2757 li
368.944 23.2757 li
369.11 23.2757 li
369.28 23.2757 li
369.449 23.2757 li
369.608 23.2757 li
369.787 23.2757 li
369.94 23.2757 li
370.1 23.2757 li
370.265 23.2757 li
370.421 23.2757 li
370.58 23.2757 li
370.752 22.8367 li
370.917 22.8367 li
371.08 22.8367 li
371.241 22.8367 li
371.394 22.8367 li
371.548 22.8367 li
371.71 22.3987 li
371.878 22.3987 li
372.047 22.3987 li
372.199 22.3987 li
372.353 22.3987 li
372.514 22.3987 li
372.647 22.3987 li
372.802 22.3987 li
372.946 22.3987 li
373.091 22.3987 li
373.244 22.3987 li
373.394 22.3987 li
373.54 22.3987 li
373.688 22.3987 li
373.846 22.3987 li
373.988 22.3987 li
374.129 22.3987 li
374.275 22.3987 li
374.419 22.3987 li
374.568 22.3987 li
374.716 21.9597 li
374.858 21.9597 li
374.991 21.9597 li
375.139 21.9597 li
375.277 21.9597 li
375.419 21.9597 li
375.56 21.9597 li
375.7 21.9597 li
375.839 21.9597 li
375.98 21.9597 li
376.119 21.9597 li
376.251 21.9597 li
376.382 21.9597 li
376.519 21.9597 li
376.657 21.9597 li
376.798 21.5227 li
376.935 21.5227 li
377.068 21.5227 li
377.199 21.5227 li
377.335 21.5227 li
377.468 21.5227 li
377.588 21.5227 li
377.725 21.5227 li
377.857 21.5227 li
377.984 21.5227 li
378.107 21.5227 li
378.241 21.5227 li
378.371 21.5227 li
378.502 21.5227 li
378.628 21.5227 li
378.755 21.5227 li
378.882 21.5227 li
379.009 21.5227 li
379.132 21.5227 li
379.253 21.5227 li
379.386 21.0837 li
379.513 21.0837 li
379.625 21.0837 li
379.748 21.0837 li
379.869 21.0837 li
379.992 21.0837 li
380.108 21.0837 li
380.229 21.0837 li
380.351 21.0837 li
380.46 21.0837 li
380.579 21.0837 li
380.695 21.0837 li
380.809 21.0837 li
380.914 21.0837 li
381.025 21.0837 li
381.139 21.0837 li
381.253 21.0837 li
381.353 21.0837 li
381.466 21.0837 li
381.578 21.0837 li
381.688 21.0837 li
381.795 21.0837 li
381.914 21.0837 li
382.016 21.0837 li
382.122 21.0837 li
382.222 21.0837 li
382.325 21.0837 li
382.434 21.0837 li
382.536 21.0837 li
382.638 21.0837 li
382.741 21.0837 li
382.839 21.0837 li
382.939 21.0837 li
383.031 21.0837 li
383.138 21.0837 li
383.244 21.0837 li
383.344 21.0837 li
383.439 21.0837 li
383.541 21.0837 li
383.638 21.0837 li
383.731 21.0837 li
383.827 21.0837 li
383.923 21.0837 li
384.02 21.0837 li
384.117 21.0837 li
384.209 21.0837 li
384.307 21.0837 li
384.398 21.0837 li
384.489 21.0837 li
384.578 21.0837 li
384.667 21.0837 li
384.766 21.0837 li
384.866 21.0837 li
384.953 21.0837 li
385.037 21.0837 li
385.13 21.0837 li
385.223 21.0837 li
385.308 21.0837 li
385.391 21.0837 li
385.475 21.0837 li
385.563 21.0837 li
385.654 21.0837 li
385.74 21.0837 li
385.823 21.0837 li
385.91 21.0837 li
385.987 21.0837 li
386.071 21.0837 li
386.156 21.0837 li
386.239 21.0837 li
386.318 21.0837 li
386.404 21.0837 li
386.488 21.0837 li
386.571 21.0837 li
386.654 21.0837 li
386.737 21.0837 li
386.813 21.0837 li
386.896 21.0837 li
386.976 21.0837 li
387.051 21.0837 li
387.136 21.0837 li
387.223 21.0837 li
387.299 21.0837 li
387.374 20.6457 li
387.452 20.6457 li
387.525 20.6457 li
387.596 20.6457 li
387.673 20.6457 li
387.743 20.6457 li
387.815 20.6457 li
387.893 20.6457 li
387.965 20.6457 li
388.039 20.2067 li
388.114 20.2067 li
388.182 20.2067 li
388.251 20.2067 li
388.326 20.2067 li
388.4 20.2067 li
388.47 20.2067 li
388.539 20.2067 li
388.607 20.2067 li
388.677 20.2067 li
388.744 20.2067 li
388.809 20.2067 li
388.88 20.2067 li
388.943 20.2067 li
389.003 20.2067 li
389.064 20.2067 li
389.126 20.2067 li
389.194 20.2067 li
389.258 20.2067 li
389.321 20.2067 li
389.381 20.2067 li
389.441 20.2067 li
389.507 20.2067 li
389.573 20.2067 li
389.635 20.2067 li
389.693 20.2067 li
389.756 20.2067 li
389.816 20.2067 li
389.879 20.2067 li
389.943 20.2067 li
390 19.7687 li
390.062 19.7687 li
390.116 19.7687 li
390.179 19.7687 li
390.236 19.7687 li
390.297 19.7687 li
390.359 19.7687 li
390.419 19.7687 li
390.473 19.7687 li
390.532 19.7687 li
390.587 19.7687 li
390.642 19.7687 li
390.701 19.7687 li
390.755 19.7687 li
390.814 19.7687 li
390.871 19.7687 li
390.924 19.7687 li
390.983 19.7687 li
391.03 19.7687 li
391.088 19.7687 li
391.139 19.7687 li
391.193 19.7687 li
391.246 19.7687 li
391.3 19.7687 li
391.35 19.7687 li
391.4 19.7687 li
391.448 19.7687 li
391.496 19.7687 li
391.549 19.7687 li
391.6 19.7687 li
391.65 19.7687 li
391.695 19.7687 li
391.742 19.7687 li
391.793 19.7687 li
391.846 19.7687 li
391.895 19.7687 li
391.945 19.7687 li
391.987 19.7687 li
392.032 19.7687 li
392.072 19.7687 li
392.118 19.7687 li
392.164 19.7687 li
392.21 19.7687 li
392.257 19.7687 li
392.303 19.7687 li
392.347 19.7687 li
392.388 19.7687 li
392.428 19.7687 li
392.475 19.7687 li
392.524 19.7687 li
392.569 19.7687 li
392.605 19.7687 li
392.652 19.7687 li
392.695 19.7687 li
392.737 19.7687 li
392.784 19.7687 li
392.827 19.7687 li
392.87 19.7687 li
392.915 19.7687 li
392.958 19.7687 li
393 19.7687 li
393.042 19.7687 li
393.078 19.7687 li
393.119 19.7687 li
393.159 19.7687 li
393.198 19.7687 li
393.237 19.7687 li
393.275 19.7687 li
393.312 19.7687 li
393.353 19.7687 li
393.391 19.7687 li
393.428 19.7687 li
393.464 19.7687 li
393.493 19.7687 li
393.528 19.7687 li
393.562 19.7687 li
393.598 19.7687 li
393.634 19.7687 li
393.671 19.7687 li
393.705 19.7687 li
393.738 19.7687 li
393.773 19.7687 li
393.808 19.7687 li
393.84 19.7687 li
393.874 19.7687 li
393.905 19.7687 li
393.934 19.7687 li
393.964 19.7687 li
393.996 19.7687 li
394.028 19.7687 li
394.058 19.7687 li
394.091 19.7687 li
394.123 19.7687 li
394.156 19.7687 li
394.185 19.7687 li
394.218 19.7687 li
394.248 19.7687 li
394.279 19.7687 li
394.31 19.7687 li
394.343 19.7687 li
394.373 19.7687 li
394.403 19.7687 li
394.432 19.7687 li
394.462 19.7687 li
394.493 19.7687 li
394.522 19.7687 li
394.546 19.7687 li
394.572 19.7687 li
394.599 19.7687 li
394.624 19.7687 li
394.653 19.7687 li
394.684 19.7687 li
394.714 19.7687 li
394.741 19.7687 li
394.77 19.7687 li
394.798 19.7687 li
394.827 19.7687 li
394.85 19.7687 li
394.876 19.7687 li
394.905 19.7687 li
394.929 19.7687 li
394.953 19.7687 li
394.981 19.7687 li
395.005 19.7687 li
395.03 19.7687 li
395.055 19.7687 li
395.08 19.7687 li
395.104 19.7687 li
395.13 19.7687 li
395.154 19.7687 li
395.178 19.7687 li
395.203 19.7687 li
395.227 19.7687 li
395.25 19.7687 li
395.272 19.7687 li
395.293 19.7687 li
395.314 19.7687 li
395.335 19.7687 li
395.357 19.7687 li
395.378 19.7687 li
395.403 19.7687 li
395.424 19.7687 li
395.445 19.7687 li
395.466 19.7687 li
395.489 19.7687 li
395.512 19.7687 li
395.534 19.7687 li
395.554 19.7687 li
395.574 19.7687 li
395.598 19.7687 li
395.621 19.7687 li
395.64 19.7687 li
395.66 19.7687 li
395.681 19.7687 li
395.701 19.7687 li
395.72 19.7687 li
395.739 19.7687 li
395.757 19.7687 li
395.774 19.7687 li
395.796 19.7687 li
395.816 19.7687 li
395.836 19.7687 li
395.854 19.7687 li
395.873 19.7687 li
395.893 19.7687 li
395.91 19.7687 li
395.927 19.7687 li
395.944 19.7687 li
395.96 19.7687 li
395.975 19.7687 li
395.991 19.7687 li
396.007 19.7687 li
396.023 19.7687 li
396.04 19.7687 li
396.059 19.7687 li
396.074 19.7687 li
396.094 19.7687 li
396.11 19.7687 li
396.126 19.7687 li
396.142 19.7687 li
396.157 19.7687 li
396.173 19.7687 li
396.188 19.7687 li
396.202 19.7687 li
396.217 19.7687 li
396.232 19.7687 li
396.247 19.7687 li
396.262 19.7687 li
396.277 19.7687 li
396.291 19.7687 li
396.307 19.7687 li
396.321 19.7687 li
396.333 19.7687 li
396.347 19.7687 li
396.362 19.7687 li
396.376 19.7687 li
396.39 19.7687 li
396.404 19.7687 li
396.417 19.7687 li
396.43 19.7687 li
396.445 19.7687 li
396.458 19.7687 li
396.473 19.7687 li
396.486 19.7687 li
396.5 19.7687 li
396.512 19.7687 li
396.524 19.7687 li
396.537 19.7687 li
396.551 19.7687 li
396.563 19.7687 li
396.577 19.7687 li
396.59 19.7687 li
396.602 19.7687 li
396.612 19.7687 li
396.624 19.7687 li
396.637 19.7687 li
396.648 19.7687 li
396.66 19.7687 li
396.671 19.7687 li
396.682 19.7687 li
396.691 19.7687 li
396.704 19.7687 li
396.717 19.7687 li
396.729 19.7687 li
396.741 19.7687 li
396.753 19.7687 li
396.765 19.7687 li
396.776 19.7687 li
396.787 19.7687 li
396.798 19.7687 li
396.809 19.7687 li
396.819 19.7687 li
396.83 19.7687 li
396.841 19.7687 li
396.85 19.7687 li
396.859 19.7687 li
396.868 19.7687 li
396.878 19.7687 li
396.889 19.7687 li
396.898 19.7687 li
396.908 19.7687 li
396.916 19.7687 li
396.926 19.7687 li
396.934 19.7687 li
396.944 19.7687 li
396.951 19.7687 li
396.962 19.7687 li
396.97 19.7687 li
396.98 19.7687 li
396.989 19.7687 li
396.998 19.7687 li
397.006 19.7687 li
397.015 19.7687 li
397.025 19.7687 li
397.032 19.7687 li
397.04 19.7687 li
397.048 19.7687 li
397.057 19.7687 li
397.064 19.7687 li
397.074 19.7687 li
397.083 19.7687 li
397.09 19.7687 li
397.097 19.7687 li
397.104 19.7687 li
397.112 19.7687 li
397.118 19.7687 li
397.126 19.7687 li
397.133 19.7687 li
397.14 19.7687 li
397.148 19.7687 li
397.154 19.7687 li
397.16 19.7687 li
397.166 19.7687 li
397.173 19.7687 li
397.178 19.7687 li
397.185 19.7687 li
397.191 19.7687 li
397.197 19.7687 li
397.204 19.7687 li
397.209 19.7687 li
397.215 19.7687 li
397.22 19.7687 li
397.226 19.7687 li
397.232 19.7687 li
397.237 19.7687 li
397.244 19.7687 li
397.252 19.7687 li
397.257 19.7687 li
397.264 19.7687 li
397.27 19.7687 li
397.277 19.7687 li
397.283 19.7687 li
397.289 19.7687 li
397.293 19.7687 li
397.3 19.7687 li
397.307 19.7687 li
397.312 19.7687 li
397.318 19.7687 li
397.322 19.7687 li
397.328 19.7687 li
397.334 19.7687 li
397.337 19.7687 li
397.343 19.7687 li
397.349 19.7687 li
397.355 19.7687 li
397.36 19.7687 li
397.364 19.7687 li
397.37 19.7687 li
397.375 19.7687 li
397.382 19.7687 li
397.386 19.7687 li
397.391 19.7687 li
397.394 19.7687 li
397.398 19.7687 li
397.402 19.7687 li
397.406 19.7687 li
397.409 19.7687 li
397.412 19.7687 li
397.417 19.7687 li
397.421 19.7687 li
397.426 19.7687 li
397.43 19.7687 li
397.434 19.7687 li
397.439 19.7687 li
397.442 19.7687 li
397.447 19.7687 li
397.452 19.7687 li
397.457 19.7687 li
397.46 19.7687 li
397.464 19.7687 li
397.469 19.7687 li
397.473 19.7687 li
397.476 19.7687 li
397.479 19.7687 li
397.482 19.7687 li
397.487 19.7687 li
397.49 19.7687 li
397.493 19.7687 li
397.496 19.7687 li
397.5 19.7687 li
397.504 19.7687 li
397.507 19.7687 li
397.51 19.7687 li
397.514 19.7687 li
397.516 19.7687 li
397.519 19.7687 li
397.523 19.7687 li
397.527 19.7687 li
397.529 19.7687 li
397.532 19.7687 li
397.535 19.7687 li
397.54 19.7687 li
397.543 19.7687 li
397.546 19.7687 li
397.549 19.7687 li
397.552 19.7687 li
397.555 19.7687 li
397.56 19.7687 li
397.563 19.7687 li
397.566 19.7687 li
397.568 19.7687 li
397.571 19.7687 li
397.573 19.7687 li
397.577 19.7687 li
397.58 19.7687 li
397.582 19.7687 li
397.585 19.7687 li
397.588 19.7687 li
397.591 19.7687 li
397.595 19.7687 li
397.598 19.7687 li
397.6 19.7687 li
397.602 19.7687 li
397.605 19.7687 li
397.607 19.7687 li
397.61 19.7687 li
397.613 19.7687 li
397.617 19.7687 li
397.62 19.7687 li
397.621 19.7687 li
397.624 19.7687 li
397.626 19.7687 li
397.629 19.7687 li
397.63 19.7687 li
397.633 19.7687 li
397.637 19.7687 li
397.639 19.7687 li
397.64 19.7687 li
397.643 19.7687 li
397.644 19.7687 li
397.647 19.7687 li
397.648 19.7687 li
397.651 19.7687 li
397.652 19.7687 li
397.655 19.7687 li
397.657 19.7687 li
397.659 19.7687 li
397.661 19.7687 li
397.664 19.7687 li
397.666 19.7687 li
397.668 19.7687 li
397.669 19.7687 li
397.672 19.7687 li
397.674 19.7687 li
397.676 19.7687 li
397.678 19.7687 li
397.68 19.7687 li
397.682 19.7687 li
397.684 19.7687 li
397.685 19.7687 li
397.687 19.7687 li
397.688 19.7687 li
397.69 19.7687 li
397.692 19.7687 li
397.694 19.7687 li
397.695 19.7687 li
397.696 19.7687 li
397.698 19.7687 li
397.7 19.7687 li
397.702 19.7687 li
397.703 19.7687 li
397.705 19.7687 li
397.707 19.7687 li
397.709 19.7687 li
397.711 19.7687 li
397.712 19.7687 li
397.713 19.7687 li
397.714 19.7687 li
397.716 19.7687 li
397.717 19.7687 li
397.718 19.7687 li
397.72 19.7687 li
397.721 19.7687 li
397.723 19.7687 li
397.724 19.7687 li
397.726 19.7687 li
397.727 19.7687 li
397.728 19.7687 li
397.73 19.7687 li
397.732 19.7687 li
397.735 19.7687 li
397.737 19.7687 li
397.739 19.7687 li
397.74 19.7687 li
397.741 19.7687 li
397.742 19.7687 li
397.744 19.7687 li
397.745 19.7687 li
397.747 19.7687 li
397.748 19.7687 li
397.75 19.7687 li
397.751 19.7687 li
397.752 19.7687 li
397.753 19.7687 li
397.754 19.7687 li
397.755 19.7687 li
397.756 19.7687 li
397.757 19.7687 li
397.758 19.7687 li
397.759 19.7687 li
397.76 19.7687 li
397.761 19.7687 li
397.762 19.7687 li
397.763 19.7687 li
397.764 19.7687 li
397.765 19.7687 li
397.766 19.7687 li
397.768 19.7687 li
397.769 19.7687 li
397.771 19.7687 li
397.774 19.7687 li
397.775 19.7687 li
397.776 19.7687 li
397.777 19.7687 li
397.778 19.7687 li
397.779 19.7687 li
397.78 19.7687 li
397.781 19.7687 li
397.782 19.7687 li
397.783 19.7687 li
397.784 19.7687 li
397.785 19.7687 li
397.786 19.7687 li
397.787 19.7687 li
397.788 19.7687 li
397.789 19.7687 li
397.79 19.7687 li
397.791 19.7687 li
397.792 19.7687 li
397.793 19.7687 li
397.794 19.7687 li
397.795 19.7687 li
397.796 19.7687 li
397.797 19.7687 li
397.798 19.7687 li
397.799 19.7687 li
397.8 19.7687 li
397.801 19.7687 li
397.802 19.7687 li
397.803 19.7687 li
397.804 19.7687 li
397.805 19.7687 li
397.806 19.7687 li
397.807 19.7687 li
397.808 19.7687 li
397.809 19.7687 li
397.81 19.7687 li
397.811 19.7687 li
397.812 19.7687 li
397.813 19.7687 li
397.814 19.7687 li
397.815 19.7687 li
397.816 19.7687 li
397.817 19.7687 li
397.818 19.7687 li
397.819 19.7687 li
397.82 19.7687 li
397.821 19.7687 li
397.822 19.7687 li
397.823 19.7687 li
397.824 19.7687 li
397.825 19.7687 li
397.826 19.7687 li
397.827 19.7687 li
397.828 19.7687 li
397.829 19.7687 li
397.83 19.7687 li
397.831 19.7687 li
397.832 19.7687 li
397.833 19.7687 li
397.834 19.7687 li
397.835 19.7687 li
397.836 19.7687 li
397.837 19.7687 li
397.838 19.7687 li
397.839 19.7687 li
/1 
[/DeviceCMYK] /CSA add_res
.895628 .7673 0 0 cmyk
@
65.6151 225.923 mo
66.9955 225.923 68.1147 227.042 68.1147 228.423 cv
68.1147 229.804 66.9955 230.922 65.6151 230.922 cv
64.2342 230.922 63.1151 229.804 63.1151 228.423 cv
63.1151 227.042 64.2342 225.923 65.6151 225.923 cv
cp
65.6151 224.922 mo
63.6823 224.922 62.1147 226.49 62.1147 228.423 cv
62.1147 230.355 63.6823 231.923 65.6151 231.923 cv
67.5475 231.923 69.1151 230.355 69.1151 228.423 cv
69.1151 226.49 67.5475 224.922 65.6151 224.922 cv
f
92.8019 217.156 mo
94.1819 217.156 95.3009 218.275 95.3009 219.655 cv
95.3009 221.036 94.1819 222.155 92.8019 222.155 cv
91.4209 222.155 90.3018 221.036 90.3018 219.655 cv
90.3018 218.275 91.4209 217.156 92.8019 217.156 cv
cp
92.8019 216.155 mo
90.8689 216.155 89.301 217.723 89.301 219.655 cv
89.301 221.588 90.8689 223.156 92.8019 223.156 cv
94.7339 223.156 96.3019 221.588 96.3019 219.655 cv
96.3019 217.723 94.7339 216.155 92.8019 216.155 cv
f
111.845 208.827 mo
113.226 208.827 114.345 209.946 114.345 211.327 cv
114.345 212.708 113.226 213.827 111.845 213.827 cv
110.465 213.827 109.346 212.708 109.346 211.327 cv
109.346 209.946 110.465 208.827 111.845 208.827 cv
cp
111.845 207.827 mo
109.912 207.827 108.345 209.394 108.345 211.327 cv
108.345 213.26 109.912 214.827 111.845 214.827 cv
113.778 214.827 115.346 213.26 115.346 211.327 cv
115.346 209.394 113.778 207.827 111.845 207.827 cv
f
122.271 203.129 mo
123.652 203.129 124.771 204.248 124.771 205.629 cv
124.771 207.009 123.652 208.128 122.271 208.128 cv
120.891 208.128 119.772 207.009 119.772 205.629 cv
119.772 204.248 120.891 203.129 122.271 203.129 cv
cp
122.271 202.128 mo
120.339 202.128 118.771 203.696 118.771 205.629 cv
118.771 207.561 120.339 209.129 122.271 209.129 cv
124.204 209.129 125.772 207.561 125.772 205.629 cv
125.772 203.696 124.204 202.128 122.271 202.128 cv
f
126.37 196.992 mo
127.751 196.992 128.87 198.111 128.87 199.491 cv
128.87 200.872 127.751 201.991 126.37 201.991 cv
124.989 201.991 123.871 200.872 123.871 199.491 cv
123.871 198.111 124.989 196.992 126.37 196.992 cv
cp
126.37 195.991 mo
124.437 195.991 122.87 197.559 122.87 199.491 cv
122.87 201.424 124.437 202.992 126.37 202.992 cv
128.303 202.992 129.871 201.424 129.871 199.491 cv
129.871 197.559 128.303 195.991 126.37 195.991 cv
f
132.411 190.855 mo
133.792 190.855 134.911 191.974 134.911 193.355 cv
134.911 194.736 133.792 195.854 132.411 195.854 cv
131.03 195.854 129.911 194.736 129.911 193.355 cv
129.911 191.974 131.03 190.855 132.411 190.855 cv
cp
132.411 189.855 mo
130.478 189.855 128.911 191.422 128.911 193.355 cv
128.911 195.287 130.478 196.855 132.411 196.855 cv
134.344 196.855 135.911 195.287 135.911 193.355 cv
135.911 191.422 134.344 189.855 132.411 189.855 cv
f
143.382 183.842 mo
144.762 183.842 145.881 184.961 145.881 186.341 cv
145.881 187.722 144.762 188.841 143.382 188.841 cv
142.001 188.841 140.882 187.722 140.882 186.341 cv
140.882 184.961 142.001 183.842 143.382 183.842 cv
cp
143.382 182.841 mo
141.449 182.841 139.881 184.409 139.881 186.341 cv
139.881 188.274 141.449 189.842 143.382 189.842 cv
145.314 189.842 146.882 188.274 146.882 186.341 cv
146.882 184.409 145.314 182.841 143.382 182.841 cv
f
154.868 178.143 mo
156.248 178.143 157.367 179.262 157.367 180.643 cv
157.367 182.024 156.248 183.142 154.868 183.142 cv
153.487 183.142 152.368 182.024 152.368 180.643 cv
152.368 179.262 153.487 178.143 154.868 178.143 cv
cp
154.868 177.142 mo
152.935 177.142 151.367 178.71 151.367 180.643 cv
151.367 182.576 152.935 184.143 154.868 184.143 cv
156.8 184.143 158.368 182.576 158.368 180.643 cv
158.368 178.71 156.8 177.142 154.868 177.142 cv
f
160.821 172.006 mo
162.202 172.006 163.321 173.125 163.321 174.506 cv
163.321 175.887 162.202 177.006 160.821 177.006 cv
159.441 177.006 158.321 175.887 158.321 174.506 cv
158.321 173.125 159.441 172.006 160.821 172.006 cv
cp
160.821 171.006 mo
158.889 171.006 157.321 172.573 157.321 174.506 cv
157.321 176.439 158.889 178.006 160.821 178.006 cv
162.754 178.006 164.321 176.439 164.321 174.506 cv
164.321 172.573 162.754 171.006 160.821 171.006 cv
f
164.482 164.554 mo
165.863 164.554 166.982 165.673 166.982 167.054 cv
166.982 168.435 165.863 169.554 164.482 169.554 cv
163.101 169.554 161.982 168.435 161.982 167.054 cv
161.982 165.673 163.101 164.554 164.482 164.554 cv
cp
164.482 163.554 mo
162.549 163.554 160.982 165.121 160.982 167.054 cv
160.982 168.987 162.549 170.554 164.482 170.554 cv
166.415 170.554 167.982 168.987 167.982 167.054 cv
167.982 165.121 166.415 163.554 164.482 163.554 cv
f
175.433 157.541 mo
176.814 157.541 177.933 158.66 177.933 160.04 cv
177.933 161.421 176.814 162.54 175.433 162.54 cv
174.052 162.54 172.934 161.421 172.934 160.04 cv
172.934 158.66 174.052 157.541 175.433 157.541 cv
cp
175.433 156.54 mo
173.5 156.54 171.933 158.108 171.933 160.04 cv
171.933 161.973 173.5 163.541 175.433 163.541 cv
177.366 163.541 178.934 161.973 178.934 160.04 cv
178.934 158.108 177.366 156.54 175.433 156.54 cv
f
181.685 149.651 mo
183.066 149.651 184.185 150.769 184.185 152.15 cv
184.185 153.531 183.066 154.65 181.685 154.65 cv
180.305 154.65 179.185 153.531 179.185 152.15 cv
179.185 150.769 180.305 149.651 181.685 149.651 cv
cp
181.685 148.65 mo
179.753 148.65 178.185 150.217 178.185 152.15 cv
178.185 154.083 179.753 155.651 181.685 155.651 cv
183.618 155.651 185.185 154.083 185.185 152.15 cv
185.185 150.217 183.618 148.65 181.685 148.65 cv
f
187.095 142.637 mo
188.475 142.637 189.594 143.756 189.594 145.137 cv
189.594 146.517 188.475 147.637 187.095 147.637 cv
185.714 147.637 184.595 146.517 184.595 145.137 cv
184.595 143.756 185.714 142.637 187.095 142.637 cv
cp
187.095 141.637 mo
185.162 141.637 183.594 143.204 183.594 145.137 cv
183.594 147.069 185.162 148.637 187.095 148.637 cv
189.028 148.637 190.595 147.069 190.595 145.137 cv
190.595 143.204 189.028 141.637 187.095 141.637 cv
f
193.417 132.993 mo
194.798 132.993 195.917 134.112 195.917 135.493 cv
195.917 136.874 194.798 137.993 193.417 137.993 cv
192.037 137.993 190.918 136.874 190.918 135.493 cv
190.918 134.112 192.037 132.993 193.417 132.993 cv
cp
193.417 131.993 mo
191.484 131.993 189.917 133.56 189.917 135.493 cv
189.917 137.426 191.484 138.993 193.417 138.993 cv
195.35 138.993 196.918 137.426 196.918 135.493 cv
196.918 133.56 195.35 131.993 193.417 131.993 cv
f
201.04 125.541 mo
202.421 125.541 203.539 126.66 203.539 128.041 cv
203.539 129.422 202.421 130.541 201.04 130.541 cv
199.659 130.541 198.54 129.422 198.54 128.041 cv
198.54 126.66 199.659 125.541 201.04 125.541 cv
cp
201.04 124.541 mo
199.107 124.541 197.539 126.108 197.539 128.041 cv
197.539 129.974 199.107 131.541 201.04 131.541 cv
202.973 131.541 204.54 129.974 204.54 128.041 cv
204.54 126.108 202.973 124.541 201.04 124.541 cv
f
208.693 118.089 mo
210.074 118.089 211.193 119.208 211.193 120.589 cv
211.193 121.97 210.074 123.089 208.693 123.089 cv
207.312 123.089 206.193 121.97 206.193 120.589 cv
206.193 119.208 207.312 118.089 208.693 118.089 cv
cp
208.693 117.089 mo
206.76 117.089 205.193 118.656 205.193 120.589 cv
205.193 122.522 206.76 124.089 208.693 124.089 cv
210.626 124.089 212.193 122.522 212.193 120.589 cv
212.193 118.656 210.626 117.089 208.693 117.089 cv
f
215.493 110.637 mo
216.873 110.637 217.992 111.756 217.992 113.137 cv
217.992 114.518 216.873 115.637 215.493 115.637 cv
214.112 115.637 212.993 114.518 212.993 113.137 cv
212.993 111.756 214.112 110.637 215.493 110.637 cv
cp
215.493 109.637 mo
213.56 109.637 211.992 111.205 211.992 113.137 cv
211.992 115.07 213.56 116.637 215.493 116.637 cv
217.425 116.637 218.993 115.07 218.993 113.137 cv
218.993 111.205 217.425 109.637 215.493 109.637 cv
f
222.519 106.692 mo
223.899 106.692 225.018 107.811 225.018 109.192 cv
225.018 110.573 223.899 111.692 222.519 111.692 cv
221.138 111.692 220.019 110.573 220.019 109.192 cv
220.019 107.811 221.138 106.692 222.519 106.692 cv
cp
222.519 105.692 mo
220.586 105.692 219.018 107.259 219.018 109.192 cv
219.018 111.125 220.586 112.692 222.519 112.692 cv
224.452 112.692 226.019 111.125 226.019 109.192 cv
226.019 107.259 224.452 105.692 222.519 105.692 cv
f
229.437 101.871 mo
230.818 101.871 231.937 102.989 231.937 104.37 cv
231.937 105.751 230.818 106.87 229.437 106.87 cv
228.057 106.87 226.938 105.751 226.938 104.37 cv
226.938 102.989 228.057 101.871 229.437 101.871 cv
cp
229.437 100.87 mo
227.505 100.87 225.937 102.437 225.937 104.37 cv
225.937 106.303 227.505 107.871 229.437 107.871 cv
231.37 107.871 232.938 106.303 232.938 104.37 cv
232.938 102.437 231.37 100.87 229.437 100.87 cv
f
236.153 97.4867 mo
237.534 97.4867 238.653 98.6057 238.653 99.9867 cv
238.653 101.367 237.534 102.487 236.153 102.487 cv
234.772 102.487 233.653 101.367 233.653 99.9867 cv
233.653 98.6057 234.772 97.4867 236.153 97.4867 cv
cp
236.153 96.4867 mo
234.22 96.4867 232.653 98.0537 232.653 99.9867 cv
232.653 101.919 234.22 103.487 236.153 103.487 cv
238.086 103.487 239.653 101.919 239.653 99.9867 cv
239.653 98.0537 238.086 96.4867 236.153 96.4867 cv
f
242.46 94.8567 mo
243.841 94.8567 244.959 95.9757 244.959 97.3557 cv
244.959 98.7367 243.841 99.8557 242.46 99.8557 cv
241.079 99.8557 239.96 98.7367 239.96 97.3557 cv
239.96 95.9757 241.079 94.8567 242.46 94.8567 cv
cp
242.46 93.8557 mo
240.527 93.8557 238.959 95.4237 238.959 97.3557 cv
238.959 99.2887 240.527 100.857 242.46 100.857 cv
244.393 100.857 245.96 99.2887 245.96 97.3557 cv
245.96 95.4237 244.393 93.8557 242.46 93.8557 cv
f
248.946 90.0347 mo
250.327 90.0347 251.446 91.1537 251.446 92.5347 cv
251.446 93.9147 250.327 95.0347 248.946 95.0347 cv
247.566 95.0347 246.446 93.9147 246.446 92.5347 cv
246.446 91.1537 247.566 90.0347 248.946 90.0347 cv
cp
248.946 89.0347 mo
247.014 89.0347 245.446 90.6017 245.446 92.5347 cv
245.446 94.4667 247.014 96.0347 248.946 96.0347 cv
250.879 96.0347 252.446 94.4667 252.446 92.5347 cv
252.446 90.6017 250.879 89.0347 248.946 89.0347 cv
f
255.177 85.6507 mo
256.558 85.6507 257.677 86.7707 257.677 88.1507 cv
257.677 89.5317 256.558 90.6507 255.177 90.6507 cv
253.796 90.6507 252.677 89.5317 252.677 88.1507 cv
252.677 86.7707 253.796 85.6507 255.177 85.6507 cv
cp
255.177 84.6507 mo
253.244 84.6507 251.677 86.2187 251.677 88.1507 cv
251.677 90.0837 253.244 91.6507 255.177 91.6507 cv
257.11 91.6507 258.677 90.0837 258.677 88.1507 cv
258.677 86.2187 257.11 84.6507 255.177 84.6507 cv
f
261.007 81.7057 mo
262.388 81.7057 263.507 82.8257 263.507 84.2057 cv
263.507 85.5867 262.388 86.7057 261.007 86.7057 cv
259.627 86.7057 258.507 85.5867 258.507 84.2057 cv
258.507 82.8257 259.627 81.7057 261.007 81.7057 cv
cp
261.007 80.7057 mo
259.074 80.7057 257.507 82.2727 257.507 84.2057 cv
257.507 86.1387 259.074 87.7057 261.007 87.7057 cv
262.94 87.7057 264.507 86.1387 264.507 84.2057 cv
264.507 82.2727 262.94 80.7057 261.007 80.7057 cv
f
266.7 77.7607 mo
268.081 77.7607 269.2 78.8797 269.2 80.2607 cv
269.2 81.6417 268.081 82.7607 266.7 82.7607 cv
265.319 82.7607 264.2 81.6417 264.2 80.2607 cv
264.2 78.8797 265.319 77.7607 266.7 77.7607 cv
cp
266.7 76.7607 mo
264.768 76.7607 263.2 78.3277 263.2 80.2607 cv
263.2 82.1937 264.768 83.7607 266.7 83.7607 cv
268.633 83.7607 270.2 82.1937 270.2 80.2607 cv
270.2 78.3277 268.633 76.7607 266.7 76.7607 cv
f
272.165 74.2547 mo
273.545 74.2547 274.664 75.3737 274.664 76.7537 cv
274.664 78.1347 273.545 79.2537 272.165 79.2537 cv
270.784 79.2537 269.665 78.1347 269.665 76.7537 cv
269.665 75.3737 270.784 74.2547 272.165 74.2547 cv
cp
272.165 73.2537 mo
270.232 73.2537 268.664 74.8217 268.664 76.7537 cv
268.664 78.6867 270.232 80.2547 272.165 80.2547 cv
274.097 80.2547 275.665 78.6867 275.665 76.7537 cv
275.665 74.8217 274.097 73.2537 272.165 73.2537 cv
f
277.148 70.3087 mo
278.529 70.3087 279.648 71.4277 279.648 72.8087 cv
279.648 74.1897 278.529 75.3087 277.148 75.3087 cv
275.768 75.3087 274.648 74.1897 274.648 72.8087 cv
274.648 71.4277 275.768 70.3087 277.148 70.3087 cv
cp
277.148 69.3087 mo
275.215 69.3087 273.648 70.8757 273.648 72.8087 cv
273.648 74.7417 275.215 76.3087 277.148 76.3087 cv
279.081 76.3087 280.648 74.7417 280.648 72.8087 cv
280.648 70.8757 279.081 69.3087 277.148 69.3087 cv
f
282.201 67.2407 mo
283.582 67.2407 284.701 68.3597 284.701 69.7407 cv
284.701 71.1207 283.582 72.2397 282.201 72.2397 cv
280.82 72.2397 279.701 71.1207 279.701 69.7407 cv
279.701 68.3597 280.82 67.2407 282.201 67.2407 cv
cp
282.201 66.2397 mo
280.268 66.2397 278.701 67.8077 278.701 69.7407 cv
278.701 71.6727 280.268 73.2407 282.201 73.2407 cv
284.134 73.2407 285.701 71.6727 285.701 69.7407 cv
285.701 67.8077 284.134 66.2397 282.201 66.2397 cv
f
286.969 64.6107 mo
288.35 64.6107 289.468 65.7297 289.468 67.1107 cv
289.468 68.4907 288.35 69.6097 286.969 69.6097 cv
285.588 69.6097 284.469 68.4907 284.469 67.1107 cv
284.469 65.7297 285.588 64.6107 286.969 64.6107 cv
cp
286.969 63.6097 mo
285.036 63.6097 283.468 65.1777 283.468 67.1107 cv
283.468 69.0427 285.036 70.6107 286.969 70.6107 cv
288.902 70.6107 290.469 69.0427 290.469 67.1107 cv
290.469 65.1777 288.902 63.6097 286.969 63.6097 cv
f
291.408 63.2957 mo
292.789 63.2957 293.908 64.4147 293.908 65.7957 cv
293.908 67.1757 292.789 68.2947 291.408 68.2947 cv
290.027 68.2947 288.908 67.1757 288.908 65.7957 cv
288.908 64.4147 290.027 63.2957 291.408 63.2957 cv
cp
291.408 62.2947 mo
289.475 62.2947 287.908 63.8627 287.908 65.7957 cv
287.908 67.7277 289.475 69.2957 291.408 69.2957 cv
293.341 69.2957 294.908 67.7277 294.908 65.7957 cv
294.908 63.8627 293.341 62.2947 291.408 62.2947 cv
f
295.929 57.1587 mo
297.31 57.1587 298.429 58.2777 298.429 59.6587 cv
298.429 61.0387 297.31 62.1577 295.929 62.1577 cv
294.548 62.1577 293.429 61.0387 293.429 59.6587 cv
293.429 58.2777 294.548 57.1587 295.929 57.1587 cv
cp
295.929 56.1577 mo
293.996 56.1577 292.429 57.7257 292.429 59.6587 cv
292.429 61.5907 293.996 63.1587 295.929 63.1587 cv
297.862 63.1587 299.429 61.5907 299.429 59.6587 cv
299.429 57.7257 297.862 56.1577 295.929 56.1577 cv
f
300.11 53.6517 mo
301.491 53.6517 302.61 54.7707 302.61 56.1517 cv
302.61 57.5327 301.491 58.6517 300.11 58.6517 cv
298.73 58.6517 297.61 57.5327 297.61 56.1517 cv
297.61 54.7707 298.73 53.6517 300.11 53.6517 cv
cp
300.11 52.6517 mo
298.178 52.6517 296.61 54.2187 296.61 56.1517 cv
296.61 58.0847 298.178 59.6517 300.11 59.6517 cv
302.043 59.6517 303.61 58.0847 303.61 56.1517 cv
303.61 54.2187 302.043 52.6517 300.11 52.6517 cv
f
304.071 51.0217 mo
305.452 51.0217 306.571 52.1407 306.571 53.5217 cv
306.571 54.9027 305.452 56.0217 304.071 56.0217 cv
302.69 56.0217 301.571 54.9027 301.571 53.5217 cv
301.571 52.1407 302.69 51.0217 304.071 51.0217 cv
cp
304.071 50.0217 mo
302.138 50.0217 300.571 51.5887 300.571 53.5217 cv
300.571 55.4547 302.138 57.0217 304.071 57.0217 cv
306.003 57.0217 307.571 55.4547 307.571 53.5217 cv
307.571 51.5887 306.003 50.0217 304.071 50.0217 cv
f
308.162 49.2687 mo
309.543 49.2687 310.661 50.3877 310.661 51.7687 cv
310.661 53.1487 309.543 54.2677 308.162 54.2677 cv
306.781 54.2677 305.662 53.1487 305.662 51.7687 cv
305.662 50.3877 306.781 49.2687 308.162 49.2687 cv
cp
308.162 48.2677 mo
306.229 48.2677 304.661 49.8357 304.661 51.7687 cv
304.661 53.7007 306.229 55.2687 308.162 55.2687 cv
310.094 55.2687 311.662 53.7007 311.662 51.7687 cv
311.662 49.8357 310.094 48.2677 308.162 48.2677 cv
f
311.919 47.5147 mo
313.299 47.5147 314.418 48.6337 314.418 50.0147 cv
314.418 51.3957 313.299 52.5147 311.919 52.5147 cv
310.538 52.5147 309.419 51.3957 309.419 50.0147 cv
309.419 48.6337 310.538 47.5147 311.919 47.5147 cv
cp
311.919 46.5147 mo
309.986 46.5147 308.418 48.0817 308.418 50.0147 cv
308.418 51.9477 309.986 53.5147 311.919 53.5147 cv
313.851 53.5147 315.419 51.9477 315.419 50.0147 cv
315.419 48.0817 313.851 46.5147 311.919 46.5147 cv
f
315.726 44.4467 mo
317.107 44.4467 318.226 45.5657 318.226 46.9467 cv
318.226 48.3267 317.107 49.4457 315.726 49.4457 cv
314.345 49.4457 313.227 48.3267 313.227 46.9467 cv
313.227 45.5657 314.345 44.4467 315.726 44.4467 cv
cp
315.726 43.4457 mo
313.793 43.4457 312.226 45.0137 312.226 46.9467 cv
312.226 48.8797 313.793 50.4467 315.726 50.4467 cv
317.659 50.4467 319.227 48.8797 319.227 46.9467 cv
319.227 45.0137 317.659 43.4457 315.726 43.4457 cv
f
319.371 40.9397 mo
320.751 40.9397 321.87 42.0587 321.87 43.4397 cv
321.87 44.8207 320.751 45.9397 319.371 45.9397 cv
317.99 45.9397 316.871 44.8207 316.871 43.4397 cv
316.871 42.0587 317.99 40.9397 319.371 40.9397 cv
cp
319.371 39.9397 mo
317.438 39.9397 315.87 41.5067 315.87 43.4397 cv
315.87 45.3727 317.438 46.9397 319.371 46.9397 cv
321.303 46.9397 322.871 45.3727 322.871 43.4397 cv
322.871 41.5067 321.303 39.9397 319.371 39.9397 cv
f
322.92 39.6247 mo
324.301 39.6247 325.419 40.7437 325.419 42.1247 cv
325.419 43.5047 324.301 44.6237 322.92 44.6237 cv
321.539 44.6237 320.42 43.5047 320.42 42.1247 cv
320.42 40.7437 321.539 39.6247 322.92 39.6247 cv
cp
322.92 38.6237 mo
320.987 38.6237 319.419 40.1917 319.419 42.1247 cv
319.419 44.0577 320.987 45.6247 322.92 45.6247 cv
324.853 45.6247 326.42 44.0577 326.42 42.1247 cv
326.42 40.1917 324.853 38.6237 322.92 38.6237 cv
f
326.263 38.3097 mo
327.643 38.3097 328.762 39.4287 328.762 40.8097 cv
328.762 42.1897 327.643 43.3097 326.263 43.3097 cv
324.882 43.3097 323.763 42.1897 323.763 40.8097 cv
323.763 39.4287 324.882 38.3097 326.263 38.3097 cv
cp
326.263 37.3097 mo
324.33 37.3097 322.762 38.8767 322.762 40.8097 cv
322.762 42.7417 324.33 44.3097 326.263 44.3097 cv
328.195 44.3097 329.763 42.7417 329.763 40.8097 cv
329.763 38.8767 328.195 37.3097 326.263 37.3097 cv
f
329.465 35.2417 mo
330.846 35.2417 331.965 36.3597 331.965 37.7407 cv
331.965 39.1217 330.846 40.2407 329.465 40.2407 cv
328.084 40.2407 326.965 39.1217 326.965 37.7407 cv
326.965 36.3597 328.084 35.2417 329.465 35.2417 cv
cp
329.465 34.2407 mo
327.532 34.2407 325.965 35.8077 325.965 37.7407 cv
325.965 39.6737 327.532 41.2417 329.465 41.2417 cv
331.398 41.2417 332.965 39.6737 332.965 37.7407 cv
332.965 35.8077 331.398 34.2407 329.465 34.2407 cv
f
332.603 33.0497 mo
333.984 33.0497 335.103 34.1687 335.103 35.5487 cv
335.103 36.9297 333.984 38.0487 332.603 38.0487 cv
331.222 38.0487 330.103 36.9297 330.103 35.5487 cv
330.103 34.1687 331.222 33.0497 332.603 33.0497 cv
cp
332.603 32.0487 mo
330.67 32.0487 329.103 33.6167 329.103 35.5487 cv
329.103 37.4817 330.67 39.0497 332.603 39.0497 cv
334.535 39.0497 336.103 37.4817 336.103 35.5487 cv
336.103 33.6167 334.535 32.0487 332.603 32.0487 cv
f
335.751 32.6117 mo
337.132 32.6117 338.251 33.7297 338.251 35.1107 cv
338.251 36.4917 337.132 37.6107 335.751 37.6107 cv
334.37 37.6107 333.251 36.4917 333.251 35.1107 cv
333.251 33.7297 334.37 32.6117 335.751 32.6117 cv
cp
335.751 31.6107 mo
333.818 31.6107 332.251 33.1777 332.251 35.1107 cv
332.251 37.0437 333.818 38.6117 335.751 38.6117 cv
337.684 38.6117 339.251 37.0437 339.251 35.1107 cv
339.251 33.1777 337.684 31.6107 335.751 31.6107 cv
f
338.737 32.6117 mo
340.118 32.6117 341.237 33.7297 341.237 35.1107 cv
341.237 36.4917 340.118 37.6107 338.737 37.6107 cv
337.357 37.6107 336.238 36.4917 336.238 35.1107 cv
336.238 33.7297 337.357 32.6117 338.737 32.6117 cv
cp
338.737 31.6107 mo
336.805 31.6107 335.237 33.1777 335.237 35.1107 cv
335.237 37.0437 336.805 38.6117 338.737 38.6117 cv
340.67 38.6117 342.238 37.0437 342.238 35.1107 cv
342.238 33.1777 340.67 31.6107 338.737 31.6107 cv
f
341.542 30.8577 mo
342.923 30.8577 344.041 31.9767 344.041 33.3577 cv
344.041 34.7387 342.923 35.8577 341.542 35.8577 cv
340.161 35.8577 339.042 34.7387 339.042 33.3577 cv
339.042 31.9767 340.161 30.8577 341.542 30.8577 cv
cp
341.542 29.8577 mo
339.609 29.8577 338.041 31.4247 338.041 33.3577 cv
338.041 35.2897 339.609 36.8577 341.542 36.8577 cv
343.475 36.8577 345.042 35.2897 345.042 33.3577 cv
345.042 31.4247 343.475 29.8577 341.542 29.8577 cv
f
344.327 29.1047 mo
345.708 29.1047 346.827 30.2237 346.827 31.6047 cv
346.827 32.9847 345.708 34.1037 344.327 34.1037 cv
342.947 34.1037 341.828 32.9847 341.828 31.6047 cv
341.828 30.2237 342.947 29.1047 344.327 29.1047 cv
cp
344.327 28.1037 mo
342.394 28.1037 340.827 29.6717 340.827 31.6047 cv
340.827 33.5367 342.394 35.1047 344.327 35.1047 cv
346.26 35.1047 347.828 33.5367 347.828 31.6047 cv
347.828 29.6717 346.26 28.1037 344.327 28.1037 cv
f
346.93 27.7897 mo
348.311 27.7897 349.43 28.9077 349.43 30.2887 cv
349.43 31.6697 348.311 32.7887 346.93 32.7887 cv
345.55 32.7887 344.431 31.6697 344.431 30.2887 cv
344.431 28.9077 345.55 27.7897 346.93 27.7897 cv
cp
346.93 26.7887 mo
344.998 26.7887 343.43 28.3557 343.43 30.2887 cv
343.43 32.2217 344.998 33.7897 346.93 33.7897 cv
348.863 33.7897 350.431 32.2217 350.431 30.2887 cv
350.431 28.3557 348.863 26.7887 346.93 26.7887 cv
f
349.458 26.9127 mo
350.839 26.9127 351.958 28.0317 351.958 29.4127 cv
351.958 30.7937 350.839 31.9117 349.458 31.9117 cv
348.078 31.9117 346.959 30.7937 346.959 29.4127 cv
346.959 28.0317 348.078 26.9127 349.458 26.9127 cv
cp
349.458 25.9117 mo
347.525 25.9117 345.958 27.4797 345.958 29.4127 cv
345.958 31.3457 347.525 32.9127 349.458 32.9127 cv
351.391 32.9127 352.959 31.3457 352.959 29.4127 cv
352.959 27.4797 351.391 25.9117 349.458 25.9117 cv
f
351.913 24.7207 mo
353.294 24.7207 354.413 25.8397 354.413 27.2207 cv
354.413 28.6017 353.294 29.7207 351.913 29.7207 cv
350.532 29.7207 349.413 28.6017 349.413 27.2207 cv
349.413 25.8397 350.532 24.7207 351.913 24.7207 cv
cp
351.913 23.7207 mo
349.98 23.7207 348.413 25.2877 348.413 27.2207 cv
348.413 29.1537 349.98 30.7207 351.913 30.7207 cv
353.846 30.7207 355.413 29.1537 355.413 27.2207 cv
355.413 25.2877 353.846 23.7207 351.913 23.7207 cv
f
354.275 24.2827 mo
355.655 24.2827 356.775 25.4017 356.775 26.7827 cv
356.775 28.1627 355.655 29.2817 354.275 29.2817 cv
352.894 29.2817 351.775 28.1627 351.775 26.7827 cv
351.775 25.4017 352.894 24.2827 354.275 24.2827 cv
cp
354.275 23.2817 mo
352.342 23.2817 350.775 24.8497 350.775 26.7827 cv
350.775 28.7147 352.342 30.2827 354.275 30.2827 cv
356.207 30.2827 357.775 28.7147 357.775 26.7827 cv
357.775 24.8497 356.207 23.2817 354.275 23.2817 cv
f
356.589 23.4057 mo
357.97 23.4057 359.089 24.5247 359.089 25.9057 cv
359.089 27.2867 357.97 28.4057 356.589 28.4057 cv
355.209 28.4057 354.089 27.2867 354.089 25.9057 cv
354.089 24.5247 355.209 23.4057 356.589 23.4057 cv
cp
356.589 22.4057 mo
354.657 22.4057 353.089 23.9727 353.089 25.9057 cv
353.089 27.8387 354.657 29.4057 356.589 29.4057 cv
358.522 29.4057 360.089 27.8387 360.089 25.9057 cv
360.089 23.9727 358.522 22.4057 356.589 22.4057 cv
f
358.728 22.5297 mo
360.109 22.5297 361.228 23.6477 361.228 25.0287 cv
361.228 26.4097 360.109 27.5287 358.728 27.5287 cv
357.347 27.5287 356.228 26.4097 356.228 25.0287 cv
356.228 23.6477 357.347 22.5297 358.728 22.5297 cv
cp
358.728 21.5287 mo
356.795 21.5287 355.228 23.0957 355.228 25.0287 cv
355.228 26.9617 356.795 28.5297 358.728 28.5297 cv
360.66 28.5297 362.228 26.9617 362.228 25.0287 cv
362.228 23.0957 360.66 21.5287 358.728 21.5287 cv
f
360.768 22.5297 mo
362.148 22.5297 363.268 23.6477 363.268 25.0287 cv
363.268 26.4097 362.148 27.5287 360.768 27.5287 cv
359.387 27.5287 358.268 26.4097 358.268 25.0287 cv
358.268 23.6477 359.387 22.5297 360.768 22.5297 cv
cp
360.768 21.5287 mo
358.835 21.5287 357.268 23.0957 357.268 25.0287 cv
357.268 26.9617 358.835 28.5297 360.768 28.5297 cv
362.7 28.5297 364.268 26.9617 364.268 25.0287 cv
364.268 23.0957 362.7 21.5287 360.768 21.5287 cv
f
362.806 22.0907 mo
364.186 22.0907 365.305 23.2097 365.305 24.5907 cv
365.305 25.9717 364.186 27.0897 362.806 27.0897 cv
361.425 27.0897 360.306 25.9717 360.306 24.5907 cv
360.306 23.2097 361.425 22.0907 362.806 22.0907 cv
cp
362.806 21.0897 mo
360.873 21.0897 359.305 22.6577 359.305 24.5907 cv
359.305 26.5237 360.873 28.0907 362.806 28.0907 cv
364.738 28.0907 366.306 26.5237 366.306 24.5907 cv
366.306 22.6577 364.738 21.0897 362.806 21.0897 cv
f
364.756 21.6527 mo
366.137 21.6527 367.256 22.7717 367.256 24.1527 cv
367.256 25.5327 366.137 26.6517 364.756 26.6517 cv
363.376 26.6517 362.257 25.5327 362.257 24.1527 cv
362.257 22.7717 363.376 21.6527 364.756 21.6527 cv
cp
364.756 20.6517 mo
362.824 20.6517 361.256 22.2197 361.256 24.1527 cv
361.256 26.0847 362.824 27.6527 364.756 27.6527 cv
366.689 27.6527 368.257 26.0847 368.257 24.1527 cv
368.257 22.2197 366.689 20.6517 364.756 20.6517 cv
f
366.625 21.2137 mo
368.006 21.2137 369.125 22.3327 369.125 23.7137 cv
369.125 25.0947 368.006 26.2137 366.625 26.2137 cv
365.244 26.2137 364.125 25.0947 364.125 23.7137 cv
364.125 22.3327 365.244 21.2137 366.625 21.2137 cv
cp
366.625 20.2137 mo
364.693 20.2137 363.125 21.7807 363.125 23.7137 cv
363.125 25.6467 364.693 27.2137 366.625 27.2137 cv
368.558 27.2137 370.125 25.6467 370.125 23.7137 cv
370.125 21.7807 368.558 20.2137 366.625 20.2137 cv
f
368.434 20.7757 mo
369.815 20.7757 370.934 21.8947 370.934 23.2757 cv
370.934 24.6557 369.815 25.7757 368.434 25.7757 cv
367.053 25.7757 365.935 24.6557 365.935 23.2757 cv
365.935 21.8947 367.053 20.7757 368.434 20.7757 cv
cp
368.434 19.7757 mo
366.502 19.7757 364.934 21.3427 364.934 23.2757 cv
364.934 25.2077 366.502 26.7757 368.434 26.7757 cv
370.367 26.7757 371.935 25.2077 371.935 23.2757 cv
371.935 21.3427 370.367 19.7757 368.434 19.7757 cv
f
370.1 20.7757 mo
371.481 20.7757 372.6 21.8947 372.6 23.2757 cv
372.6 24.6557 371.481 25.7757 370.1 25.7757 cv
368.719 25.7757 367.6 24.6557 367.6 23.2757 cv
367.6 21.8947 368.719 20.7757 370.1 20.7757 cv
cp
370.1 19.7757 mo
368.167 19.7757 366.6 21.3427 366.6 23.2757 cv
366.6 25.2077 368.167 26.7757 370.1 26.7757 cv
372.033 26.7757 373.6 25.2077 373.6 23.2757 cv
373.6 21.3427 372.033 19.7757 370.1 19.7757 cv
f
371.71 19.8987 mo
373.091 19.8987 374.21 21.0177 374.21 22.3987 cv
374.21 23.7797 373.091 24.8987 371.71 24.8987 cv
370.329 24.8987 369.21 23.7797 369.21 22.3987 cv
369.21 21.0177 370.329 19.8987 371.71 19.8987 cv
cp
371.71 18.8987 mo
369.777 18.8987 368.21 20.4657 368.21 22.3987 cv
368.21 24.3317 369.777 25.8987 371.71 25.8987 cv
373.643 25.8987 375.21 24.3317 375.21 22.3987 cv
375.21 20.4657 373.643 18.8987 371.71 18.8987 cv
f
373.244 19.8987 mo
374.625 19.8987 375.744 21.0177 375.744 22.3987 cv
375.744 23.7797 374.625 24.8987 373.244 24.8987 cv
371.863 24.8987 370.744 23.7797 370.744 22.3987 cv
370.744 21.0177 371.863 19.8987 373.244 19.8987 cv
cp
373.244 18.8987 mo
371.311 18.8987 369.744 20.4657 369.744 22.3987 cv
369.744 24.3317 371.311 25.8987 373.244 25.8987 cv
375.177 25.8987 376.744 24.3317 376.744 22.3987 cv
376.744 20.4657 375.177 18.8987 373.244 18.8987 cv
f
374.716 19.4607 mo
376.097 19.4607 377.216 20.5797 377.216 21.9607 cv
377.216 23.3417 376.097 24.4597 374.716 24.4597 cv
373.335 24.4597 372.216 23.3417 372.216 21.9607 cv
372.216 20.5797 373.335 19.4607 374.716 19.4607 cv
cp
374.716 18.4597 mo
372.784 18.4597 371.216 20.0277 371.216 21.9607 cv
371.216 23.8937 372.784 25.4607 374.716 25.4607 cv
376.649 25.4607 378.216 23.8937 378.216 21.9607 cv
378.216 20.0277 376.649 18.4597 374.716 18.4597 cv
f
376.119 19.4607 mo
377.5 19.4607 378.619 20.5797 378.619 21.9607 cv
378.619 23.3417 377.5 24.4597 376.119 24.4597 cv
374.739 24.4597 373.619 23.3417 373.619 21.9607 cv
373.619 20.5797 374.739 19.4607 376.119 19.4607 cv
cp
376.119 18.4597 mo
374.187 18.4597 372.619 20.0277 372.619 21.9607 cv
372.619 23.8937 374.187 25.4607 376.119 25.4607 cv
378.052 25.4607 379.619 23.8937 379.619 21.9607 cv
379.619 20.0277 378.052 18.4597 376.119 18.4597 cv
f
377.468 19.0227 mo
378.849 19.0227 379.968 20.1417 379.968 21.5227 cv
379.968 22.9027 378.849 24.0217 377.468 24.0217 cv
376.088 24.0217 374.969 22.9027 374.969 21.5227 cv
374.969 20.1417 376.088 19.0227 377.468 19.0227 cv
cp
377.468 18.0217 mo
375.536 18.0217 373.968 19.5897 373.968 21.5227 cv
373.968 23.4547 375.536 25.0227 377.468 25.0227 cv
379.401 25.0227 380.969 23.4547 380.969 21.5227 cv
380.969 19.5897 379.401 18.0217 377.468 18.0217 cv
f
378.754 19.0227 mo
380.135 19.0227 381.254 20.1417 381.254 21.5227 cv
381.254 22.9027 380.135 24.0217 378.754 24.0217 cv
377.374 24.0217 376.255 22.9027 376.255 21.5227 cv
376.255 20.1417 377.374 19.0227 378.754 19.0227 cv
cp
378.754 18.0217 mo
376.821 18.0217 375.254 19.5897 375.254 21.5227 cv
375.254 23.4547 376.821 25.0227 378.754 25.0227 cv
380.687 25.0227 382.255 23.4547 382.255 21.5227 cv
382.255 19.5897 380.687 18.0217 378.754 18.0217 cv
f
379.992 18.5837 mo
381.373 18.5837 382.492 19.7027 382.492 21.0837 cv
382.492 22.4647 381.373 23.5837 379.992 23.5837 cv
378.611 23.5837 377.493 22.4647 377.493 21.0837 cv
377.493 19.7027 378.611 18.5837 379.992 18.5837 cv
cp
379.992 17.5837 mo
378.059 17.5837 376.492 19.1507 376.492 21.0837 cv
376.492 23.0167 378.059 24.5837 379.992 24.5837 cv
381.925 24.5837 383.493 23.0167 383.493 21.0837 cv
383.493 19.1507 381.925 17.5837 379.992 17.5837 cv
f
381.139 18.5837 mo
382.52 18.5837 383.639 19.7027 383.639 21.0837 cv
383.639 22.4647 382.52 23.5837 381.139 23.5837 cv
379.759 23.5837 378.64 22.4647 378.64 21.0837 cv
378.64 19.7027 379.759 18.5837 381.139 18.5837 cv
cp
381.139 17.5837 mo
379.207 17.5837 377.639 19.1507 377.639 21.0837 cv
377.639 23.0167 379.207 24.5837 381.139 24.5837 cv
383.072 24.5837 384.64 23.0167 384.64 21.0837 cv
384.64 19.1507 383.072 17.5837 381.139 17.5837 cv
f
382.222 18.5837 mo
383.603 18.5837 384.721 19.7027 384.721 21.0837 cv
384.721 22.4647 383.603 23.5837 382.222 23.5837 cv
380.841 23.5837 379.722 22.4647 379.722 21.0837 cv
379.722 19.7027 380.841 18.5837 382.222 18.5837 cv
cp
382.222 17.5837 mo
380.289 17.5837 378.721 19.1507 378.721 21.0837 cv
378.721 23.0167 380.289 24.5837 382.222 24.5837 cv
384.155 24.5837 385.722 23.0167 385.722 21.0837 cv
385.722 19.1507 384.155 17.5837 382.222 17.5837 cv
f
383.244 18.5837 mo
384.625 18.5837 385.744 19.7027 385.744 21.0837 cv
385.744 22.4647 384.625 23.5837 383.244 23.5837 cv
381.863 23.5837 380.744 22.4647 380.744 21.0837 cv
380.744 19.7027 381.863 18.5837 383.244 18.5837 cv
cp
383.244 17.5837 mo
381.311 17.5837 379.744 19.1507 379.744 21.0837 cv
379.744 23.0167 381.311 24.5837 383.244 24.5837 cv
385.177 24.5837 386.744 23.0167 386.744 21.0837 cv
386.744 19.1507 385.177 17.5837 383.244 17.5837 cv
f
384.209 18.5837 mo
385.59 18.5837 386.709 19.7027 386.709 21.0837 cv
386.709 22.4647 385.59 23.5837 384.209 23.5837 cv
382.829 23.5837 381.71 22.4647 381.71 21.0837 cv
381.71 19.7027 382.829 18.5837 384.209 18.5837 cv
cp
384.209 17.5837 mo
382.277 17.5837 380.709 19.1507 380.709 21.0837 cv
380.709 23.0167 382.277 24.5837 384.209 24.5837 cv
386.142 24.5837 387.71 23.0167 387.71 21.0837 cv
387.71 19.1507 386.142 17.5837 384.209 17.5837 cv
f
385.129 18.5837 mo
386.51 18.5837 387.629 19.7027 387.629 21.0837 cv
387.629 22.4647 386.51 23.5837 385.129 23.5837 cv
383.749 23.5837 382.63 22.4647 382.63 21.0837 cv
382.63 19.7027 383.749 18.5837 385.129 18.5837 cv
cp
385.129 17.5837 mo
383.197 17.5837 381.629 19.1507 381.629 21.0837 cv
381.629 23.0167 383.197 24.5837 385.129 24.5837 cv
387.062 24.5837 388.63 23.0167 388.63 21.0837 cv
388.63 19.1507 387.062 17.5837 385.129 17.5837 cv
f
385.987 18.5837 mo
387.368 18.5837 388.486 19.7027 388.486 21.0837 cv
388.486 22.4647 387.368 23.5837 385.987 23.5837 cv
384.606 23.5837 383.487 22.4647 383.487 21.0837 cv
383.487 19.7027 384.606 18.5837 385.987 18.5837 cv
cp
385.987 17.5837 mo
384.054 17.5837 382.486 19.1507 382.486 21.0837 cv
382.486 23.0167 384.054 24.5837 385.987 24.5837 cv
387.919 24.5837 389.487 23.0167 389.487 21.0837 cv
389.487 19.1507 387.919 17.5837 385.987 17.5837 cv
f
386.813 18.5837 mo
388.194 18.5837 389.313 19.7027 389.313 21.0837 cv
389.313 22.4647 388.194 23.5837 386.813 23.5837 cv
385.432 23.5837 384.314 22.4647 384.314 21.0837 cv
384.314 19.7027 385.432 18.5837 386.813 18.5837 cv
cp
386.813 17.5837 mo
384.88 17.5837 383.313 19.1507 383.313 21.0837 cv
383.313 23.0167 384.88 24.5837 386.813 24.5837 cv
388.746 24.5837 390.314 23.0167 390.314 21.0837 cv
390.314 19.1507 388.746 17.5837 386.813 17.5837 cv
f
387.595 18.1457 mo
388.976 18.1457 390.095 19.2647 390.095 20.6457 cv
390.095 22.0257 388.976 23.1457 387.595 23.1457 cv
386.214 23.1457 385.096 22.0257 385.096 20.6457 cv
385.096 19.2647 386.214 18.1457 387.595 18.1457 cv
cp
387.595 17.1457 mo
385.662 17.1457 384.095 18.7127 384.095 20.6457 cv
384.095 22.5777 385.662 24.1457 387.595 24.1457 cv
389.528 24.1457 391.096 22.5777 391.096 20.6457 cv
391.096 18.7127 389.528 17.1457 387.595 17.1457 cv
f
388.327 17.7077 mo
389.707 17.7077 390.826 18.8257 390.826 20.2067 cv
390.826 21.5877 389.707 22.7067 388.327 22.7067 cv
386.946 22.7067 385.827 21.5877 385.827 20.2067 cv
385.827 18.8257 386.946 17.7077 388.327 17.7077 cv
cp
388.327 16.7067 mo
386.394 16.7067 384.826 18.2737 384.826 20.2067 cv
384.826 22.1397 386.394 23.7077 388.327 23.7077 cv
390.259 23.7077 391.827 22.1397 391.827 20.2067 cv
391.827 18.2737 390.259 16.7067 388.327 16.7067 cv
f
389.003 17.7077 mo
390.384 17.7077 391.503 18.8257 391.503 20.2067 cv
391.503 21.5877 390.384 22.7067 389.003 22.7067 cv
387.623 22.7067 386.504 21.5877 386.504 20.2067 cv
386.504 18.8257 387.623 17.7077 389.003 17.7077 cv
cp
389.003 16.7067 mo
387.071 16.7067 385.503 18.2737 385.503 20.2067 cv
385.503 22.1397 387.071 23.7077 389.003 23.7077 cv
390.936 23.7077 392.504 22.1397 392.504 20.2067 cv
392.504 18.2737 390.936 16.7067 389.003 16.7067 cv
f
389.635 17.7077 mo
391.015 17.7077 392.134 18.8257 392.134 20.2067 cv
392.134 21.5877 391.015 22.7067 389.635 22.7067 cv
388.254 22.7067 387.135 21.5877 387.135 20.2067 cv
387.135 18.8257 388.254 17.7077 389.635 17.7077 cv
cp
389.635 16.7067 mo
387.702 16.7067 386.134 18.2737 386.134 20.2067 cv
386.134 22.1397 387.702 23.7077 389.635 23.7077 cv
391.567 23.7077 393.135 22.1397 393.135 20.2067 cv
393.135 18.2737 391.567 16.7067 389.635 16.7067 cv
f
390.237 17.2687 mo
391.617 17.2687 392.736 18.3877 392.736 19.7687 cv
392.736 21.1497 391.617 22.2687 390.237 22.2687 cv
388.856 22.2687 387.737 21.1497 387.737 19.7687 cv
387.737 18.3877 388.856 17.2687 390.237 17.2687 cv
cp
390.237 16.2687 mo
388.304 16.2687 386.736 17.8357 386.736 19.7687 cv
386.736 21.7017 388.304 23.2687 390.237 23.2687 cv
392.169 23.2687 393.737 21.7017 393.737 19.7687 cv
393.737 17.8357 392.169 16.2687 390.237 16.2687 cv
f
390.814 17.2687 mo
392.194 17.2687 393.314 18.3877 393.314 19.7687 cv
393.314 21.1497 392.194 22.2687 390.814 22.2687 cv
389.433 22.2687 388.314 21.1497 388.314 19.7687 cv
388.314 18.3877 389.433 17.2687 390.814 17.2687 cv
cp
390.814 16.2687 mo
388.881 16.2687 387.314 17.8357 387.314 19.7687 cv
387.314 21.7017 388.881 23.2687 390.814 23.2687 cv
392.746 23.2687 394.314 21.7017 394.314 19.7687 cv
394.314 17.8357 392.746 16.2687 390.814 16.2687 cv
f
391.35 17.2687 mo
392.731 17.2687 393.85 18.3877 393.85 19.7687 cv
393.85 21.1497 392.731 22.2687 391.35 22.2687 cv
389.969 22.2687 388.85 21.1497 388.85 19.7687 cv
388.85 18.3877 389.969 17.2687 391.35 17.2687 cv
cp
391.35 16.2687 mo
389.418 16.2687 387.85 17.8357 387.85 19.7687 cv
387.85 21.7017 389.418 23.2687 391.35 23.2687 cv
393.283 23.2687 394.85 21.7017 394.85 19.7687 cv
394.85 17.8357 393.283 16.2687 391.35 16.2687 cv
f
391.847 17.2687 mo
393.227 17.2687 394.346 18.3877 394.346 19.7687 cv
394.346 21.1497 393.227 22.2687 391.847 22.2687 cv
390.466 22.2687 389.347 21.1497 389.347 19.7687 cv
389.347 18.3877 390.466 17.2687 391.847 17.2687 cv
cp
391.847 16.2687 mo
389.914 16.2687 388.346 17.8357 388.346 19.7687 cv
388.346 21.7017 389.914 23.2687 391.847 23.2687 cv
393.779 23.2687 395.347 21.7017 395.347 19.7687 cv
395.347 17.8357 393.779 16.2687 391.847 16.2687 cv
f
392.302 17.2687 mo
393.683 17.2687 394.802 18.3877 394.802 19.7687 cv
394.802 21.1497 393.683 22.2687 392.302 22.2687 cv
390.921 22.2687 389.803 21.1497 389.803 19.7687 cv
389.803 18.3877 390.921 17.2687 392.302 17.2687 cv
cp
392.302 16.2687 mo
390.369 16.2687 388.802 17.8357 388.802 19.7687 cv
388.802 21.7017 390.369 23.2687 392.302 23.2687 cv
394.235 23.2687 395.803 21.7017 395.803 19.7687 cv
395.803 17.8357 394.235 16.2687 392.302 16.2687 cv
f
392.737 17.2687 mo
394.118 17.2687 395.237 18.3877 395.237 19.7687 cv
395.237 21.1497 394.118 22.2687 392.737 22.2687 cv
391.356 22.2687 390.237 21.1497 390.237 19.7687 cv
390.237 18.3877 391.356 17.2687 392.737 17.2687 cv
cp
392.737 16.2687 mo
390.804 16.2687 389.237 17.8357 389.237 19.7687 cv
389.237 21.7017 390.804 23.2687 392.737 23.2687 cv
394.67 23.2687 396.237 21.7017 396.237 19.7687 cv
396.237 17.8357 394.67 16.2687 392.737 16.2687 cv
f
393.159 17.2687 mo
394.54 17.2687 395.659 18.3877 395.659 19.7687 cv
395.659 21.1497 394.54 22.2687 393.159 22.2687 cv
391.778 22.2687 390.66 21.1497 390.66 19.7687 cv
390.66 18.3877 391.778 17.2687 393.159 17.2687 cv
cp
393.159 16.2687 mo
391.227 16.2687 389.659 17.8357 389.659 19.7687 cv
389.659 21.7017 391.227 23.2687 393.159 23.2687 cv
395.092 23.2687 396.66 21.7017 396.66 19.7687 cv
396.66 17.8357 395.092 16.2687 393.159 16.2687 cv
f
393.528 17.2687 mo
394.909 17.2687 396.028 18.3877 396.028 19.7687 cv
396.028 21.1497 394.909 22.2687 393.528 22.2687 cv
392.147 22.2687 391.028 21.1497 391.028 19.7687 cv
391.028 18.3877 392.147 17.2687 393.528 17.2687 cv
cp
393.528 16.2687 mo
391.595 16.2687 390.028 17.8357 390.028 19.7687 cv
390.028 21.7017 391.595 23.2687 393.528 23.2687 cv
395.46 23.2687 397.028 21.7017 397.028 19.7687 cv
397.028 17.8357 395.46 16.2687 393.528 16.2687 cv
f
393.874 17.2687 mo
395.254 17.2687 396.373 18.3877 396.373 19.7687 cv
396.373 21.1497 395.254 22.2687 393.874 22.2687 cv
392.493 22.2687 391.374 21.1497 391.374 19.7687 cv
391.374 18.3877 392.493 17.2687 393.874 17.2687 cv
cp
393.874 16.2687 mo
391.941 16.2687 390.373 17.8357 390.373 19.7687 cv
390.373 21.7017 391.941 23.2687 393.874 23.2687 cv
395.806 23.2687 397.374 21.7017 397.374 19.7687 cv
397.374 17.8357 395.806 16.2687 393.874 16.2687 cv
f
394.185 17.2687 mo
395.566 17.2687 396.685 18.3877 396.685 19.7687 cv
396.685 21.1497 395.566 22.2687 394.185 22.2687 cv
392.804 22.2687 391.685 21.1497 391.685 19.7687 cv
391.685 18.3877 392.804 17.2687 394.185 17.2687 cv
cp
394.185 16.2687 mo
392.252 16.2687 390.685 17.8357 390.685 19.7687 cv
390.685 21.7017 392.252 23.2687 394.185 23.2687 cv
396.118 23.2687 397.685 21.7017 397.685 19.7687 cv
397.685 17.8357 396.118 16.2687 394.185 16.2687 cv
f
394.493 17.2687 mo
395.873 17.2687 396.993 18.3877 396.993 19.7687 cv
396.993 21.1497 395.873 22.2687 394.493 22.2687 cv
393.112 22.2687 391.993 21.1497 391.993 19.7687 cv
391.993 18.3877 393.112 17.2687 394.493 17.2687 cv
cp
394.493 16.2687 mo
392.56 16.2687 390.993 17.8357 390.993 19.7687 cv
390.993 21.7017 392.56 23.2687 394.493 23.2687 cv
396.426 23.2687 397.993 21.7017 397.993 19.7687 cv
397.993 17.8357 396.426 16.2687 394.493 16.2687 cv
f
394.77 17.2687 mo
396.15 17.2687 397.269 18.3877 397.269 19.7687 cv
397.269 21.1497 396.15 22.2687 394.77 22.2687 cv
393.389 22.2687 392.27 21.1497 392.27 19.7687 cv
392.27 18.3877 393.389 17.2687 394.77 17.2687 cv
cp
394.77 16.2687 mo
392.837 16.2687 391.269 17.8357 391.269 19.7687 cv
391.269 21.7017 392.837 23.2687 394.77 23.2687 cv
396.702 23.2687 398.27 21.7017 398.27 19.7687 cv
398.27 17.8357 396.702 16.2687 394.77 16.2687 cv
f
395.03 17.2687 mo
396.411 17.2687 397.53 18.3877 397.53 19.7687 cv
397.53 21.1497 396.411 22.2687 395.03 22.2687 cv
393.65 22.2687 392.53 21.1497 392.53 19.7687 cv
392.53 18.3877 393.65 17.2687 395.03 17.2687 cv
cp
395.03 16.2687 mo
393.098 16.2687 391.53 17.8357 391.53 19.7687 cv
391.53 21.7017 393.098 23.2687 395.03 23.2687 cv
396.963 23.2687 398.53 21.7017 398.53 19.7687 cv
398.53 17.8357 396.963 16.2687 395.03 16.2687 cv
f
395.272 17.2687 mo
396.653 17.2687 397.772 18.3877 397.772 19.7687 cv
397.772 21.1497 396.653 22.2687 395.272 22.2687 cv
393.891 22.2687 392.772 21.1497 392.772 19.7687 cv
392.772 18.3877 393.891 17.2687 395.272 17.2687 cv
cp
395.272 16.2687 mo
393.339 16.2687 391.772 17.8357 391.772 19.7687 cv
391.772 21.7017 393.339 23.2687 395.272 23.2687 cv
397.205 23.2687 398.772 21.7017 398.772 19.7687 cv
398.772 17.8357 397.205 16.2687 395.272 16.2687 cv
f
395.489 17.2687 mo
396.869 17.2687 397.988 18.3877 397.988 19.7687 cv
397.988 21.1497 396.869 22.2687 395.489 22.2687 cv
394.108 22.2687 392.989 21.1497 392.989 19.7687 cv
392.989 18.3877 394.108 17.2687 395.489 17.2687 cv
cp
395.489 16.2687 mo
393.556 16.2687 391.988 17.8357 391.988 19.7687 cv
391.988 21.7017 393.556 23.2687 395.489 23.2687 cv
397.421 23.2687 398.989 21.7017 398.989 19.7687 cv
398.989 17.8357 397.421 16.2687 395.489 16.2687 cv
f
395.701 17.2687 mo
397.082 17.2687 398.2 18.3877 398.2 19.7687 cv
398.2 21.1497 397.082 22.2687 395.701 22.2687 cv
394.32 22.2687 393.201 21.1497 393.201 19.7687 cv
393.201 18.3877 394.32 17.2687 395.701 17.2687 cv
cp
395.701 16.2687 mo
393.768 16.2687 392.2 17.8357 392.2 19.7687 cv
392.2 21.7017 393.768 23.2687 395.701 23.2687 cv
397.634 23.2687 399.201 21.7017 399.201 19.7687 cv
399.201 17.8357 397.634 16.2687 395.701 16.2687 cv
f
395.893 17.2687 mo
397.274 17.2687 398.393 18.3877 398.393 19.7687 cv
398.393 21.1497 397.274 22.2687 395.893 22.2687 cv
394.512 22.2687 393.393 21.1497 393.393 19.7687 cv
393.393 18.3877 394.512 17.2687 395.893 17.2687 cv
cp
395.893 16.2687 mo
393.96 16.2687 392.393 17.8357 392.393 19.7687 cv
392.393 21.7017 393.96 23.2687 395.893 23.2687 cv
397.826 23.2687 399.393 21.7017 399.393 19.7687 cv
399.393 17.8357 397.826 16.2687 395.893 16.2687 cv
f
396.059 17.2687 mo
397.44 17.2687 398.559 18.3877 398.559 19.7687 cv
398.559 21.1497 397.44 22.2687 396.059 22.2687 cv
394.678 22.2687 393.559 21.1497 393.559 19.7687 cv
393.559 18.3877 394.678 17.2687 396.059 17.2687 cv
cp
396.059 16.2687 mo
394.126 16.2687 392.559 17.8357 392.559 19.7687 cv
392.559 21.7017 394.126 23.2687 396.059 23.2687 cv
397.992 23.2687 399.559 21.7017 399.559 19.7687 cv
399.559 17.8357 397.992 16.2687 396.059 16.2687 cv
f
396.217 17.2687 mo
397.598 17.2687 398.717 18.3877 398.717 19.7687 cv
398.717 21.1497 397.598 22.2687 396.217 22.2687 cv
394.836 22.2687 393.717 21.1497 393.717 19.7687 cv
393.717 18.3877 394.836 17.2687 396.217 17.2687 cv
cp
396.217 16.2687 mo
394.284 16.2687 392.717 17.8357 392.717 19.7687 cv
392.717 21.7017 394.284 23.2687 396.217 23.2687 cv
398.15 23.2687 399.717 21.7017 399.717 19.7687 cv
399.717 17.8357 398.15 16.2687 396.217 16.2687 cv
f
396.362 17.2687 mo
397.743 17.2687 398.862 18.3877 398.862 19.7687 cv
398.862 21.1497 397.743 22.2687 396.362 22.2687 cv
394.982 22.2687 393.862 21.1497 393.862 19.7687 cv
393.862 18.3877 394.982 17.2687 396.362 17.2687 cv
cp
396.362 16.2687 mo
394.43 16.2687 392.862 17.8357 392.862 19.7687 cv
392.862 21.7017 394.43 23.2687 396.362 23.2687 cv
398.295 23.2687 399.862 21.7017 399.862 19.7687 cv
399.862 17.8357 398.295 16.2687 396.362 16.2687 cv
f
396.5 17.2687 mo
397.881 17.2687 399 18.3877 399 19.7687 cv
399 21.1497 397.881 22.2687 396.5 22.2687 cv
395.119 22.2687 394 21.1497 394 19.7687 cv
394 18.3877 395.119 17.2687 396.5 17.2687 cv
cp
396.5 16.2687 mo
394.567 16.2687 393 17.8357 393 19.7687 cv
393 21.7017 394.567 23.2687 396.5 23.2687 cv
398.433 23.2687 400 21.7017 400 19.7687 cv
400 17.8357 398.433 16.2687 396.5 16.2687 cv
f
396.624 17.2687 mo
398.005 17.2687 399.124 18.3877 399.124 19.7687 cv
399.124 21.1497 398.005 22.2687 396.624 22.2687 cv
395.243 22.2687 394.124 21.1497 394.124 19.7687 cv
394.124 18.3877 395.243 17.2687 396.624 17.2687 cv
cp
396.624 16.2687 mo
394.691 16.2687 393.124 17.8357 393.124 19.7687 cv
393.124 21.7017 394.691 23.2687 396.624 23.2687 cv
398.557 23.2687 400.124 21.7017 400.124 19.7687 cv
400.124 17.8357 398.557 16.2687 396.624 16.2687 cv
f
396.741 17.2687 mo
398.122 17.2687 399.241 18.3877 399.241 19.7687 cv
399.241 21.1497 398.122 22.2687 396.741 22.2687 cv
395.36 22.2687 394.241 21.1497 394.241 19.7687 cv
394.241 18.3877 395.36 17.2687 396.741 17.2687 cv
cp
396.741 16.2687 mo
394.808 16.2687 393.241 17.8357 393.241 19.7687 cv
393.241 21.7017 394.808 23.2687 396.741 23.2687 cv
398.674 23.2687 400.241 21.7017 400.241 19.7687 cv
400.241 17.8357 398.674 16.2687 396.741 16.2687 cv
f
396.85 17.2687 mo
398.231 17.2687 399.35 18.3877 399.35 19.7687 cv
399.35 21.1497 398.231 22.2687 396.85 22.2687 cv
395.469 22.2687 394.35 21.1497 394.35 19.7687 cv
394.35 18.3877 395.469 17.2687 396.85 17.2687 cv
cp
396.85 16.2687 mo
394.917 16.2687 393.35 17.8357 393.35 19.7687 cv
393.35 21.7017 394.917 23.2687 396.85 23.2687 cv
398.783 23.2687 400.35 21.7017 400.35 19.7687 cv
400.35 17.8357 398.783 16.2687 396.85 16.2687 cv
f
396.943 17.2687 mo
398.324 17.2687 399.443 18.3877 399.443 19.7687 cv
399.443 21.1497 398.324 22.2687 396.943 22.2687 cv
395.562 22.2687 394.443 21.1497 394.443 19.7687 cv
394.443 18.3877 395.562 17.2687 396.943 17.2687 cv
cp
396.943 16.2687 mo
395.01 16.2687 393.443 17.8357 393.443 19.7687 cv
393.443 21.7017 395.01 23.2687 396.943 23.2687 cv
398.876 23.2687 400.443 21.7017 400.443 19.7687 cv
400.443 17.8357 398.876 16.2687 396.943 16.2687 cv
f
397.032 17.2687 mo
398.412 17.2687 399.531 18.3877 399.531 19.7687 cv
399.531 21.1497 398.412 22.2687 397.032 22.2687 cv
395.651 22.2687 394.532 21.1497 394.532 19.7687 cv
394.532 18.3877 395.651 17.2687 397.032 17.2687 cv
cp
397.032 16.2687 mo
395.099 16.2687 393.531 17.8357 393.531 19.7687 cv
393.531 21.7017 395.099 23.2687 397.032 23.2687 cv
398.964 23.2687 400.532 21.7017 400.532 19.7687 cv
400.532 17.8357 398.964 16.2687 397.032 16.2687 cv
f
397.112 17.2687 mo
398.492 17.2687 399.611 18.3877 399.611 19.7687 cv
399.611 21.1497 398.492 22.2687 397.112 22.2687 cv
395.731 22.2687 394.612 21.1497 394.612 19.7687 cv
394.612 18.3877 395.731 17.2687 397.112 17.2687 cv
cp
397.112 16.2687 mo
395.179 16.2687 393.611 17.8357 393.611 19.7687 cv
393.611 21.7017 395.179 23.2687 397.112 23.2687 cv
399.044 23.2687 400.612 21.7017 400.612 19.7687 cv
400.612 17.8357 399.044 16.2687 397.112 16.2687 cv
f
397.178 17.2687 mo
398.559 17.2687 399.678 18.3877 399.678 19.7687 cv
399.678 21.1497 398.559 22.2687 397.178 22.2687 cv
395.798 22.2687 394.679 21.1497 394.679 19.7687 cv
394.679 18.3877 395.798 17.2687 397.178 17.2687 cv
cp
397.178 16.2687 mo
395.246 16.2687 393.678 17.8357 393.678 19.7687 cv
393.678 21.7017 395.246 23.2687 397.178 23.2687 cv
399.111 23.2687 400.679 21.7017 400.679 19.7687 cv
400.679 17.8357 399.111 16.2687 397.178 16.2687 cv
f
397.237 17.2687 mo
398.618 17.2687 399.737 18.3877 399.737 19.7687 cv
399.737 21.1497 398.618 22.2687 397.237 22.2687 cv
395.857 22.2687 394.737 21.1497 394.737 19.7687 cv
394.737 18.3877 395.857 17.2687 397.237 17.2687 cv
cp
397.237 16.2687 mo
395.305 16.2687 393.737 17.8357 393.737 19.7687 cv
393.737 21.7017 395.305 23.2687 397.237 23.2687 cv
399.17 23.2687 400.737 21.7017 400.737 19.7687 cv
400.737 17.8357 399.17 16.2687 397.237 16.2687 cv
f
397.3 17.2687 mo
398.681 17.2687 399.8 18.3877 399.8 19.7687 cv
399.8 21.1497 398.681 22.2687 397.3 22.2687 cv
395.919 22.2687 394.8 21.1497 394.8 19.7687 cv
394.8 18.3877 395.919 17.2687 397.3 17.2687 cv
cp
397.3 16.2687 mo
395.368 16.2687 393.8 17.8357 393.8 19.7687 cv
393.8 21.7017 395.368 23.2687 397.3 23.2687 cv
399.233 23.2687 400.8 21.7017 400.8 19.7687 cv
400.8 17.8357 399.233 16.2687 397.3 16.2687 cv
f
397.355 17.2687 mo
398.735 17.2687 399.854 18.3877 399.854 19.7687 cv
399.854 21.1497 398.735 22.2687 397.355 22.2687 cv
395.974 22.2687 394.855 21.1497 394.855 19.7687 cv
394.855 18.3877 395.974 17.2687 397.355 17.2687 cv
cp
397.355 16.2687 mo
395.422 16.2687 393.854 17.8357 393.854 19.7687 cv
393.854 21.7017 395.422 23.2687 397.355 23.2687 cv
399.287 23.2687 400.855 21.7017 400.855 19.7687 cv
400.855 17.8357 399.287 16.2687 397.355 16.2687 cv
f
397.402 17.2687 mo
398.782 17.2687 399.902 18.3877 399.902 19.7687 cv
399.902 21.1497 398.782 22.2687 397.402 22.2687 cv
396.021 22.2687 394.902 21.1497 394.902 19.7687 cv
394.902 18.3877 396.021 17.2687 397.402 17.2687 cv
cp
397.402 16.2687 mo
395.469 16.2687 393.902 17.8357 393.902 19.7687 cv
393.902 21.7017 395.469 23.2687 397.402 23.2687 cv
399.335 23.2687 400.902 21.7017 400.902 19.7687 cv
400.902 17.8357 399.335 16.2687 397.402 16.2687 cv
f
397.443 17.2687 mo
398.823 17.2687 399.942 18.3877 399.942 19.7687 cv
399.942 21.1497 398.823 22.2687 397.443 22.2687 cv
396.062 22.2687 394.943 21.1497 394.943 19.7687 cv
394.943 18.3877 396.062 17.2687 397.443 17.2687 cv
cp
397.443 16.2687 mo
395.51 16.2687 393.942 17.8357 393.942 19.7687 cv
393.942 21.7017 395.51 23.2687 397.443 23.2687 cv
399.375 23.2687 400.943 21.7017 400.943 19.7687 cv
400.943 17.8357 399.375 16.2687 397.443 16.2687 cv
f
397.482 17.2687 mo
398.863 17.2687 399.982 18.3877 399.982 19.7687 cv
399.982 21.1497 398.863 22.2687 397.482 22.2687 cv
396.102 22.2687 394.983 21.1497 394.983 19.7687 cv
394.983 18.3877 396.102 17.2687 397.482 17.2687 cv
cp
397.482 16.2687 mo
395.55 16.2687 393.982 17.8357 393.982 19.7687 cv
393.982 21.7017 395.55 23.2687 397.482 23.2687 cv
399.415 23.2687 400.983 21.7017 400.983 19.7687 cv
400.983 17.8357 399.415 16.2687 397.482 16.2687 cv
f
397.517 17.2687 mo
398.898 17.2687 400.016 18.3877 400.016 19.7687 cv
400.016 21.1497 398.898 22.2687 397.517 22.2687 cv
396.136 22.2687 395.017 21.1497 395.017 19.7687 cv
395.017 18.3877 396.136 17.2687 397.517 17.2687 cv
cp
397.517 16.2687 mo
395.584 16.2687 394.016 17.8357 394.016 19.7687 cv
394.016 21.7017 395.584 23.2687 397.517 23.2687 cv
399.45 23.2687 401.017 21.7017 401.017 19.7687 cv
401.017 17.8357 399.45 16.2687 397.517 16.2687 cv
f
397.549 17.2687 mo
398.93 17.2687 400.049 18.3877 400.049 19.7687 cv
400.049 21.1497 398.93 22.2687 397.549 22.2687 cv
396.168 22.2687 395.049 21.1497 395.049 19.7687 cv
395.049 18.3877 396.168 17.2687 397.549 17.2687 cv
cp
397.549 16.2687 mo
395.616 16.2687 394.049 17.8357 394.049 19.7687 cv
394.049 21.7017 395.616 23.2687 397.549 23.2687 cv
399.482 23.2687 401.049 21.7017 401.049 19.7687 cv
401.049 17.8357 399.482 16.2687 397.549 16.2687 cv
f
397.58 17.2687 mo
398.96 17.2687 400.079 18.3877 400.079 19.7687 cv
400.079 21.1497 398.96 22.2687 397.58 22.2687 cv
396.199 22.2687 395.08 21.1497 395.08 19.7687 cv
395.08 18.3877 396.199 17.2687 397.58 17.2687 cv
cp
397.58 16.2687 mo
395.647 16.2687 394.079 17.8357 394.079 19.7687 cv
394.079 21.7017 395.647 23.2687 397.58 23.2687 cv
399.512 23.2687 401.08 21.7017 401.08 19.7687 cv
401.08 17.8357 399.512 16.2687 397.58 16.2687 cv
f
397.608 17.2687 mo
398.988 17.2687 400.107 18.3877 400.107 19.7687 cv
400.107 21.1497 398.988 22.2687 397.608 22.2687 cv
396.227 22.2687 395.108 21.1497 395.108 19.7687 cv
395.108 18.3877 396.227 17.2687 397.608 17.2687 cv
cp
397.608 16.2687 mo
395.675 16.2687 394.107 17.8357 394.107 19.7687 cv
394.107 21.7017 395.675 23.2687 397.608 23.2687 cv
399.54 23.2687 401.108 21.7017 401.108 19.7687 cv
401.108 17.8357 399.54 16.2687 397.608 16.2687 cv
f
397.632 17.2687 mo
399.013 17.2687 400.132 18.3877 400.132 19.7687 cv
400.132 21.1497 399.013 22.2687 397.632 22.2687 cv
396.252 22.2687 395.133 21.1497 395.133 19.7687 cv
395.133 18.3877 396.252 17.2687 397.632 17.2687 cv
cp
397.632 16.2687 mo
395.7 16.2687 394.132 17.8357 394.132 19.7687 cv
394.132 21.7017 395.7 23.2687 397.632 23.2687 cv
399.565 23.2687 401.133 21.7017 401.133 19.7687 cv
401.133 17.8357 399.565 16.2687 397.632 16.2687 cv
f
397.655 17.2687 mo
399.035 17.2687 400.155 18.3877 400.155 19.7687 cv
400.155 21.1497 399.035 22.2687 397.655 22.2687 cv
396.274 22.2687 395.155 21.1497 395.155 19.7687 cv
395.155 18.3877 396.274 17.2687 397.655 17.2687 cv
cp
397.655 16.2687 mo
395.722 16.2687 394.155 17.8357 394.155 19.7687 cv
394.155 21.7017 395.722 23.2687 397.655 23.2687 cv
399.587 23.2687 401.155 21.7017 401.155 19.7687 cv
401.155 17.8357 399.587 16.2687 397.655 16.2687 cv
f
397.676 17.2687 mo
399.057 17.2687 400.176 18.3877 400.176 19.7687 cv
400.176 21.1497 399.057 22.2687 397.676 22.2687 cv
396.295 22.2687 395.176 21.1497 395.176 19.7687 cv
395.176 18.3877 396.295 17.2687 397.676 17.2687 cv
cp
397.676 16.2687 mo
395.743 16.2687 394.176 17.8357 394.176 19.7687 cv
394.176 21.7017 395.743 23.2687 397.676 23.2687 cv
399.609 23.2687 401.176 21.7017 401.176 19.7687 cv
401.176 17.8357 399.609 16.2687 397.676 16.2687 cv
f
397.694 17.2687 mo
399.075 17.2687 400.193 18.3877 400.193 19.7687 cv
400.193 21.1497 399.075 22.2687 397.694 22.2687 cv
396.313 22.2687 395.194 21.1497 395.194 19.7687 cv
395.194 18.3877 396.313 17.2687 397.694 17.2687 cv
cp
397.694 16.2687 mo
395.761 16.2687 394.193 17.8357 394.193 19.7687 cv
394.193 21.7017 395.761 23.2687 397.694 23.2687 cv
399.627 23.2687 401.194 21.7017 401.194 19.7687 cv
401.194 17.8357 399.627 16.2687 397.694 16.2687 cv
f
397.71 17.2687 mo
399.09 17.2687 400.209 18.3877 400.209 19.7687 cv
400.209 21.1497 399.09 22.2687 397.71 22.2687 cv
396.329 22.2687 395.21 21.1497 395.21 19.7687 cv
395.21 18.3877 396.329 17.2687 397.71 17.2687 cv
cp
397.71 16.2687 mo
395.777 16.2687 394.209 17.8357 394.209 19.7687 cv
394.209 21.7017 395.777 23.2687 397.71 23.2687 cv
399.642 23.2687 401.21 21.7017 401.21 19.7687 cv
401.21 17.8357 399.642 16.2687 397.71 16.2687 cv
f
397.723 17.2687 mo
399.104 17.2687 400.223 18.3877 400.223 19.7687 cv
400.223 21.1497 399.104 22.2687 397.723 22.2687 cv
396.342 22.2687 395.223 21.1497 395.223 19.7687 cv
395.223 18.3877 396.342 17.2687 397.723 17.2687 cv
cp
397.723 16.2687 mo
395.79 16.2687 394.223 17.8357 394.223 19.7687 cv
394.223 21.7017 395.79 23.2687 397.723 23.2687 cv
399.656 23.2687 401.223 21.7017 401.223 19.7687 cv
401.223 17.8357 399.656 16.2687 397.723 16.2687 cv
f
397.737 17.2687 mo
399.118 17.2687 400.237 18.3877 400.237 19.7687 cv
400.237 21.1497 399.118 22.2687 397.737 22.2687 cv
396.357 22.2687 395.237 21.1497 395.237 19.7687 cv
395.237 18.3877 396.357 17.2687 397.737 17.2687 cv
cp
397.737 16.2687 mo
395.805 16.2687 394.237 17.8357 394.237 19.7687 cv
394.237 21.7017 395.805 23.2687 397.737 23.2687 cv
399.67 23.2687 401.237 21.7017 401.237 19.7687 cv
401.237 17.8357 399.67 16.2687 397.737 16.2687 cv
f
397.75 17.2687 mo
399.13 17.2687 400.249 18.3877 400.249 19.7687 cv
400.249 21.1497 399.13 22.2687 397.75 22.2687 cv
396.369 22.2687 395.25 21.1497 395.25 19.7687 cv
395.25 18.3877 396.369 17.2687 397.75 17.2687 cv
cp
397.75 16.2687 mo
395.817 16.2687 394.249 17.8357 394.249 19.7687 cv
394.249 21.7017 395.817 23.2687 397.75 23.2687 cv
399.682 23.2687 401.25 21.7017 401.25 19.7687 cv
401.25 17.8357 399.682 16.2687 397.75 16.2687 cv
f
397.76 17.2687 mo
399.14 17.2687 400.259 18.3877 400.259 19.7687 cv
400.259 21.1497 399.14 22.2687 397.76 22.2687 cv
396.379 22.2687 395.26 21.1497 395.26 19.7687 cv
395.26 18.3877 396.379 17.2687 397.76 17.2687 cv
cp
397.76 16.2687 mo
395.827 16.2687 394.259 17.8357 394.259 19.7687 cv
394.259 21.7017 395.827 23.2687 397.76 23.2687 cv
399.692 23.2687 401.26 21.7017 401.26 19.7687 cv
401.26 17.8357 399.692 16.2687 397.76 16.2687 cv
f
397.768 17.2687 mo
399.148 17.2687 400.268 18.3877 400.268 19.7687 cv
400.268 21.1497 399.148 22.2687 397.768 22.2687 cv
396.387 22.2687 395.268 21.1497 395.268 19.7687 cv
395.268 18.3877 396.387 17.2687 397.768 17.2687 cv
cp
397.768 16.2687 mo
395.835 16.2687 394.268 17.8357 394.268 19.7687 cv
394.268 21.7017 395.835 23.2687 397.768 23.2687 cv
399.7 23.2687 401.268 21.7017 401.268 19.7687 cv
401.268 17.8357 399.7 16.2687 397.768 16.2687 cv
f
397.777 17.2687 mo
399.157 17.2687 400.277 18.3877 400.277 19.7687 cv
400.277 21.1497 399.157 22.2687 397.777 22.2687 cv
396.396 22.2687 395.277 21.1497 395.277 19.7687 cv
395.277 18.3877 396.396 17.2687 397.777 17.2687 cv
cp
397.777 16.2687 mo
395.844 16.2687 394.277 17.8357 394.277 19.7687 cv
394.277 21.7017 395.844 23.2687 397.777 23.2687 cv
399.709 23.2687 401.277 21.7017 401.277 19.7687 cv
401.277 17.8357 399.709 16.2687 397.777 16.2687 cv
f
397.784 17.2687 mo
399.165 17.2687 400.284 18.3877 400.284 19.7687 cv
400.284 21.1497 399.165 22.2687 397.784 22.2687 cv
396.403 22.2687 395.284 21.1497 395.284 19.7687 cv
395.284 18.3877 396.403 17.2687 397.784 17.2687 cv
cp
397.784 16.2687 mo
395.851 16.2687 394.284 17.8357 394.284 19.7687 cv
394.284 21.7017 395.851 23.2687 397.784 23.2687 cv
399.717 23.2687 401.284 21.7017 401.284 19.7687 cv
401.284 17.8357 399.717 16.2687 397.784 16.2687 cv
f
397.789 17.2687 mo
399.17 17.2687 400.289 18.3877 400.289 19.7687 cv
400.289 21.1497 399.17 22.2687 397.789 22.2687 cv
396.409 22.2687 395.289 21.1497 395.289 19.7687 cv
395.289 18.3877 396.409 17.2687 397.789 17.2687 cv
cp
397.789 16.2687 mo
395.857 16.2687 394.289 17.8357 394.289 19.7687 cv
394.289 21.7017 395.857 23.2687 397.789 23.2687 cv
399.722 23.2687 401.289 21.7017 401.289 19.7687 cv
401.289 17.8357 399.722 16.2687 397.789 16.2687 cv
f
397.795 17.2687 mo
399.176 17.2687 400.294 18.3877 400.294 19.7687 cv
400.294 21.1497 399.176 22.2687 397.795 22.2687 cv
396.414 22.2687 395.295 21.1497 395.295 19.7687 cv
395.295 18.3877 396.414 17.2687 397.795 17.2687 cv
cp
397.795 16.2687 mo
395.862 16.2687 394.294 17.8357 394.294 19.7687 cv
394.294 21.7017 395.862 23.2687 397.795 23.2687 cv
399.728 23.2687 401.295 21.7017 401.295 19.7687 cv
401.295 17.8357 399.728 16.2687 397.795 16.2687 cv
f
397.8 17.2687 mo
399.18 17.2687 400.3 18.3877 400.3 19.7687 cv
400.3 21.1497 399.18 22.2687 397.8 22.2687 cv
396.419 22.2687 395.3 21.1497 395.3 19.7687 cv
395.3 18.3877 396.419 17.2687 397.8 17.2687 cv
cp
397.8 16.2687 mo
395.867 16.2687 394.3 17.8357 394.3 19.7687 cv
394.3 21.7017 395.867 23.2687 397.8 23.2687 cv
399.732 23.2687 401.3 21.7017 401.3 19.7687 cv
401.3 17.8357 399.732 16.2687 397.8 16.2687 cv
f
397.804 17.2687 mo
399.185 17.2687 400.304 18.3877 400.304 19.7687 cv
400.304 21.1497 399.185 22.2687 397.804 22.2687 cv
396.423 22.2687 395.305 21.1497 395.305 19.7687 cv
395.305 18.3877 396.423 17.2687 397.804 17.2687 cv
cp
397.804 16.2687 mo
395.871 16.2687 394.304 17.8357 394.304 19.7687 cv
394.304 21.7017 395.871 23.2687 397.804 23.2687 cv
399.737 23.2687 401.305 21.7017 401.305 19.7687 cv
401.305 17.8357 399.737 16.2687 397.804 16.2687 cv
f
397.809 17.2687 mo
399.189 17.2687 400.308 18.3877 400.308 19.7687 cv
400.308 21.1497 399.189 22.2687 397.809 22.2687 cv
396.428 22.2687 395.309 21.1497 395.309 19.7687 cv
395.309 18.3877 396.428 17.2687 397.809 17.2687 cv
cp
397.809 16.2687 mo
395.876 16.2687 394.308 17.8357 394.308 19.7687 cv
394.308 21.7017 395.876 23.2687 397.809 23.2687 cv
399.741 23.2687 401.309 21.7017 401.309 19.7687 cv
401.309 17.8357 399.741 16.2687 397.809 16.2687 cv
f
397.813 17.2687 mo
399.194 17.2687 400.313 18.3877 400.313 19.7687 cv
400.313 21.1497 399.194 22.2687 397.813 22.2687 cv
396.432 22.2687 395.313 21.1497 395.313 19.7687 cv
395.313 18.3877 396.432 17.2687 397.813 17.2687 cv
cp
397.813 16.2687 mo
395.88 16.2687 394.313 17.8357 394.313 19.7687 cv
394.313 21.7017 395.88 23.2687 397.813 23.2687 cv
399.746 23.2687 401.313 21.7017 401.313 19.7687 cv
401.313 17.8357 399.746 16.2687 397.813 16.2687 cv
f
397.817 17.2687 mo
399.198 17.2687 400.317 18.3877 400.317 19.7687 cv
400.317 21.1497 399.198 22.2687 397.817 22.2687 cv
396.436 22.2687 395.317 21.1497 395.317 19.7687 cv
395.317 18.3877 396.436 17.2687 397.817 17.2687 cv
cp
397.817 16.2687 mo
395.884 16.2687 394.317 17.8357 394.317 19.7687 cv
394.317 21.7017 395.884 23.2687 397.817 23.2687 cv
399.75 23.2687 401.317 21.7017 401.317 19.7687 cv
401.317 17.8357 399.75 16.2687 397.817 16.2687 cv
f
397.82 17.2687 mo
399.201 17.2687 400.32 18.3877 400.32 19.7687 cv
400.32 21.1497 399.201 22.2687 397.82 22.2687 cv
396.439 22.2687 395.321 21.1497 395.321 19.7687 cv
395.321 18.3877 396.439 17.2687 397.82 17.2687 cv
cp
397.82 16.2687 mo
395.887 16.2687 394.32 17.8357 394.32 19.7687 cv
394.32 21.7017 395.887 23.2687 397.82 23.2687 cv
399.753 23.2687 401.321 21.7017 401.321 19.7687 cv
401.321 17.8357 399.753 16.2687 397.82 16.2687 cv
f
397.824 17.2687 mo
399.205 17.2687 400.324 18.3877 400.324 19.7687 cv
400.324 21.1497 399.205 22.2687 397.824 22.2687 cv
396.443 22.2687 395.324 21.1497 395.324 19.7687 cv
395.324 18.3877 396.443 17.2687 397.824 17.2687 cv
cp
397.824 16.2687 mo
395.891 16.2687 394.324 17.8357 394.324 19.7687 cv
394.324 21.7017 395.891 23.2687 397.824 23.2687 cv
399.757 23.2687 401.324 21.7017 401.324 19.7687 cv
401.324 17.8357 399.757 16.2687 397.824 16.2687 cv
f
397.826 17.2687 mo
399.207 17.2687 400.326 18.3877 400.326 19.7687 cv
400.326 21.1497 399.207 22.2687 397.826 22.2687 cv
396.445 22.2687 395.326 21.1497 395.326 19.7687 cv
395.326 18.3877 396.445 17.2687 397.826 17.2687 cv
cp
397.826 16.2687 mo
395.893 16.2687 394.326 17.8357 394.326 19.7687 cv
394.326 21.7017 395.893 23.2687 397.826 23.2687 cv
399.759 23.2687 401.326 21.7017 401.326 19.7687 cv
401.326 17.8357 399.759 16.2687 397.826 16.2687 cv
f
397.827 17.2687 mo
399.208 17.2687 400.327 18.3877 400.327 19.7687 cv
400.327 21.1497 399.208 22.2687 397.827 22.2687 cv
396.446 22.2687 395.328 21.1497 395.328 19.7687 cv
395.328 18.3877 396.446 17.2687 397.827 17.2687 cv
cp
397.827 16.2687 mo
395.894 16.2687 394.327 17.8357 394.327 19.7687 cv
394.327 21.7017 395.894 23.2687 397.827 23.2687 cv
399.76 23.2687 401.328 21.7017 401.328 19.7687 cv
401.328 17.8357 399.76 16.2687 397.827 16.2687 cv
f
397.829 17.2687 mo
399.21 17.2687 400.328 18.3877 400.328 19.7687 cv
400.328 21.1497 399.21 22.2687 397.829 22.2687 cv
396.448 22.2687 395.329 21.1497 395.329 19.7687 cv
395.329 18.3877 396.448 17.2687 397.829 17.2687 cv
cp
397.829 16.2687 mo
395.896 16.2687 394.328 17.8357 394.328 19.7687 cv
394.328 21.7017 395.896 23.2687 397.829 23.2687 cv
399.762 23.2687 401.329 21.7017 401.329 19.7687 cv
401.329 17.8357 399.762 16.2687 397.829 16.2687 cv
f
397.83 17.2687 mo
399.211 17.2687 400.33 18.3877 400.33 19.7687 cv
400.33 21.1497 399.211 22.2687 397.83 22.2687 cv
396.45 22.2687 395.331 21.1497 395.331 19.7687 cv
395.331 18.3877 396.45 17.2687 397.83 17.2687 cv
cp
397.83 16.2687 mo
395.898 16.2687 394.33 17.8357 394.33 19.7687 cv
394.33 21.7017 395.898 23.2687 397.83 23.2687 cv
399.763 23.2687 401.331 21.7017 401.331 19.7687 cv
401.331 17.8357 399.763 16.2687 397.83 16.2687 cv
f
397.832 17.2687 mo
399.212 17.2687 400.331 18.3877 400.331 19.7687 cv
400.331 21.1497 399.212 22.2687 397.832 22.2687 cv
396.451 22.2687 395.332 21.1497 395.332 19.7687 cv
395.332 18.3877 396.451 17.2687 397.832 17.2687 cv
cp
397.832 16.2687 mo
395.899 16.2687 394.331 17.8357 394.331 19.7687 cv
394.331 21.7017 395.899 23.2687 397.832 23.2687 cv
399.764 23.2687 401.332 21.7017 401.332 19.7687 cv
401.332 17.8357 399.764 16.2687 397.832 16.2687 cv
f
397.832 17.2687 mo
399.212 17.2687 400.332 18.3877 400.332 19.7687 cv
400.332 21.1497 399.212 22.2687 397.832 22.2687 cv
396.451 22.2687 395.332 21.1497 395.332 19.7687 cv
395.332 18.3877 396.451 17.2687 397.832 17.2687 cv
cp
397.832 16.2687 mo
395.899 16.2687 394.332 17.8357 394.332 19.7687 cv
394.332 21.7017 395.899 23.2687 397.832 23.2687 cv
399.765 23.2687 401.332 21.7017 401.332 19.7687 cv
401.332 17.8357 399.765 16.2687 397.832 16.2687 cv
f
397.833 17.2687 mo
399.214 17.2687 400.332 18.3877 400.332 19.7687 cv
400.332 21.1497 399.214 22.2687 397.833 22.2687 cv
396.452 22.2687 395.333 21.1497 395.333 19.7687 cv
395.333 18.3877 396.452 17.2687 397.833 17.2687 cv
cp
397.833 16.2687 mo
395.9 16.2687 394.332 17.8357 394.332 19.7687 cv
394.332 21.7017 395.9 23.2687 397.833 23.2687 cv
399.766 23.2687 401.333 21.7017 401.333 19.7687 cv
401.333 17.8357 399.766 16.2687 397.833 16.2687 cv
f
397.834 17.2687 mo
399.214 17.2687 400.333 18.3877 400.333 19.7687 cv
400.333 21.1497 399.214 22.2687 397.834 22.2687 cv
396.453 22.2687 395.334 21.1497 395.334 19.7687 cv
395.334 18.3877 396.453 17.2687 397.834 17.2687 cv
cp
397.834 16.2687 mo
395.901 16.2687 394.333 17.8357 394.333 19.7687 cv
394.333 21.7017 395.901 23.2687 397.834 23.2687 cv
399.766 23.2687 401.334 21.7017 401.334 19.7687 cv
401.334 17.8357 399.766 16.2687 397.834 16.2687 cv
f
397.834 17.2687 mo
399.215 17.2687 400.334 18.3877 400.334 19.7687 cv
400.334 21.1497 399.215 22.2687 397.834 22.2687 cv
396.453 22.2687 395.334 21.1497 395.334 19.7687 cv
395.334 18.3877 396.453 17.2687 397.834 17.2687 cv
cp
397.834 16.2687 mo
395.902 16.2687 394.334 17.8357 394.334 19.7687 cv
394.334 21.7017 395.902 23.2687 397.834 23.2687 cv
399.767 23.2687 401.334 21.7017 401.334 19.7687 cv
401.334 17.8357 399.767 16.2687 397.834 16.2687 cv
f
397.834 17.2687 mo
399.215 17.2687 400.334 18.3877 400.334 19.7687 cv
400.334 21.1497 399.215 22.2687 397.834 22.2687 cv
396.453 22.2687 395.335 21.1497 395.335 19.7687 cv
395.335 18.3877 396.453 17.2687 397.834 17.2687 cv
cp
397.834 16.2687 mo
395.902 16.2687 394.334 17.8357 394.334 19.7687 cv
394.334 21.7017 395.902 23.2687 397.834 23.2687 cv
399.767 23.2687 401.335 21.7017 401.335 19.7687 cv
401.335 17.8357 399.767 16.2687 397.834 16.2687 cv
f
397.835 17.2687 mo
399.216 17.2687 400.334 18.3877 400.334 19.7687 cv
400.334 21.1497 399.216 22.2687 397.835 22.2687 cv
396.454 22.2687 395.335 21.1497 395.335 19.7687 cv
395.335 18.3877 396.454 17.2687 397.835 17.2687 cv
cp
397.835 16.2687 mo
395.902 16.2687 394.334 17.8357 394.334 19.7687 cv
394.334 21.7017 395.902 23.2687 397.835 23.2687 cv
399.768 23.2687 401.335 21.7017 401.335 19.7687 cv
401.335 17.8357 399.768 16.2687 397.835 16.2687 cv
f
397.835 17.2687 mo
399.216 17.2687 400.335 18.3877 400.335 19.7687 cv
400.335 21.1497 399.216 22.2687 397.835 22.2687 cv
396.455 22.2687 395.335 21.1497 395.335 19.7687 cv
395.335 18.3877 396.455 17.2687 397.835 17.2687 cv
cp
397.835 16.2687 mo
395.903 16.2687 394.335 17.8357 394.335 19.7687 cv
394.335 21.7017 395.903 23.2687 397.835 23.2687 cv
399.768 23.2687 401.335 21.7017 401.335 19.7687 cv
401.335 17.8357 399.768 16.2687 397.835 16.2687 cv
f
397.836 17.2687 mo
399.216 17.2687 400.335 18.3877 400.335 19.7687 cv
400.335 21.1497 399.216 22.2687 397.836 22.2687 cv
396.455 22.2687 395.336 21.1497 395.336 19.7687 cv
395.336 18.3877 396.455 17.2687 397.836 17.2687 cv
cp
397.836 16.2687 mo
395.903 16.2687 394.335 17.8357 394.335 19.7687 cv
394.335 21.7017 395.903 23.2687 397.836 23.2687 cv
399.769 23.2687 401.336 21.7017 401.336 19.7687 cv
401.336 17.8357 399.769 16.2687 397.836 16.2687 cv
f
397.836 17.2687 mo
399.217 17.2687 400.336 18.3877 400.336 19.7687 cv
400.336 21.1497 399.217 22.2687 397.836 22.2687 cv
396.455 22.2687 395.337 21.1497 395.337 19.7687 cv
395.337 18.3877 396.455 17.2687 397.836 17.2687 cv
cp
397.836 16.2687 mo
395.903 16.2687 394.336 17.8357 394.336 19.7687 cv
394.336 21.7017 395.903 23.2687 397.836 23.2687 cv
399.769 23.2687 401.337 21.7017 401.337 19.7687 cv
401.337 17.8357 399.769 16.2687 397.836 16.2687 cv
f
397.837 17.2687 mo
399.218 17.2687 400.336 18.3877 400.336 19.7687 cv
400.336 21.1497 399.218 22.2687 397.837 22.2687 cv
396.456 22.2687 395.337 21.1497 395.337 19.7687 cv
395.337 18.3877 396.456 17.2687 397.837 17.2687 cv
cp
397.837 16.2687 mo
395.904 16.2687 394.336 17.8357 394.336 19.7687 cv
394.336 21.7017 395.904 23.2687 397.837 23.2687 cv
399.769 23.2687 401.337 21.7017 401.337 19.7687 cv
401.337 17.8357 399.769 16.2687 397.837 16.2687 cv
f
397.837 17.2687 mo
399.218 17.2687 400.337 18.3877 400.337 19.7687 cv
400.337 21.1497 399.218 22.2687 397.837 22.2687 cv
396.456 22.2687 395.337 21.1497 395.337 19.7687 cv
395.337 18.3877 396.456 17.2687 397.837 17.2687 cv
cp
397.837 16.2687 mo
395.904 16.2687 394.337 17.8357 394.337 19.7687 cv
394.337 21.7017 395.904 23.2687 397.837 23.2687 cv
399.77 23.2687 401.337 21.7017 401.337 19.7687 cv
401.337 17.8357 399.77 16.2687 397.837 16.2687 cv
f
397.837 17.2687 mo
399.218 17.2687 400.337 18.3877 400.337 19.7687 cv
400.337 21.1497 399.218 22.2687 397.837 22.2687 cv
396.457 22.2687 395.337 21.1497 395.337 19.7687 cv
395.337 18.3877 396.457 17.2687 397.837 17.2687 cv
cp
397.837 16.2687 mo
395.905 16.2687 394.337 17.8357 394.337 19.7687 cv
394.337 21.7017 395.905 23.2687 397.837 23.2687 cv
399.77 23.2687 401.337 21.7017 401.337 19.7687 cv
401.337 17.8357 399.77 16.2687 397.837 16.2687 cv
f
397.837 17.2687 mo
399.218 17.2687 400.337 18.3877 400.337 19.7687 cv
400.337 21.1497 399.218 22.2687 397.837 22.2687 cv
396.457 22.2687 395.338 21.1497 395.338 19.7687 cv
395.338 18.3877 396.457 17.2687 397.837 17.2687 cv
cp
397.837 16.2687 mo
395.905 16.2687 394.337 17.8357 394.337 19.7687 cv
394.337 21.7017 395.905 23.2687 397.837 23.2687 cv
399.77 23.2687 401.338 21.7017 401.338 19.7687 cv
401.338 17.8357 399.77 16.2687 397.837 16.2687 cv
f
397.838 17.2687 mo
399.219 17.2687 400.337 18.3877 400.337 19.7687 cv
400.337 21.1497 399.219 22.2687 397.838 22.2687 cv
396.457 22.2687 395.338 21.1497 395.338 19.7687 cv
395.338 18.3877 396.457 17.2687 397.838 17.2687 cv
cp
397.838 16.2687 mo
395.905 16.2687 394.337 17.8357 394.337 19.7687 cv
394.337 21.7017 395.905 23.2687 397.838 23.2687 cv
399.771 23.2687 401.338 21.7017 401.338 19.7687 cv
401.338 17.8357 399.771 16.2687 397.838 16.2687 cv
f
397.838 17.2687 mo
399.219 17.2687 400.337 18.3877 400.337 19.7687 cv
400.337 21.1497 399.219 22.2687 397.838 22.2687 cv
396.457 22.2687 395.338 21.1497 395.338 19.7687 cv
395.338 18.3877 396.457 17.2687 397.838 17.2687 cv
cp
397.838 16.2687 mo
395.905 16.2687 394.337 17.8357 394.337 19.7687 cv
394.337 21.7017 395.905 23.2687 397.838 23.2687 cv
399.771 23.2687 401.338 21.7017 401.338 19.7687 cv
401.338 17.8357 399.771 16.2687 397.838 16.2687 cv
f
397.838 17.2687 mo
399.219 17.2687 400.338 18.3877 400.338 19.7687 cv
400.338 21.1497 399.219 22.2687 397.838 22.2687 cv
396.457 22.2687 395.338 21.1497 395.338 19.7687 cv
395.338 18.3877 396.457 17.2687 397.838 17.2687 cv
cp
397.838 16.2687 mo
395.905 16.2687 394.338 17.8357 394.338 19.7687 cv
394.338 21.7017 395.905 23.2687 397.838 23.2687 cv
399.771 23.2687 401.338 21.7017 401.338 19.7687 cv
401.338 17.8357 399.771 16.2687 397.838 16.2687 cv
f
397.838 17.2687 mo
399.219 17.2687 400.338 18.3877 400.338 19.7687 cv
400.338 21.1497 399.219 22.2687 397.838 22.2687 cv
396.457 22.2687 395.338 21.1497 395.338 19.7687 cv
395.338 18.3877 396.457 17.2687 397.838 17.2687 cv
cp
397.838 16.2687 mo
395.905 16.2687 394.338 17.8357 394.338 19.7687 cv
394.338 21.7017 395.905 23.2687 397.838 23.2687 cv
399.771 23.2687 401.338 21.7017 401.338 19.7687 cv
401.338 17.8357 399.771 16.2687 397.838 16.2687 cv
f
397.838 17.2687 mo
399.219 17.2687 400.338 18.3877 400.338 19.7687 cv
400.338 21.1497 399.219 22.2687 397.838 22.2687 cv
396.457 22.2687 395.338 21.1497 395.338 19.7687 cv
395.338 18.3877 396.457 17.2687 397.838 17.2687 cv
cp
397.838 16.2687 mo
395.905 16.2687 394.338 17.8357 394.338 19.7687 cv
394.338 21.7017 395.905 23.2687 397.838 23.2687 cv
399.771 23.2687 401.338 21.7017 401.338 19.7687 cv
401.338 17.8357 399.771 16.2687 397.838 16.2687 cv
f
397.838 17.2687 mo
399.219 17.2687 400.338 18.3877 400.338 19.7687 cv
400.338 21.1497 399.219 22.2687 397.838 22.2687 cv
396.457 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.457 17.2687 397.838 17.2687 cv
cp
397.838 16.2687 mo
395.905 16.2687 394.338 17.8357 394.338 19.7687 cv
394.338 21.7017 395.905 23.2687 397.838 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.838 16.2687 cv
f
397.838 17.2687 mo
399.219 17.2687 400.338 18.3877 400.338 19.7687 cv
400.338 21.1497 399.219 22.2687 397.838 22.2687 cv
396.457 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.457 17.2687 397.838 17.2687 cv
cp
397.838 16.2687 mo
395.905 16.2687 394.338 17.8357 394.338 19.7687 cv
394.338 21.7017 395.905 23.2687 397.838 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.838 16.2687 cv
f
397.838 17.2687 mo
399.219 17.2687 400.338 18.3877 400.338 19.7687 cv
400.338 21.1497 399.219 22.2687 397.838 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.838 17.2687 cv
cp
397.838 16.2687 mo
395.906 16.2687 394.338 17.8357 394.338 19.7687 cv
394.338 21.7017 395.906 23.2687 397.838 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.838 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.338 18.3877 400.338 19.7687 cv
400.338 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.338 17.8357 394.338 19.7687 cv
394.338 21.7017 395.906 23.2687 397.839 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.22 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.22 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.772 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.772 16.2687 397.839 16.2687 cv
f
49.0475 84.4737 mo
65.6151 83.7677 li
65.6151 83.3287 li
65.6151 82.8907 li
77.6452 82.4527 li
77.6452 81.1377 li
77.6452 80.2607 li
77.6452 78.9457 li
77.6452 78.5077 li
77.6452 78.0687 li
77.6452 77.6307 li
86.1811 77.6307 li
92.8009 76.7537 li
92.8009 76.3157 li
98.2109 76.3157 li
98.2109 75.8767 li
98.2109 75.4387 li
102.784 75.0007 li
104.832 75.0007 li
108.545 75.0007 li
108.545 74.1237 li
108.545 73.6857 li
108.545 73.2477 li
108.545 72.8087 li
108.545 71.9317 li
117.514 71.0547 li
117.514 70.6167 li
119.988 70.1787 li
122.272 69.7407 li
122.272 69.3017 li
124.391 69.3017 li
126.371 68.4257 li
128.225 68.4257 li
129.111 68.4257 li
129.111 67.9867 li
132.411 67.5487 li
135.38 67.1097 li
135.38 66.6727 li
136.761 66.6727 li
138.08 66.6727 li
139.343 66.2337 li
141.141 65.7957 li
141.141 65.3567 li
141.141 64.9187 li
141.141 63.6027 li
142.282 63.6027 li
143.381 61.4117 li
146.454 60.5347 li
147.411 60.5347 li
150.537 60.5347 li
151.373 60.5347 li
152.185 60.5347 li
154.126 60.0967 li
154.868 59.6577 li
155.591 59.6577 li
156.988 59.6577 li
158.321 59.6577 li
158.645 59.2207 li
159.284 58.7817 li
159.908 58.7817 li
160.821 58.7817 li
161.996 58.3437 li
162.567 58.3437 li
163.127 57.4667 li
164.216 57.4667 li
165.778 57.4667 li
166.775 57.4667 li
167.261 57.4667 li
167.977 57.4667 li
168.444 56.5897 li
168.904 56.1517 li
169.357 55.2757 li
170.243 55.2757 li
171.938 54.8367 li
172.751 54.8367 li
173.347 54.8367 li
174.503 54.8367 li
175.797 54.8367 li
177.553 53.9597 li
179.211 53.9597 li
179.532 53.9597 li
180.782 52.6447 li
181.833 52.6447 li
182.849 52.6447 li
183.693 52.6447 li
185.443 52.2057 li
186.596 52.2057 li
187.095 51.7687 li
188.425 51.3297 li
190.035 51.3297 li
190.479 51.3297 li
191.455 51.3297 li
192.089 51.3297 li
192.709 50.4537 li
194.206 50.4537 li
194.688 50.4537 li
195.351 50.4537 li
195.815 49.5767 li
196.723 49.1377 li
197.516 49.1377 li
198.289 49.1377 li
199.125 48.2617 li
199.696 48.2617 li
200.336 47.8237 li
200.807 47.8237 li
201.803 46.9467 li
202.399 46.9467 li
203.557 46.9467 li
204.328 46.9467 li
205.414 46.0697 li
206.009 46.0697 li
207.162 46.0697 li
208.514 46.0697 li
209.401 46.0697 li
210.376 46.0697 li
211.1 46.0697 li
212.021 46.0697 li
213.326 45.6307 li
214.232 45.6307 li
214.917 45.6307 li
215.635 45.6307 li
216.838 45.6307 li
217.154 45.1927 li
218.039 45.1927 li
219.276 45.1927 li
220.059 45.1927 li
220.703 44.7547 li
221.683 44.3167 li
222.368 43.8777 li
222.964 43.4397 li
224.052 43.4397 li
224.685 43.0017 li
225.509 42.5627 li
226.41 41.6857 li
227.348 41.6857 li
228.195 41.6857 li
228.869 41.6857 li
229.703 41.6857 li
230.941 41.6857 li
231.417 41.6857 li
232.427 41.6857 li
233.61 41.6857 li
234.298 41.6857 li
235.24 41.6857 li
235.987 41.6857 li
236.947 41.2477 li
237.898 41.2477 li
238.778 41.2477 li
239.569 41.2477 li
240.091 41.2477 li
240.908 40.8097 li
241.958 40.8097 li
242.859 40.3707 li
243.512 40.3707 li
244.187 39.4947 li
244.848 39.4947 li
245.528 39.4947 li
246.16 39.4947 li
247.14 39.4947 li
248.199 39.4947 li
248.977 39.4947 li
249.585 39.4947 li
250.445 39.4947 li
251.238 39.0557 li
251.997 39.0557 li
253.06 38.6177 li
253.734 38.6177 li
254.381 38.6177 li
255.014 38.1797 li
255.623 38.1797 li
256.374 38.1797 li
256.966 38.1797 li
257.605 38.1797 li
258.286 37.7407 li
258.83 37.7407 li
259.635 37.7407 li
260.26 37.7407 li
261.059 37.3027 li
261.875 37.3027 li
262.553 37.3027 li
263.131 37.3027 li
263.771 37.3027 li
264.381 37.3027 li
265.094 37.3027 li
265.825 37.3027 li
266.36 37.3027 li
267.07 36.8637 li
267.893 36.8637 li
268.448 36.8637 li
269.141 36.4257 li
269.932 36.4257 li
270.614 35.9877 li
271.475 35.5497 li
272.185 35.5497 li
272.798 35.1107 li
273.539 34.6727 li
274.241 34.6727 li
274.883 34.6727 li
275.618 34.2337 li
276.31 34.2337 li
277.023 34.2337 li
277.742 34.2337 li
278.547 34.2337 li
279.325 34.2337 li
280.018 33.7957 li
280.748 33.7957 li
281.485 33.7957 li
282.08 33.7957 li
282.782 33.7957 li
283.356 33.7957 li
284.042 33.3577 li
284.523 32.9187 li
285.092 32.4807 li
285.82 32.4807 li
286.487 32.4807 li
287.203 32.4807 li
287.764 32.4807 li
288.365 32.4807 li
288.958 32.4807 li
289.598 32.4807 li
290.177 32.4807 li
290.732 32.4807 li
291.268 32.0427 li
291.896 32.0427 li
292.505 32.0427 li
293.204 32.0427 li
293.865 32.0427 li
294.337 32.0427 li
294.911 32.0427 li
295.48 32.0427 li
296.08 32.0427 li
296.714 32.0427 li
297.371 32.0427 li
297.933 32.0427 li
298.413 32.0427 li
299.01 32.0427 li
299.646 31.6047 li
300.209 31.6047 li
300.742 31.1657 li
301.339 31.1657 li
301.892 31.1657 li
302.409 31.1657 li
303.053 31.1657 li
303.578 31.1657 li
304.095 31.1657 li
304.615 31.1657 li
305.152 31.1657 li
305.656 31.1657 li
306.208 31.1657 li
306.796 30.7277 li
307.344 30.7277 li
307.885 30.7277 li
308.461 30.7277 li
309.055 30.7277 li
309.509 30.7277 li
310.02 30.7277 li
310.557 30.7277 li
311.071 30.7277 li
311.582 30.7277 li
312.13 30.7277 li
312.594 30.7277 li
313.148 30.2887 li
313.642 30.2887 li
314.121 30.2887 li
314.628 30.2887 li
315.157 30.2887 li
315.628 30.2887 li
316.198 29.8507 li
316.703 29.4117 li
317.189 29.4117 li
317.699 29.4117 li
318.195 29.4117 li
318.675 29.4117 li
319.202 29.4117 li
319.731 29.4117 li
320.209 29.4117 li
320.693 29.4117 li
321.191 28.9737 li
321.676 28.9737 li
322.151 28.9737 li
322.616 28.9737 li
323.128 28.9737 li
323.619 28.9737 li
324.079 28.0977 li
324.517 28.0977 li
324.963 28.0977 li
325.436 28.0977 li
325.91 28.0977 li
326.324 28.0977 li
326.769 28.0977 li
327.203 28.0977 li
327.62 28.0977 li
328.057 28.0977 li
328.487 27.6587 li
328.928 27.6587 li
329.386 27.2207 li
329.842 27.2207 li
330.266 27.2207 li
330.69 27.2207 li
331.137 27.2207 li
331.554 27.2207 li
332.017 27.2207 li
332.429 27.2207 li
332.846 27.2207 li
333.275 27.2207 li
333.667 27.2207 li
334.142 27.2207 li
334.54 27.2207 li
334.96 27.2207 li
335.367 26.7817 li
335.762 26.7817 li
336.168 26.3437 li
336.562 26.3437 li
336.971 26.3437 li
337.391 25.9057 li
337.784 25.9057 li
338.21 25.9057 li
338.603 25.9057 li
338.98 25.9057 li
339.338 25.9057 li
339.744 25.9057 li
340.133 25.9057 li
340.512 25.9057 li
340.884 25.4667 li
341.225 25.4667 li
341.619 25.4667 li
341.981 25.4667 li
342.352 25.4667 li
342.725 25.4667 li
343.144 25.4667 li
343.508 25.4667 li
343.877 25.4667 li
344.25 25.4667 li
344.612 25.4667 li
344.98 25.4667 li
345.35 25.4667 li
345.732 25.4667 li
346.103 25.4667 li
346.475 25.4667 li
346.815 25.4667 li
347.144 25.4667 li
347.498 25.4667 li
347.847 25.4667 li
348.212 25.4667 li
348.576 25.4667 li
348.938 25.4667 li
349.292 25.4667 li
349.645 25.4667 li
350.002 25.4667 li
350.327 25.4667 li
350.682 25.4667 li
351.009 25.4667 li
351.344 25.4667 li
351.681 25.4667 li
351.993 25.4667 li
352.319 25.4667 li
352.651 25.4667 li
352.969 25.0297 li
353.31 25.0297 li
353.63 25.0297 li
353.978 24.5907 li
354.316 24.5907 li
354.624 24.5907 li
354.947 24.5907 li
355.255 24.5907 li
355.591 24.5907 li
355.885 24.5907 li
356.225 24.5907 li
356.539 24.1527 li
356.834 24.1527 li
357.156 24.1527 li
357.473 24.1527 li
357.751 24.1527 li
358.065 24.1527 li
358.352 24.1527 li
358.623 24.1527 li
358.942 24.1527 li
359.217 24.1527 li
359.494 23.7137 li
359.779 23.7137 li
360.066 23.7137 li
360.344 23.7137 li
360.607 23.7137 li
360.884 23.7137 li
361.158 23.7137 li
361.457 23.7137 li
361.739 23.7137 li
362.014 23.7137 li
362.273 23.2757 li
362.545 23.2757 li
362.814 23.2757 li
363.086 23.2757 li
363.346 23.2757 li
363.604 23.2757 li
363.86 23.2757 li
364.1 23.2757 li
364.35 23.2757 li
364.607 23.2757 li
364.874 23.2757 li
365.132 23.2757 li
365.378 23.2757 li
365.63 23.2757 li
365.899 22.8367 li
366.154 22.8367 li
366.417 22.8367 li
366.657 22.3987 li
366.899 22.3987 li
367.162 22.3987 li
367.405 22.3987 li
367.637 22.3987 li
367.881 22.3987 li
368.12 22.3987 li
368.352 22.3987 li
368.575 22.3987 li
368.803 22.3987 li
369.023 22.3987 li
369.253 22.3987 li
369.475 22.3987 li
369.685 22.3987 li
369.905 22.3987 li
370.114 22.3987 li
370.336 22.3987 li
370.564 22.3987 li
370.783 22.3987 li
370.986 22.3987 li
371.201 22.3987 li
371.416 22.3987 li
371.632 22.3987 li
371.837 21.5227 li
372.054 21.5227 li
372.252 21.5227 li
372.463 21.0837 li
372.671 21.0837 li
372.871 21.0837 li
373.057 21.0837 li
373.255 21.0837 li
373.451 21.0837 li
373.655 21.0837 li
373.848 21.0837 li
374.053 21.0837 li
374.254 21.0837 li
374.454 21.0837 li
374.642 21.0837 li
374.837 21.0837 li
375.021 21.0837 li
375.204 21.0837 li
375.389 21.0837 li
375.578 21.0837 li
375.771 21.0837 li
375.943 21.0837 li
376.134 21.0837 li
376.317 21.0837 li
376.493 21.0837 li
376.666 21.0837 li
376.834 20.6457 li
377.003 20.6457 li
377.182 20.6457 li
377.353 20.6457 li
377.525 20.6457 li
377.705 20.6457 li
377.879 20.6457 li
378.05 20.6457 li
378.223 20.6457 li
378.386 20.6457 li
378.553 20.6457 li
378.712 20.6457 li
378.86 20.6457 li
379.026 20.6457 li
379.181 20.6457 li
379.339 20.6457 li
379.498 20.6457 li
379.657 20.6457 li
379.81 20.6457 li
379.966 20.6457 li
380.131 20.6457 li
380.278 20.6457 li
380.419 20.6457 li
380.564 20.6457 li
380.715 20.6457 li
380.856 20.6457 li
381.005 20.6457 li
381.146 20.6457 li
381.289 20.6457 li
381.43 20.6457 li
381.573 20.6457 li
381.716 20.6457 li
381.858 20.6457 li
381.998 20.6457 li
382.12 20.6457 li
382.262 20.6457 li
382.396 20.6457 li
382.525 20.6457 li
382.662 20.6457 li
382.795 20.6457 li
382.921 20.6457 li
383.048 20.6457 li
383.168 20.6457 li
383.293 20.6457 li
383.416 20.6457 li
383.539 20.6457 li
383.659 20.6457 li
383.779 20.6457 li
383.9 20.6457 li
384.033 20.6457 li
384.148 20.6457 li
384.27 20.6457 li
384.38 20.6457 li
384.506 20.6457 li
384.622 20.6457 li
384.735 20.6457 li
384.846 20.6457 li
384.962 20.6457 li
385.073 20.6457 li
385.179 20.6457 li
385.289 20.6457 li
385.393 20.6457 li
385.507 20.6457 li
385.616 20.6457 li
385.721 20.6457 li
385.826 20.6457 li
385.935 20.6457 li
386.05 20.6457 li
386.154 20.6457 li
386.258 20.6457 li
386.359 20.6457 li
386.456 20.6457 li
386.556 20.6457 li
386.652 20.6457 li
386.746 20.6457 li
386.851 20.6457 li
386.957 20.6457 li
387.055 20.6457 li
387.158 20.6457 li
387.249 20.6457 li
387.335 20.6457 li
387.431 20.6457 li
387.527 20.6457 li
387.616 20.6457 li
387.703 20.6457 li
387.796 20.6457 li
387.879 20.6457 li
387.971 20.6457 li
388.06 20.6457 li
388.144 20.6457 li
388.231 20.6457 li
388.323 20.6457 li
388.409 20.6457 li
388.493 20.6457 li
388.574 20.6457 li
388.654 20.6457 li
388.739 20.6457 li
388.817 20.6457 li
388.891 20.6457 li
388.97 20.6457 li
389.052 20.6457 li
389.132 20.6457 li
389.209 20.6457 li
389.289 20.6457 li
389.368 20.6457 li
389.446 20.6457 li
389.521 20.6457 li
389.596 20.6457 li
389.672 20.6457 li
389.747 20.6457 li
389.824 20.6457 li
389.893 20.6457 li
389.959 20.6457 li
390.031 20.6457 li
390.105 20.6457 li
390.177 20.6457 li
390.244 20.6457 li
390.305 20.6457 li
390.372 20.6457 li
390.442 20.6457 li
390.506 20.6457 li
390.575 20.6457 li
390.634 20.6457 li
390.7 20.6457 li
390.767 20.6457 li
390.832 20.6457 li
390.894 20.6457 li
390.959 20.6457 li
391.019 20.6457 li
391.08 20.6457 li
391.135 20.6457 li
391.202 20.6457 li
391.259 20.6457 li
391.319 20.6457 li
391.378 20.6457 li
391.433 20.6457 li
391.489 20.6457 li
391.548 20.6457 li
391.607 20.6457 li
391.664 20.6457 li
391.723 20.6457 li
391.776 20.6457 li
391.828 20.6457 li
391.884 20.6457 li
391.943 20.6457 li
391.996 20.6457 li
392.05 20.6457 li
392.1 20.6457 li
392.153 20.6457 li
392.207 20.6457 li
392.262 20.6457 li
392.312 20.6457 li
392.369 20.6457 li
392.42 20.6457 li
392.473 20.2067 li
392.519 20.2067 li
392.568 20.2067 li
392.612 20.2067 li
392.658 20.2067 li
392.705 20.2067 li
392.753 20.2067 li
392.801 20.2067 li
392.849 20.2067 li
392.894 20.2067 li
392.937 20.2067 li
392.978 20.2067 li
393.023 20.2067 li
393.071 20.2067 li
393.112 20.2067 li
393.154 20.2067 li
393.197 20.2067 li
393.241 20.2067 li
393.282 20.2067 li
393.317 20.2067 li
393.358 20.2067 li
393.397 20.2067 li
393.437 20.2067 li
393.478 20.2067 li
393.517 20.2067 li
393.553 20.2067 li
393.591 20.2067 li
393.632 20.2067 li
393.669 20.2067 li
393.703 20.2067 li
393.74 20.2067 li
393.778 20.2067 li
393.817 20.2067 li
393.852 20.2067 li
393.889 20.2067 li
393.929 20.2067 li
393.965 20.2067 li
394.003 20.2067 li
394.037 20.2067 li
394.074 20.2067 li
394.108 20.2067 li
394.141 20.2067 li
394.175 20.2067 li
394.208 20.2067 li
394.241 20.2067 li
394.273 20.2067 li
394.307 20.2067 li
394.339 20.2067 li
394.37 20.2067 li
394.403 20.2067 li
394.435 20.2067 li
394.466 20.2067 li
394.496 20.2067 li
394.526 20.2067 li
394.559 20.2067 li
394.589 20.2067 li
394.613 20.2067 li
394.643 20.2067 li
394.672 20.2067 li
394.698 20.2067 li
394.726 20.2067 li
394.753 20.2067 li
394.78 20.2067 li
394.808 20.2067 li
394.838 20.2067 li
394.864 20.2067 li
394.893 20.2067 li
394.917 20.2067 li
394.942 20.2067 li
394.969 20.2067 li
394.994 20.2067 li
395.021 20.2067 li
395.048 20.2067 li
395.072 20.2067 li
395.096 20.2067 li
395.119 20.2067 li
395.141 20.2067 li
395.168 20.2067 li
395.192 20.2067 li
395.218 20.2067 li
395.242 20.2067 li
395.264 20.2067 li
395.289 20.2067 li
395.309 20.2067 li
395.332 20.2067 li
395.357 20.2067 li
395.38 20.2067 li
395.398 20.2067 li
395.419 20.2067 li
395.441 20.2067 li
395.46 20.2067 li
395.481 20.2067 li
395.501 20.2067 li
395.523 20.2067 li
395.545 20.2067 li
395.565 20.2067 li
395.586 20.2067 li
395.608 19.7687 li
395.63 19.7687 li
395.65 19.7687 li
395.671 19.7687 li
395.691 19.7687 li
395.713 19.7687 li
395.734 19.7687 li
395.753 19.7687 li
395.772 19.7687 li
395.792 19.7687 li
395.812 19.7687 li
395.831 19.7687 li
395.849 19.7687 li
395.866 19.7687 li
395.887 19.7687 li
395.907 19.7687 li
395.925 19.7687 li
395.943 19.7687 li
395.959 19.7687 li
395.976 19.7687 li
395.995 19.7687 li
396.01 19.7687 li
396.026 19.7687 li
396.044 19.7687 li
396.062 19.7687 li
396.077 19.7687 li
396.094 19.7687 li
396.112 19.7687 li
396.128 19.7687 li
396.143 19.7687 li
396.16 19.7687 li
396.175 19.7687 li
396.19 19.7687 li
396.204 19.7687 li
396.218 19.7687 li
396.234 19.7687 li
396.251 19.7687 li
396.268 19.7687 li
396.281 19.7687 li
396.295 19.7687 li
396.31 19.7687 li
396.324 19.7687 li
396.336 19.7687 li
396.35 19.7687 li
396.364 19.7687 li
396.377 19.7687 li
396.389 19.7687 li
396.403 19.7687 li
396.416 19.7687 li
396.433 19.7687 li
396.446 19.7687 li
396.458 19.7687 li
396.47 19.7687 li
396.483 19.7687 li
396.496 19.7687 li
396.508 19.7687 li
396.52 19.7687 li
396.531 19.7687 li
396.544 19.7687 li
396.557 19.7687 li
396.569 19.7687 li
396.58 19.7687 li
396.593 19.7687 li
396.602 19.7687 li
396.614 19.7687 li
396.626 19.7687 li
396.637 19.7687 li
396.649 19.7687 li
396.659 19.7687 li
396.668 19.7687 li
396.679 19.7687 li
396.687 19.7687 li
396.697 19.7687 li
396.707 19.7687 li
396.718 19.7687 li
396.728 19.7687 li
396.739 19.7687 li
396.749 19.7687 li
396.759 19.7687 li
396.769 19.7687 li
396.778 19.7687 li
396.788 19.7687 li
396.798 19.7687 li
396.809 19.7687 li
396.818 19.7687 li
396.828 19.7687 li
396.838 19.7687 li
396.848 19.7687 li
396.857 19.7687 li
396.867 19.7687 li
396.875 19.7687 li
396.884 19.7687 li
396.892 19.7687 li
396.9 19.7687 li
396.91 19.7687 li
396.917 19.7687 li
396.926 19.7687 li
396.935 19.7687 li
396.943 19.7687 li
396.95 19.7687 li
396.958 19.7687 li
396.968 19.7687 li
396.977 19.7687 li
396.983 19.7687 li
396.991 19.7687 li
396.998 19.7687 li
397.007 19.7687 li
397.014 19.7687 li
397.021 19.7687 li
397.029 19.7687 li
397.037 19.7687 li
397.044 19.7687 li
397.052 19.7687 li
397.06 19.7687 li
397.068 19.7687 li
397.075 19.7687 li
397.084 19.7687 li
397.089 19.7687 li
397.096 19.7687 li
397.103 19.7687 li
397.11 19.7687 li
397.118 19.7687 li
397.124 19.7687 li
397.132 19.7687 li
397.139 19.7687 li
397.147 19.7687 li
397.153 19.7687 li
397.159 19.7687 li
397.166 19.7687 li
397.174 19.7687 li
397.179 19.7687 li
397.184 19.7687 li
397.192 19.7687 li
397.198 19.7687 li
397.205 19.7687 li
397.21 19.7687 li
397.216 19.7687 li
397.223 19.7687 li
397.228 19.7687 li
397.233 19.7687 li
397.239 19.7687 li
397.244 19.7687 li
397.25 19.7687 li
397.255 19.7687 li
397.259 19.7687 li
397.265 19.7687 li
397.271 19.7687 li
397.276 19.7687 li
397.28 19.7687 li
397.286 19.7687 li
397.291 19.7687 li
397.296 19.7687 li
397.3 19.7687 li
397.305 19.7687 li
397.312 19.7687 li
397.317 19.7687 li
397.321 19.7687 li
397.326 19.7687 li
397.33 19.7687 li
397.335 19.7687 li
397.337 19.7687 li
397.343 19.7687 li
397.347 19.7687 li
397.351 19.7687 li
397.356 19.7687 li
397.36 19.7687 li
397.366 19.7687 li
397.371 19.7687 li
397.374 19.7687 li
397.379 19.7687 li
397.384 19.7687 li
397.387 19.7687 li
397.391 19.7687 li
397.396 19.7687 li
397.401 19.7687 li
397.405 19.7687 li
397.41 19.7687 li
397.414 19.7687 li
397.419 19.7687 li
397.423 19.7687 li
397.426 19.7687 li
397.43 19.7687 li
397.433 19.7687 li
397.436 19.7687 li
397.439 19.7687 li
397.444 19.7687 li
397.447 19.7687 li
397.45 19.7687 li
397.453 19.7687 li
397.457 19.7687 li
397.46 19.7687 li
397.462 19.7687 li
397.468 19.7687 li
397.471 19.7687 li
397.475 19.7687 li
397.479 19.7687 li
397.481 19.7687 li
397.485 19.7687 li
397.488 19.7687 li
397.492 19.7687 li
397.496 19.7687 li
397.498 19.7687 li
397.502 19.7687 li
397.505 19.7687 li
397.507 19.7687 li
397.51 19.7687 li
397.512 19.7687 li
397.516 19.7687 li
397.519 19.7687 li
397.523 19.7687 li
397.525 19.7687 li
397.529 19.7687 li
397.532 19.7687 li
397.536 19.7687 li
397.538 19.7687 li
397.541 19.7687 li
397.544 19.7687 li
397.546 19.7687 li
397.55 19.7687 li
397.553 19.7687 li
397.555 19.7687 li
397.558 19.7687 li
397.561 19.7687 li
397.564 19.7687 li
397.567 19.7687 li
397.57 19.7687 li
397.573 19.7687 li
397.577 19.7687 li
397.58 19.7687 li
397.583 19.7687 li
397.585 19.7687 li
397.589 19.7687 li
397.591 19.7687 li
397.594 19.7687 li
397.596 19.7687 li
397.598 19.7687 li
397.601 19.7687 li
397.604 19.7687 li
397.607 19.7687 li
397.609 19.7687 li
397.612 19.7687 li
397.614 19.7687 li
397.616 19.7687 li
397.618 19.7687 li
397.62 19.7687 li
397.621 19.7687 li
397.625 19.7687 li
397.626 19.7687 li
397.628 19.7687 li
397.632 19.7687 li
397.634 19.7687 li
397.637 19.7687 li
397.638 19.7687 li
397.64 19.7687 li
397.642 19.7687 li
397.643 19.7687 li
397.646 19.7687 li
397.648 19.7687 li
397.651 19.7687 li
397.652 19.7687 li
397.655 19.7687 li
397.656 19.7687 li
397.657 19.7687 li
397.659 19.7687 li
397.661 19.7687 li
397.663 19.7687 li
397.665 19.7687 li
397.667 19.7687 li
397.669 19.7687 li
397.67 19.7687 li
397.672 19.7687 li
397.674 19.7687 li
397.675 19.7687 li
397.678 19.7687 li
397.68 19.7687 li
397.682 19.7687 li
397.685 19.7687 li
397.686 19.7687 li
397.688 19.7687 li
397.689 19.7687 li
397.691 19.7687 li
397.693 19.7687 li
397.694 19.7687 li
397.695 19.7687 li
397.696 19.7687 li
397.698 19.7687 li
397.7 19.7687 li
397.701 19.7687 li
397.703 19.7687 li
397.704 19.7687 li
397.706 19.7687 li
397.709 19.7687 li
397.711 19.7687 li
397.712 19.7687 li
397.714 19.7687 li
397.715 19.7687 li
397.717 19.7687 li
397.718 19.7687 li
397.72 19.7687 li
397.721 19.7687 li
397.722 19.7687 li
397.723 19.7687 li
397.724 19.7687 li
397.725 19.7687 li
397.727 19.7687 li
397.729 19.7687 li
397.73 19.7687 li
397.732 19.7687 li
397.733 19.7687 li
397.734 19.7687 li
397.735 19.7687 li
397.736 19.7687 li
397.737 19.7687 li
397.739 19.7687 li
397.74 19.7687 li
397.741 19.7687 li
397.743 19.7687 li
397.744 19.7687 li
397.745 19.7687 li
397.746 19.7687 li
397.748 19.7687 li
397.749 19.7687 li
397.75 19.7687 li
397.751 19.7687 li
397.752 19.7687 li
397.753 19.7687 li
397.754 19.7687 li
397.755 19.7687 li
397.756 19.7687 li
397.757 19.7687 li
397.758 19.7687 li
397.759 19.7687 li
397.761 19.7687 li
397.762 19.7687 li
397.763 19.7687 li
397.764 19.7687 li
397.765 19.7687 li
397.766 19.7687 li
397.767 19.7687 li
397.768 19.7687 li
397.769 19.7687 li
397.77 19.7687 li
397.771 19.7687 li
397.772 19.7687 li
397.773 19.7687 li
397.775 19.7687 li
397.776 19.7687 li
397.777 19.7687 li
397.778 19.7687 li
397.779 19.7687 li
397.78 19.7687 li
397.781 19.7687 li
397.782 19.7687 li
397.783 19.7687 li
397.784 19.7687 li
397.785 19.7687 li
397.787 19.7687 li
397.788 19.7687 li
397.789 19.7687 li
397.791 19.7687 li
397.792 19.7687 li
397.793 19.7687 li
397.794 19.7687 li
397.795 19.7687 li
397.796 19.7687 li
397.797 19.7687 li
397.798 19.7687 li
397.799 19.7687 li
397.8 19.7687 li
397.801 19.7687 li
397.802 19.7687 li
397.803 19.7687 li
397.804 19.7687 li
397.805 19.7687 li
397.806 19.7687 li
397.807 19.7687 li
397.808 19.7687 li
397.809 19.7687 li
397.81 19.7687 li
397.811 19.7687 li
397.812 19.7687 li
397.813 19.7687 li
397.814 19.7687 li
397.815 19.7687 li
397.816 19.7687 li
397.817 19.7687 li
397.818 19.7687 li
397.819 19.7687 li
397.82 19.7687 li
397.821 19.7687 li
397.822 19.7687 li
397.823 19.7687 li
397.824 19.7687 li
397.825 19.7687 li
397.826 19.7687 li
397.827 19.7687 li
397.828 19.7687 li
397.829 19.7687 li
397.83 19.7687 li
397.831 19.7687 li
397.832 19.7687 li
397.833 19.7687 li
397.834 19.7687 li
397.835 19.7687 li
397.836 19.7687 li
397.837 19.7687 li
397.838 19.7687 li
397.839 19.7687 li
0 .990631 1 .000396735 cmyk
@
65.6151 80.8297 mo
66.9955 80.8297 68.1147 81.9487 68.1147 83.3297 cv
68.1147 84.7097 66.9955 85.8287 65.6151 85.8287 cv
64.2342 85.8287 63.1151 84.7097 63.1151 83.3297 cv
63.1151 81.9487 64.2342 80.8297 65.6151 80.8297 cv
cp
65.6151 79.8287 mo
63.6823 79.8287 62.1147 81.3967 62.1147 83.3297 cv
62.1147 85.2617 63.6823 86.8297 65.6151 86.8297 cv
67.5475 86.8297 69.1151 85.2617 69.1151 83.3297 cv
69.1151 81.3967 67.5475 79.8287 65.6151 79.8287 cv
f
77.6452 76.0077 mo
79.026 76.0077 80.1448 77.1267 80.1448 78.5077 cv
80.1448 79.8887 79.026 81.0067 77.6452 81.0067 cv
76.2643 81.0067 75.1455 79.8887 75.1455 78.5077 cv
75.1455 77.1267 76.2643 76.0077 77.6452 76.0077 cv
cp
77.6452 75.0067 mo
75.7123 75.0067 74.1448 76.5747 74.1448 78.5077 cv
74.1448 80.4397 75.7123 82.0077 77.6452 82.0077 cv
79.578 82.0077 81.1455 80.4397 81.1455 78.5077 cv
81.1455 76.5747 79.578 75.0067 77.6452 75.0067 cv
f
98.2109 72.9387 mo
99.5919 72.9387 100.711 74.0577 100.711 75.4387 cv
100.711 76.8197 99.5919 77.9387 98.2109 77.9387 cv
96.8299 77.9387 95.7109 76.8197 95.7109 75.4387 cv
95.7109 74.0577 96.8299 72.9387 98.2109 72.9387 cv
cp
98.2109 71.9387 mo
96.2779 71.9387 94.7109 73.5057 94.7109 75.4387 cv
94.7109 77.3717 96.2779 78.9387 98.2109 78.9387 cv
100.144 78.9387 101.711 77.3717 101.711 75.4387 cv
101.711 73.5057 100.144 71.9387 98.2109 71.9387 cv
f
108.545 70.7477 mo
109.926 70.7477 111.045 71.8667 111.045 73.2477 cv
111.045 74.6277 109.926 75.7467 108.545 75.7467 cv
107.164 75.7467 106.046 74.6277 106.046 73.2477 cv
106.046 71.8667 107.164 70.7477 108.545 70.7477 cv
cp
108.545 69.7467 mo
106.612 69.7467 105.045 71.3147 105.045 73.2477 cv
105.045 75.1797 106.612 76.7477 108.545 76.7477 cv
110.478 76.7477 112.046 75.1797 112.046 73.2477 cv
112.046 71.3147 110.478 69.7467 108.545 69.7467 cv
f
124.392 66.8027 mo
125.772 66.8027 126.891 67.9217 126.891 69.3017 cv
126.891 70.6827 125.772 71.8017 124.392 71.8017 cv
123.011 71.8017 121.892 70.6827 121.892 69.3017 cv
121.892 67.9217 123.011 66.8027 124.392 66.8027 cv
cp
124.392 65.8017 mo
122.459 65.8017 120.891 67.3697 120.891 69.3017 cv
120.891 71.2347 122.459 72.8027 124.392 72.8027 cv
126.324 72.8027 127.892 71.2347 127.892 69.3017 cv
127.892 67.3697 126.324 65.8017 124.392 65.8017 cv
f
136.761 64.1727 mo
138.142 64.1727 139.26 65.2917 139.26 66.6717 cv
139.26 68.0527 138.142 69.1717 136.761 69.1717 cv
135.38 69.1717 134.261 68.0527 134.261 66.6717 cv
134.261 65.2917 135.38 64.1727 136.761 64.1727 cv
cp
136.761 63.1717 mo
134.828 63.1717 133.26 64.7397 133.26 66.6717 cv
133.26 68.6047 134.828 70.1727 136.761 70.1727 cv
138.694 70.1727 140.261 68.6047 140.261 66.6717 cv
140.261 64.7397 138.694 63.1717 136.761 63.1717 cv
f
146.453 58.0357 mo
147.834 58.0357 148.953 59.1547 148.953 60.5347 cv
148.953 61.9157 147.834 63.0347 146.453 63.0347 cv
145.073 63.0347 143.954 61.9157 143.954 60.5347 cv
143.954 59.1547 145.073 58.0357 146.453 58.0357 cv
cp
146.453 57.0347 mo
144.521 57.0347 142.953 58.6027 142.953 60.5347 cv
142.953 62.4677 144.521 64.0357 146.453 64.0357 cv
148.386 64.0357 149.954 62.4677 149.954 60.5347 cv
149.954 58.6027 148.386 57.0347 146.453 57.0347 cv
f
158.646 56.7207 mo
160.026 56.7207 161.145 57.8397 161.145 59.2197 cv
161.145 60.6007 160.026 61.7197 158.646 61.7197 cv
157.265 61.7197 156.146 60.6007 156.146 59.2197 cv
156.146 57.8397 157.265 56.7207 158.646 56.7207 cv
cp
158.646 55.7197 mo
156.713 55.7197 155.145 57.2877 155.145 59.2197 cv
155.145 61.1527 156.713 62.7207 158.646 62.7207 cv
160.578 62.7207 162.146 61.1527 162.146 59.2197 cv
162.146 57.2877 160.578 55.7197 158.646 55.7197 cv
f
167.262 54.9667 mo
168.643 54.9667 169.761 56.0857 169.761 57.4667 cv
169.761 58.8477 168.643 59.9667 167.262 59.9667 cv
165.881 59.9667 164.762 58.8477 164.762 57.4667 cv
164.762 56.0857 165.881 54.9667 167.262 54.9667 cv
cp
167.262 53.9667 mo
165.329 53.9667 163.761 55.5337 163.761 57.4667 cv
163.761 59.3997 165.329 60.9667 167.262 60.9667 cv
169.194 60.9667 170.762 59.3997 170.762 57.4667 cv
170.762 55.5337 169.194 53.9667 167.262 53.9667 cv
f
175.797 52.3367 mo
177.178 52.3367 178.297 53.4557 178.297 54.8367 cv
178.297 56.2167 177.178 57.3367 175.797 57.3367 cv
174.416 57.3367 173.298 56.2167 173.298 54.8367 cv
173.298 53.4557 174.416 52.3367 175.797 52.3367 cv
cp
175.797 51.3367 mo
173.864 51.3367 172.297 52.9037 172.297 54.8367 cv
172.297 56.7697 173.864 58.3367 175.797 58.3367 cv
177.73 58.3367 179.298 56.7697 179.298 54.8367 cv
179.298 52.9037 177.73 51.3367 175.797 51.3367 cv
f
186.596 49.7067 mo
187.977 49.7067 189.096 50.8257 189.096 52.2067 cv
189.096 53.5867 187.977 54.7057 186.596 54.7057 cv
185.215 54.7057 184.096 53.5867 184.096 52.2067 cv
184.096 50.8257 185.215 49.7067 186.596 49.7067 cv
cp
186.596 48.7057 mo
184.663 48.7057 183.096 50.2737 183.096 52.2067 cv
183.096 54.1397 184.663 55.7067 186.596 55.7067 cv
188.529 55.7067 190.096 54.1397 190.096 52.2067 cv
190.096 50.2737 188.529 48.7057 186.596 48.7057 cv
f
195.351 47.9537 mo
196.732 47.9537 197.851 49.0727 197.851 50.4527 cv
197.851 51.8337 196.732 52.9527 195.351 52.9527 cv
193.97 52.9527 192.851 51.8337 192.851 50.4527 cv
192.851 49.0727 193.97 47.9537 195.351 47.9537 cv
cp
195.351 46.9527 mo
193.418 46.9527 191.851 48.5207 191.851 50.4527 cv
191.851 52.3857 193.418 53.9537 195.351 53.9537 cv
197.284 53.9537 198.851 52.3857 198.851 50.4527 cv
198.851 48.5207 197.284 46.9527 195.351 46.9527 cv
f
202.399 44.4467 mo
203.78 44.4467 204.899 45.5657 204.899 46.9467 cv
204.899 48.3267 203.78 49.4457 202.399 49.4457 cv
201.018 49.4457 199.899 48.3267 199.899 46.9467 cv
199.899 45.5657 201.018 44.4467 202.399 44.4467 cv
cp
202.399 43.4457 mo
200.466 43.4457 198.899 45.0137 198.899 46.9467 cv
198.899 48.8797 200.466 50.4467 202.399 50.4467 cv
204.332 50.4467 205.899 48.8797 205.899 46.9467 cv
205.899 45.0137 204.332 43.4457 202.399 43.4457 cv
f
212.021 43.5697 mo
213.402 43.5697 214.521 44.6887 214.521 46.0697 cv
214.521 47.4507 213.402 48.5697 212.021 48.5697 cv
210.641 48.5697 209.522 47.4507 209.522 46.0697 cv
209.522 44.6887 210.641 43.5697 212.021 43.5697 cv
cp
212.021 42.5697 mo
210.089 42.5697 208.521 44.1367 208.521 46.0697 cv
208.521 48.0027 210.089 49.5697 212.021 49.5697 cv
213.954 49.5697 215.522 48.0027 215.522 46.0697 cv
215.522 44.1367 213.954 42.5697 212.021 42.5697 cv
f
220.703 42.2547 mo
222.084 42.2547 223.203 43.3737 223.203 44.7547 cv
223.203 46.1347 222.084 47.2547 220.703 47.2547 cv
219.323 47.2547 218.204 46.1347 218.204 44.7547 cv
218.204 43.3737 219.323 42.2547 220.703 42.2547 cv
cp
220.703 41.2547 mo
218.771 41.2547 217.203 42.8217 217.203 44.7547 cv
217.203 46.6877 218.771 48.2547 220.703 48.2547 cv
222.636 48.2547 224.204 46.6877 224.204 44.7547 cv
224.204 42.8217 222.636 41.2547 220.703 41.2547 cv
f
228.868 39.1867 mo
230.249 39.1867 231.368 40.3057 231.368 41.6867 cv
231.368 43.0667 230.249 44.1857 228.868 44.1857 cv
227.487 44.1857 226.369 43.0667 226.369 41.6867 cv
226.369 40.3057 227.487 39.1867 228.868 39.1867 cv
cp
228.868 38.1857 mo
226.935 38.1857 225.368 39.7537 225.368 41.6867 cv
225.368 43.6187 226.935 45.1867 228.868 45.1867 cv
230.801 45.1867 232.369 43.6187 232.369 41.6867 cv
232.369 39.7537 230.801 38.1857 228.868 38.1857 cv
f
237.899 38.7477 mo
239.28 38.7477 240.398 39.8667 240.398 41.2477 cv
240.398 42.6287 239.28 43.7477 237.899 43.7477 cv
236.518 43.7477 235.399 42.6287 235.399 41.2477 cv
235.399 39.8667 236.518 38.7477 237.899 38.7477 cv
cp
237.899 37.7477 mo
235.966 37.7477 234.398 39.3147 234.398 41.2477 cv
234.398 43.1807 235.966 44.7477 237.899 44.7477 cv
239.832 44.7477 241.399 43.1807 241.399 41.2477 cv
241.399 39.3147 239.832 37.7477 237.899 37.7477 cv
f
245.528 36.9947 mo
246.909 36.9947 248.028 38.1137 248.028 39.4947 cv
248.028 40.8747 246.909 41.9937 245.528 41.9937 cv
244.148 41.9937 243.028 40.8747 243.028 39.4947 cv
243.028 38.1137 244.148 36.9947 245.528 36.9947 cv
cp
245.528 35.9937 mo
243.596 35.9937 242.028 37.5617 242.028 39.4947 cv
242.028 41.4277 243.596 42.9947 245.528 42.9947 cv
247.461 42.9947 249.028 41.4277 249.028 39.4947 cv
249.028 37.5617 247.461 35.9937 245.528 35.9937 cv
f
253.734 36.1177 mo
255.115 36.1177 256.234 37.2367 256.234 38.6177 cv
256.234 39.9987 255.115 41.1177 253.734 41.1177 cv
252.353 41.1177 251.235 39.9987 251.235 38.6177 cv
251.235 37.2367 252.353 36.1177 253.734 36.1177 cv
cp
253.734 35.1177 mo
251.802 35.1177 250.234 36.6847 250.234 38.6177 cv
250.234 40.5507 251.802 42.1177 253.734 42.1177 cv
255.667 42.1177 257.235 40.5507 257.235 38.6177 cv
257.235 36.6847 255.667 35.1177 253.734 35.1177 cv
f
260.26 35.2417 mo
261.641 35.2417 262.76 36.3597 262.76 37.7407 cv
262.76 39.1217 261.641 40.2407 260.26 40.2407 cv
258.88 40.2407 257.761 39.1217 257.761 37.7407 cv
257.761 36.3597 258.88 35.2417 260.26 35.2417 cv
cp
260.26 34.2407 mo
258.328 34.2407 256.76 35.8077 256.76 37.7407 cv
256.76 39.6737 258.328 41.2417 260.26 41.2417 cv
262.193 41.2417 263.761 39.6737 263.761 37.7407 cv
263.761 35.8077 262.193 34.2407 260.26 34.2407 cv
f
267.07 34.3647 mo
268.45 34.3647 269.569 35.4837 269.569 36.8647 cv
269.569 38.2447 268.45 39.3637 267.07 39.3637 cv
265.689 39.3637 264.57 38.2447 264.57 36.8647 cv
264.57 35.4837 265.689 34.3647 267.07 34.3647 cv
cp
267.07 33.3637 mo
265.137 33.3637 263.569 34.9317 263.569 36.8647 cv
263.569 38.7977 265.137 40.3647 267.07 40.3647 cv
269.002 40.3647 270.57 38.7977 270.57 36.8647 cv
270.57 34.9317 269.002 33.3637 267.07 33.3637 cv
f
274.241 32.1727 mo
275.622 32.1727 276.741 33.2917 276.741 34.6727 cv
276.741 36.0537 275.622 37.1727 274.241 37.1727 cv
272.86 37.1727 271.741 36.0537 271.741 34.6727 cv
271.741 33.2917 272.86 32.1727 274.241 32.1727 cv
cp
274.241 31.1727 mo
272.309 31.1727 270.741 32.7397 270.741 34.6727 cv
270.741 36.6057 272.309 38.1727 274.241 38.1727 cv
276.174 38.1727 277.741 36.6057 277.741 34.6727 cv
277.741 32.7397 276.174 31.1727 274.241 31.1727 cv
f
281.486 31.2957 mo
282.866 31.2957 283.985 32.4147 283.985 33.7957 cv
283.985 35.1767 282.866 36.2957 281.486 36.2957 cv
280.105 36.2957 278.986 35.1767 278.986 33.7957 cv
278.986 32.4147 280.105 31.2957 281.486 31.2957 cv
cp
281.486 30.2957 mo
279.553 30.2957 277.985 31.8637 277.985 33.7957 cv
277.985 35.7287 279.553 37.2957 281.486 37.2957 cv
283.418 37.2957 284.986 35.7287 284.986 33.7957 cv
284.986 31.8637 283.418 30.2957 281.486 30.2957 cv
f
287.764 29.9807 mo
289.145 29.9807 290.264 31.0997 290.264 32.4807 cv
290.264 33.8617 289.145 34.9807 287.764 34.9807 cv
286.384 34.9807 285.265 33.8617 285.265 32.4807 cv
285.265 31.0997 286.384 29.9807 287.764 29.9807 cv
cp
287.764 28.9807 mo
285.832 28.9807 284.264 30.5477 284.264 32.4807 cv
284.264 34.4137 285.832 35.9807 287.764 35.9807 cv
289.697 35.9807 291.265 34.4137 291.265 32.4807 cv
291.265 30.5477 289.697 28.9807 287.764 28.9807 cv
f
293.865 29.5427 mo
295.245 29.5427 296.364 30.6617 296.364 32.0427 cv
296.364 33.4237 295.245 34.5417 293.865 34.5417 cv
292.484 34.5417 291.365 33.4237 291.365 32.0427 cv
291.365 30.6617 292.484 29.5427 293.865 29.5427 cv
cp
293.865 28.5417 mo
291.932 28.5417 290.364 30.1097 290.364 32.0427 cv
290.364 33.9757 291.932 35.5427 293.865 35.5427 cv
295.798 35.5427 297.365 33.9757 297.365 32.0427 cv
297.365 30.1097 295.798 28.5417 293.865 28.5417 cv
f
299.646 29.1047 mo
301.027 29.1047 302.146 30.2237 302.146 31.6047 cv
302.146 32.9847 301.027 34.1037 299.646 34.1037 cv
298.266 34.1037 297.146 32.9847 297.146 31.6047 cv
297.146 30.2237 298.266 29.1047 299.646 29.1047 cv
cp
299.646 28.1037 mo
297.714 28.1037 296.146 29.6717 296.146 31.6047 cv
296.146 33.5367 297.714 35.1047 299.646 35.1047 cv
301.579 35.1047 303.146 33.5367 303.146 31.6047 cv
303.146 29.6717 301.579 28.1037 299.646 28.1037 cv
f
305.152 28.6657 mo
306.532 28.6657 307.652 29.7847 307.652 31.1657 cv
307.652 32.5467 306.532 33.6657 305.152 33.6657 cv
303.771 33.6657 302.652 32.5467 302.652 31.1657 cv
302.652 29.7847 303.771 28.6657 305.152 28.6657 cv
cp
305.152 27.6657 mo
303.219 27.6657 301.652 29.2327 301.652 31.1657 cv
301.652 33.0987 303.219 34.6657 305.152 34.6657 cv
307.084 34.6657 308.652 33.0987 308.652 31.1657 cv
308.652 29.2327 307.084 27.6657 305.152 27.6657 cv
f
310.557 28.2277 mo
311.937 28.2277 313.057 29.3467 313.057 30.7277 cv
313.057 32.1077 311.937 33.2277 310.557 33.2277 cv
309.176 33.2277 308.057 32.1077 308.057 30.7277 cv
308.057 29.3467 309.176 28.2277 310.557 28.2277 cv
cp
310.557 27.2277 mo
308.624 27.2277 307.057 28.7947 307.057 30.7277 cv
307.057 32.6597 308.624 34.2277 310.557 34.2277 cv
312.49 34.2277 314.057 32.6597 314.057 30.7277 cv
314.057 28.7947 312.49 27.2277 310.557 27.2277 cv
f
315.629 27.7897 mo
317.01 27.7897 318.128 28.9077 318.128 30.2887 cv
318.128 31.6697 317.01 32.7887 315.629 32.7887 cv
314.248 32.7887 313.129 31.6697 313.129 30.2887 cv
313.129 28.9077 314.248 27.7897 315.629 27.7897 cv
cp
315.629 26.7887 mo
313.696 26.7887 312.128 28.3557 312.128 30.2887 cv
312.128 32.2217 313.696 33.7897 315.629 33.7897 cv
317.562 33.7897 319.129 32.2217 319.129 30.2887 cv
319.129 28.3557 317.562 26.7887 315.629 26.7887 cv
f
320.693 26.9127 mo
322.073 26.9127 323.192 28.0317 323.192 29.4127 cv
323.192 30.7937 322.073 31.9117 320.693 31.9117 cv
319.312 31.9117 318.193 30.7937 318.193 29.4127 cv
318.193 28.0317 319.312 26.9127 320.693 26.9127 cv
cp
320.693 25.9117 mo
318.76 25.9117 317.192 27.4797 317.192 29.4127 cv
317.192 31.3457 318.76 32.9127 320.693 32.9127 cv
322.625 32.9127 324.193 31.3457 324.193 29.4127 cv
324.193 27.4797 322.625 25.9117 320.693 25.9117 cv
f
325.436 25.5977 mo
326.817 25.5977 327.936 26.7167 327.936 28.0977 cv
327.936 29.4777 326.817 30.5977 325.436 30.5977 cv
324.055 30.5977 322.937 29.4777 322.937 28.0977 cv
322.937 26.7167 324.055 25.5977 325.436 25.5977 cv
cp
325.436 24.5977 mo
323.503 24.5977 321.936 26.1647 321.936 28.0977 cv
321.936 30.0297 323.503 31.5977 325.436 31.5977 cv
327.369 31.5977 328.937 30.0297 328.937 28.0977 cv
328.937 26.1647 327.369 24.5977 325.436 24.5977 cv
f
329.842 24.7207 mo
331.223 24.7207 332.341 25.8397 332.341 27.2207 cv
332.341 28.6017 331.223 29.7207 329.842 29.7207 cv
328.461 29.7207 327.342 28.6017 327.342 27.2207 cv
327.342 25.8397 328.461 24.7207 329.842 24.7207 cv
cp
329.842 23.7207 mo
327.909 23.7207 326.341 25.2877 326.341 27.2207 cv
326.341 29.1537 327.909 30.7207 329.842 30.7207 cv
331.775 30.7207 333.342 29.1537 333.342 27.2207 cv
333.342 25.2877 331.775 23.7207 329.842 23.7207 cv
f
334.143 24.7207 mo
335.523 24.7207 336.643 25.8397 336.643 27.2207 cv
336.643 28.6017 335.523 29.7207 334.143 29.7207 cv
332.762 29.7207 331.643 28.6017 331.643 27.2207 cv
331.643 25.8397 332.762 24.7207 334.143 24.7207 cv
cp
334.143 23.7207 mo
332.21 23.7207 330.643 25.2877 330.643 27.2207 cv
330.643 29.1537 332.21 30.7207 334.143 30.7207 cv
336.075 30.7207 337.643 29.1537 337.643 27.2207 cv
337.643 25.2877 336.075 23.7207 334.143 23.7207 cv
f
338.21 23.4057 mo
339.591 23.4057 340.71 24.5247 340.71 25.9057 cv
340.71 27.2867 339.591 28.4057 338.21 28.4057 cv
336.83 28.4057 335.71 27.2867 335.71 25.9057 cv
335.71 24.5247 336.83 23.4057 338.21 23.4057 cv
cp
338.21 22.4057 mo
336.278 22.4057 334.71 23.9727 334.71 25.9057 cv
334.71 27.8387 336.278 29.4057 338.21 29.4057 cv
340.143 29.4057 341.71 27.8387 341.71 25.9057 cv
341.71 23.9727 340.143 22.4057 338.21 22.4057 cv
f
341.981 22.9677 mo
343.362 22.9677 344.481 24.0867 344.481 25.4667 cv
344.481 26.8477 343.362 27.9667 341.981 27.9667 cv
340.601 27.9667 339.482 26.8477 339.482 25.4667 cv
339.482 24.0867 340.601 22.9677 341.981 22.9677 cv
cp
341.981 21.9667 mo
340.049 21.9667 338.481 23.5347 338.481 25.4667 cv
338.481 27.3997 340.049 28.9677 341.981 28.9677 cv
343.914 28.9677 345.482 27.3997 345.482 25.4667 cv
345.482 23.5347 343.914 21.9667 341.981 21.9667 cv
f
345.732 22.9677 mo
347.113 22.9677 348.232 24.0867 348.232 25.4667 cv
348.232 26.8477 347.113 27.9667 345.732 27.9667 cv
344.352 27.9667 343.233 26.8477 343.233 25.4667 cv
343.233 24.0867 344.352 22.9677 345.732 22.9677 cv
cp
345.732 21.9667 mo
343.8 21.9667 342.232 23.5347 342.232 25.4667 cv
342.232 27.3997 343.8 28.9677 345.732 28.9677 cv
347.665 28.9677 349.233 27.3997 349.233 25.4667 cv
349.233 23.5347 347.665 21.9667 345.732 21.9667 cv
f
349.292 22.9677 mo
350.673 22.9677 351.792 24.0867 351.792 25.4667 cv
351.792 26.8477 350.673 27.9667 349.292 27.9667 cv
347.911 27.9667 346.793 26.8477 346.793 25.4667 cv
346.793 24.0867 347.911 22.9677 349.292 22.9677 cv
cp
349.292 21.9667 mo
347.359 21.9667 345.792 23.5347 345.792 25.4667 cv
345.792 27.3997 347.359 28.9677 349.292 28.9677 cv
351.225 28.9677 352.793 27.3997 352.793 25.4667 cv
352.793 23.5347 351.225 21.9667 349.292 21.9667 cv
f
352.651 22.9677 mo
354.032 22.9677 355.15 24.0867 355.15 25.4667 cv
355.15 26.8477 354.032 27.9667 352.651 27.9667 cv
351.27 27.9667 350.151 26.8477 350.151 25.4667 cv
350.151 24.0867 351.27 22.9677 352.651 22.9677 cv
cp
352.651 21.9667 mo
350.718 21.9667 349.15 23.5347 349.15 25.4667 cv
349.15 27.3997 350.718 28.9677 352.651 28.9677 cv
354.584 28.9677 356.151 27.3997 356.151 25.4667 cv
356.151 23.5347 354.584 21.9667 352.651 21.9667 cv
f
355.885 22.0907 mo
357.266 22.0907 358.385 23.2097 358.385 24.5907 cv
358.385 25.9717 357.266 27.0897 355.885 27.0897 cv
354.505 27.0897 353.385 25.9717 353.385 24.5907 cv
353.385 23.2097 354.505 22.0907 355.885 22.0907 cv
cp
355.885 21.0897 mo
353.953 21.0897 352.385 22.6577 352.385 24.5907 cv
352.385 26.5237 353.953 28.0907 355.885 28.0907 cv
357.818 28.0907 359.385 26.5237 359.385 24.5907 cv
359.385 22.6577 357.818 21.0897 355.885 21.0897 cv
f
358.941 21.6527 mo
360.322 21.6527 361.441 22.7717 361.441 24.1527 cv
361.441 25.5327 360.322 26.6517 358.941 26.6517 cv
357.56 26.6517 356.442 25.5327 356.442 24.1527 cv
356.442 22.7717 357.56 21.6527 358.941 21.6527 cv
cp
358.941 20.6517 mo
357.009 20.6517 355.441 22.2197 355.441 24.1527 cv
355.441 26.0847 357.009 27.6527 358.941 27.6527 cv
360.874 27.6527 362.442 26.0847 362.442 24.1527 cv
362.442 22.2197 360.874 20.6517 358.941 20.6517 cv
f
361.74 21.2137 mo
363.12 21.2137 364.239 22.3327 364.239 23.7137 cv
364.239 25.0947 363.12 26.2137 361.74 26.2137 cv
360.359 26.2137 359.24 25.0947 359.24 23.7137 cv
359.24 22.3327 360.359 21.2137 361.74 21.2137 cv
cp
361.74 20.2137 mo
359.807 20.2137 358.239 21.7807 358.239 23.7137 cv
358.239 25.6467 359.807 27.2137 361.74 27.2137 cv
363.672 27.2137 365.24 25.6467 365.24 23.7137 cv
365.24 21.7807 363.672 20.2137 361.74 20.2137 cv
f
364.35 20.7757 mo
365.73 20.7757 366.85 21.8947 366.85 23.2757 cv
366.85 24.6557 365.73 25.7757 364.35 25.7757 cv
362.969 25.7757 361.85 24.6557 361.85 23.2757 cv
361.85 21.8947 362.969 20.7757 364.35 20.7757 cv
cp
364.35 19.7757 mo
362.417 19.7757 360.85 21.3427 360.85 23.2757 cv
360.85 25.2077 362.417 26.7757 364.35 26.7757 cv
366.282 26.7757 367.85 25.2077 367.85 23.2757 cv
367.85 21.3427 366.282 19.7757 364.35 19.7757 cv
f
366.899 19.8987 mo
368.28 19.8987 369.399 21.0177 369.399 22.3987 cv
369.399 23.7797 368.28 24.8987 366.899 24.8987 cv
365.518 24.8987 364.4 23.7797 364.4 22.3987 cv
364.4 21.0177 365.518 19.8987 366.899 19.8987 cv
cp
366.899 18.8987 mo
364.966 18.8987 363.399 20.4657 363.399 22.3987 cv
363.399 24.3317 364.966 25.8987 366.899 25.8987 cv
368.832 25.8987 370.4 24.3317 370.4 22.3987 cv
370.4 20.4657 368.832 18.8987 366.899 18.8987 cv
f
369.253 19.8987 mo
370.634 19.8987 371.753 21.0177 371.753 22.3987 cv
371.753 23.7797 370.634 24.8987 369.253 24.8987 cv
367.873 24.8987 366.753 23.7797 366.753 22.3987 cv
366.753 21.0177 367.873 19.8987 369.253 19.8987 cv
cp
369.253 18.8987 mo
367.321 18.8987 365.753 20.4657 365.753 22.3987 cv
365.753 24.3317 367.321 25.8987 369.253 25.8987 cv
371.186 25.8987 372.753 24.3317 372.753 22.3987 cv
372.753 20.4657 371.186 18.8987 369.253 18.8987 cv
f
371.416 19.8987 mo
372.796 19.8987 373.916 21.0177 373.916 22.3987 cv
373.916 23.7797 372.796 24.8987 371.416 24.8987 cv
370.035 24.8987 368.916 23.7797 368.916 22.3987 cv
368.916 21.0177 370.035 19.8987 371.416 19.8987 cv
cp
371.416 18.8987 mo
369.483 18.8987 367.916 20.4657 367.916 22.3987 cv
367.916 24.3317 369.483 25.8987 371.416 25.8987 cv
373.348 25.8987 374.916 24.3317 374.916 22.3987 cv
374.916 20.4657 373.348 18.8987 371.416 18.8987 cv
f
373.452 18.5837 mo
374.832 18.5837 375.951 19.7027 375.951 21.0837 cv
375.951 22.4647 374.832 23.5837 373.452 23.5837 cv
372.071 23.5837 370.952 22.4647 370.952 21.0837 cv
370.952 19.7027 372.071 18.5837 373.452 18.5837 cv
cp
373.452 17.5837 mo
371.519 17.5837 369.951 19.1507 369.951 21.0837 cv
369.951 23.0167 371.519 24.5837 373.452 24.5837 cv
375.384 24.5837 376.952 23.0167 376.952 21.0837 cv
376.952 19.1507 375.384 17.5837 373.452 17.5837 cv
f
375.389 18.5837 mo
376.769 18.5837 377.889 19.7027 377.889 21.0837 cv
377.889 22.4647 376.769 23.5837 375.389 23.5837 cv
374.008 23.5837 372.889 22.4647 372.889 21.0837 cv
372.889 19.7027 374.008 18.5837 375.389 18.5837 cv
cp
375.389 17.5837 mo
373.456 17.5837 371.889 19.1507 371.889 21.0837 cv
371.889 23.0167 373.456 24.5837 375.389 24.5837 cv
377.321 24.5837 378.889 23.0167 378.889 21.0837 cv
378.889 19.1507 377.321 17.5837 375.389 17.5837 cv
f
377.182 18.1457 mo
378.563 18.1457 379.682 19.2647 379.682 20.6457 cv
379.682 22.0257 378.563 23.1457 377.182 23.1457 cv
375.801 23.1457 374.682 22.0257 374.682 20.6457 cv
374.682 19.2647 375.801 18.1457 377.182 18.1457 cv
cp
377.182 17.1457 mo
375.249 17.1457 373.682 18.7127 373.682 20.6457 cv
373.682 22.5777 375.249 24.1457 377.182 24.1457 cv
379.115 24.1457 380.682 22.5777 380.682 20.6457 cv
380.682 18.7127 379.115 17.1457 377.182 17.1457 cv
f
378.86 18.1457 mo
380.241 18.1457 381.36 19.2647 381.36 20.6457 cv
381.36 22.0257 380.241 23.1457 378.86 23.1457 cv
377.48 23.1457 376.361 22.0257 376.361 20.6457 cv
376.361 19.2647 377.48 18.1457 378.86 18.1457 cv
cp
378.86 17.1457 mo
376.928 17.1457 375.36 18.7127 375.36 20.6457 cv
375.36 22.5777 376.928 24.1457 378.86 24.1457 cv
380.793 24.1457 382.361 22.5777 382.361 20.6457 cv
382.361 18.7127 380.793 17.1457 378.86 17.1457 cv
f
380.419 18.1457 mo
381.8 18.1457 382.919 19.2647 382.919 20.6457 cv
382.919 22.0257 381.8 23.1457 380.419 23.1457 cv
379.038 23.1457 377.919 22.0257 377.919 20.6457 cv
377.919 19.2647 379.038 18.1457 380.419 18.1457 cv
cp
380.419 17.1457 mo
378.486 17.1457 376.919 18.7127 376.919 20.6457 cv
376.919 22.5777 378.486 24.1457 380.419 24.1457 cv
382.352 24.1457 383.919 22.5777 383.919 20.6457 cv
383.919 18.7127 382.352 17.1457 380.419 17.1457 cv
f
381.858 18.1457 mo
383.239 18.1457 384.358 19.2647 384.358 20.6457 cv
384.358 22.0257 383.239 23.1457 381.858 23.1457 cv
380.477 23.1457 379.358 22.0257 379.358 20.6457 cv
379.358 19.2647 380.477 18.1457 381.858 18.1457 cv
cp
381.858 17.1457 mo
379.925 17.1457 378.358 18.7127 378.358 20.6457 cv
378.358 22.5777 379.925 24.1457 381.858 24.1457 cv
383.791 24.1457 385.358 22.5777 385.358 20.6457 cv
385.358 18.7127 383.791 17.1457 381.858 17.1457 cv
f
383.168 18.1457 mo
384.548 18.1457 385.667 19.2647 385.667 20.6457 cv
385.667 22.0257 384.548 23.1457 383.168 23.1457 cv
381.787 23.1457 380.668 22.0257 380.668 20.6457 cv
380.668 19.2647 381.787 18.1457 383.168 18.1457 cv
cp
383.168 17.1457 mo
381.235 17.1457 379.667 18.7127 379.667 20.6457 cv
379.667 22.5777 381.235 24.1457 383.168 24.1457 cv
385.1 24.1457 386.668 22.5777 386.668 20.6457 cv
386.668 18.7127 385.1 17.1457 383.168 17.1457 cv
f
384.38 18.1457 mo
385.76 18.1457 386.88 19.2647 386.88 20.6457 cv
386.88 22.0257 385.76 23.1457 384.38 23.1457 cv
382.999 23.1457 381.88 22.0257 381.88 20.6457 cv
381.88 19.2647 382.999 18.1457 384.38 18.1457 cv
cp
384.38 17.1457 mo
382.447 17.1457 380.88 18.7127 380.88 20.6457 cv
380.88 22.5777 382.447 24.1457 384.38 24.1457 cv
386.312 24.1457 387.88 22.5777 387.88 20.6457 cv
387.88 18.7127 386.312 17.1457 384.38 17.1457 cv
f
385.507 18.1457 mo
386.887 18.1457 388.007 19.2647 388.007 20.6457 cv
388.007 22.0257 386.887 23.1457 385.507 23.1457 cv
384.126 23.1457 383.007 22.0257 383.007 20.6457 cv
383.007 19.2647 384.126 18.1457 385.507 18.1457 cv
cp
385.507 17.1457 mo
383.574 17.1457 382.007 18.7127 382.007 20.6457 cv
382.007 22.5777 383.574 24.1457 385.507 24.1457 cv
387.439 24.1457 389.007 22.5777 389.007 20.6457 cv
389.007 18.7127 387.439 17.1457 385.507 17.1457 cv
f
386.556 18.1457 mo
387.937 18.1457 389.056 19.2647 389.056 20.6457 cv
389.056 22.0257 387.937 23.1457 386.556 23.1457 cv
385.175 23.1457 384.056 22.0257 384.056 20.6457 cv
384.056 19.2647 385.175 18.1457 386.556 18.1457 cv
cp
386.556 17.1457 mo
384.623 17.1457 383.056 18.7127 383.056 20.6457 cv
383.056 22.5777 384.623 24.1457 386.556 24.1457 cv
388.489 24.1457 390.056 22.5777 390.056 20.6457 cv
390.056 18.7127 388.489 17.1457 386.556 17.1457 cv
f
387.527 18.1457 mo
388.907 18.1457 390.026 19.2647 390.026 20.6457 cv
390.026 22.0257 388.907 23.1457 387.527 23.1457 cv
386.146 23.1457 385.027 22.0257 385.027 20.6457 cv
385.027 19.2647 386.146 18.1457 387.527 18.1457 cv
cp
387.527 17.1457 mo
385.594 17.1457 384.026 18.7127 384.026 20.6457 cv
384.026 22.5777 385.594 24.1457 387.527 24.1457 cv
389.459 24.1457 391.027 22.5777 391.027 20.6457 cv
391.027 18.7127 389.459 17.1457 387.527 17.1457 cv
f
388.41 18.1457 mo
389.79 18.1457 390.909 19.2647 390.909 20.6457 cv
390.909 22.0257 389.79 23.1457 388.41 23.1457 cv
387.029 23.1457 385.91 22.0257 385.91 20.6457 cv
385.91 19.2647 387.029 18.1457 388.41 18.1457 cv
cp
388.41 17.1457 mo
386.477 17.1457 384.909 18.7127 384.909 20.6457 cv
384.909 22.5777 386.477 24.1457 388.41 24.1457 cv
390.342 24.1457 391.91 22.5777 391.91 20.6457 cv
391.91 18.7127 390.342 17.1457 388.41 17.1457 cv
f
389.209 18.1457 mo
390.589 18.1457 391.708 19.2647 391.708 20.6457 cv
391.708 22.0257 390.589 23.1457 389.209 23.1457 cv
387.828 23.1457 386.709 22.0257 386.709 20.6457 cv
386.709 19.2647 387.828 18.1457 389.209 18.1457 cv
cp
389.209 17.1457 mo
387.276 17.1457 385.708 18.7127 385.708 20.6457 cv
385.708 22.5777 387.276 24.1457 389.209 24.1457 cv
391.141 24.1457 392.709 22.5777 392.709 20.6457 cv
392.709 18.7127 391.141 17.1457 389.209 17.1457 cv
f
389.959 18.1457 mo
391.34 18.1457 392.459 19.2647 392.459 20.6457 cv
392.459 22.0257 391.34 23.1457 389.959 23.1457 cv
388.578 23.1457 387.459 22.0257 387.459 20.6457 cv
387.459 19.2647 388.578 18.1457 389.959 18.1457 cv
cp
389.959 17.1457 mo
388.026 17.1457 386.459 18.7127 386.459 20.6457 cv
386.459 22.5777 388.026 24.1457 389.959 24.1457 cv
391.892 24.1457 393.459 22.5777 393.459 20.6457 cv
393.459 18.7127 391.892 17.1457 389.959 17.1457 cv
f
390.635 18.1457 mo
392.016 18.1457 393.134 19.2647 393.134 20.6457 cv
393.134 22.0257 392.016 23.1457 390.635 23.1457 cv
389.254 23.1457 388.135 22.0257 388.135 20.6457 cv
388.135 19.2647 389.254 18.1457 390.635 18.1457 cv
cp
390.635 17.1457 mo
388.702 17.1457 387.134 18.7127 387.134 20.6457 cv
387.134 22.5777 388.702 24.1457 390.635 24.1457 cv
392.568 24.1457 394.135 22.5777 394.135 20.6457 cv
394.135 18.7127 392.568 17.1457 390.635 17.1457 cv
f
391.259 18.1457 mo
392.639 18.1457 393.758 19.2647 393.758 20.6457 cv
393.758 22.0257 392.639 23.1457 391.259 23.1457 cv
389.878 23.1457 388.759 22.0257 388.759 20.6457 cv
388.759 19.2647 389.878 18.1457 391.259 18.1457 cv
cp
391.259 17.1457 mo
389.326 17.1457 387.758 18.7127 387.758 20.6457 cv
387.758 22.5777 389.326 24.1457 391.259 24.1457 cv
393.191 24.1457 394.759 22.5777 394.759 20.6457 cv
394.759 18.7127 393.191 17.1457 391.259 17.1457 cv
f
391.829 18.1457 mo
393.21 18.1457 394.328 19.2647 394.328 20.6457 cv
394.328 22.0257 393.21 23.1457 391.829 23.1457 cv
390.448 23.1457 389.329 22.0257 389.329 20.6457 cv
389.329 19.2647 390.448 18.1457 391.829 18.1457 cv
cp
391.829 17.1457 mo
389.896 17.1457 388.328 18.7127 388.328 20.6457 cv
388.328 22.5777 389.896 24.1457 391.829 24.1457 cv
393.762 24.1457 395.329 22.5777 395.329 20.6457 cv
395.329 18.7127 393.762 17.1457 391.829 17.1457 cv
f
392.368 18.1457 mo
393.749 18.1457 394.868 19.2647 394.868 20.6457 cv
394.868 22.0257 393.749 23.1457 392.368 23.1457 cv
390.988 23.1457 389.869 22.0257 389.869 20.6457 cv
389.869 19.2647 390.988 18.1457 392.368 18.1457 cv
cp
392.368 17.1457 mo
390.435 17.1457 388.868 18.7127 388.868 20.6457 cv
388.868 22.5777 390.435 24.1457 392.368 24.1457 cv
394.301 24.1457 395.869 22.5777 395.869 20.6457 cv
395.869 18.7127 394.301 17.1457 392.368 17.1457 cv
f
392.849 17.7077 mo
394.23 17.7077 395.349 18.8257 395.349 20.2067 cv
395.349 21.5877 394.23 22.7067 392.849 22.7067 cv
391.469 22.7067 390.35 21.5877 390.35 20.2067 cv
390.35 18.8257 391.469 17.7077 392.849 17.7077 cv
cp
392.849 16.7067 mo
390.916 16.7067 389.349 18.2737 389.349 20.2067 cv
389.349 22.1397 390.916 23.7077 392.849 23.7077 cv
394.782 23.7077 396.35 22.1397 396.35 20.2067 cv
396.35 18.2737 394.782 16.7067 392.849 16.7067 cv
f
393.282 17.7077 mo
394.663 17.7077 395.782 18.8257 395.782 20.2067 cv
395.782 21.5877 394.663 22.7067 393.282 22.7067 cv
391.902 22.7067 390.782 21.5877 390.782 20.2067 cv
390.782 18.8257 391.902 17.7077 393.282 17.7077 cv
cp
393.282 16.7067 mo
391.35 16.7067 389.782 18.2737 389.782 20.2067 cv
389.782 22.1397 391.35 23.7077 393.282 23.7077 cv
395.215 23.7077 396.782 22.1397 396.782 20.2067 cv
396.782 18.2737 395.215 16.7067 393.282 16.7067 cv
f
393.669 17.7077 mo
395.05 17.7077 396.168 18.8257 396.168 20.2067 cv
396.168 21.5877 395.05 22.7067 393.669 22.7067 cv
392.288 22.7067 391.169 21.5877 391.169 20.2067 cv
391.169 18.8257 392.288 17.7077 393.669 17.7077 cv
cp
393.669 16.7067 mo
391.736 16.7067 390.168 18.2737 390.168 20.2067 cv
390.168 22.1397 391.736 23.7077 393.669 23.7077 cv
395.602 23.7077 397.169 22.1397 397.169 20.2067 cv
397.169 18.2737 395.602 16.7067 393.669 16.7067 cv
f
394.037 17.7077 mo
395.418 17.7077 396.537 18.8257 396.537 20.2067 cv
396.537 21.5877 395.418 22.7067 394.037 22.7067 cv
392.657 22.7067 391.537 21.5877 391.537 20.2067 cv
391.537 18.8257 392.657 17.7077 394.037 17.7077 cv
cp
394.037 16.7067 mo
392.105 16.7067 390.537 18.2737 390.537 20.2067 cv
390.537 22.1397 392.105 23.7077 394.037 23.7077 cv
395.97 23.7077 397.537 22.1397 397.537 20.2067 cv
397.537 18.2737 395.97 16.7067 394.037 16.7067 cv
f
394.371 17.7077 mo
395.751 17.7077 396.87 18.8257 396.87 20.2067 cv
396.87 21.5877 395.751 22.7067 394.371 22.7067 cv
392.99 22.7067 391.871 21.5877 391.871 20.2067 cv
391.871 18.8257 392.99 17.7077 394.371 17.7077 cv
cp
394.371 16.7067 mo
392.438 16.7067 390.87 18.2737 390.87 20.2067 cv
390.87 22.1397 392.438 23.7077 394.371 23.7077 cv
396.303 23.7077 397.871 22.1397 397.871 20.2067 cv
397.871 18.2737 396.303 16.7067 394.371 16.7067 cv
f
394.672 17.7077 mo
396.053 17.7077 397.171 18.8257 397.171 20.2067 cv
397.171 21.5877 396.053 22.7067 394.672 22.7067 cv
393.291 22.7067 392.172 21.5877 392.172 20.2067 cv
392.172 18.8257 393.291 17.7077 394.672 17.7077 cv
cp
394.672 16.7067 mo
392.739 16.7067 391.171 18.2737 391.171 20.2067 cv
391.171 22.1397 392.739 23.7077 394.672 23.7077 cv
396.605 23.7077 398.172 22.1397 398.172 20.2067 cv
398.172 18.2737 396.605 16.7067 394.672 16.7067 cv
f
394.942 17.7077 mo
396.323 17.7077 397.442 18.8257 397.442 20.2067 cv
397.442 21.5877 396.323 22.7067 394.942 22.7067 cv
393.561 22.7067 392.442 21.5877 392.442 20.2067 cv
392.442 18.8257 393.561 17.7077 394.942 17.7077 cv
cp
394.942 16.7067 mo
393.009 16.7067 391.442 18.2737 391.442 20.2067 cv
391.442 22.1397 393.009 23.7077 394.942 23.7077 cv
396.875 23.7077 398.442 22.1397 398.442 20.2067 cv
398.442 18.2737 396.875 16.7067 394.942 16.7067 cv
f
395.192 17.7077 mo
396.573 17.7077 397.692 18.8257 397.692 20.2067 cv
397.692 21.5877 396.573 22.7067 395.192 22.7067 cv
393.811 22.7067 392.693 21.5877 392.693 20.2067 cv
392.693 18.8257 393.811 17.7077 395.192 17.7077 cv
cp
395.192 16.7067 mo
393.259 16.7067 391.692 18.2737 391.692 20.2067 cv
391.692 22.1397 393.259 23.7077 395.192 23.7077 cv
397.125 23.7077 398.693 22.1397 398.693 20.2067 cv
398.693 18.2737 397.125 16.7067 395.192 16.7067 cv
f
395.419 17.7077 mo
396.799 17.7077 397.918 18.8257 397.918 20.2067 cv
397.918 21.5877 396.799 22.7067 395.419 22.7067 cv
394.038 22.7067 392.919 21.5877 392.919 20.2067 cv
392.919 18.8257 394.038 17.7077 395.419 17.7077 cv
cp
395.419 16.7067 mo
393.486 16.7067 391.918 18.2737 391.918 20.2067 cv
391.918 22.1397 393.486 23.7077 395.419 23.7077 cv
397.352 23.7077 398.919 22.1397 398.919 20.2067 cv
398.919 18.2737 397.352 16.7067 395.419 16.7067 cv
f
395.63 17.2687 mo
397.011 17.2687 398.13 18.3877 398.13 19.7687 cv
398.13 21.1497 397.011 22.2687 395.63 22.2687 cv
394.25 22.2687 393.13 21.1497 393.13 19.7687 cv
393.13 18.3877 394.25 17.2687 395.63 17.2687 cv
cp
395.63 16.2687 mo
393.697 16.2687 392.13 17.8357 392.13 19.7687 cv
392.13 21.7017 393.697 23.2687 395.63 23.2687 cv
397.563 23.2687 399.13 21.7017 399.13 19.7687 cv
399.13 17.8357 397.563 16.2687 395.63 16.2687 cv
f
395.832 17.2687 mo
397.212 17.2687 398.331 18.3877 398.331 19.7687 cv
398.331 21.1497 397.212 22.2687 395.832 22.2687 cv
394.451 22.2687 393.332 21.1497 393.332 19.7687 cv
393.332 18.3877 394.451 17.2687 395.832 17.2687 cv
cp
395.832 16.2687 mo
393.899 16.2687 392.331 17.8357 392.331 19.7687 cv
392.331 21.7017 393.899 23.2687 395.832 23.2687 cv
397.764 23.2687 399.332 21.7017 399.332 19.7687 cv
399.332 17.8357 397.764 16.2687 395.832 16.2687 cv
f
396.01 17.2687 mo
397.391 17.2687 398.51 18.3877 398.51 19.7687 cv
398.51 21.1497 397.391 22.2687 396.01 22.2687 cv
394.63 22.2687 393.51 21.1497 393.51 19.7687 cv
393.51 18.3877 394.63 17.2687 396.01 17.2687 cv
cp
396.01 16.2687 mo
394.078 16.2687 392.51 17.8357 392.51 19.7687 cv
392.51 21.7017 394.078 23.2687 396.01 23.2687 cv
397.943 23.2687 399.51 21.7017 399.51 19.7687 cv
399.51 17.8357 397.943 16.2687 396.01 16.2687 cv
f
396.175 17.2687 mo
397.556 17.2687 398.675 18.3877 398.675 19.7687 cv
398.675 21.1497 397.556 22.2687 396.175 22.2687 cv
394.795 22.2687 393.676 21.1497 393.676 19.7687 cv
393.676 18.3877 394.795 17.2687 396.175 17.2687 cv
cp
396.175 16.2687 mo
394.243 16.2687 392.675 17.8357 392.675 19.7687 cv
392.675 21.7017 394.243 23.2687 396.175 23.2687 cv
398.108 23.2687 399.676 21.7017 399.676 19.7687 cv
399.676 17.8357 398.108 16.2687 396.175 16.2687 cv
f
396.324 17.2687 mo
397.705 17.2687 398.824 18.3877 398.824 19.7687 cv
398.824 21.1497 397.705 22.2687 396.324 22.2687 cv
394.943 22.2687 393.824 21.1497 393.824 19.7687 cv
393.824 18.3877 394.943 17.2687 396.324 17.2687 cv
cp
396.324 16.2687 mo
394.391 16.2687 392.824 17.8357 392.824 19.7687 cv
392.824 21.7017 394.391 23.2687 396.324 23.2687 cv
398.257 23.2687 399.824 21.7017 399.824 19.7687 cv
399.824 17.8357 398.257 16.2687 396.324 16.2687 cv
f
396.458 17.2687 mo
397.839 17.2687 398.958 18.3877 398.958 19.7687 cv
398.958 21.1497 397.839 22.2687 396.458 22.2687 cv
395.077 22.2687 393.959 21.1497 393.959 19.7687 cv
393.959 18.3877 395.077 17.2687 396.458 17.2687 cv
cp
396.458 16.2687 mo
394.525 16.2687 392.958 17.8357 392.958 19.7687 cv
392.958 21.7017 394.525 23.2687 396.458 23.2687 cv
398.391 23.2687 399.959 21.7017 399.959 19.7687 cv
399.959 17.8357 398.391 16.2687 396.458 16.2687 cv
f
396.58 17.2687 mo
397.96 17.2687 399.079 18.3877 399.079 19.7687 cv
399.079 21.1497 397.96 22.2687 396.58 22.2687 cv
395.199 22.2687 394.08 21.1497 394.08 19.7687 cv
394.08 18.3877 395.199 17.2687 396.58 17.2687 cv
cp
396.58 16.2687 mo
394.647 16.2687 393.079 17.8357 393.079 19.7687 cv
393.079 21.7017 394.647 23.2687 396.58 23.2687 cv
398.512 23.2687 400.08 21.7017 400.08 19.7687 cv
400.08 17.8357 398.512 16.2687 396.58 16.2687 cv
f
396.687 17.2687 mo
398.068 17.2687 399.187 18.3877 399.187 19.7687 cv
399.187 21.1497 398.068 22.2687 396.687 22.2687 cv
395.307 22.2687 394.187 21.1497 394.187 19.7687 cv
394.187 18.3877 395.307 17.2687 396.687 17.2687 cv
cp
396.687 16.2687 mo
394.755 16.2687 393.187 17.8357 393.187 19.7687 cv
393.187 21.7017 394.755 23.2687 396.687 23.2687 cv
398.62 23.2687 400.187 21.7017 400.187 19.7687 cv
400.187 17.8357 398.62 16.2687 396.687 16.2687 cv
f
396.788 17.2687 mo
398.169 17.2687 399.288 18.3877 399.288 19.7687 cv
399.288 21.1497 398.169 22.2687 396.788 22.2687 cv
395.407 22.2687 394.288 21.1497 394.288 19.7687 cv
394.288 18.3877 395.407 17.2687 396.788 17.2687 cv
cp
396.788 16.2687 mo
394.855 16.2687 393.288 17.8357 393.288 19.7687 cv
393.288 21.7017 394.855 23.2687 396.788 23.2687 cv
398.721 23.2687 400.288 21.7017 400.288 19.7687 cv
400.288 17.8357 398.721 16.2687 396.788 16.2687 cv
f
396.884 17.2687 mo
398.264 17.2687 399.384 18.3877 399.384 19.7687 cv
399.384 21.1497 398.264 22.2687 396.884 22.2687 cv
395.503 22.2687 394.384 21.1497 394.384 19.7687 cv
394.384 18.3877 395.503 17.2687 396.884 17.2687 cv
cp
396.884 16.2687 mo
394.951 16.2687 393.384 17.8357 393.384 19.7687 cv
393.384 21.7017 394.951 23.2687 396.884 23.2687 cv
398.816 23.2687 400.384 21.7017 400.384 19.7687 cv
400.384 17.8357 398.816 16.2687 396.884 16.2687 cv
f
396.967 17.2687 mo
398.348 17.2687 399.467 18.3877 399.467 19.7687 cv
399.467 21.1497 398.348 22.2687 396.967 22.2687 cv
395.587 22.2687 394.468 21.1497 394.468 19.7687 cv
394.468 18.3877 395.587 17.2687 396.967 17.2687 cv
cp
396.967 16.2687 mo
395.035 16.2687 393.467 17.8357 393.467 19.7687 cv
393.467 21.7017 395.035 23.2687 396.967 23.2687 cv
398.9 23.2687 400.468 21.7017 400.468 19.7687 cv
400.468 17.8357 398.9 16.2687 396.967 16.2687 cv
f
397.044 17.2687 mo
398.425 17.2687 399.544 18.3877 399.544 19.7687 cv
399.544 21.1497 398.425 22.2687 397.044 22.2687 cv
395.663 22.2687 394.544 21.1497 394.544 19.7687 cv
394.544 18.3877 395.663 17.2687 397.044 17.2687 cv
cp
397.044 16.2687 mo
395.111 16.2687 393.544 17.8357 393.544 19.7687 cv
393.544 21.7017 395.111 23.2687 397.044 23.2687 cv
398.977 23.2687 400.544 21.7017 400.544 19.7687 cv
400.544 17.8357 398.977 16.2687 397.044 16.2687 cv
f
397.118 17.2687 mo
398.499 17.2687 399.618 18.3877 399.618 19.7687 cv
399.618 21.1497 398.499 22.2687 397.118 22.2687 cv
395.737 22.2687 394.618 21.1497 394.618 19.7687 cv
394.618 18.3877 395.737 17.2687 397.118 17.2687 cv
cp
397.118 16.2687 mo
395.185 16.2687 393.618 17.8357 393.618 19.7687 cv
393.618 21.7017 395.185 23.2687 397.118 23.2687 cv
399.051 23.2687 400.618 21.7017 400.618 19.7687 cv
400.618 17.8357 399.051 16.2687 397.118 16.2687 cv
f
397.184 17.2687 mo
398.565 17.2687 399.684 18.3877 399.684 19.7687 cv
399.684 21.1497 398.565 22.2687 397.184 22.2687 cv
395.803 22.2687 394.685 21.1497 394.685 19.7687 cv
394.685 18.3877 395.803 17.2687 397.184 17.2687 cv
cp
397.184 16.2687 mo
395.252 16.2687 393.684 17.8357 393.684 19.7687 cv
393.684 21.7017 395.252 23.2687 397.184 23.2687 cv
399.117 23.2687 400.685 21.7017 400.685 19.7687 cv
400.685 17.8357 399.117 16.2687 397.184 16.2687 cv
f
397.244 17.2687 mo
398.625 17.2687 399.744 18.3877 399.744 19.7687 cv
399.744 21.1497 398.625 22.2687 397.244 22.2687 cv
395.864 22.2687 394.744 21.1497 394.744 19.7687 cv
394.744 18.3877 395.864 17.2687 397.244 17.2687 cv
cp
397.244 16.2687 mo
395.311 16.2687 393.744 17.8357 393.744 19.7687 cv
393.744 21.7017 395.311 23.2687 397.244 23.2687 cv
399.177 23.2687 400.744 21.7017 400.744 19.7687 cv
400.744 17.8357 399.177 16.2687 397.244 16.2687 cv
f
397.296 17.2687 mo
398.677 17.2687 399.796 18.3877 399.796 19.7687 cv
399.796 21.1497 398.677 22.2687 397.296 22.2687 cv
395.915 22.2687 394.796 21.1497 394.796 19.7687 cv
394.796 18.3877 395.915 17.2687 397.296 17.2687 cv
cp
397.296 16.2687 mo
395.363 16.2687 393.796 17.8357 393.796 19.7687 cv
393.796 21.7017 395.363 23.2687 397.296 23.2687 cv
399.228 23.2687 400.796 21.7017 400.796 19.7687 cv
400.796 17.8357 399.228 16.2687 397.296 16.2687 cv
f
397.342 17.2687 mo
398.723 17.2687 399.842 18.3877 399.842 19.7687 cv
399.842 21.1497 398.723 22.2687 397.342 22.2687 cv
395.961 22.2687 394.843 21.1497 394.843 19.7687 cv
394.843 18.3877 395.961 17.2687 397.342 17.2687 cv
cp
397.342 16.2687 mo
395.409 16.2687 393.842 17.8357 393.842 19.7687 cv
393.842 21.7017 395.409 23.2687 397.342 23.2687 cv
399.275 23.2687 400.843 21.7017 400.843 19.7687 cv
400.843 17.8357 399.275 16.2687 397.342 16.2687 cv
f
397.386 17.2687 mo
398.767 17.2687 399.886 18.3877 399.886 19.7687 cv
399.886 21.1497 398.767 22.2687 397.386 22.2687 cv
396.006 22.2687 394.887 21.1497 394.887 19.7687 cv
394.887 18.3877 396.006 17.2687 397.386 17.2687 cv
cp
397.386 16.2687 mo
395.454 16.2687 393.886 17.8357 393.886 19.7687 cv
393.886 21.7017 395.454 23.2687 397.386 23.2687 cv
399.319 23.2687 400.887 21.7017 400.887 19.7687 cv
400.887 17.8357 399.319 16.2687 397.386 16.2687 cv
f
397.43 17.2687 mo
398.81 17.2687 399.929 18.3877 399.929 19.7687 cv
399.929 21.1497 398.81 22.2687 397.43 22.2687 cv
396.049 22.2687 394.93 21.1497 394.93 19.7687 cv
394.93 18.3877 396.049 17.2687 397.43 17.2687 cv
cp
397.43 16.2687 mo
395.497 16.2687 393.929 17.8357 393.929 19.7687 cv
393.929 21.7017 395.497 23.2687 397.43 23.2687 cv
399.362 23.2687 400.93 21.7017 400.93 19.7687 cv
400.93 17.8357 399.362 16.2687 397.43 16.2687 cv
f
397.463 17.2687 mo
398.843 17.2687 399.962 18.3877 399.962 19.7687 cv
399.962 21.1497 398.843 22.2687 397.463 22.2687 cv
396.082 22.2687 394.963 21.1497 394.963 19.7687 cv
394.963 18.3877 396.082 17.2687 397.463 17.2687 cv
cp
397.463 16.2687 mo
395.53 16.2687 393.962 17.8357 393.962 19.7687 cv
393.962 21.7017 395.53 23.2687 397.463 23.2687 cv
399.395 23.2687 400.963 21.7017 400.963 19.7687 cv
400.963 17.8357 399.395 16.2687 397.463 16.2687 cv
f
397.498 17.2687 mo
398.878 17.2687 399.997 18.3877 399.997 19.7687 cv
399.997 21.1497 398.878 22.2687 397.498 22.2687 cv
396.117 22.2687 394.998 21.1497 394.998 19.7687 cv
394.998 18.3877 396.117 17.2687 397.498 17.2687 cv
cp
397.498 16.2687 mo
395.565 16.2687 393.997 17.8357 393.997 19.7687 cv
393.997 21.7017 395.565 23.2687 397.498 23.2687 cv
399.43 23.2687 400.998 21.7017 400.998 19.7687 cv
400.998 17.8357 399.43 16.2687 397.498 16.2687 cv
f
397.529 17.2687 mo
398.91 17.2687 400.029 18.3877 400.029 19.7687 cv
400.029 21.1497 398.91 22.2687 397.529 22.2687 cv
396.148 22.2687 395.029 21.1497 395.029 19.7687 cv
395.029 18.3877 396.148 17.2687 397.529 17.2687 cv
cp
397.529 16.2687 mo
395.596 16.2687 394.029 17.8357 394.029 19.7687 cv
394.029 21.7017 395.596 23.2687 397.529 23.2687 cv
399.462 23.2687 401.029 21.7017 401.029 19.7687 cv
401.029 17.8357 399.462 16.2687 397.529 16.2687 cv
f
397.558 17.2687 mo
398.938 17.2687 400.057 18.3877 400.057 19.7687 cv
400.057 21.1497 398.938 22.2687 397.558 22.2687 cv
396.177 22.2687 395.058 21.1497 395.058 19.7687 cv
395.058 18.3877 396.177 17.2687 397.558 17.2687 cv
cp
397.558 16.2687 mo
395.625 16.2687 394.057 17.8357 394.057 19.7687 cv
394.057 21.7017 395.625 23.2687 397.558 23.2687 cv
399.49 23.2687 401.058 21.7017 401.058 19.7687 cv
401.058 17.8357 399.49 16.2687 397.558 16.2687 cv
f
397.588 17.2687 mo
398.969 17.2687 400.088 18.3877 400.088 19.7687 cv
400.088 21.1497 398.969 22.2687 397.588 22.2687 cv
396.207 22.2687 395.089 21.1497 395.089 19.7687 cv
395.089 18.3877 396.207 17.2687 397.588 17.2687 cv
cp
397.588 16.2687 mo
395.655 16.2687 394.088 17.8357 394.088 19.7687 cv
394.088 21.7017 395.655 23.2687 397.588 23.2687 cv
399.521 23.2687 401.089 21.7017 401.089 19.7687 cv
401.089 17.8357 399.521 16.2687 397.588 16.2687 cv
f
397.614 17.2687 mo
398.995 17.2687 400.114 18.3877 400.114 19.7687 cv
400.114 21.1497 398.995 22.2687 397.614 22.2687 cv
396.233 22.2687 395.114 21.1497 395.114 19.7687 cv
395.114 18.3877 396.233 17.2687 397.614 17.2687 cv
cp
397.614 16.2687 mo
395.681 16.2687 394.114 17.8357 394.114 19.7687 cv
394.114 21.7017 395.681 23.2687 397.614 23.2687 cv
399.547 23.2687 401.114 21.7017 401.114 19.7687 cv
401.114 17.8357 399.547 16.2687 397.614 16.2687 cv
f
397.636 17.2687 mo
399.017 17.2687 400.136 18.3877 400.136 19.7687 cv
400.136 21.1497 399.017 22.2687 397.636 22.2687 cv
396.256 22.2687 395.137 21.1497 395.137 19.7687 cv
395.137 18.3877 396.256 17.2687 397.636 17.2687 cv
cp
397.636 16.2687 mo
395.703 16.2687 394.136 17.8357 394.136 19.7687 cv
394.136 21.7017 395.703 23.2687 397.636 23.2687 cv
399.569 23.2687 401.137 21.7017 401.137 19.7687 cv
401.137 17.8357 399.569 16.2687 397.636 16.2687 cv
f
397.656 17.2687 mo
399.037 17.2687 400.156 18.3877 400.156 19.7687 cv
400.156 21.1497 399.037 22.2687 397.656 22.2687 cv
396.275 22.2687 395.157 21.1497 395.157 19.7687 cv
395.157 18.3877 396.275 17.2687 397.656 17.2687 cv
cp
397.656 16.2687 mo
395.723 16.2687 394.156 17.8357 394.156 19.7687 cv
394.156 21.7017 395.723 23.2687 397.656 23.2687 cv
399.589 23.2687 401.157 21.7017 401.157 19.7687 cv
401.157 17.8357 399.589 16.2687 397.656 16.2687 cv
f
397.674 17.2687 mo
399.055 17.2687 400.174 18.3877 400.174 19.7687 cv
400.174 21.1497 399.055 22.2687 397.674 22.2687 cv
396.293 22.2687 395.175 21.1497 395.175 19.7687 cv
395.175 18.3877 396.293 17.2687 397.674 17.2687 cv
cp
397.674 16.2687 mo
395.741 16.2687 394.174 17.8357 394.174 19.7687 cv
394.174 21.7017 395.741 23.2687 397.674 23.2687 cv
399.607 23.2687 401.175 21.7017 401.175 19.7687 cv
401.175 17.8357 399.607 16.2687 397.674 16.2687 cv
f
397.691 17.2687 mo
399.072 17.2687 400.191 18.3877 400.191 19.7687 cv
400.191 21.1497 399.072 22.2687 397.691 22.2687 cv
396.31 22.2687 395.191 21.1497 395.191 19.7687 cv
395.191 18.3877 396.31 17.2687 397.691 17.2687 cv
cp
397.691 16.2687 mo
395.758 16.2687 394.191 17.8357 394.191 19.7687 cv
394.191 21.7017 395.758 23.2687 397.691 23.2687 cv
399.624 23.2687 401.191 21.7017 401.191 19.7687 cv
401.191 17.8357 399.624 16.2687 397.691 16.2687 cv
f
397.707 17.2687 mo
399.087 17.2687 400.206 18.3877 400.206 19.7687 cv
400.206 21.1497 399.087 22.2687 397.707 22.2687 cv
396.326 22.2687 395.207 21.1497 395.207 19.7687 cv
395.207 18.3877 396.326 17.2687 397.707 17.2687 cv
cp
397.707 16.2687 mo
395.774 16.2687 394.206 17.8357 394.206 19.7687 cv
394.206 21.7017 395.774 23.2687 397.707 23.2687 cv
399.639 23.2687 401.207 21.7017 401.207 19.7687 cv
401.207 17.8357 399.639 16.2687 397.707 16.2687 cv
f
397.72 17.2687 mo
399.101 17.2687 400.22 18.3877 400.22 19.7687 cv
400.22 21.1497 399.101 22.2687 397.72 22.2687 cv
396.34 22.2687 395.221 21.1497 395.221 19.7687 cv
395.221 18.3877 396.34 17.2687 397.72 17.2687 cv
cp
397.72 16.2687 mo
395.787 16.2687 394.22 17.8357 394.22 19.7687 cv
394.22 21.7017 395.787 23.2687 397.72 23.2687 cv
399.653 23.2687 401.221 21.7017 401.221 19.7687 cv
401.221 17.8357 399.653 16.2687 397.72 16.2687 cv
f
397.733 17.2687 mo
399.114 17.2687 400.233 18.3877 400.233 19.7687 cv
400.233 21.1497 399.114 22.2687 397.733 22.2687 cv
396.352 22.2687 395.233 21.1497 395.233 19.7687 cv
395.233 18.3877 396.352 17.2687 397.733 17.2687 cv
cp
397.733 16.2687 mo
395.8 16.2687 394.233 17.8357 394.233 19.7687 cv
394.233 21.7017 395.8 23.2687 397.733 23.2687 cv
399.666 23.2687 401.233 21.7017 401.233 19.7687 cv
401.233 17.8357 399.666 16.2687 397.733 16.2687 cv
f
397.744 17.2687 mo
399.125 17.2687 400.244 18.3877 400.244 19.7687 cv
400.244 21.1497 399.125 22.2687 397.744 22.2687 cv
396.364 22.2687 395.244 21.1497 395.244 19.7687 cv
395.244 18.3877 396.364 17.2687 397.744 17.2687 cv
cp
397.744 16.2687 mo
395.812 16.2687 394.244 17.8357 394.244 19.7687 cv
394.244 21.7017 395.812 23.2687 397.744 23.2687 cv
399.677 23.2687 401.244 21.7017 401.244 19.7687 cv
401.244 17.8357 399.677 16.2687 397.744 16.2687 cv
f
397.755 17.2687 mo
399.135 17.2687 400.255 18.3877 400.255 19.7687 cv
400.255 21.1497 399.135 22.2687 397.755 22.2687 cv
396.374 22.2687 395.255 21.1497 395.255 19.7687 cv
395.255 18.3877 396.374 17.2687 397.755 17.2687 cv
cp
397.755 16.2687 mo
395.822 16.2687 394.255 17.8357 394.255 19.7687 cv
394.255 21.7017 395.822 23.2687 397.755 23.2687 cv
399.687 23.2687 401.255 21.7017 401.255 19.7687 cv
401.255 17.8357 399.687 16.2687 397.755 16.2687 cv
f
397.764 17.2687 mo
399.145 17.2687 400.264 18.3877 400.264 19.7687 cv
400.264 21.1497 399.145 22.2687 397.764 22.2687 cv
396.384 22.2687 395.264 21.1497 395.264 19.7687 cv
395.264 18.3877 396.384 17.2687 397.764 17.2687 cv
cp
397.764 16.2687 mo
395.832 16.2687 394.264 17.8357 394.264 19.7687 cv
394.264 21.7017 395.832 23.2687 397.764 23.2687 cv
399.697 23.2687 401.264 21.7017 401.264 19.7687 cv
401.264 17.8357 399.697 16.2687 397.764 16.2687 cv
f
397.772 17.2687 mo
399.153 17.2687 400.272 18.3877 400.272 19.7687 cv
400.272 21.1497 399.153 22.2687 397.772 22.2687 cv
396.391 22.2687 395.272 21.1497 395.272 19.7687 cv
395.272 18.3877 396.391 17.2687 397.772 17.2687 cv
cp
397.772 16.2687 mo
395.839 16.2687 394.272 17.8357 394.272 19.7687 cv
394.272 21.7017 395.839 23.2687 397.772 23.2687 cv
399.705 23.2687 401.272 21.7017 401.272 19.7687 cv
401.272 17.8357 399.705 16.2687 397.772 16.2687 cv
f
397.779 17.2687 mo
399.16 17.2687 400.279 18.3877 400.279 19.7687 cv
400.279 21.1497 399.16 22.2687 397.779 22.2687 cv
396.398 22.2687 395.279 21.1497 395.279 19.7687 cv
395.279 18.3877 396.398 17.2687 397.779 17.2687 cv
cp
397.779 16.2687 mo
395.846 16.2687 394.279 17.8357 394.279 19.7687 cv
394.279 21.7017 395.846 23.2687 397.779 23.2687 cv
399.712 23.2687 401.279 21.7017 401.279 19.7687 cv
401.279 17.8357 399.712 16.2687 397.779 16.2687 cv
f
397.787 17.2687 mo
399.168 17.2687 400.287 18.3877 400.287 19.7687 cv
400.287 21.1497 399.168 22.2687 397.787 22.2687 cv
396.407 22.2687 395.287 21.1497 395.287 19.7687 cv
395.287 18.3877 396.407 17.2687 397.787 17.2687 cv
cp
397.787 16.2687 mo
395.855 16.2687 394.287 17.8357 394.287 19.7687 cv
394.287 21.7017 395.855 23.2687 397.787 23.2687 cv
399.72 23.2687 401.287 21.7017 401.287 19.7687 cv
401.287 17.8357 399.72 16.2687 397.787 16.2687 cv
f
397.794 17.2687 mo
399.175 17.2687 400.294 18.3877 400.294 19.7687 cv
400.294 21.1497 399.175 22.2687 397.794 22.2687 cv
396.413 22.2687 395.294 21.1497 395.294 19.7687 cv
395.294 18.3877 396.413 17.2687 397.794 17.2687 cv
cp
397.794 16.2687 mo
395.861 16.2687 394.294 17.8357 394.294 19.7687 cv
394.294 21.7017 395.861 23.2687 397.794 23.2687 cv
399.727 23.2687 401.294 21.7017 401.294 19.7687 cv
401.294 17.8357 399.727 16.2687 397.794 16.2687 cv
f
397.8 17.2687 mo
399.181 17.2687 400.3 18.3877 400.3 19.7687 cv
400.3 21.1497 399.181 22.2687 397.8 22.2687 cv
396.419 22.2687 395.3 21.1497 395.3 19.7687 cv
395.3 18.3877 396.419 17.2687 397.8 17.2687 cv
cp
397.8 16.2687 mo
395.867 16.2687 394.3 17.8357 394.3 19.7687 cv
394.3 21.7017 395.867 23.2687 397.8 23.2687 cv
399.733 23.2687 401.3 21.7017 401.3 19.7687 cv
401.3 17.8357 399.733 16.2687 397.8 16.2687 cv
f
397.804 17.2687 mo
399.185 17.2687 400.304 18.3877 400.304 19.7687 cv
400.304 21.1497 399.185 22.2687 397.804 22.2687 cv
396.423 22.2687 395.305 21.1497 395.305 19.7687 cv
395.305 18.3877 396.423 17.2687 397.804 17.2687 cv
cp
397.804 16.2687 mo
395.871 16.2687 394.304 17.8357 394.304 19.7687 cv
394.304 21.7017 395.871 23.2687 397.804 23.2687 cv
399.737 23.2687 401.305 21.7017 401.305 19.7687 cv
401.305 17.8357 399.737 16.2687 397.804 16.2687 cv
f
397.809 17.2687 mo
399.19 17.2687 400.309 18.3877 400.309 19.7687 cv
400.309 21.1497 399.19 22.2687 397.809 22.2687 cv
396.428 22.2687 395.309 21.1497 395.309 19.7687 cv
395.309 18.3877 396.428 17.2687 397.809 17.2687 cv
cp
397.809 16.2687 mo
395.876 16.2687 394.309 17.8357 394.309 19.7687 cv
394.309 21.7017 395.876 23.2687 397.809 23.2687 cv
399.742 23.2687 401.309 21.7017 401.309 19.7687 cv
401.309 17.8357 399.742 16.2687 397.809 16.2687 cv
f
397.812 17.2687 mo
399.193 17.2687 400.312 18.3877 400.312 19.7687 cv
400.312 21.1497 399.193 22.2687 397.812 22.2687 cv
396.431 22.2687 395.312 21.1497 395.312 19.7687 cv
395.312 18.3877 396.431 17.2687 397.812 17.2687 cv
cp
397.812 16.2687 mo
395.879 16.2687 394.312 17.8357 394.312 19.7687 cv
394.312 21.7017 395.879 23.2687 397.812 23.2687 cv
399.744 23.2687 401.312 21.7017 401.312 19.7687 cv
401.312 17.8357 399.744 16.2687 397.812 16.2687 cv
f
397.816 17.2687 mo
399.196 17.2687 400.316 18.3877 400.316 19.7687 cv
400.316 21.1497 399.196 22.2687 397.816 22.2687 cv
396.435 22.2687 395.316 21.1497 395.316 19.7687 cv
395.316 18.3877 396.435 17.2687 397.816 17.2687 cv
cp
397.816 16.2687 mo
395.883 16.2687 394.316 17.8357 394.316 19.7687 cv
394.316 21.7017 395.883 23.2687 397.816 23.2687 cv
399.749 23.2687 401.316 21.7017 401.316 19.7687 cv
401.316 17.8357 399.749 16.2687 397.816 16.2687 cv
f
397.819 17.2687 mo
399.199 17.2687 400.318 18.3877 400.318 19.7687 cv
400.318 21.1497 399.199 22.2687 397.819 22.2687 cv
396.438 22.2687 395.319 21.1497 395.319 19.7687 cv
395.319 18.3877 396.438 17.2687 397.819 17.2687 cv
cp
397.819 16.2687 mo
395.886 16.2687 394.318 17.8357 394.318 19.7687 cv
394.318 21.7017 395.886 23.2687 397.819 23.2687 cv
399.751 23.2687 401.319 21.7017 401.319 19.7687 cv
401.319 17.8357 399.751 16.2687 397.819 16.2687 cv
f
397.82 17.2687 mo
399.201 17.2687 400.32 18.3877 400.32 19.7687 cv
400.32 21.1497 399.201 22.2687 397.82 22.2687 cv
396.439 22.2687 395.32 21.1497 395.32 19.7687 cv
395.32 18.3877 396.439 17.2687 397.82 17.2687 cv
cp
397.82 16.2687 mo
395.887 16.2687 394.32 17.8357 394.32 19.7687 cv
394.32 21.7017 395.887 23.2687 397.82 23.2687 cv
399.753 23.2687 401.32 21.7017 401.32 19.7687 cv
401.32 17.8357 399.753 16.2687 397.82 16.2687 cv
f
397.823 17.2687 mo
399.204 17.2687 400.323 18.3877 400.323 19.7687 cv
400.323 21.1497 399.204 22.2687 397.823 22.2687 cv
396.442 22.2687 395.323 21.1497 395.323 19.7687 cv
395.323 18.3877 396.442 17.2687 397.823 17.2687 cv
cp
397.823 16.2687 mo
395.89 16.2687 394.323 17.8357 394.323 19.7687 cv
394.323 21.7017 395.89 23.2687 397.823 23.2687 cv
399.756 23.2687 401.323 21.7017 401.323 19.7687 cv
401.323 17.8357 399.756 16.2687 397.823 16.2687 cv
f
397.825 17.2687 mo
399.206 17.2687 400.325 18.3877 400.325 19.7687 cv
400.325 21.1497 399.206 22.2687 397.825 22.2687 cv
396.444 22.2687 395.326 21.1497 395.326 19.7687 cv
395.326 18.3877 396.444 17.2687 397.825 17.2687 cv
cp
397.825 16.2687 mo
395.893 16.2687 394.325 17.8357 394.325 19.7687 cv
394.325 21.7017 395.893 23.2687 397.825 23.2687 cv
399.758 23.2687 401.326 21.7017 401.326 19.7687 cv
401.326 17.8357 399.758 16.2687 397.825 16.2687 cv
f
397.827 17.2687 mo
399.208 17.2687 400.327 18.3877 400.327 19.7687 cv
400.327 21.1497 399.208 22.2687 397.827 22.2687 cv
396.446 22.2687 395.327 21.1497 395.327 19.7687 cv
395.327 18.3877 396.446 17.2687 397.827 17.2687 cv
cp
397.827 16.2687 mo
395.894 16.2687 394.327 17.8357 394.327 19.7687 cv
394.327 21.7017 395.894 23.2687 397.827 23.2687 cv
399.76 23.2687 401.327 21.7017 401.327 19.7687 cv
401.327 17.8357 399.76 16.2687 397.827 16.2687 cv
f
397.828 17.2687 mo
399.209 17.2687 400.328 18.3877 400.328 19.7687 cv
400.328 21.1497 399.209 22.2687 397.828 22.2687 cv
396.448 22.2687 395.329 21.1497 395.329 19.7687 cv
395.329 18.3877 396.448 17.2687 397.828 17.2687 cv
cp
397.828 16.2687 mo
395.896 16.2687 394.328 17.8357 394.328 19.7687 cv
394.328 21.7017 395.896 23.2687 397.828 23.2687 cv
399.761 23.2687 401.329 21.7017 401.329 19.7687 cv
401.329 17.8357 399.761 16.2687 397.828 16.2687 cv
f
397.83 17.2687 mo
399.211 17.2687 400.33 18.3877 400.33 19.7687 cv
400.33 21.1497 399.211 22.2687 397.83 22.2687 cv
396.449 22.2687 395.33 21.1497 395.33 19.7687 cv
395.33 18.3877 396.449 17.2687 397.83 17.2687 cv
cp
397.83 16.2687 mo
395.897 16.2687 394.33 17.8357 394.33 19.7687 cv
394.33 21.7017 395.897 23.2687 397.83 23.2687 cv
399.763 23.2687 401.33 21.7017 401.33 19.7687 cv
401.33 17.8357 399.763 16.2687 397.83 16.2687 cv
f
397.831 17.2687 mo
399.212 17.2687 400.331 18.3877 400.331 19.7687 cv
400.331 21.1497 399.212 22.2687 397.831 22.2687 cv
396.45 22.2687 395.331 21.1497 395.331 19.7687 cv
395.331 18.3877 396.45 17.2687 397.831 17.2687 cv
cp
397.831 16.2687 mo
395.898 16.2687 394.331 17.8357 394.331 19.7687 cv
394.331 21.7017 395.898 23.2687 397.831 23.2687 cv
399.764 23.2687 401.331 21.7017 401.331 19.7687 cv
401.331 17.8357 399.764 16.2687 397.831 16.2687 cv
f
397.832 17.2687 mo
399.213 17.2687 400.332 18.3877 400.332 19.7687 cv
400.332 21.1497 399.213 22.2687 397.832 22.2687 cv
396.452 22.2687 395.332 21.1497 395.332 19.7687 cv
395.332 18.3877 396.452 17.2687 397.832 17.2687 cv
cp
397.832 16.2687 mo
395.9 16.2687 394.332 17.8357 394.332 19.7687 cv
394.332 21.7017 395.9 23.2687 397.832 23.2687 cv
399.765 23.2687 401.332 21.7017 401.332 19.7687 cv
401.332 17.8357 399.765 16.2687 397.832 16.2687 cv
f
397.833 17.2687 mo
399.214 17.2687 400.333 18.3877 400.333 19.7687 cv
400.333 21.1497 399.214 22.2687 397.833 22.2687 cv
396.452 22.2687 395.333 21.1497 395.333 19.7687 cv
395.333 18.3877 396.452 17.2687 397.833 17.2687 cv
cp
397.833 16.2687 mo
395.9 16.2687 394.333 17.8357 394.333 19.7687 cv
394.333 21.7017 395.9 23.2687 397.833 23.2687 cv
399.766 23.2687 401.333 21.7017 401.333 19.7687 cv
401.333 17.8357 399.766 16.2687 397.833 16.2687 cv
f
397.834 17.2687 mo
399.215 17.2687 400.334 18.3877 400.334 19.7687 cv
400.334 21.1497 399.215 22.2687 397.834 22.2687 cv
396.453 22.2687 395.334 21.1497 395.334 19.7687 cv
395.334 18.3877 396.453 17.2687 397.834 17.2687 cv
cp
397.834 16.2687 mo
395.901 16.2687 394.334 17.8357 394.334 19.7687 cv
394.334 21.7017 395.901 23.2687 397.834 23.2687 cv
399.767 23.2687 401.334 21.7017 401.334 19.7687 cv
401.334 17.8357 399.767 16.2687 397.834 16.2687 cv
f
397.835 17.2687 mo
399.216 17.2687 400.335 18.3877 400.335 19.7687 cv
400.335 21.1497 399.216 22.2687 397.835 22.2687 cv
396.454 22.2687 395.335 21.1497 395.335 19.7687 cv
395.335 18.3877 396.454 17.2687 397.835 17.2687 cv
cp
397.835 16.2687 mo
395.902 16.2687 394.335 17.8357 394.335 19.7687 cv
394.335 21.7017 395.902 23.2687 397.835 23.2687 cv
399.768 23.2687 401.335 21.7017 401.335 19.7687 cv
401.335 17.8357 399.768 16.2687 397.835 16.2687 cv
f
397.835 17.2687 mo
399.216 17.2687 400.335 18.3877 400.335 19.7687 cv
400.335 21.1497 399.216 22.2687 397.835 22.2687 cv
396.455 22.2687 395.336 21.1497 395.336 19.7687 cv
395.336 18.3877 396.455 17.2687 397.835 17.2687 cv
cp
397.835 16.2687 mo
395.903 16.2687 394.335 17.8357 394.335 19.7687 cv
394.335 21.7017 395.903 23.2687 397.835 23.2687 cv
399.768 23.2687 401.336 21.7017 401.336 19.7687 cv
401.336 17.8357 399.768 16.2687 397.835 16.2687 cv
f
397.836 17.2687 mo
399.217 17.2687 400.335 18.3877 400.335 19.7687 cv
400.335 21.1497 399.217 22.2687 397.836 22.2687 cv
396.455 22.2687 395.336 21.1497 395.336 19.7687 cv
395.336 18.3877 396.455 17.2687 397.836 17.2687 cv
cp
397.836 16.2687 mo
395.903 16.2687 394.335 17.8357 394.335 19.7687 cv
394.335 21.7017 395.903 23.2687 397.836 23.2687 cv
399.769 23.2687 401.336 21.7017 401.336 19.7687 cv
401.336 17.8357 399.769 16.2687 397.836 16.2687 cv
f
397.837 17.2687 mo
399.218 17.2687 400.336 18.3877 400.336 19.7687 cv
400.336 21.1497 399.218 22.2687 397.837 22.2687 cv
396.456 22.2687 395.337 21.1497 395.337 19.7687 cv
395.337 18.3877 396.456 17.2687 397.837 17.2687 cv
cp
397.837 16.2687 mo
395.904 16.2687 394.336 17.8357 394.336 19.7687 cv
394.336 21.7017 395.904 23.2687 397.837 23.2687 cv
399.769 23.2687 401.337 21.7017 401.337 19.7687 cv
401.337 17.8357 399.769 16.2687 397.837 16.2687 cv
f
397.837 17.2687 mo
399.218 17.2687 400.337 18.3877 400.337 19.7687 cv
400.337 21.1497 399.218 22.2687 397.837 22.2687 cv
396.456 22.2687 395.337 21.1497 395.337 19.7687 cv
395.337 18.3877 396.456 17.2687 397.837 17.2687 cv
cp
397.837 16.2687 mo
395.904 16.2687 394.337 17.8357 394.337 19.7687 cv
394.337 21.7017 395.904 23.2687 397.837 23.2687 cv
399.77 23.2687 401.337 21.7017 401.337 19.7687 cv
401.337 17.8357 399.77 16.2687 397.837 16.2687 cv
f
397.837 17.2687 mo
399.218 17.2687 400.337 18.3877 400.337 19.7687 cv
400.337 21.1497 399.218 22.2687 397.837 22.2687 cv
396.457 22.2687 395.337 21.1497 395.337 19.7687 cv
395.337 18.3877 396.457 17.2687 397.837 17.2687 cv
cp
397.837 16.2687 mo
395.904 16.2687 394.337 17.8357 394.337 19.7687 cv
394.337 21.7017 395.904 23.2687 397.837 23.2687 cv
399.77 23.2687 401.337 21.7017 401.337 19.7687 cv
401.337 17.8357 399.77 16.2687 397.837 16.2687 cv
f
397.837 17.2687 mo
399.218 17.2687 400.337 18.3877 400.337 19.7687 cv
400.337 21.1497 399.218 22.2687 397.837 22.2687 cv
396.457 22.2687 395.337 21.1497 395.337 19.7687 cv
395.337 18.3877 396.457 17.2687 397.837 17.2687 cv
cp
397.837 16.2687 mo
395.905 16.2687 394.337 17.8357 394.337 19.7687 cv
394.337 21.7017 395.905 23.2687 397.837 23.2687 cv
399.77 23.2687 401.337 21.7017 401.337 19.7687 cv
401.337 17.8357 399.77 16.2687 397.837 16.2687 cv
f
397.838 17.2687 mo
399.219 17.2687 400.338 18.3877 400.338 19.7687 cv
400.338 21.1497 399.219 22.2687 397.838 22.2687 cv
396.457 22.2687 395.338 21.1497 395.338 19.7687 cv
395.338 18.3877 396.457 17.2687 397.838 17.2687 cv
cp
397.838 16.2687 mo
395.905 16.2687 394.338 17.8357 394.338 19.7687 cv
394.338 21.7017 395.905 23.2687 397.838 23.2687 cv
399.771 23.2687 401.338 21.7017 401.338 19.7687 cv
401.338 17.8357 399.771 16.2687 397.838 16.2687 cv
f
397.838 17.2687 mo
399.219 17.2687 400.338 18.3877 400.338 19.7687 cv
400.338 21.1497 399.219 22.2687 397.838 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.838 17.2687 cv
cp
397.838 16.2687 mo
395.906 16.2687 394.338 17.8357 394.338 19.7687 cv
394.338 21.7017 395.906 23.2687 397.838 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.838 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.338 18.3877 400.338 19.7687 cv
400.338 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.338 17.8357 394.338 19.7687 cv
394.338 21.7017 395.906 23.2687 397.839 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.338 18.3877 400.338 19.7687 cv
400.338 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.338 17.8357 394.338 19.7687 cv
394.338 21.7017 395.906 23.2687 397.839 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.771 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.771 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.772 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.772 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.772 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.772 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.772 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.772 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.772 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.772 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.219 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.219 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.772 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.772 16.2687 397.839 16.2687 cv
f
397.839 17.2687 mo
399.22 17.2687 400.339 18.3877 400.339 19.7687 cv
400.339 21.1497 399.22 22.2687 397.839 22.2687 cv
396.458 22.2687 395.339 21.1497 395.339 19.7687 cv
395.339 18.3877 396.458 17.2687 397.839 17.2687 cv
cp
397.839 16.2687 mo
395.906 16.2687 394.339 17.8357 394.339 19.7687 cv
394.339 21.7017 395.906 23.2687 397.839 23.2687 cv
399.772 23.2687 401.339 21.7017 401.339 19.7687 cv
401.339 17.8357 399.772 16.2687 397.839 16.2687 cv
f
127.089 244.019 mo
389.589 244.019 li
389.589 199.019 li
127.089 199.019 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
ELKGXF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3
518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE7
19F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E5897699
5550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77
D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFF
C73DA426D2C4> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E2
2FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D216
1CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361
A4431D76AF6F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ELKGXF+Helvetica /Encoding get
dup 37 /percent put
dup 51 /three put
dup 58 /colon put
dup 59 /semicolon put
dup 68 /D put
dup 69 /E put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 111 /o put
dup 114 /r put
pop
%ADOEndSubsetFont
/ELKGXF+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 2{/.notdef}rp /D 
/E /F /G 10{/.notdef}rp /R 8{/.notdef}rp /bracketleft /.notdef 
/bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef 
/r /s /t /u 138{/.notdef}rp]
ELKGXF+Helvetica nf
ELKGXF+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
162.339 216.92 mo
(Detector [18]; EER: 5.31%)
[12.2741 9.45212 4.72604 9.45212 8.50009 4.72606 9.4521 5.66095 4.72604 4.72606 9.4521 9.45212 
4.72604 4.72607 4.72604 11.3393 11.3392 12.2742 4.72604 4.72604 9.45212 4.72604 9.45212 9.45212 
0 ]xsh
130.089 210.92 mo
160.089 210.92 li
.895628 .7673 0 0 cmyk
@
145.089 208.42 mo
146.47 208.42 147.589 209.539 147.589 210.919 cv
147.589 212.3 146.47 213.419 145.089 213.419 cv
143.708 213.419 142.589 212.3 142.589 210.919 cv
142.589 209.539 143.708 208.42 145.089 208.42 cv
cp
145.089 207.419 mo
143.156 207.419 141.589 208.987 141.589 210.919 cv
141.589 212.852 143.156 214.42 145.089 214.42 cv
147.022 214.42 148.589 212.852 148.589 210.919 cv
148.589 208.987 147.022 207.419 145.089 207.419 cv
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
ELKGXF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ELKGXF+Helvetica /Encoding get
dup 79 /O put
pop
%ADOEndSubsetFont
/ELKGXF+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 2{/.notdef}rp /D 
/E /F /G 7{/.notdef}rp /O 2{/.notdef}rp /R 8{/.notdef}rp 
/bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef 
/e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /s /t /u 138{/.notdef}rp]
ELKGXF+Helvetica nf
ELKGXF+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
162.339 238.118 mo
(Our D)sh
207.678 238.118 mo
(etector; E)sh
280.439 238.118 mo
(ER: 2.21%)
[11.3393 12.2741 4.72607 4.72607 9.45209 4.72607 9.45209 9.45209 0 ]xsh
130.089 232.118 mo
160.089 232.118 li
0 .990631 1 .000396735 cmyk
@
145.089 229.618 mo
146.47 229.618 147.589 230.737 147.589 232.118 cv
147.589 233.499 146.47 234.618 145.089 234.618 cv
143.708 234.618 142.589 233.499 142.589 232.118 cv
142.589 230.737 143.708 229.618 145.089 229.618 cv
cp
145.089 228.618 mo
143.156 228.618 141.589 230.185 141.589 232.118 cv
141.589 234.051 143.156 235.618 145.089 235.618 cv
147.022 235.618 148.589 234.051 148.589 232.118 cv
148.589 230.185 147.022 228.618 145.089 228.618 cv
f
0 lj
127.089 244.019 mo
389.589 244.019 li
389.589 199.019 li
127.089 199.019 li
cp
1 /0 /CSD get_res sepcs
.851074 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/ELKGXG+Helvetica-Bold*1 uf
/ELKGXG+Helvetica-Bold uf
/JAAAAA+Helvetica-Bold uf
/ELKGXF+Helvetica*1 uf
/ELKGXF+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
