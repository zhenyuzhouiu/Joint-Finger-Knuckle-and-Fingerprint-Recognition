%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: hd-roc_compare_new.eps-19598.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/16/2022, 11:01:40 AM
%%BoundingBox: 0 0 401 296
%%HiResBoundingBox: 0 0 400.8199 295.5868
%%CropBox: 0 0 400.8199 295.5868
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1018 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-16T11:01:12+08:00"
   xmp:CreateDate="2022-08-16T11:01:12+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.9.0.1467703 \(R2020b\). Operating System: Linux)"
   xmpMM:DocumentID="uuid:2f464a6c-1f6b-11ed-0000-9fa57340842c"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/zhenyuzhou/Desktop/finger-knuckle/deep-learning/codekevin/fknet/test/yolov5vsdatabase/hd-roc_compare_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -295.587 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 295.587 li
400.82 295.587 li
400.82 0 li
cp
clp
gsave
-12.678 295.587 mo
430.322 295.587 li
430.322 -3.41327 li
-12.678 -3.41327 li
cp
clp
-12.678 295.587 mo
429.822 295.587 li
429.822 -3.66327 li
-12.678 -3.66327 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
grestore
-12.678 295.587 mo
429.822 295.587 li
429.822 -3.66327 li
-12.678 -3.66327 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
45.072 255.837 mo
387.822 255.837 li
387.822 18.8367 li
45.072 18.8367 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
45.4779 255.837 mo
45.4779 18.8367 li
1 /0 /CSD get_res sepcs
.224609 sep
@
48.5829 255.837 mo
48.5829 18.8367 li
@
69.0068 255.837 mo
69.0068 18.8367 li
@
80.9544 255.837 mo
80.9544 18.8367 li
@
89.431 255.837 mo
89.431 18.8367 li
@
96.006 255.837 mo
96.006 18.8367 li
@
101.378 255.837 mo
101.378 18.8367 li
@
105.92 255.837 mo
105.92 18.8367 li
@
109.856 255.837 mo
109.856 18.8367 li
@
113.326 255.837 mo
113.326 18.8367 li
@
116.43 255.837 mo
116.43 18.8367 li
@
136.855 255.837 mo
136.855 18.8367 li
@
148.802 255.837 mo
148.802 18.8367 li
@
157.279 255.837 mo
157.279 18.8367 li
@
163.854 255.837 mo
163.854 18.8367 li
@
169.226 255.837 mo
169.226 18.8367 li
@
173.768 255.837 mo
173.768 18.8367 li
@
177.703 255.837 mo
177.703 18.8367 li
@
181.174 255.837 mo
181.174 18.8367 li
@
184.278 255.837 mo
184.278 18.8367 li
@
204.703 255.837 mo
204.703 18.8367 li
@
216.65 255.837 mo
216.65 18.8367 li
@
225.127 255.837 mo
225.127 18.8367 li
@
231.702 255.837 mo
231.702 18.8367 li
@
237.074 255.837 mo
237.074 18.8367 li
@
241.616 255.837 mo
241.616 18.8367 li
@
245.551 255.837 mo
245.551 18.8367 li
@
249.022 255.837 mo
249.022 18.8367 li
@
272.551 255.837 mo
272.551 18.8367 li
@
284.497 255.837 mo
284.497 18.8367 li
@
292.975 255.837 mo
292.975 18.8367 li
@
299.55 255.837 mo
299.55 18.8367 li
@
304.922 255.837 mo
304.922 18.8367 li
@
309.464 255.837 mo
309.464 18.8367 li
@
313.399 255.837 mo
313.399 18.8367 li
@
316.87 255.837 mo
316.87 18.8367 li
@
319.974 255.837 mo
319.974 18.8367 li
@
340.398 255.837 mo
340.398 18.8367 li
@
352.345 255.837 mo
352.345 18.8367 li
@
360.823 255.837 mo
360.823 18.8367 li
@
367.398 255.837 mo
367.398 18.8367 li
@
372.77 255.837 mo
372.77 18.8367 li
@
377.312 255.837 mo
377.312 18.8367 li
@
381.247 255.837 mo
381.247 18.8367 li
@
384.718 255.837 mo
384.718 18.8367 li
@
1 lj
[] 0 dsh
116.43 255.837 mo
116.43 18.8367 li
1 /0 /CSD get_res sepcs
.126953 sep
@
252.126 255.837 mo
252.126 18.8367 li
@
387.822 255.837 mo
387.822 18.8367 li
@
387.822 255.837 mo
45.072 255.837 li
@
387.822 229.504 mo
45.072 229.504 li
@
387.822 203.17 mo
45.072 203.17 li
@
387.822 176.837 mo
45.072 176.837 li
@
387.822 150.504 mo
45.072 150.504 li
@
387.822 124.17 mo
45.072 124.17 li
@
387.822 97.8367 mo
45.072 97.8367 li
@
387.822 71.5027 mo
45.072 71.5027 li
@
387.822 45.1697 mo
45.072 45.1697 li
@
387.822 18.8367 mo
45.072 18.8367 li
@
2 lc
45.072 255.837 mo
387.822 255.837 li
1 /0 /CSD get_res sepcs
.851074 sep
@
45.072 18.8367 mo
387.822 18.8367 li
@
116.43 255.837 mo
116.43 252.409 li
@
252.126 255.837 mo
252.126 252.409 li
@
387.822 255.837 mo
387.822 252.409 li
@
116.43 18.8367 mo
116.43 22.2637 li
@
252.126 18.8367 mo
252.126 22.2637 li
@
387.822 18.8367 mo
387.822 22.2637 li
@
45.4779 255.837 mo
45.4779 254.123 li
@
48.5829 255.837 mo
48.5829 254.123 li
@
69.0068 255.837 mo
69.0068 254.123 li
@
80.9544 255.837 mo
80.9544 254.123 li
@
89.431 255.837 mo
89.431 254.123 li
@
96.006 255.837 mo
96.006 254.123 li
@
101.378 255.837 mo
101.378 254.123 li
@
105.92 255.837 mo
105.92 254.123 li
@
109.856 255.837 mo
109.856 254.123 li
@
113.326 255.837 mo
113.326 254.123 li
@
116.43 255.837 mo
116.43 254.123 li
@
116.43 255.837 mo
116.43 254.123 li
@
136.855 255.837 mo
136.855 254.123 li
@
148.802 255.837 mo
148.802 254.123 li
@
157.279 255.837 mo
157.279 254.123 li
@
163.854 255.837 mo
163.854 254.123 li
@
169.226 255.837 mo
169.226 254.123 li
@
173.768 255.837 mo
173.768 254.123 li
@
177.703 255.837 mo
177.703 254.123 li
@
181.174 255.837 mo
181.174 254.123 li
@
184.278 255.837 mo
184.278 254.123 li
@
204.703 255.837 mo
204.703 254.123 li
@
216.65 255.837 mo
216.65 254.123 li
@
225.127 255.837 mo
225.127 254.123 li
@
231.702 255.837 mo
231.702 254.123 li
@
237.074 255.837 mo
237.074 254.123 li
@
241.616 255.837 mo
241.616 254.123 li
@
245.551 255.837 mo
245.551 254.123 li
@
249.022 255.837 mo
249.022 254.123 li
@
252.126 255.837 mo
252.126 254.123 li
@
272.551 255.837 mo
272.551 254.123 li
@
284.497 255.837 mo
284.497 254.123 li
@
292.975 255.837 mo
292.975 254.123 li
@
299.55 255.837 mo
299.55 254.123 li
@
304.922 255.837 mo
304.922 254.123 li
@
309.464 255.837 mo
309.464 254.123 li
@
313.399 255.837 mo
313.399 254.123 li
@
316.87 255.837 mo
316.87 254.123 li
@
319.974 255.837 mo
319.974 254.123 li
@
340.398 255.837 mo
340.398 254.123 li
@
352.345 255.837 mo
352.345 254.123 li
@
360.823 255.837 mo
360.823 254.123 li
@
367.398 255.837 mo
367.398 254.123 li
@
372.77 255.837 mo
372.77 254.123 li
@
377.312 255.837 mo
377.312 254.123 li
@
381.247 255.837 mo
381.247 254.123 li
@
384.718 255.837 mo
384.718 254.123 li
@
387.822 255.837 mo
387.822 254.123 li
@
45.4779 18.8367 mo
45.4779 20.5507 li
@
48.5829 18.8367 mo
48.5829 20.5507 li
@
69.0068 18.8367 mo
69.0068 20.5507 li
@
80.9544 18.8367 mo
80.9544 20.5507 li
@
89.431 18.8367 mo
89.431 20.5507 li
@
96.006 18.8367 mo
96.006 20.5507 li
@
101.378 18.8367 mo
101.378 20.5507 li
@
105.92 18.8367 mo
105.92 20.5507 li
@
109.856 18.8367 mo
109.856 20.5507 li
@
113.326 18.8367 mo
113.326 20.5507 li
@
116.43 18.8367 mo
116.43 20.5507 li
@
116.43 18.8367 mo
116.43 20.5507 li
@
136.855 18.8367 mo
136.855 20.5507 li
@
148.802 18.8367 mo
148.802 20.5507 li
@
157.279 18.8367 mo
157.279 20.5507 li
@
163.854 18.8367 mo
163.854 20.5507 li
@
169.226 18.8367 mo
169.226 20.5507 li
@
173.768 18.8367 mo
173.768 20.5507 li
@
177.703 18.8367 mo
177.703 20.5507 li
@
181.174 18.8367 mo
181.174 20.5507 li
@
184.278 18.8367 mo
184.278 20.5507 li
@
204.703 18.8367 mo
204.703 20.5507 li
@
216.65 18.8367 mo
216.65 20.5507 li
@
225.127 18.8367 mo
225.127 20.5507 li
@
231.702 18.8367 mo
231.702 20.5507 li
@
237.074 18.8367 mo
237.074 20.5507 li
@
241.616 18.8367 mo
241.616 20.5507 li
@
245.551 18.8367 mo
245.551 20.5507 li
@
249.022 18.8367 mo
249.022 20.5507 li
@
252.126 18.8367 mo
252.126 20.5507 li
@
272.551 18.8367 mo
272.551 20.5507 li
@
284.497 18.8367 mo
284.497 20.5507 li
@
292.975 18.8367 mo
292.975 20.5507 li
@
299.55 18.8367 mo
299.55 20.5507 li
@
304.922 18.8367 mo
304.922 20.5507 li
@
309.464 18.8367 mo
309.464 20.5507 li
@
313.399 18.8367 mo
313.399 20.5507 li
@
316.87 18.8367 mo
316.87 20.5507 li
@
319.974 18.8367 mo
319.974 20.5507 li
@
340.398 18.8367 mo
340.398 20.5507 li
@
352.345 18.8367 mo
352.345 20.5507 li
@
360.823 18.8367 mo
360.823 20.5507 li
@
367.398 18.8367 mo
367.398 20.5507 li
@
372.77 18.8367 mo
372.77 20.5507 li
@
377.312 18.8367 mo
377.312 20.5507 li
@
381.247 18.8367 mo
381.247 20.5507 li
@
384.718 18.8367 mo
384.718 20.5507 li
@
387.822 18.8367 mo
387.822 20.5507 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IGPSRW+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/IGPSRW+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/.notdef /four 12{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t 139{/.notdef}rp]
IGPSRW+Helvetica nf
IGPSRW+Helvetica*1 [12 0 0 -12 0 0 ]msf
103.572 275.337 mo
(10)
[6.672 0 ]xsh
IGPSRW+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
119.322 269.337 mo
(-4)
[3.19673 0 ]xsh
IGPSRW+Helvetica*1 [12 0 0 -12 0 0 ]msf
239.322 275.337 mo
(10)
[6.672 0 ]xsh
IGPSRW+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
255.072 269.337 mo
(-2)
[3.19672 0 ]xsh
IGPSRW+Helvetica*1 [12 0 0 -12 0 0 ]msf
376.572 275.337 mo
(10)
[6.672 0 ]xsh
IGPSRW+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
392.322 269.337 mo
(0)sh
IGPSRW+Helvetica*1 [13.2 0 0 -13.2 0 0 ]msf
141.072 291.987 mo
(Fal)sh
159.407 291.987 mo
(se Acceptance R)sh
259.186 291.987 mo
(ate)sh
45.072 255.837 mo
45.072 18.8367 li
@
387.822 255.837 mo
387.822 18.8367 li
@
45.072 255.837 mo
48.4993 255.837 li
@
45.072 229.504 mo
48.4993 229.504 li
@
45.072 203.17 mo
48.4993 203.17 li
@
45.072 176.837 mo
48.4993 176.837 li
@
45.072 150.504 mo
48.4993 150.504 li
@
45.072 124.17 mo
48.4993 124.17 li
@
45.072 97.8367 mo
48.4993 97.8367 li
@
45.072 71.5027 mo
48.4993 71.5027 li
@
45.072 45.1697 mo
48.4993 45.1697 li
@
45.072 18.8367 mo
48.4993 18.8367 li
@
387.822 255.837 mo
384.395 255.837 li
@
387.822 229.504 mo
384.395 229.504 li
@
387.822 203.17 mo
384.395 203.17 li
@
387.822 176.837 mo
384.395 176.837 li
@
387.822 150.504 mo
384.395 150.504 li
@
387.822 124.17 mo
384.395 124.17 li
@
387.822 97.8367 mo
384.395 97.8367 li
@
387.822 71.5027 mo
384.395 71.5027 li
@
387.822 45.1697 mo
384.395 45.1697 li
@
387.822 18.8367 mo
384.395 18.8367 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
IGPSRW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3
518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE7
19F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E5897699
5550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77
D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFF
C73DA426D2C4> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IGPSRW+Helvetica /Encoding get
dup 46 /period put
dup 51 /three put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/IGPSRW+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /three /four /five /six /seven /eight /nine 
7{/.notdef}rp /A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
IGPSRW+Helvetica nf
IGPSRW+Helvetica*1 [12 0 0 -12 0 0 ]msf
21.172 259.962 mo
(0.1)sh
21.172 233.629 mo
(0.2)sh
21.172 207.295 mo
(0.3)sh
21.172 180.962 mo
(0.4)sh
21.172 154.629 mo
(0.5)sh
21.172 128.295 mo
(0.6)sh
21.172 101.962 mo
(0.7)sh
21.172 75.6285 mo
(0.8)sh
21.172 49.2949 mo
(0.9)sh
32.422 22.9617 mo
(1)sh
IGPSRW+Helvetica*1 [0 -13.2 -13.2 0 0 0 ]msf
14.422 223.212 mo
(Genuine Acceptance Rate)
[-10.2696 -7.3392 -7.3392 -7.33919 -2.9304 -7.3392 -7.33919 -3.6696 -8.8045 -6.59999 -6.59999 -7.3392 
-7.3392 -3.66959 -7.3392 -7.3392 -6.60001 -7.33919 -3.6696 -9.5304 -7.3392 -3.6696 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IGPSRX+Helvetica-Bold /JAAAAA+Helvetica-Bold findfont ct_VMDictPut
/IGPSRX+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
IGPSRX+Helvetica-Bold nf
IGPSRX+Helvetica-Bold*1 [13.2 0 0 -13.2 0 0 ]msf
86.3224 12.6117 mo
(Receiver Operating Characteristics)
[9.5304 7.3392 7.3392 7.3392 3.6696 7.3392 7.33919 5.1349 3.6696 10.2696 8.06511 7.33919 
5.1349 7.3392 4.39549 3.6696 8.06509 8.06509 3.66962 9.5304 8.06509 7.3392 5.1349 7.33919 
7.3392 4.39548 7.33923 5.13489 3.66962 7.33917 4.39551 3.66962 7.33917 0 ]xsh
0 lc
45.0314 235.961 mo
45.1126 235.938 li
45.1126 231.963 li
48.2173 231.223 li
48.2173 230.668 li
48.2173 230.021 li
48.2173 229.374 li
48.2173 229.096 li
48.2173 228.912 li
48.2173 228.449 li
51.0255 227.432 li
51.0255 226.693 li
51.0255 226.045 li
51.0255 225.583 li
53.5896 225.028 li
55.9486 224.566 li
55.9486 223.641 li
55.9486 223.548 li
57.0599 222.809 li
57.0599 221.792 li
57.0599 221.514 li
57.0599 220.775 li
57.0599 220.405 li
57.0599 219.573 li
57.0599 218.371 li
59.1661 217.261 li
59.1661 216.522 li
59.1661 215.967 li
59.1661 215.412 li
60.165 214.488 li
60.165 213.841 li
60.165 213.193 li
60.165 213.1 li
60.165 211.991 li
62.0661 211.621 li
62.0661 211.159 li
62.0661 209.494 li
62.0661 208.385 li
63.8529 207.738 li
63.8529 206.443 li
64.7072 205.334 li
65.5372 204.687 li
65.5372 203.484 li
68.6415 202.837 li
68.6415 202.375 li
70.7732 200.988 li
70.7732 199.786 li
70.7732 198.861 li
70.7732 198.584 li
70.7732 197.567 li
71.4501 196.55 li
71.4501 195.718 li
71.4501 194.886 li
72.1126 193.868 li
72.1126 193.129 li
72.1126 192.482 li
72.1126 192.019 li
72.7599 191.927 li
72.7599 191.003 li
72.7599 190.355 li
72.7599 189.338 li
72.7599 188.598 li
72.7599 188.136 li
72.7599 187.673 li
72.7599 187.303 li
72.7599 186.841 li
72.7599 186.102 li
73.3935 185.639 li
74.6212 184.622 li
74.6212 183.975 li
75.2169 183.143 li
76.3724 182.68 li
76.3724 182.126 li
76.9333 181.201 li
78.0255 180.091 li
78.0255 179.63 li
78.0255 179.167 li
78.0255 178.612 li
78.0255 177.872 li
79.0779 176.393 li
79.0779 175.838 li
81.5548 174.914 li
81.5548 174.266 li
81.5548 173.342 li
81.5548 172.51 li
81.5548 171.955 li
81.5548 171.123 li
81.5548 169.643 li
81.5548 168.534 li
81.5548 167.609 li
81.5548 167.424 li
81.5548 166.592 li
81.5548 165.667 li
81.5548 165.205 li
82.0267 164.835 li
82.0267 164.003 li
82.0267 163.171 li
82.0267 162.616 li
82.0267 161.414 li
82.0267 160.582 li
82.4911 159.842 li
82.4911 158.825 li
82.4911 158.27 li
82.4911 157.439 li
82.4911 156.421 li
82.9478 155.405 li
82.9478 154.572 li
82.9478 154.017 li
83.3978 153.37 li
84.2767 152.446 li
84.2767 151.983 li
84.2767 151.151 li
85.131 150.319 li
85.131 149.21 li
85.131 148.377 li
86.7689 147.915 li
86.7689 146.713 li
86.7689 145.418 li
86.7689 144.586 li
87.554 143.754 li
87.554 143.199 li
87.94 142.921 li
88.695 142.274 li
88.695 141.535 li
88.695 141.349 li
88.695 140.332 li
88.695 139.685 li
88.695 139.223 li
88.695 138.668 li
88.695 138.298 li
88.695 137.744 li
88.695 137.282 li
89.066 136.264 li
89.066 135.71 li
89.066 135.155 li
89.066 134.23 li
89.066 133.49 li
89.066 132.566 li
89.066 132.196 li
89.432 132.103 li
90.151 131.456 li
90.151 131.364 li
90.151 130.809 li
90.151 129.977 li
90.503 129.792 li
91.197 129.237 li
91.874 129.053 li
91.874 128.498 li
91.874 127.019 li
91.874 126.741 li
91.874 125.816 li
92.536 125.077 li
92.536 124.522 li
92.536 123.874 li
92.862 123.597 li
92.862 123.135 li
92.862 122.95 li
93.502 122.303 li
93.502 121.748 li
94.129 121.748 li
94.744 121.748 li
94.744 120.73 li
94.744 119.899 li
94.744 119.344 li
95.046 118.974 li
96.224 118.604 li
96.797 118.049 li
97.358 117.217 li
97.635 116.94 li
97.635 116.477 li
98.18 115.738 li
98.18 115.183 li
98.18 114.998 li
98.18 113.704 li
98.18 113.334 li
98.18 112.779 li
98.18 112.409 li
98.716 112.039 li
99.242 112.039 li
99.759 111.67 li
100.015 111.115 li
100.015 110.745 li
100.267 110.098 li
100.267 109.912 li
100.767 108.71 li
100.767 108.433 li
100.767 107.971 li
101.013 107.971 li
101.013 107.786 li
101.501 107.139 li
101.98 106.492 li
101.98 106.029 li
101.98 105.382 li
102.451 104.735 li
103.372 104.55 li
103.822 103.995 li
104.265 103.81 li
104.702 103.625 li
104.918 103.44 li
106.385 103.255 li
106.385 102.793 li
106.385 102.608 li
106.993 101.868 li
106.993 101.498 li
108.364 100.759 li
108.364 100.389 li
109.12 99.3717 li
109.12 99.0017 li
109.674 98.5387 li
110.218 98.1697 li
110.575 97.1527 li
110.752 96.6907 li
110.928 96.4127 li
111.621 95.9507 li
111.621 95.3957 li
111.961 94.2857 li
112.961 93.6387 li
113.124 93.1767 li
113.124 93.0847 li
113.768 92.4367 li
114.398 91.7897 li
114.398 91.2347 li
115.168 90.4957 li
115.918 90.2177 li
115.918 89.6627 li
116.213 89.2007 li
117.079 89.1077 li
117.643 88.9237 li
118.059 88.5537 li
118.469 88.1837 li
118.469 87.8137 li
118.739 87.6287 li
119.272 86.4267 li
119.797 85.9647 li
120.056 85.5017 li
120.311 84.8547 li
121.315 84.7627 li
121.682 84.3927 li
121.804 84.3927 li
122.045 84.0227 li
122.522 83.3757 li
122.758 83.0977 li
122.758 82.7287 li
123.683 82.4507 li
123.909 82.1737 li
124.689 81.5257 li
124.908 81.0637 li
125.556 80.7867 li
125.556 79.8617 li
126.19 79.4917 li
126.397 79.1227 li
126.81 78.7527 li
127.317 78.0127 li
127.517 77.8277 li
127.717 77.4577 li
127.914 77.2727 li
128.111 77.0887 li
128.403 76.9027 li
129.169 76.5337 li
129.357 76.3477 li
129.914 76.0707 li
130.642 75.6087 li
130.91 74.7757 li
131.264 74.6837 li
131.44 74.4997 li
132.046 74.0367 li
132.216 73.9447 li
132.555 73.2047 li
133.385 72.9277 li
134.192 72.7417 li
134.744 72.4647 li
135.668 72.2797 li
135.819 72.0027 li
136.267 71.6327 li
136.342 71.3557 li
136.928 71.1707 li
137.289 70.9857 li
137.997 70.8007 li
138.345 70.6157 li
138.62 70.3387 li
138.961 70.0607 li
139.432 69.7837 li
139.829 69.5057 li
140.479 69.1367 li
141.367 68.9517 li
141.8 68.4887 li
141.984 68.3967 li
142.768 68.2117 li
143.006 68.0267 li
143.183 67.8417 li
143.299 67.5637 li
143.992 67.5637 li
144.277 67.4717 li
144.559 67.2867 li
145.223 67.1947 li
145.712 67.0097 li
145.98 66.8247 li
146.77 66.6407 li
147.438 66.4547 li
147.992 66.3627 li
148.486 66.0847 li
148.584 65.6227 li
149.02 65.4377 li
149.64 65.0687 li
150.431 64.9757 li
150.931 64.6057 li
151.246 64.5137 li
151.556 64.4207 li
152.038 64.1437 li
152.598 63.9577 li
153.314 63.8657 li
153.973 63.7737 li
154.417 63.4037 li
154.972 63.1267 li
155.441 62.7567 li
155.826 62.5717 li
156.243 62.4797 li
156.729 62.0167 li
156.951 61.9237 li
157.927 61.5547 li
158.526 61.4617 li
159.011 61.3687 li
159.52 61.1847 li
160.187 61.0927 li
160.678 60.9067 li
161.351 60.8147 li
161.915 60.7217 li
162.592 60.6297 li
163.222 60.5377 li
163.84 60.5377 li
164.446 60.5377 li
164.955 60.2597 li
165.372 59.7977 li
166.055 59.5207 li
166.351 59.5207 li
166.986 59.5207 li
167.324 59.2427 li
167.761 59.0577 li
168.615 58.6877 li
169.033 58.6877 li
169.517 58.6877 li
170.392 58.5037 li
171.083 58.5037 li
171.647 58.3187 li
172.397 58.3187 li
173.001 58.1327 li
173.551 58.0407 li
174.315 57.8567 li
174.881 57.8567 li
175.476 57.8567 li
176.039 57.8567 li
176.497 57.6707 li
177.246 57.5787 li
177.777 57.4857 li
178.388 57.1157 li
179.125 57.0237 li
179.759 56.9317 li
180.113 56.7457 li
180.545 56.6537 li
181.264 56.6537 li
182.059 56.4687 li
182.695 56.1917 li
183.182 55.9147 li
183.839 55.4517 li
184.294 55.4517 li
184.727 55.2667 li
185.168 54.9897 li
185.658 54.8047 li
186.194 54.6197 li
186.628 54.3427 li
187.081 54.1567 li
187.658 54.0647 li
188.07 53.9727 li
188.552 53.8797 li
189.125 53.6957 li
189.591 53.6957 li
190.085 53.6957 li
190.535 53.6027 li
191.037 53.4177 li
191.61 53.4177 li
192.139 53.3257 li
192.647 53.1407 li
193.168 53.1407 li
193.69 53.1407 li
194.288 53.1407 li
194.78 53.1407 li
195.386 53.0477 li
195.958 52.9557 li
196.627 52.6777 li
197.289 52.4927 li
197.946 52.3087 li
198.436 52.3087 li
199.226 52.2157 li
199.817 52.0307 li
200.318 51.9377 li
200.912 51.9377 li
201.404 51.6617 li
201.929 51.2907 li
202.404 51.1067 li
202.787 50.9207 li
203.364 50.9207 li
203.937 50.9207 li
204.521 50.5507 li
205.208 50.4587 li
205.712 50.2737 li
206.317 50.2737 li
206.958 50.0887 li
207.419 50.0887 li
207.984 50.0887 li
208.488 49.9037 li
208.926 49.8117 li
209.611 49.8117 li
210.281 49.7197 li
210.907 49.7197 li
211.345 49.7197 li
211.864 49.7197 li
212.451 49.4417 li
213.115 49.4417 li
213.683 49.4417 li
214.278 49.4417 li
214.774 49.3497 li
215.382 49.3497 li
215.929 49.3497 li
216.52 48.8867 li
217.099 48.5167 li
217.516 48.5167 li
218.053 48.4247 li
218.589 48.4247 li
219.088 48.3317 li
219.812 48.2397 li
220.313 48.1477 li
220.915 48.0547 li
221.452 47.9617 li
222.104 47.7777 li
222.671 47.5927 li
223.13 47.2227 li
223.685 46.8527 li
224.32 46.7607 li
224.755 46.7607 li
225.208 46.7607 li
225.751 46.6677 li
226.287 46.2977 li
226.865 46.1137 li
227.338 46.0207 li
227.824 46.0207 li
228.395 45.9277 li
228.826 45.8357 li
229.436 45.7427 li
229.955 45.7427 li
230.497 45.7427 li
231.017 45.5587 li
231.598 45.5587 li
232.16 45.5587 li
232.696 45.2807 li
233.148 45.2807 li
233.637 45.0037 li
234.185 45.0037 li
234.731 44.8187 li
235.226 44.7257 li
235.688 44.7257 li
236.099 44.7257 li
236.618 44.7257 li
237.114 44.6337 li
237.602 44.5417 li
238.161 44.3567 li
238.606 44.3567 li
239.117 44.1717 li
239.607 44.0787 li
240.18 43.9867 li
240.665 43.9867 li
241.243 43.8017 li
241.754 43.8017 li
242.259 43.8017 li
242.763 43.7087 li
243.265 43.6167 li
243.743 43.4317 li
244.288 43.4317 li
244.808 43.4317 li
245.289 43.3387 li
245.802 43.1547 li
246.365 43.1547 li
246.844 43.1547 li
247.353 43.1547 li
247.897 43.1547 li
248.379 43.1547 li
248.818 43.1547 li
249.29 43.1547 li
249.767 43.1547 li
250.228 42.9697 li
250.702 42.9697 li
251.186 42.9697 li
251.627 42.8777 li
252.094 42.7847 li
252.585 42.7847 li
253.023 42.5997 li
253.481 42.5997 li
253.974 42.5997 li
254.464 42.5997 li
254.885 42.5997 li
255.392 42.5997 li
255.841 42.5077 li
256.297 42.4147 li
256.793 42.4147 li
257.264 42.2297 li
257.766 42.2297 li
258.259 42.0447 li
258.745 42.0447 li
259.201 42.0447 li
259.712 42.0447 li
260.158 41.9527 li
260.645 41.9527 li
261.129 41.8597 li
261.631 41.8597 li
262.088 41.6747 li
262.561 41.5827 li
262.976 41.4897 li
263.408 41.3977 li
263.886 41.3977 li
264.339 41.3047 li
264.745 41.2127 li
265.19 41.2127 li
265.662 41.1197 li
266.099 41.1197 li
266.56 41.1197 li
266.987 41.0277 li
267.465 41.0277 li
267.907 41.0277 li
268.37 41.0277 li
268.817 41.0277 li
269.273 40.9357 li
269.692 40.7507 li
270.109 40.7507 li
270.608 40.6577 li
271.045 40.5657 li
271.482 40.4727 li
271.933 40.3807 li
272.341 40.1957 li
272.792 40.1027 li
273.238 39.8257 li
273.654 39.8257 li
274.118 39.6407 li
274.575 39.6407 li
275.033 39.6407 li
275.465 39.6407 li
275.91 39.5477 li
276.297 39.5477 li
276.715 39.5477 li
277.137 39.4557 li
277.588 39.4557 li
278.013 39.4557 li
278.452 39.4557 li
278.9 39.4557 li
279.333 39.4557 li
279.769 39.4557 li
280.184 39.3637 li
280.583 39.3637 li
280.986 39.2707 li
281.415 39.2707 li
281.869 39.1777 li
282.267 39.1777 li
282.678 39.1777 li
283.095 39.0857 li
283.525 38.9937 li
283.931 38.9937 li
284.354 38.9017 li
284.769 38.9017 li
285.188 38.9017 li
285.598 38.8087 li
286.022 38.7167 li
286.423 38.7167 li
286.819 38.5307 li
287.221 38.5307 li
287.645 38.5307 li
287.983 38.5307 li
288.397 38.4387 li
288.812 38.4387 li
289.203 38.3467 li
289.573 38.3467 li
289.988 38.3467 li
290.382 38.2547 li
290.793 38.2547 li
291.202 38.2547 li
291.635 38.2547 li
292.043 38.2547 li
292.427 38.1617 li
292.836 37.9767 li
293.226 37.8837 li
293.627 37.8837 li
294.016 37.6987 li
294.406 37.6067 li
294.79 37.5137 li
295.186 37.5137 li
295.57 37.5137 li
295.958 37.4217 li
296.351 37.2367 li
296.76 37.2367 li
297.131 37.2367 li
297.499 37.2367 li
297.872 37.2367 li
298.244 37.2367 li
298.631 37.2367 li
298.985 37.1437 li
299.343 37.1437 li
299.735 37.0517 li
300.109 37.0517 li
300.467 37.0517 li
300.845 36.9597 li
301.208 36.8667 li
301.577 36.7747 li
301.952 36.7747 li
302.331 36.7747 li
302.675 36.7747 li
303.039 36.7747 li
303.422 36.7747 li
303.808 36.7747 li
304.164 36.7747 li
304.542 36.6817 li
304.906 36.6817 li
305.261 36.6817 li
305.606 36.6817 li
305.955 36.6817 li
306.299 36.4967 li
306.664 36.3127 li
307.018 36.1277 li
307.361 35.9417 li
307.713 35.8497 li
308.063 35.7577 li
308.402 35.7577 li
308.736 35.7577 li
309.074 35.7577 li
309.411 35.7577 li
309.745 35.5727 li
310.106 35.5727 li
310.461 35.5727 li
310.786 35.5727 li
311.105 35.5727 li
311.462 35.3877 li
311.774 35.3877 li
312.097 35.3877 li
312.445 35.3877 li
312.802 35.3877 li
313.138 35.3877 li
313.474 35.3877 li
313.817 35.2947 li
314.149 35.1097 li
314.501 35.1097 li
314.836 35.0177 li
315.177 34.9247 li
315.499 34.7407 li
315.815 34.6477 li
316.129 34.6477 li
316.452 34.5547 li
316.79 34.5547 li
317.113 34.5547 li
317.435 34.5547 li
317.747 34.5547 li
318.065 34.5547 li
318.385 34.5547 li
318.697 34.5547 li
319.013 34.4627 li
319.323 34.4627 li
319.624 34.4627 li
319.936 34.4627 li
320.234 34.1857 li
320.565 34.1857 li
320.885 34.1857 li
321.198 34.1857 li
321.515 34.0007 li
321.811 33.9077 li
322.118 33.7237 li
322.418 33.5387 li
322.722 33.5387 li
323.034 33.5387 li
323.333 33.5387 li
323.642 33.5387 li
323.951 33.3527 li
324.272 33.2607 li
324.577 33.2607 li
324.882 33.2607 li
325.202 33.1687 li
325.515 32.8907 li
325.802 32.7987 li
326.089 32.7987 li
326.391 32.7987 li
326.674 32.7987 li
326.951 32.7987 li
327.243 32.5207 li
327.528 32.4287 li
327.828 32.4287 li
328.124 32.3357 li
328.408 32.2437 li
328.699 32.1517 li
329.003 32.0597 li
329.288 32.0597 li
329.572 32.0597 li
329.853 31.8737 li
330.138 31.8737 li
330.427 31.8737 li
330.706 31.8737 li
330.983 31.8737 li
331.248 31.7817 li
331.533 31.6887 li
331.811 31.6887 li
332.096 31.6887 li
332.381 31.6887 li
332.647 31.6887 li
332.924 31.4117 li
333.19 31.3187 li
333.467 31.2267 li
333.735 31.1347 li
333.995 30.8567 li
334.274 30.5797 li
334.543 30.5797 li
334.81 30.5797 li
335.087 30.4867 li
335.358 30.4867 li
335.63 30.4867 li
335.906 30.3937 li
336.178 30.3017 li
336.427 30.1177 li
336.695 30.1177 li
336.967 30.1177 li
337.23 30.1177 li
337.494 30.1177 li
337.757 30.1177 li
338.019 30.1177 li
338.277 29.9317 li
338.539 29.8397 li
338.792 29.7467 li
339.043 29.7467 li
339.301 29.7467 li
339.556 29.6547 li
339.807 29.6547 li
340.048 29.5627 li
340.291 29.2847 li
340.537 29.2847 li
340.779 29.2847 li
341.03 29.2847 li
341.271 29.2847 li
341.518 29.0997 li
341.76 29.0077 li
342.008 29.0077 li
342.259 29.0077 li
342.502 29.0077 li
342.739 29.0077 li
342.974 29.0077 li
343.217 29.0077 li
343.456 29.0077 li
343.697 29.0077 li
343.925 29.0077 li
344.17 28.6377 li
344.402 28.6377 li
344.633 28.4527 li
344.863 28.4527 li
345.106 28.4527 li
345.335 28.4527 li
345.565 28.3597 li
345.799 28.1757 li
346.031 28.1757 li
346.253 28.1757 li
346.486 28.1757 li
346.711 28.1757 li
346.945 28.1757 li
347.17 28.1757 li
347.39 28.0827 li
347.614 28.0827 li
347.836 28.0827 li
348.058 27.9907 li
348.279 27.9907 li
348.498 27.9907 li
348.715 27.9907 li
348.931 27.9907 li
349.153 27.8977 li
349.378 27.8977 li
349.584 27.8977 li
349.799 27.6207 li
350.01 27.5287 li
350.227 27.4357 li
350.442 27.4357 li
350.659 27.4357 li
350.872 27.4357 li
351.085 27.4357 li
351.291 27.4357 li
351.498 27.3437 li
351.705 27.2507 li
351.913 27.2507 li
352.122 27.2507 li
352.324 27.1587 li
352.525 27.1587 li
352.722 27.0657 li
352.918 26.9737 li
353.113 26.8817 li
353.317 26.7887 li
353.516 26.6957 li
353.715 26.6957 li
353.911 26.6037 li
354.101 26.5117 li
354.289 26.5117 li
354.486 26.4187 li
354.684 26.4187 li
354.881 26.2337 li
355.071 26.2337 li
355.263 26.2337 li
355.454 26.2337 li
355.652 26.1407 li
355.844 26.1407 li
356.03 26.1407 li
356.218 26.1407 li
356.408 26.0487 li
356.593 26.0487 li
356.781 25.9567 li
356.965 25.9567 li
357.157 25.9567 li
357.347 25.9567 li
357.532 25.9567 li
357.713 25.7707 li
357.896 25.6787 li
358.077 25.6787 li
358.259 25.6787 li
358.444 25.6787 li
358.619 25.5867 li
358.797 25.5867 li
358.973 25.5867 li
359.153 25.5867 li
359.329 25.4937 li
359.498 25.4937 li
359.673 25.4937 li
359.845 25.4937 li
360.017 25.4937 li
360.185 25.4017 li
360.359 25.3097 li
360.533 25.3097 li
360.703 25.3097 li
360.875 25.3097 li
361.041 25.3097 li
361.212 25.3097 li
361.379 25.2167 li
361.538 25.2167 li
361.702 25.2167 li
361.868 25.2167 li
362.033 25.2167 li
362.198 25.2167 li
362.355 25.2167 li
362.518 25.2167 li
362.676 25.2167 li
362.833 25.2167 li
362.994 25.2167 li
363.151 25.1237 li
363.31 25.1237 li
363.464 25.1237 li
363.625 25.1237 li
363.784 24.9397 li
363.94 24.9397 li
364.092 24.9397 li
364.241 24.9397 li
364.394 24.8467 li
364.543 24.8467 li
364.695 24.8467 li
364.848 24.6617 li
364.997 24.6617 li
365.147 24.6617 li
365.299 24.6617 li
365.443 24.6617 li
365.59 24.6617 li
365.734 24.5697 li
365.878 24.5697 li
366.026 24.5697 li
366.173 24.4767 li
366.315 24.4767 li
366.461 24.3847 li
366.608 24.3847 li
366.749 24.3847 li
366.886 24.2917 li
367.022 24.2917 li
367.164 24.2917 li
367.298 24.2917 li
367.436 24.2917 li
367.57 24.2917 li
367.706 24.1987 li
367.843 24.1987 li
367.979 24.1987 li
368.117 24.1067 li
368.245 24.0147 li
368.375 24.0147 li
368.507 23.9227 li
368.643 23.9227 li
368.776 23.9227 li
368.906 23.9227 li
369.039 23.9227 li
369.17 23.9227 li
369.297 23.9227 li
369.424 23.9227 li
369.55 23.9227 li
369.677 23.9227 li
369.806 23.8297 li
369.931 23.8297 li
370.058 23.8297 li
370.181 23.7367 li
370.305 23.7367 li
370.434 23.7367 li
370.553 23.7367 li
370.673 23.7367 li
370.794 23.7367 li
370.914 23.7367 li
371.036 23.6447 li
371.155 23.5517 li
371.273 23.5517 li
371.39 23.5517 li
371.508 23.5517 li
371.622 23.4597 li
371.74 23.4597 li
371.856 23.4597 li
371.972 23.4597 li
372.088 23.4597 li
372.202 23.4597 li
372.313 23.4597 li
372.424 23.4597 li
372.538 23.3677 li
372.649 23.2757 li
372.76 23.1817 li
372.87 23.1817 li
372.982 23.1817 li
373.088 23.1817 li
373.196 23.1817 li
373.304 23.1817 li
373.41 23.1817 li
373.515 22.9977 li
373.622 22.9977 li
373.728 22.9977 li
373.83 22.9977 li
373.936 22.9047 li
374.041 22.9047 li
374.14 22.9047 li
374.243 22.9047 li
374.345 22.9047 li
374.449 22.9047 li
374.552 22.9047 li
374.651 22.8127 li
374.749 22.8127 li
374.849 22.8127 li
374.947 22.7207 li
375.043 22.7207 li
375.143 22.6277 li
375.238 22.6277 li
375.335 22.5347 li
375.431 22.5347 li
375.527 22.5347 li
375.624 22.5347 li
375.722 22.5347 li
375.814 22.5347 li
375.907 22.5347 li
376 22.5347 li
376.089 22.5347 li
376.181 22.5347 li
376.272 22.5347 li
376.361 22.5347 li
376.452 22.5347 li
376.545 22.4427 li
376.636 22.4427 li
376.725 22.4427 li
376.815 22.4427 li
376.902 22.4427 li
376.985 22.4427 li
377.07 22.4427 li
377.156 22.4427 li
377.239 22.4427 li
377.325 22.2577 li
377.412 22.2577 li
377.495 22.2577 li
377.579 22.2577 li
377.663 22.2577 li
377.745 22.2577 li
377.829 22.2577 li
377.909 22.2577 li
377.99 22.2577 li
378.068 22.2577 li
378.15 22.2577 li
378.232 22.2577 li
378.311 22.2577 li
378.392 22.2577 li
378.467 22.2577 li
378.543 22.1657 li
378.621 22.1657 li
378.698 22.0727 li
378.775 22.0727 li
378.853 22.0727 li
378.928 22.0727 li
379.003 22.0727 li
379.077 22.0727 li
379.15 21.9807 li
379.224 21.9807 li
379.296 21.9807 li
379.365 21.8877 li
379.438 21.8877 li
379.51 21.8877 li
379.579 21.8877 li
379.652 21.8877 li
379.722 21.8877 li
379.79 21.8877 li
379.859 21.7957 li
379.929 21.7957 li
379.997 21.7957 li
380.065 21.7027 li
380.131 21.6107 li
380.197 21.6107 li
380.264 21.6107 li
380.328 21.6107 li
380.395 21.6107 li
380.459 21.6107 li
380.524 21.6107 li
380.589 21.6107 li
380.651 21.6107 li
380.714 21.6107 li
380.777 21.4257 li
380.839 21.4257 li
380.902 21.4257 li
380.963 21.4257 li
381.022 21.3337 li
381.083 21.3337 li
381.141 21.3337 li
381.202 21.3337 li
381.26 21.3337 li
381.322 21.3337 li
381.381 21.3337 li
381.44 21.3337 li
381.497 21.2407 li
381.554 21.2407 li
381.611 21.2407 li
381.666 21.2407 li
381.723 21.2407 li
381.776 21.2407 li
381.832 21.2407 li
381.886 21.2407 li
381.94 21.2407 li
381.995 21.2407 li
382.05 21.2407 li
382.104 21.2407 li
382.155 21.2407 li
382.207 21.2407 li
382.256 21.2407 li
382.307 21.1477 li
382.357 21.0557 li
382.407 20.9637 li
382.457 20.9637 li
382.508 20.9637 li
382.556 20.9637 li
382.606 20.9637 li
382.656 20.9637 li
382.704 20.9637 li
382.751 20.9637 li
382.797 20.9637 li
382.844 20.9637 li
382.892 20.7787 li
382.939 20.7787 li
382.985 20.7787 li
383.032 20.7787 li
383.079 20.7787 li
383.126 20.7787 li
383.17 20.7787 li
383.215 20.7787 li
383.261 20.7787 li
383.304 20.7787 li
383.347 20.7787 li
383.392 20.6867 li
383.434 20.6867 li
383.476 20.5007 li
383.519 20.5007 li
383.561 20.4087 li
383.602 20.4087 li
383.644 20.4087 li
383.685 20.4087 li
383.726 20.4087 li
383.765 20.4087 li
383.806 20.4087 li
383.848 20.4087 li
383.887 20.4087 li
383.927 20.4087 li
383.968 20.3167 li
384.008 20.3167 li
384.046 20.3167 li
384.084 20.2237 li
384.121 20.2237 li
384.158 20.2237 li
384.192 20.2237 li
384.227 20.2237 li
384.265 20.2237 li
384.302 20.2237 li
384.338 20.1317 li
384.374 20.1317 li
384.409 20.1317 li
384.445 20.1317 li
384.481 20.1317 li
384.516 20.0387 li
384.548 20.0387 li
384.583 20.0387 li
384.617 20.0387 li
384.649 20.0387 li
384.682 20.0387 li
384.714 20.0387 li
384.746 20.0387 li
384.779 20.0387 li
384.81 20.0387 li
384.842 20.0387 li
384.872 20.0387 li
384.904 19.8537 li
384.935 19.8537 li
384.963 19.8537 li
384.993 19.8537 li
385.024 19.7617 li
385.054 19.7617 li
385.081 19.7617 li
385.109 19.7617 li
385.138 19.7617 li
385.167 19.7617 li
385.196 19.7617 li
385.224 19.7617 li
385.252 19.6687 li
385.279 19.5757 li
385.307 19.5757 li
385.335 19.5757 li
385.361 19.5757 li
385.387 19.5757 li
385.413 19.5757 li
385.44 19.5757 li
385.465 19.5757 li
385.492 19.5757 li
385.518 19.5757 li
385.543 19.5757 li
385.568 19.5757 li
385.594 19.5757 li
385.617 19.5757 li
385.643 19.5757 li
385.667 19.5757 li
385.69 19.5757 li
385.715 19.5757 li
385.738 19.5757 li
385.762 19.5757 li
385.786 19.5757 li
385.808 19.5757 li
385.831 19.5757 li
385.853 19.5757 li
385.874 19.5757 li
385.896 19.5757 li
385.918 19.5757 li
385.94 19.5757 li
385.961 19.5757 li
385.983 19.5757 li
386.003 19.5757 li
386.024 19.5757 li
386.045 19.5757 li
386.064 19.5757 li
386.084 19.5757 li
386.104 19.5757 li
386.124 19.5757 li
386.143 19.5757 li
386.161 19.5757 li
386.181 19.5757 li
386.2 19.5757 li
386.218 19.4837 li
386.238 19.4837 li
386.255 19.4837 li
386.273 19.4837 li
386.29 19.4837 li
386.308 19.4837 li
386.325 19.4837 li
386.342 19.4837 li
386.36 19.4837 li
386.379 19.4837 li
386.396 19.4837 li
386.413 19.4837 li
386.431 19.4837 li
386.447 19.4837 li
386.465 19.4837 li
386.481 19.4837 li
386.496 19.4837 li
386.513 19.4837 li
386.528 19.4837 li
386.543 19.4837 li
386.558 19.4837 li
386.574 19.4837 li
386.589 19.4837 li
386.605 19.4837 li
386.618 19.4837 li
386.633 19.4837 li
386.647 19.3917 li
386.661 19.3917 li
386.676 19.3917 li
386.689 19.3917 li
386.704 19.3917 li
386.717 19.3917 li
386.73 19.3917 li
386.743 19.2987 li
386.756 19.2987 li
386.77 19.2987 li
386.782 19.2987 li
386.795 19.2987 li
386.807 19.2987 li
386.82 19.2987 li
386.833 19.2987 li
386.845 19.2987 li
386.857 19.2987 li
386.869 19.2987 li
386.879 19.2987 li
386.89 19.2987 li
386.902 19.2987 li
386.914 19.2987 li
386.925 19.2987 li
386.936 19.2987 li
386.947 19.2987 li
386.957 19.2987 li
386.969 19.2987 li
386.979 19.2987 li
386.99 19.2987 li
387.001 19.2987 li
387.011 19.2987 li
387.022 19.2987 li
387.033 19.2067 li
387.043 19.2067 li
387.052 19.2067 li
387.061 19.2067 li
387.072 19.2067 li
387.08 19.2067 li
387.09 19.2067 li
387.1 19.2067 li
387.109 19.2067 li
387.118 19.2067 li
387.127 19.2067 li
387.135 19.2067 li
387.144 19.2067 li
387.153 19.2067 li
387.162 19.2067 li
387.17 19.2067 li
387.179 19.2067 li
387.187 19.2067 li
387.196 19.2067 li
387.204 19.2067 li
387.211 19.2067 li
387.219 19.2067 li
387.227 19.2067 li
387.235 19.2067 li
387.242 19.2067 li
387.25 19.2067 li
387.258 19.2067 li
387.265 19.2067 li
387.272 19.2067 li
387.28 19.2067 li
387.287 19.2067 li
387.294 19.2067 li
387.301 19.2067 li
387.308 19.2067 li
387.314 19.2067 li
387.32 19.2067 li
387.327 19.2067 li
387.334 19.2067 li
387.34 19.2067 li
387.348 19.2067 li
387.354 19.2067 li
387.36 19.2067 li
387.367 19.2067 li
387.374 19.2067 li
387.379 19.2067 li
387.386 19.2067 li
387.392 19.2067 li
387.397 19.2067 li
387.403 19.2067 li
387.408 19.2067 li
387.413 19.2067 li
387.419 19.2067 li
387.424 19.2067 li
387.431 19.2067 li
387.435 19.2067 li
387.44 19.2067 li
387.445 19.2067 li
387.451 19.1137 li
387.456 19.1137 li
387.461 19.1137 li
387.466 19.1137 li
387.47 19.1137 li
387.476 19.1137 li
387.481 19.1137 li
387.485 19.1137 li
387.49 19.1137 li
387.494 19.0217 li
387.499 19.0217 li
387.503 19.0217 li
387.508 19.0217 li
387.512 19.0217 li
387.516 19.0217 li
387.52 19.0217 li
387.525 19.0217 li
387.53 19.0217 li
387.534 18.9287 li
387.538 18.9287 li
387.543 18.9287 li
387.547 18.9287 li
387.551 18.9287 li
387.555 18.9287 li
387.558 18.8367 li
387.562 18.8367 li
387.565 18.8367 li
387.568 18.8367 li
387.572 18.8367 li
387.576 18.8367 li
387.58 18.8367 li
387.583 18.8367 li
387.586 18.8367 li
387.59 18.8367 li
387.593 18.8367 li
387.596 18.8367 li
387.599 18.8367 li
387.603 18.8367 li
387.606 18.8367 li
387.609 18.8367 li
387.613 18.8367 li
387.616 18.8367 li
387.619 18.8367 li
387.622 18.8367 li
387.625 18.8367 li
387.628 18.8367 li
387.631 18.8367 li
387.633 18.8367 li
387.636 18.8367 li
387.639 18.8367 li
387.642 18.8367 li
387.645 18.8367 li
387.647 18.8367 li
387.649 18.8367 li
387.652 18.8367 li
387.655 18.8367 li
387.658 18.8367 li
387.66 18.8367 li
387.662 18.8367 li
387.665 18.8367 li
387.667 18.8367 li
387.669 18.8367 li
387.671 18.8367 li
387.674 18.8367 li
387.676 18.8367 li
387.677 18.8367 li
387.68 18.8367 li
387.683 18.8367 li
387.684 18.8367 li
387.686 18.8367 li
387.688 18.8367 li
387.691 18.8367 li
387.692 18.8367 li
387.695 18.8367 li
387.696 18.8367 li
387.697 18.8367 li
387.7 18.8367 li
387.701 18.8367 li
387.704 18.8367 li
387.705 18.8367 li
387.707 18.8367 li
387.709 18.8367 li
387.71 18.8367 li
387.712 18.8367 li
387.713 18.8367 li
387.715 18.8367 li
387.716 18.8367 li
387.718 18.8367 li
387.72 18.8367 li
387.722 18.8367 li
387.723 18.8367 li
387.724 18.8367 li
387.726 18.8367 li
387.727 18.8367 li
387.729 18.8367 li
387.731 18.8367 li
387.732 18.8367 li
387.734 18.8367 li
387.735 18.8367 li
387.736 18.8367 li
387.737 18.8367 li
387.739 18.8367 li
387.74 18.8367 li
387.742 18.8367 li
387.744 18.8367 li
387.745 18.8367 li
387.746 18.8367 li
387.748 18.8367 li
387.749 18.8367 li
387.75 18.8367 li
387.752 18.8367 li
387.754 18.8367 li
387.756 18.8367 li
387.757 18.8367 li
387.758 18.8367 li
387.759 18.8367 li
387.761 18.8367 li
387.762 18.8367 li
387.763 18.8367 li
387.765 18.8367 li
387.766 18.8367 li
387.767 18.8367 li
387.769 18.8367 li
387.77 18.8367 li
387.772 18.8367 li
387.773 18.8367 li
387.774 18.8367 li
387.775 18.8367 li
387.776 18.8367 li
387.777 18.8367 li
387.778 18.8367 li
387.779 18.8367 li
387.78 18.8367 li
387.781 18.8367 li
387.782 18.8367 li
387.783 18.8367 li
387.784 18.8367 li
387.785 18.8367 li
387.786 18.8367 li
387.787 18.8367 li
387.788 18.8367 li
387.789 18.8367 li
387.79 18.8367 li
387.791 18.8367 li
387.792 18.8367 li
387.793 18.8367 li
387.794 18.8367 li
387.795 18.8367 li
387.796 18.8367 li
387.797 18.8367 li
387.798 18.8367 li
387.799 18.8367 li
387.8 18.8367 li
387.801 18.8367 li
387.802 18.8367 li
387.803 18.8367 li
387.804 18.8367 li
387.805 18.8367 li
387.806 18.8367 li
387.807 18.8367 li
387.808 18.8367 li
387.809 18.8367 li
387.81 18.8367 li
387.811 18.8367 li
387.812 18.8367 li
387.813 18.8367 li
387.814 18.8367 li
387.815 18.8367 li
387.816 18.8367 li
387.817 18.8367 li
387.818 18.8367 li
387.819 18.8367 li
387.82 18.8367 li
387.821 18.8367 li
387.822 18.8367 li
/1 
[/DeviceCMYK] /CSA add_res
.895628 .7673 0 0 cmyk
@
0 lj
48.2173 227.021 mo
48.2173 233.021 li
45.2173 230.021 mo
51.2173 230.021 li
46.0962 227.9 mo
50.3384 232.142 li
46.0962 232.142 mo
50.3384 227.9 li
@
55.9482 221.566 mo
55.9482 227.566 li
52.9482 224.566 mo
58.9482 224.566 li
53.8271 222.445 mo
58.0693 226.687 li
53.8271 226.687 mo
58.0693 222.445 li
@
59.1658 214.261 mo
59.1658 220.261 li
56.1658 217.261 mo
62.1658 217.261 li
57.045 215.14 mo
61.2868 219.382 li
57.045 219.382 mo
61.2868 215.14 li
@
62.0665 208.159 mo
62.0665 214.159 li
59.0665 211.159 mo
65.0665 211.159 li
59.9454 209.038 mo
64.1876 213.28 li
59.9454 213.28 mo
64.1876 209.038 li
@
70.7728 197.988 mo
70.7728 203.988 li
67.7728 200.988 mo
73.7728 200.988 li
68.6517 198.867 mo
72.8935 203.109 li
68.6517 203.109 mo
72.8935 198.867 li
@
72.1122 189.482 mo
72.1122 195.482 li
69.1122 192.482 mo
75.1122 192.482 li
69.9911 190.361 mo
74.2333 194.603 li
69.9911 194.603 mo
74.2333 190.361 li
@
72.7599 183.841 mo
72.7599 189.841 li
69.7599 186.841 mo
75.7599 186.841 li
70.6388 184.721 mo
74.881 188.962 li
70.6388 188.962 mo
74.881 184.721 li
@
78.0251 176.629 mo
78.0251 182.629 li
75.0251 179.629 mo
81.0251 179.629 li
75.904 177.508 mo
80.1462 181.75 li
75.904 181.75 mo
80.1462 177.508 li
@
81.5552 168.955 mo
81.5552 174.955 li
78.5552 171.955 mo
84.5552 171.955 li
79.4341 169.834 mo
83.6763 174.076 li
79.4341 174.076 mo
83.6763 169.834 li
@
82.0267 161.003 mo
82.0267 167.003 li
79.0267 164.003 mo
85.0267 164.003 li
79.9056 161.882 mo
84.1478 166.124 li
79.9056 166.124 mo
84.1478 161.882 li
@
82.4908 153.421 mo
82.4908 159.421 li
79.4908 156.421 mo
85.4908 156.421 li
80.3697 154.3 mo
84.6118 158.542 li
80.3697 158.542 mo
84.6118 154.3 li
@
85.1314 145.377 mo
85.1314 151.377 li
82.1314 148.377 mo
88.131 148.377 li
83.0103 146.256 mo
87.2525 150.498 li
83.0103 150.498 mo
87.2525 146.256 li
@
88.695 138.35 mo
88.695 144.35 li
85.6954 141.35 mo
91.695 141.35 li
86.5743 139.229 mo
90.816 143.471 li
86.5743 143.471 mo
90.816 139.229 li
@
89.066 132.155 mo
89.066 138.155 li
86.0658 135.155 mo
92.066 135.155 li
86.945 133.034 mo
91.187 137.276 li
86.945 137.276 mo
91.187 133.034 li
@
90.504 126.792 mo
90.504 132.792 li
87.504 129.792 mo
93.504 129.792 li
88.383 127.671 mo
92.625 131.913 li
88.383 131.913 mo
92.625 127.671 li
@
92.862 120.597 mo
92.862 126.597 li
89.862 123.597 mo
95.862 123.597 li
90.741 121.476 mo
94.983 125.718 li
90.741 125.718 mo
94.983 121.476 li
@
95.046 115.974 mo
95.046 121.974 li
92.046 118.974 mo
98.046 118.974 li
92.925 116.853 mo
97.167 121.095 li
92.925 121.095 mo
97.167 116.853 li
@
98.18 110.334 mo
98.18 116.334 li
95.18 113.334 mo
101.18 113.334 li
96.06 111.213 mo
100.301 115.455 li
96.06 115.455 mo
100.301 111.213 li
@
100.767 105.71 mo
100.767 111.71 li
97.767 108.71 mo
103.767 108.71 li
98.646 106.59 mo
102.888 110.832 li
98.646 110.832 mo
102.888 106.59 li
@
103.372 101.55 mo
103.372 107.55 li
100.372 104.55 mo
106.372 104.55 li
101.251 102.429 mo
105.493 106.671 li
101.251 106.671 mo
105.493 102.429 li
@
106.993 98.4977 mo
106.993 104.498 li
103.993 101.498 mo
109.993 101.498 li
104.872 99.3777 mo
109.114 103.619 li
104.872 103.619 mo
109.114 99.3777 li
@
111.621 92.9507 mo
111.621 98.9507 li
108.621 95.9507 mo
114.621 95.9507 li
109.5 93.8297 mo
113.742 98.0717 li
109.5 98.0717 mo
113.742 93.8297 li
@
115.918 87.2177 mo
115.918 93.2177 li
112.918 90.2177 mo
118.918 90.2177 li
113.797 88.0967 mo
118.039 92.3387 li
113.797 92.3387 mo
118.039 88.0967 li
@
119.797 82.9647 mo
119.797 88.9647 li
116.797 85.9647 mo
122.797 85.9647 li
117.676 83.8437 mo
121.918 88.0857 li
117.676 88.0857 mo
121.918 83.8437 li
@
123.683 79.4507 mo
123.683 85.4507 li
120.683 82.4507 mo
126.683 82.4507 li
121.561 80.3297 mo
125.804 84.5717 li
121.561 84.5717 mo
125.804 80.3297 li
@
127.517 74.8277 mo
127.517 80.8277 li
124.517 77.8277 mo
130.517 77.8277 li
125.397 75.7067 mo
129.638 79.9487 li
125.397 79.9487 mo
129.638 75.7067 li
@
130.91 71.7767 mo
130.91 77.7767 li
127.91 74.7767 mo
133.91 74.7767 li
128.789 72.6557 mo
133.031 76.8977 li
128.789 76.8977 mo
133.031 72.6557 li
@
135.819 69.0027 mo
135.819 75.0027 li
132.819 72.0027 mo
138.819 72.0027 li
133.698 69.8817 mo
137.94 74.1237 li
133.698 74.1237 mo
137.94 69.8817 li
@
139.829 66.5067 mo
139.829 72.5067 li
136.829 69.5067 mo
142.829 69.5067 li
137.708 67.3847 mo
141.95 71.6277 li
137.708 71.6277 mo
141.95 67.3847 li
@
144.277 64.4717 mo
144.277 70.4717 li
141.277 67.4717 mo
147.277 67.4717 li
142.156 65.3507 mo
146.398 69.5927 li
142.156 69.5927 mo
146.398 65.3507 li
@
149.02 62.4377 mo
149.02 68.4377 li
146.02 65.4377 mo
152.02 65.4377 li
146.899 63.3167 mo
151.142 67.5587 li
146.899 67.5587 mo
151.142 63.3167 li
@
154.417 60.4037 mo
154.417 66.4037 li
151.417 63.4037 mo
157.417 63.4037 li
152.296 61.2827 mo
156.538 65.5247 li
152.296 65.5247 mo
156.538 61.2827 li
@
159.521 58.1847 mo
159.521 64.1847 li
156.521 61.1847 mo
162.521 61.1847 li
157.4 59.0637 mo
161.642 63.3057 li
157.4 63.3057 mo
161.642 59.0637 li
@
165.372 56.7977 mo
165.372 62.7977 li
162.372 59.7977 mo
168.372 59.7977 li
163.251 57.6767 mo
167.493 61.9187 li
163.251 61.9187 mo
167.493 57.6767 li
@
171.083 55.5027 mo
171.083 61.5027 li
168.083 58.5027 mo
174.083 58.5027 li
168.963 56.3817 mo
173.204 60.6237 li
168.963 60.6237 mo
173.204 56.3817 li
@
177.246 54.5787 mo
177.246 60.5787 li
174.246 57.5787 mo
180.246 57.5787 li
175.125 55.4577 mo
179.367 59.6997 li
175.125 59.6997 mo
179.367 55.4577 li
@
183.182 52.9137 mo
183.182 58.9137 li
180.182 55.9137 mo
186.182 55.9137 li
181.061 53.7937 mo
185.303 58.0347 li
181.061 58.0347 mo
185.303 53.7937 li
@
188.07 50.9727 mo
188.07 56.9727 li
185.07 53.9727 mo
191.07 53.9727 li
185.949 51.8517 mo
190.191 56.0937 li
185.949 56.0937 mo
190.191 51.8517 li
@
193.168 50.1407 mo
193.168 56.1407 li
190.168 53.1407 mo
196.168 53.1407 li
191.047 51.0187 mo
195.289 55.2617 li
191.047 55.2617 mo
195.289 51.0187 li
@
199.226 49.2157 mo
199.226 55.2157 li
196.226 52.2157 mo
202.226 52.2157 li
197.105 50.0947 mo
201.347 54.3367 li
197.105 54.3367 mo
201.347 50.0947 li
@
204.521 47.5507 mo
204.521 53.5507 li
201.521 50.5507 mo
207.521 50.5507 li
202.4 48.4307 mo
206.642 52.6727 li
202.4 52.6727 mo
206.642 48.4307 li
@
210.281 46.7187 mo
210.281 52.7187 li
207.281 49.7187 mo
213.281 49.7187 li
208.16 47.5977 mo
212.402 51.8407 li
208.16 51.8407 mo
212.402 47.5977 li
@
215.929 46.3487 mo
215.929 52.3487 li
212.929 49.3487 mo
218.929 49.3487 li
213.808 47.2287 mo
218.05 51.4707 li
213.808 51.4707 mo
218.05 47.2287 li
@
221.452 44.9627 mo
221.452 50.9627 li
218.452 47.9627 mo
224.452 47.9627 li
219.331 45.8417 mo
223.573 50.0837 li
219.331 50.0837 mo
223.573 45.8417 li
@
226.865 43.1137 mo
226.865 49.1137 li
223.865 46.1137 mo
229.865 46.1137 li
224.744 43.9917 mo
228.986 48.2337 li
224.744 48.2337 mo
228.986 43.9917 li
@
232.159 42.5577 mo
232.159 48.5577 li
229.159 45.5577 mo
235.159 45.5577 li
230.038 43.4377 mo
234.28 47.6797 li
230.038 47.6797 mo
234.28 43.4377 li
@
237.114 41.6337 mo
237.114 47.6337 li
234.114 44.6337 mo
240.114 44.6337 li
234.993 42.5127 mo
239.235 46.7547 li
234.993 46.7547 mo
239.235 42.5127 li
@
242.259 40.8017 mo
242.259 46.8017 li
239.259 43.8017 mo
245.259 43.8017 li
240.138 41.6807 mo
244.38 45.9227 li
240.138 45.9227 mo
244.38 41.6807 li
@
247.353 40.1547 mo
247.353 46.1547 li
244.353 43.1547 mo
250.353 43.1547 li
245.232 41.0327 mo
249.474 45.2757 li
245.232 45.2757 mo
249.474 41.0327 li
@
252.094 39.7847 mo
252.094 45.7847 li
249.094 42.7847 mo
255.094 42.7847 li
249.973 40.6637 mo
254.215 44.9057 li
249.973 44.9057 mo
254.215 40.6637 li
@
256.793 39.4147 mo
256.793 45.4147 li
253.793 42.4147 mo
259.793 42.4147 li
254.672 40.2937 mo
258.914 44.5357 li
254.672 44.5357 mo
258.914 40.2937 li
@
261.631 38.8597 mo
261.631 44.8597 li
258.631 41.8597 mo
264.631 41.8597 li
259.51 39.7387 mo
263.752 43.9807 li
259.51 43.9807 mo
263.752 39.7387 li
@
266.099 38.1207 mo
266.099 44.1207 li
263.099 41.1207 mo
269.099 41.1207 li
263.978 38.9987 mo
268.22 43.2407 li
263.978 43.2407 mo
268.22 38.9987 li
@
270.608 37.6577 mo
270.608 43.6577 li
267.608 40.6577 mo
273.608 40.6577 li
268.487 38.5367 mo
272.729 42.7787 li
268.487 42.7787 mo
272.729 38.5367 li
@
275.033 36.6407 mo
275.033 42.6407 li
272.033 39.6407 mo
278.033 39.6407 li
272.911 37.5197 mo
277.154 41.7617 li
272.911 41.7617 mo
277.154 37.5197 li
@
279.333 36.4557 mo
279.333 42.4557 li
276.333 39.4557 mo
282.333 39.4557 li
277.212 37.3347 mo
281.454 41.5767 li
277.212 41.5767 mo
281.454 37.3347 li
@
283.525 35.9937 mo
283.525 41.9937 li
280.525 38.9937 mo
286.525 38.9937 li
281.404 36.8727 mo
285.645 41.1147 li
281.404 41.1147 mo
285.645 36.8727 li
@
287.644 35.5317 mo
287.644 41.5317 li
284.644 38.5317 mo
290.644 38.5317 li
285.524 36.4097 mo
289.765 40.6527 li
285.524 40.6527 mo
289.765 36.4097 li
@
291.634 35.2537 mo
291.634 41.2537 li
288.634 38.2537 mo
294.634 38.2537 li
289.513 36.1327 mo
293.755 40.3747 li
289.513 40.3747 mo
293.755 36.1327 li
@
295.569 34.5137 mo
295.569 40.5137 li
292.569 37.5137 mo
298.569 37.5137 li
293.448 35.3927 mo
297.69 39.6347 li
293.448 39.6347 mo
297.69 35.3927 li
@
299.343 34.1437 mo
299.343 40.1437 li
296.343 37.1437 mo
302.343 37.1437 li
297.222 35.0237 mo
301.464 39.2657 li
297.222 39.2657 mo
301.464 35.0237 li
@
303.039 33.7747 mo
303.039 39.7747 li
300.039 36.7747 mo
306.039 36.7747 li
300.918 34.6537 mo
305.16 38.8957 li
300.918 38.8957 mo
305.16 34.6537 li
@
306.664 33.3117 mo
306.664 39.3117 li
303.664 36.3117 mo
309.664 36.3117 li
304.543 34.1907 mo
308.785 38.4327 li
304.543 38.4327 mo
308.785 34.1907 li
@
310.106 32.5727 mo
310.106 38.5727 li
307.106 35.5727 mo
313.106 35.5727 li
307.985 33.4517 mo
312.227 37.6937 li
307.985 37.6937 mo
312.227 33.4517 li
@
313.474 32.3877 mo
313.474 38.3877 li
310.474 35.3877 mo
316.474 35.3877 li
311.353 33.2667 mo
315.595 37.5087 li
311.353 37.5087 mo
315.595 33.2667 li
@
316.79 31.5557 mo
316.79 37.5557 li
313.79 34.5557 mo
319.79 34.5557 li
314.669 32.4347 mo
318.911 36.6757 li
314.669 36.6757 mo
318.911 32.4347 li
@
319.936 31.4627 mo
319.936 37.4627 li
316.936 34.4627 mo
322.936 34.4627 li
317.815 32.3417 mo
322.057 36.5837 li
317.815 36.5837 mo
322.057 32.3417 li
@
323.034 30.5387 mo
323.034 36.5387 li
320.034 33.5387 mo
326.034 33.5387 li
320.913 31.4167 mo
325.155 35.6597 li
320.913 35.6597 mo
325.155 31.4167 li
@
326.089 29.7987 mo
326.089 35.7987 li
323.089 32.7987 mo
329.089 32.7987 li
323.968 30.6777 mo
328.21 34.9197 li
323.968 34.9197 mo
328.21 30.6777 li
@
329.003 29.0587 mo
329.003 35.0587 li
326.003 32.0587 mo
332.003 32.0587 li
326.882 29.9377 mo
331.124 34.1797 li
326.882 34.1797 mo
331.124 29.9377 li
@
331.811 28.6887 mo
331.811 34.6887 li
328.811 31.6887 mo
334.811 31.6887 li
329.69 29.5677 mo
333.932 33.8097 li
329.69 33.8097 mo
333.932 29.5677 li
@
334.543 27.5797 mo
334.543 33.5797 li
331.543 30.5797 mo
337.543 30.5797 li
332.422 28.4587 mo
336.664 32.7007 li
332.422 32.7007 mo
336.664 28.4587 li
@
337.23 27.1167 mo
337.23 33.1167 li
334.23 30.1167 mo
340.23 30.1167 li
335.109 27.9957 mo
339.351 32.2387 li
335.109 32.2387 mo
339.351 27.9957 li
@
339.807 26.6547 mo
339.807 32.6547 li
336.807 29.6547 mo
342.807 29.6547 li
337.686 27.5337 mo
341.928 31.7757 li
337.686 31.7757 mo
341.928 27.5337 li
@
342.259 26.0077 mo
342.259 32.0077 li
339.259 29.0077 mo
345.259 29.0077 li
340.138 26.8867 mo
344.38 31.1287 li
340.138 31.1287 mo
344.38 26.8867 li
@
344.634 25.4527 mo
344.634 31.4527 li
341.634 28.4527 mo
347.634 28.4527 li
342.513 26.3317 mo
346.754 30.5737 li
342.513 30.5737 mo
346.754 26.3317 li
@
346.945 25.1757 mo
346.945 31.1757 li
343.945 28.1757 mo
349.945 28.1757 li
344.824 26.0547 mo
349.066 30.2967 li
344.824 30.2967 mo
349.066 26.0547 li
@
349.153 24.8977 mo
349.153 30.8977 li
346.153 27.8977 mo
352.153 27.8977 li
347.032 25.7767 mo
351.274 30.0187 li
347.032 30.0187 mo
351.274 25.7767 li
@
351.291 24.4357 mo
351.291 30.4357 li
348.291 27.4357 mo
354.291 27.4357 li
349.17 25.3147 mo
353.412 29.5567 li
349.17 29.5567 mo
353.412 25.3147 li
@
353.317 23.7887 mo
353.317 29.7887 li
350.317 26.7887 mo
356.317 26.7887 li
351.196 24.6677 mo
355.438 28.9097 li
351.196 28.9097 mo
355.438 24.6677 li
@
355.263 23.2337 mo
355.263 29.2337 li
352.263 26.2337 mo
358.263 26.2337 li
353.142 24.1127 mo
357.384 28.3547 li
353.142 28.3547 mo
357.384 24.1127 li
@
357.157 22.9567 mo
357.157 28.9567 li
354.157 25.9567 mo
360.157 25.9567 li
355.036 23.8347 mo
359.278 28.0777 li
355.036 28.0777 mo
359.278 23.8347 li
@
358.973 22.5867 mo
358.973 28.5867 li
355.973 25.5867 mo
361.973 25.5867 li
356.852 23.4657 mo
361.094 27.7077 li
356.852 27.7077 mo
361.094 23.4657 li
@
360.702 22.3087 mo
360.702 28.3087 li
357.702 25.3087 mo
363.702 25.3087 li
358.581 23.1877 mo
362.824 27.4297 li
358.581 27.4297 mo
362.824 23.1877 li
@
362.355 22.2167 mo
362.355 28.2167 li
359.355 25.2167 mo
365.355 25.2167 li
360.234 23.0957 mo
364.476 27.3377 li
360.234 27.3377 mo
364.476 23.0957 li
@
363.94 21.9387 mo
363.94 27.9387 li
360.94 24.9387 mo
366.94 24.9387 li
361.818 22.8187 mo
366.061 27.0597 li
361.818 27.0597 mo
366.061 22.8187 li
@
365.443 21.6617 mo
365.443 27.6617 li
362.443 24.6617 mo
368.443 24.6617 li
363.322 22.5407 mo
367.563 26.7827 li
363.322 26.7827 mo
367.563 22.5407 li
@
366.885 21.2917 mo
366.885 27.2917 li
363.885 24.2917 mo
369.885 24.2917 li
364.765 22.1707 mo
369.006 26.4127 li
364.765 26.4127 mo
369.006 22.1707 li
@
368.246 21.0147 mo
368.246 27.0147 li
365.246 24.0147 mo
371.246 24.0147 li
366.125 21.8937 mo
370.367 26.1357 li
366.125 26.1357 mo
370.367 21.8937 li
@
369.55 20.9227 mo
369.55 26.9227 li
366.55 23.9227 mo
372.55 23.9227 li
367.429 21.8007 mo
371.671 26.0437 li
367.429 26.0437 mo
371.671 21.8007 li
@
370.794 20.7367 mo
370.794 26.7367 li
367.794 23.7367 mo
373.794 23.7367 li
368.673 21.6167 mo
372.915 25.8577 li
368.673 25.8577 mo
372.915 21.6167 li
@
371.972 20.4597 mo
371.972 26.4597 li
368.972 23.4597 mo
374.972 23.4597 li
369.851 21.3387 mo
374.093 25.5807 li
369.851 25.5807 mo
374.093 21.3387 li
@
373.088 20.1827 mo
373.088 26.1827 li
370.088 23.1827 mo
376.088 23.1827 li
370.967 21.0617 mo
375.21 25.3037 li
370.967 25.3037 mo
375.21 21.0617 li
@
374.141 19.9047 mo
374.141 25.9047 li
371.141 22.9047 mo
377.141 22.9047 li
372.02 20.7837 mo
376.261 25.0257 li
372.02 25.0257 mo
376.261 20.7837 li
@
375.143 19.6277 mo
375.143 25.6277 li
372.143 22.6277 mo
378.143 22.6277 li
373.022 20.5067 mo
377.264 24.7487 li
373.022 24.7487 mo
377.264 20.5067 li
@
376.089 19.5347 mo
376.089 25.5347 li
373.089 22.5347 mo
379.089 22.5347 li
373.968 20.4137 mo
378.21 24.6567 li
373.968 24.6567 mo
378.21 20.4137 li
@
376.985 19.4427 mo
376.985 25.4427 li
373.985 22.4427 mo
379.985 22.4427 li
374.865 20.3217 mo
379.106 24.5637 li
374.865 24.5637 mo
379.106 20.3217 li
@
377.829 19.2577 mo
377.829 25.2577 li
374.829 22.2577 mo
380.829 22.2577 li
375.708 20.1367 mo
379.95 24.3787 li
375.708 24.3787 mo
379.95 20.1367 li
@
378.621 19.1657 mo
378.621 25.1657 li
375.621 22.1657 mo
381.621 22.1657 li
376.5 20.0447 mo
380.742 24.2867 li
376.5 24.2867 mo
380.742 20.0447 li
@
379.365 18.8877 mo
379.365 24.8877 li
376.365 21.8877 mo
382.365 21.8877 li
377.244 19.7667 mo
381.486 24.0087 li
377.244 24.0087 mo
381.486 19.7667 li
@
380.065 18.7027 mo
380.065 24.7027 li
377.065 21.7027 mo
383.065 21.7027 li
377.943 19.5817 mo
382.186 23.8237 li
377.943 23.8237 mo
382.186 19.5817 li
@
380.714 18.6107 mo
380.714 24.6107 li
377.714 21.6107 mo
383.714 21.6107 li
378.593 19.4897 mo
382.835 23.7317 li
378.593 23.7317 mo
382.835 19.4897 li
@
381.322 18.3327 mo
381.322 24.3327 li
378.322 21.3327 mo
384.322 21.3327 li
379.201 19.2117 mo
383.443 23.4547 li
379.201 23.4547 mo
383.443 19.2117 li
@
381.886 18.2407 mo
381.886 24.2407 li
378.886 21.2407 mo
384.886 21.2407 li
379.765 19.1197 mo
384.008 23.3617 li
379.765 23.3617 mo
384.008 19.1197 li
@
382.407 17.9637 mo
382.407 23.9637 li
379.407 20.9637 mo
385.407 20.9637 li
380.286 18.8417 mo
384.528 23.0847 li
380.286 23.0847 mo
384.528 18.8417 li
@
382.892 17.7787 mo
382.892 23.7787 li
379.892 20.7787 mo
385.892 20.7787 li
380.771 18.6577 mo
385.013 22.8997 li
380.771 22.8997 mo
385.013 18.6577 li
@
383.347 17.7787 mo
383.347 23.7787 li
380.347 20.7787 mo
386.347 20.7787 li
381.226 18.6577 mo
385.468 22.8997 li
381.226 22.8997 mo
385.468 18.6577 li
@
383.765 17.4087 mo
383.765 23.4087 li
380.765 20.4087 mo
386.765 20.4087 li
381.644 18.2877 mo
385.886 22.5297 li
381.644 22.5297 mo
385.886 18.2877 li
@
384.157 17.2237 mo
384.157 23.2237 li
381.157 20.2237 mo
387.157 20.2237 li
382.036 18.1027 mo
386.278 22.3447 li
382.036 22.3447 mo
386.278 18.1027 li
@
384.516 17.0387 mo
384.516 23.0387 li
381.516 20.0387 mo
387.516 20.0387 li
382.395 17.9177 mo
386.637 22.1597 li
382.395 22.1597 mo
386.637 17.9177 li
@
384.841 17.0387 mo
384.841 23.0387 li
381.841 20.0387 mo
387.841 20.0387 li
382.72 17.9177 mo
386.962 22.1597 li
382.72 22.1597 mo
386.962 17.9177 li
@
385.138 16.7617 mo
385.138 22.7617 li
382.138 19.7617 mo
388.138 19.7617 li
383.017 17.6407 mo
387.26 21.8827 li
383.017 21.8827 mo
387.26 17.6407 li
@
385.413 16.5767 mo
385.413 22.5767 li
382.413 19.5767 mo
388.413 19.5767 li
383.292 17.4557 mo
387.534 21.6977 li
383.292 21.6977 mo
387.534 17.4557 li
@
385.667 16.5767 mo
385.667 22.5767 li
382.667 19.5767 mo
388.667 19.5767 li
383.546 17.4557 mo
387.788 21.6977 li
383.546 21.6977 mo
387.788 17.4557 li
@
385.896 16.5767 mo
385.896 22.5767 li
382.896 19.5767 mo
388.896 19.5767 li
383.775 17.4557 mo
388.017 21.6977 li
383.775 21.6977 mo
388.017 17.4557 li
@
386.104 16.5767 mo
386.104 22.5767 li
383.104 19.5767 mo
389.104 19.5767 li
383.984 17.4557 mo
388.226 21.6977 li
383.984 21.6977 mo
388.226 17.4557 li
@
386.291 16.4837 mo
386.291 22.4837 li
383.291 19.4837 mo
389.291 19.4837 li
384.17 17.3627 mo
388.412 21.6047 li
384.17 21.6047 mo
388.412 17.3627 li
@
386.464 16.4837 mo
386.464 22.4837 li
383.464 19.4837 mo
389.464 19.4837 li
384.343 17.3627 mo
388.585 21.6047 li
384.343 21.6047 mo
388.585 17.3627 li
@
386.618 16.4837 mo
386.618 22.4837 li
383.618 19.4837 mo
389.618 19.4837 li
384.497 17.3627 mo
388.739 21.6047 li
384.497 21.6047 mo
388.739 17.3627 li
@
386.756 16.2987 mo
386.756 22.2987 li
383.756 19.2987 mo
389.756 19.2987 li
384.636 17.1777 mo
388.877 21.4197 li
384.636 21.4197 mo
388.877 17.1777 li
@
386.879 16.2987 mo
386.879 22.2987 li
383.879 19.2987 mo
389.879 19.2987 li
384.758 17.1777 mo
389.001 21.4197 li
384.758 21.4197 mo
389.001 17.1777 li
@
386.99 16.2987 mo
386.99 22.2987 li
383.99 19.2987 mo
389.99 19.2987 li
384.869 17.1777 mo
389.111 21.4197 li
384.869 21.4197 mo
389.111 17.1777 li
@
387.09 16.2067 mo
387.09 22.2067 li
384.09 19.2067 mo
390.09 19.2067 li
384.969 17.0857 mo
389.211 21.3277 li
384.969 21.3277 mo
389.211 17.0857 li
@
387.179 16.2067 mo
387.179 22.2067 li
384.179 19.2067 mo
390.179 19.2067 li
385.058 17.0857 mo
389.3 21.3277 li
385.058 21.3277 mo
389.3 17.0857 li
@
387.258 16.2067 mo
387.258 22.2067 li
384.258 19.2067 mo
390.258 19.2067 li
385.137 17.0857 mo
389.379 21.3277 li
385.137 21.3277 mo
389.379 17.0857 li
@
387.327 16.2067 mo
387.327 22.2067 li
384.327 19.2067 mo
390.327 19.2067 li
385.206 17.0857 mo
389.448 21.3277 li
385.206 21.3277 mo
389.448 17.0857 li
@
387.392 16.2067 mo
387.392 22.2067 li
384.392 19.2067 mo
390.392 19.2067 li
385.27 17.0857 mo
389.513 21.3277 li
385.27 21.3277 mo
389.513 17.0857 li
@
387.445 16.2067 mo
387.445 22.2067 li
384.445 19.2067 mo
390.445 19.2067 li
385.324 17.0857 mo
389.567 21.3277 li
385.324 21.3277 mo
389.567 17.0857 li
@
387.494 16.0217 mo
387.494 22.0217 li
384.494 19.0217 mo
390.494 19.0217 li
385.373 16.9007 mo
389.615 21.1427 li
385.373 21.1427 mo
389.615 16.9007 li
@
387.538 15.9297 mo
387.538 21.9297 li
384.538 18.9297 mo
390.538 18.9297 li
385.417 16.8077 mo
389.659 21.0497 li
385.417 21.0497 mo
389.659 16.8077 li
@
387.576 15.8367 mo
387.576 21.8367 li
384.576 18.8367 mo
390.576 18.8367 li
385.455 16.7157 mo
389.697 20.9577 li
385.455 20.9577 mo
389.697 16.7157 li
@
387.609 15.8367 mo
387.609 21.8367 li
384.609 18.8367 mo
390.609 18.8367 li
385.488 16.7157 mo
389.73 20.9577 li
385.488 20.9577 mo
389.73 16.7157 li
@
387.639 15.8367 mo
387.639 21.8367 li
384.639 18.8367 mo
390.639 18.8367 li
385.518 16.7157 mo
389.76 20.9577 li
385.518 20.9577 mo
389.76 16.7157 li
@
387.664 15.8367 mo
387.664 21.8367 li
384.664 18.8367 mo
390.664 18.8367 li
385.543 16.7157 mo
389.785 20.9577 li
385.543 20.9577 mo
389.785 16.7157 li
@
387.686 15.8367 mo
387.686 21.8367 li
384.686 18.8367 mo
390.686 18.8367 li
385.565 16.7157 mo
389.808 20.9577 li
385.565 20.9577 mo
389.808 16.7157 li
@
387.705 15.8367 mo
387.705 21.8367 li
384.705 18.8367 mo
390.705 18.8367 li
385.584 16.7157 mo
389.826 20.9577 li
385.584 20.9577 mo
389.826 16.7157 li
@
387.722 15.8367 mo
387.722 21.8367 li
384.722 18.8367 mo
390.722 18.8367 li
385.601 16.7157 mo
389.843 20.9577 li
385.601 20.9577 mo
389.843 16.7157 li
@
387.736 15.8367 mo
387.736 21.8367 li
384.736 18.8367 mo
390.736 18.8367 li
385.615 16.7157 mo
389.857 20.9577 li
385.615 20.9577 mo
389.857 16.7157 li
@
387.749 15.8367 mo
387.749 21.8367 li
384.749 18.8367 mo
390.749 18.8367 li
385.628 16.7157 mo
389.87 20.9577 li
385.628 20.9577 mo
389.87 16.7157 li
@
387.759 15.8367 mo
387.759 21.8367 li
384.759 18.8367 mo
390.759 18.8367 li
385.638 16.7157 mo
389.88 20.9577 li
385.638 20.9577 mo
389.88 16.7157 li
@
387.768 15.8367 mo
387.768 21.8367 li
384.768 18.8367 mo
390.768 18.8367 li
385.647 16.7157 mo
389.89 20.9577 li
385.647 20.9577 mo
389.89 16.7157 li
@
387.777 15.8367 mo
387.777 21.8367 li
384.777 18.8367 mo
390.777 18.8367 li
385.656 16.7157 mo
389.898 20.9577 li
385.656 20.9577 mo
389.898 16.7157 li
@
387.784 15.8367 mo
387.784 21.8367 li
384.784 18.8367 mo
390.784 18.8367 li
385.663 16.7157 mo
389.905 20.9577 li
385.663 20.9577 mo
389.905 16.7157 li
@
387.79 15.8367 mo
387.79 21.8367 li
384.79 18.8367 mo
390.79 18.8367 li
385.669 16.7157 mo
389.911 20.9577 li
385.669 20.9577 mo
389.911 16.7157 li
@
387.796 15.8367 mo
387.796 21.8367 li
384.796 18.8367 mo
390.796 18.8367 li
385.675 16.7157 mo
389.917 20.9577 li
385.675 20.9577 mo
389.917 16.7157 li
@
387.8 15.8367 mo
387.8 21.8367 li
384.8 18.8367 mo
390.8 18.8367 li
385.679 16.7157 mo
389.921 20.9577 li
385.679 20.9577 mo
389.921 16.7157 li
@
387.804 15.8367 mo
387.804 21.8367 li
384.804 18.8367 mo
390.804 18.8367 li
385.683 16.7157 mo
389.925 20.9577 li
385.683 20.9577 mo
389.925 16.7157 li
@
387.807 15.8367 mo
387.807 21.8367 li
384.807 18.8367 mo
390.807 18.8367 li
385.686 16.7157 mo
389.928 20.9577 li
385.686 20.9577 mo
389.928 16.7157 li
@
387.81 15.8367 mo
387.81 21.8367 li
384.81 18.8367 mo
390.81 18.8367 li
385.688 16.7157 mo
389.93 20.9577 li
385.688 20.9577 mo
389.93 16.7157 li
@
387.812 15.8367 mo
387.812 21.8367 li
384.812 18.8367 mo
390.812 18.8367 li
385.691 16.7157 mo
389.933 20.9577 li
385.691 20.9577 mo
389.933 16.7157 li
@
387.814 15.8367 mo
387.814 21.8367 li
384.814 18.8367 mo
390.814 18.8367 li
385.693 16.7157 mo
389.935 20.9577 li
385.693 20.9577 mo
389.935 16.7157 li
@
387.815 15.8367 mo
387.815 21.8367 li
384.815 18.8367 mo
390.815 18.8367 li
385.694 16.7157 mo
389.936 20.9577 li
385.694 20.9577 mo
389.936 16.7157 li
@
387.816 15.8367 mo
387.816 21.8367 li
384.816 18.8367 mo
390.816 18.8367 li
385.695 16.7157 mo
389.937 20.9577 li
385.695 20.9577 mo
389.937 16.7157 li
@
387.817 15.8367 mo
387.817 21.8367 li
384.817 18.8367 mo
390.817 18.8367 li
385.696 16.7157 mo
389.938 20.9577 li
385.696 20.9577 mo
389.938 16.7157 li
@
387.818 15.8367 mo
387.818 21.8367 li
384.818 18.8367 mo
390.818 18.8367 li
385.697 16.7157 mo
389.939 20.9577 li
385.697 20.9577 mo
389.939 16.7157 li
@
387.818 15.8367 mo
387.818 21.8367 li
384.818 18.8367 mo
390.818 18.8367 li
385.697 16.7157 mo
389.94 20.9577 li
385.697 20.9577 mo
389.94 16.7157 li
@
387.819 15.8367 mo
387.819 21.8367 li
384.819 18.8367 mo
390.819 18.8367 li
385.698 16.7157 mo
389.94 20.9577 li
385.698 20.9577 mo
389.94 16.7157 li
@
387.82 15.8367 mo
387.82 21.8367 li
384.82 18.8367 mo
390.82 18.8367 li
385.699 16.7157 mo
389.941 20.9577 li
385.699 20.9577 mo
389.941 16.7157 li
@
387.82 15.8367 mo
387.82 21.8367 li
384.82 18.8367 mo
390.82 18.8367 li
385.699 16.7157 mo
389.941 20.9577 li
385.699 20.9577 mo
389.941 16.7157 li
@
387.82 15.8367 mo
387.82 21.8367 li
384.82 18.8367 mo
390.82 18.8367 li
385.699 16.7157 mo
389.942 20.9577 li
385.699 20.9577 mo
389.942 16.7157 li
@
387.821 15.8367 mo
387.821 21.8367 li
384.821 18.8367 mo
390.821 18.8367 li
385.7 16.7157 mo
389.942 20.9577 li
385.7 20.9577 mo
389.942 16.7157 li
@
387.821 15.8367 mo
387.821 21.8367 li
384.821 18.8367 mo
390.821 18.8367 li
385.7 16.7157 mo
389.942 20.9577 li
385.7 20.9577 mo
389.942 16.7157 li
@
387.821 15.8367 mo
387.821 21.8367 li
384.821 18.8367 mo
390.821 18.8367 li
385.7 16.7157 mo
389.942 20.9577 li
385.7 20.9577 mo
389.942 16.7157 li
@
387.821 15.8367 mo
387.821 21.8367 li
384.821 18.8367 mo
390.821 18.8367 li
385.701 16.7157 mo
389.942 20.9577 li
385.701 20.9577 mo
389.942 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.942 20.9577 li
385.701 20.9577 mo
389.942 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
387.822 15.8367 mo
387.822 21.8367 li
384.822 18.8367 mo
390.822 18.8367 li
385.701 16.7157 mo
389.943 20.9577 li
385.701 20.9577 mo
389.943 16.7157 li
@
1 lj
45.0314 88.6697 mo
45.1126 88.6457 li
45.1126 87.5367 li
48.2173 86.1487 li
48.2173 85.0397 li
48.2173 84.5777 li
48.2173 84.1157 li
48.2173 82.9127 li
49.6552 81.5257 li
49.6552 80.7867 li
49.6552 80.1397 li
49.6552 79.4917 li
49.6552 79.2147 li
49.6552 78.2897 li
52.3357 76.9027 li
52.3357 76.1637 li
52.3357 75.4237 li
54.7927 74.7757 li
54.7927 74.0367 li
54.7927 73.1117 li
55.9486 72.0947 li
55.9486 71.4477 li
57.0599 70.8007 li
59.1661 70.3387 li
59.1661 69.3217 li
59.1661 68.7667 li
59.1661 68.1187 li
59.1661 67.1947 li
60.165 66.4547 li
61.131 65.4377 li
61.131 64.7907 li
61.131 64.0507 li
61.131 63.4037 li
61.131 62.9417 li
61.131 62.5717 li
61.131 62.4797 li
61.131 61.8317 li
61.131 61.7387 li
61.131 61.3687 li
61.131 61.1847 li
61.131 60.6297 li
61.131 59.7047 li
61.131 59.1507 li
61.131 58.9657 li
61.131 58.5957 li
61.131 57.5787 li
61.131 57.2087 li
61.131 57.1157 li
61.131 56.4687 li
62.9732 55.9147 li
62.9732 55.5447 li
62.9732 55.1737 li
62.9732 54.4347 li
62.9732 53.8797 li
62.9732 53.4177 li
64.7072 53.2327 li
64.7072 52.8627 li
64.7072 52.3087 li
64.7072 51.7537 li
64.7072 51.3837 li
64.7072 51.0137 li
64.7072 50.7367 li
64.7072 50.3667 li
64.7072 49.8117 li
64.7072 49.7197 li
66.3443 49.2567 li
67.8958 48.9797 li
67.8958 48.3317 li
68.6415 47.9617 li
68.6415 47.6847 li
70.0794 47.4077 li
71.4501 47.0377 li
72.1126 46.8527 li
73.3935 46.4827 li
73.3935 46.3907 li
73.3935 45.9277 li
73.3935 45.6507 li
73.3935 45.3727 li
73.3935 45.0957 li
74.6212 45.0957 li
74.6212 44.7257 li
76.3724 44.0787 li
76.3724 43.8937 li
77.4849 43.7087 li
77.4849 43.6167 li
78.5564 43.2467 li
78.5564 42.7847 li
78.5564 42.4147 li
79.59 42.0447 li
79.59 41.6747 li
79.59 41.3977 li
79.59 41.1197 li
79.59 40.8427 li
80.0939 40.6577 li
80.5892 40.3807 li
81.5548 40.3807 li
81.5548 40.1027 li
82.4911 39.8257 li
82.4911 39.7327 li
82.4911 39.4557 li
82.4911 39.2707 li
82.4911 39.1777 li
83.3978 39.0857 li
83.3978 38.2547 li
83.3978 37.9767 li
83.3978 37.6067 li
83.3978 37.5137 li
84.2767 37.2367 li
85.131 37.0517 li
86.7689 36.8667 li
87.1642 36.6817 li
87.1642 36.5887 li
87.94 36.4967 li
89.794 36.0347 li
90.151 35.7577 li
90.503 35.7577 li
90.503 35.5727 li
90.852 35.3877 li
90.852 35.2947 li
90.852 35.0177 li
91.538 34.5547 li
91.538 34.1857 li
91.874 34.1857 li
91.874 34.0937 li
91.874 33.9077 li
93.185 33.9077 li
93.818 33.7237 li
94.438 33.3527 li
94.438 33.2607 li
95.046 33.0757 li
95.046 32.6137 li
95.641 32.5207 li
96.224 32.4287 li
96.797 32.0597 li
97.909 31.9667 li
98.18 31.8737 li
99.502 31.7817 li
99.759 31.6887 li
100.267 31.6887 li
101.258 31.6887 li
102.216 31.5047 li
102.216 31.4117 li
103.145 31.4117 li
103.372 31.4117 li
103.372 31.1347 li
103.597 30.9487 li
103.822 30.6717 li
104.702 30.5797 li
105.131 30.3937 li
105.765 30.3017 li
106.181 30.2097 li
107.784 30.0247 li
108.744 29.9317 li
109.306 29.9317 li
109.674 29.9317 li
110.038 29.8397 li
110.575 29.6547 li
111.449 29.6547 li
112.631 29.6547 li
113.286 29.6547 li
113.608 29.5627 li
113.608 29.4707 li
113.608 29.3777 li
114.085 29.3777 li
115.015 29.2847 li
116.504 29.1927 li
117.362 29.0997 li
117.782 29.0077 li
118.333 29.0077 li
118.874 28.9157 li
118.874 28.8227 li
119.666 28.7297 li
119.797 28.7297 li
120.692 28.7297 li
120.692 28.5457 li
121.067 28.4527 li
121.438 28.3597 li
121.924 28.3597 li
122.165 28.2677 li
122.165 28.0827 li
122.522 28.0827 li
122.992 28.0827 li
123.568 27.9907 li
124.689 27.8047 li
125.449 27.7127 li
126.085 27.7127 li
126.604 27.6207 li
127.115 27.5287 li
127.617 27.5287 li
128.597 27.5287 li
129.074 27.4357 li
129.451 27.3437 li
129.73 27.3437 li
130.098 27.3437 li
130.552 27.3437 li
131.787 27.2507 li
132.302 27.2507 li
132.639 27.1587 li
133.221 27.1587 li
133.872 27.1587 li
134.588 27.0657 li
134.823 27.0657 li
135.286 26.9737 li
135.44 26.9737 li
136.267 26.8817 li
136.856 26.8817 li
137.716 26.8817 li
138.068 26.8817 li
139.029 26.8817 li
139.961 26.7887 li
140.286 26.7887 li
140.736 26.6037 li
141.242 26.6037 li
142.469 26.4187 li
143.241 26.3257 li
144.334 26.3257 li
145.333 26.3257 li
146.086 26.3257 li
146.874 26.3257 li
147.942 26.3257 li
148.535 26.3257 li
149.308 26.2337 li
149.827 26.2337 li
150.154 26.2337 li
150.613 26.2337 li
151.424 26.2337 li
152.341 26.0487 li
153.021 26.0487 li
153.973 26.0487 li
154.537 25.9567 li
155.672 25.9567 li
156.469 25.8637 li
157.134 25.8637 li
157.82 25.8637 li
158.176 25.8637 li
159.487 25.8637 li
160.022 25.8637 li
160.839 25.7707 li
161.288 25.7707 li
161.853 25.7707 li
162.194 25.7707 li
163.163 25.7707 li
163.899 25.7707 li
164.673 25.7707 li
165.262 25.7707 li
165.974 25.6787 li
166.855 25.6787 li
167.556 25.6787 li
168.241 25.6787 li
168.812 25.6787 li
169.3 25.5867 li
170.088 25.5867 li
170.809 25.5867 li
171.647 25.5867 li
172.419 25.5867 li
173.129 25.4937 li
173.801 25.4937 li
174.539 25.4937 li
175.081 25.4937 li
175.613 25.4017 li
176.27 25.4017 li
176.986 25.4017 li
177.759 25.3097 li
178.352 25.3097 li
179.09 25.3097 li
179.742 25.3097 li
180.347 25.2167 li
180.874 25.2167 li
181.68 25.2167 li
182.541 25.1237 li
183.273 25.1237 li
183.839 25.1237 li
184.712 25.1237 li
185.435 25.1237 li
185.975 25.1237 li
186.506 25.0317 li
187.147 25.0317 li
187.723 25.0317 li
188.565 25.0317 li
189.371 24.8467 li
189.977 24.8467 li
190.77 24.7547 li
191.348 24.6617 li
191.926 24.6617 li
192.372 24.6617 li
193.114 24.6617 li
193.828 24.5697 li
194.473 24.5697 li
195.206 24.5697 li
195.988 24.5697 li
196.665 24.5697 li
197.289 24.5697 li
197.946 24.4767 li
198.625 24.4767 li
199.191 24.4767 li
199.979 24.4767 li
200.68 24.4767 li
201.38 24.4767 li
202.009 24.4767 li
202.702 24.3847 li
203.28 24.3847 li
203.87 24.3847 li
204.572 24.3847 li
205.258 24.3847 li
205.895 24.2917 li
206.626 24.2917 li
207.273 24.1987 li
207.893 24.1987 li
208.488 24.1987 li
209.158 24.1987 li
209.851 24.1987 li
210.449 24.1067 li
211.031 24.1067 li
211.824 24.0147 li
212.429 24.0147 li
212.945 24.0147 li
213.651 23.9227 li
214.425 23.9227 li
214.949 23.9227 li
215.509 23.9227 li
216.143 23.8297 li
216.796 23.8297 li
217.431 23.8297 li
218.016 23.7367 li
218.571 23.7367 li
219.156 23.7367 li
219.642 23.6447 li
220.309 23.6447 li
220.928 23.5517 li
221.588 23.5517 li
222.152 23.4597 li
222.731 23.4597 li
223.343 23.2757 li
224.005 23.1817 li
224.644 23.0897 li
225.11 23.0897 li
225.619 23.0897 li
226.115 23.0897 li
226.7 23.0897 li
227.332 22.9977 li
227.995 22.9047 li
228.671 22.9047 li
229.217 22.8127 li
229.779 22.8127 li
230.363 22.8127 li
230.9 22.8127 li
231.47 22.8127 li
232.053 22.8127 li
232.606 22.8127 li
233.14 22.8127 li
233.762 22.8127 li
234.327 22.8127 li
234.839 22.7207 li
235.432 22.7207 li
235.92 22.7207 li
236.487 22.7207 li
236.951 22.6277 li
237.528 22.6277 li
238.044 22.6277 li
238.521 22.6277 li
239.143 22.6277 li
239.779 22.6277 li
240.345 22.6277 li
240.908 22.5347 li
241.407 22.5347 li
242.061 22.5347 li
242.669 22.5347 li
243.196 22.5347 li
243.773 22.5347 li
244.296 22.5347 li
244.838 22.5347 li
245.431 22.5347 li
246.026 22.5347 li
246.538 22.5347 li
247.078 22.4427 li
247.631 22.3507 li
248.141 22.3507 li
248.666 22.3507 li
249.181 22.3507 li
249.701 22.3507 li
250.202 22.3507 li
250.733 22.3507 li
251.302 22.3507 li
251.898 22.3507 li
252.411 22.3507 li
252.977 22.3507 li
253.481 22.3507 li
253.967 22.3507 li
254.525 22.3507 li
255.074 22.3507 li
255.623 22.3507 li
256.084 22.3507 li
256.595 22.3507 li
257.108 22.3507 li
257.579 22.3507 li
258.129 22.3507 li
258.661 22.3507 li
259.179 22.3507 li
259.722 22.3507 li
260.17 22.3507 li
260.613 22.3507 li
261.1 22.3507 li
261.59 22.3507 li
262.09 22.3507 li
262.575 22.3507 li
263.021 22.3507 li
263.537 22.3507 li
263.968 22.3507 li
264.443 22.3507 li
264.875 22.3507 li
265.355 22.3507 li
265.79 22.3507 li
266.278 22.3507 li
266.751 22.3507 li
267.238 22.3507 li
267.705 22.3507 li
268.204 22.3507 li
268.655 22.3507 li
269.143 22.2577 li
269.57 22.2577 li
269.978 22.2577 li
270.472 22.2577 li
270.927 22.2577 li
271.371 22.2577 li
271.829 22.2577 li
272.304 22.2577 li
272.732 22.2577 li
273.211 22.2577 li
273.643 22.2577 li
274.107 22.2577 li
274.574 22.2577 li
274.989 22.2577 li
275.461 22.2577 li
275.911 22.2577 li
276.418 22.2577 li
276.85 22.2577 li
277.262 22.2577 li
277.729 22.2577 li
278.212 22.2577 li
278.63 22.2577 li
279.136 22.2577 li
279.604 22.2577 li
280.058 22.2577 li
280.485 22.2577 li
280.936 22.2577 li
281.416 22.2577 li
281.843 22.2577 li
282.299 22.2577 li
282.759 22.2577 li
283.175 22.2577 li
283.597 22.2577 li
284.015 22.2577 li
284.413 22.2577 li
284.864 22.2577 li
285.299 22.2577 li
285.738 22.2577 li
286.192 22.2577 li
286.627 22.2577 li
287.043 22.2577 li
287.474 22.2577 li
287.879 22.2577 li
288.332 22.2577 li
288.743 22.2577 li
289.19 22.2577 li
289.618 22.2577 li
290.037 22.2577 li
290.447 22.2577 li
290.854 22.2577 li
291.268 22.2577 li
291.666 22.2577 li
292.07 22.1657 li
292.442 22.1657 li
292.844 22.1657 li
293.242 22.1657 li
293.632 22.0727 li
294.039 22.0727 li
294.431 22.0727 li
294.835 22.0727 li
295.252 22.0727 li
295.668 22.0727 li
296.047 22.0727 li
296.442 22.0727 li
296.827 22.0727 li
297.207 22.0727 li
297.618 22.0727 li
298.012 22.0727 li
298.387 22.0727 li
298.757 22.0727 li
299.147 22.0727 li
299.543 22.0727 li
299.918 22.0727 li
300.286 22.0727 li
300.692 22.0727 li
301.064 22.0727 li
301.433 22.0727 li
301.812 22.0727 li
302.182 22.0727 li
302.548 22.0727 li
302.929 22.0727 li
303.299 22.0727 li
303.674 22.0727 li
304.061 22.0727 li
304.409 22.0727 li
304.774 22.0727 li
305.12 22.0727 li
305.481 22.0727 li
305.833 22.0727 li
306.202 22.0727 li
306.559 21.9807 li
306.954 21.9807 li
307.309 21.9807 li
307.672 21.9807 li
308.04 21.7957 li
308.393 21.7957 li
308.759 21.7957 li
309.096 21.7957 li
309.46 21.7957 li
309.797 21.7957 li
310.137 21.7957 li
310.474 21.7957 li
310.813 21.7957 li
311.164 21.7957 li
311.497 21.7957 li
311.831 21.7957 li
312.16 21.7027 li
312.511 21.7027 li
312.854 21.7027 li
313.203 21.7027 li
313.559 21.7027 li
313.904 21.7027 li
314.221 21.6107 li
314.552 21.6107 li
314.866 21.6107 li
315.196 21.6107 li
315.539 21.6107 li
315.856 21.6107 li
316.188 21.6107 li
316.508 21.6107 li
316.84 21.6107 li
317.165 21.6107 li
317.504 21.6107 li
317.839 21.6107 li
318.159 21.6107 li
318.482 21.6107 li
318.818 21.6107 li
319.151 21.6107 li
319.46 21.6107 li
319.776 21.6107 li
320.096 21.6107 li
320.411 21.6107 li
320.729 21.6107 li
321.038 21.6107 li
321.336 21.6107 li
321.664 21.6107 li
321.97 21.6107 li
322.292 21.6107 li
322.597 21.6107 li
322.891 21.6107 li
323.189 21.6107 li
323.486 21.6107 li
323.786 21.6107 li
324.097 21.6107 li
324.392 21.6107 li
324.704 21.6107 li
325.004 21.6107 li
325.295 21.6107 li
325.597 21.6107 li
325.886 21.6107 li
326.168 21.6107 li
326.461 21.6107 li
326.741 21.6107 li
327.043 21.6107 li
327.323 21.6107 li
327.609 21.6107 li
327.909 21.6107 li
328.188 21.6107 li
328.457 21.6107 li
328.735 21.6107 li
328.999 21.6107 li
329.295 21.6107 li
329.577 21.6107 li
329.866 21.6107 li
330.139 21.6107 li
330.413 21.6107 li
330.689 21.5177 li
330.965 21.5177 li
331.234 21.5177 li
331.504 21.5177 li
331.778 21.5177 li
332.047 21.5177 li
332.322 21.5177 li
332.582 21.5177 li
332.857 21.5177 li
333.115 21.5177 li
333.38 21.5177 li
333.647 21.5177 li
333.908 21.5177 li
334.179 21.5177 li
334.443 21.3337 li
334.715 21.3337 li
334.979 21.3337 li
335.238 21.2407 li
335.492 21.2407 li
335.759 21.2407 li
336.018 21.2407 li
336.264 21.2407 li
336.518 21.2407 li
336.774 21.2407 li
337.022 21.2407 li
337.274 21.2407 li
337.534 21.2407 li
337.782 21.2407 li
338.032 21.2407 li
338.277 21.2407 li
338.524 21.2407 li
338.766 21.2407 li
339.013 21.2407 li
339.247 21.2407 li
339.487 21.2407 li
339.721 21.1477 li
339.956 21.1477 li
340.202 21.1477 li
340.444 21.1477 li
340.681 21.1477 li
340.914 21.1477 li
341.151 21.1477 li
341.386 21.1477 li
341.621 21.1477 li
341.858 21.1477 li
342.091 21.1477 li
342.331 21.1477 li
342.56 21.1477 li
342.787 21.1477 li
343.018 21.0557 li
343.247 21.0557 li
343.473 21.0557 li
343.699 21.0557 li
343.929 21.0557 li
344.156 21.0557 li
344.386 21.0557 li
344.607 21.0557 li
344.824 21.0557 li
345.047 21.0557 li
345.26 21.0557 li
345.473 21.0557 li
345.693 21.0557 li
345.912 21.0557 li
346.126 21.0557 li
346.343 21.0557 li
346.563 21.0557 li
346.779 21.0557 li
346.992 21.0557 li
347.204 21.0557 li
347.435 21.0557 li
347.649 21.0557 li
347.861 21.0557 li
348.077 21.0557 li
348.286 21.0557 li
348.503 21.0557 li
348.71 20.9637 li
348.919 20.9637 li
349.127 20.9637 li
349.336 20.9637 li
349.535 20.9637 li
349.741 20.9637 li
349.95 20.9637 li
350.146 20.9637 li
350.347 20.9637 li
350.545 20.8707 li
350.74 20.8707 li
350.937 20.8707 li
351.133 20.8707 li
351.33 20.8707 li
351.532 20.8707 li
351.731 20.8707 li
351.928 20.8707 li
352.124 20.8707 li
352.318 20.8707 li
352.504 20.8707 li
352.699 20.8707 li
352.89 20.8707 li
353.081 20.8707 li
353.267 20.8707 li
353.459 20.8707 li
353.647 20.8707 li
353.834 20.8707 li
354.012 20.8707 li
354.192 20.8707 li
354.375 20.8707 li
354.554 20.8707 li
354.733 20.8707 li
354.915 20.7787 li
355.099 20.7787 li
355.276 20.7787 li
355.448 20.7787 li
355.625 20.7787 li
355.806 20.7787 li
355.986 20.7787 li
356.169 20.7787 li
356.348 20.7787 li
356.523 20.6867 li
356.696 20.6867 li
356.872 20.6867 li
357.041 20.6867 li
357.212 20.6867 li
357.386 20.6867 li
357.551 20.6867 li
357.723 20.6867 li
357.891 20.6867 li
358.059 20.6867 li
358.225 20.6867 li
358.39 20.6867 li
358.557 20.6867 li
358.72 20.6867 li
358.884 20.6867 li
359.042 20.6867 li
359.21 20.6867 li
359.372 20.5937 li
359.536 20.5937 li
359.696 20.5937 li
359.859 20.5937 li
360.016 20.5937 li
360.174 20.5937 li
360.332 20.5937 li
360.49 20.5937 li
360.643 20.5937 li
360.802 20.5937 li
360.958 20.5937 li
361.114 20.5937 li
361.268 20.5007 li
361.422 20.5007 li
361.577 20.5007 li
361.729 20.5007 li
361.883 20.5007 li
362.036 20.5007 li
362.179 20.5007 li
362.331 20.5007 li
362.476 20.5007 li
362.624 20.5007 li
362.773 20.5007 li
362.918 20.5007 li
363.066 20.5007 li
363.21 20.5007 li
363.357 20.5007 li
363.503 20.5007 li
363.648 20.5007 li
363.792 20.5007 li
363.933 20.5007 li
364.072 20.5007 li
364.21 20.5007 li
364.35 20.5007 li
364.491 20.5007 li
364.627 20.5007 li
364.765 20.5007 li
364.906 20.5007 li
365.041 20.5007 li
365.177 20.5007 li
365.316 20.5007 li
365.449 20.4087 li
365.579 20.4087 li
365.71 20.4087 li
365.841 20.4087 li
365.975 20.4087 li
366.109 20.4087 li
366.238 20.4087 li
366.365 20.4087 li
366.493 20.4087 li
366.622 20.4087 li
366.753 20.4087 li
366.882 20.4087 li
367.009 20.4087 li
367.136 20.4087 li
367.258 20.4087 li
367.39 20.4087 li
367.512 20.4087 li
367.636 20.4087 li
367.758 20.4087 li
367.877 20.4087 li
368.002 20.4087 li
368.122 20.4087 li
368.246 20.4087 li
368.366 20.4087 li
368.49 20.3167 li
368.612 20.3167 li
368.733 20.3167 li
368.854 20.3167 li
368.971 20.3167 li
369.088 20.3167 li
369.208 20.3167 li
369.324 20.3167 li
369.443 20.3167 li
369.556 20.3167 li
369.671 20.3167 li
369.787 20.3167 li
369.903 20.3167 li
370.015 20.3167 li
370.129 20.3167 li
370.245 20.2237 li
370.356 20.2237 li
370.465 20.2237 li
370.574 20.2237 li
370.679 20.2237 li
370.788 20.2237 li
370.891 20.2237 li
370.999 20.2237 li
371.105 20.2237 li
371.213 20.2237 li
371.32 20.2237 li
371.423 20.2237 li
371.53 20.2237 li
371.639 20.2237 li
371.744 20.2237 li
371.848 20.2237 li
371.951 20.2237 li
372.053 20.2237 li
372.153 20.2237 li
372.257 20.2237 li
372.359 20.2237 li
372.461 20.2237 li
372.559 20.2237 li
372.66 20.2237 li
372.759 20.2237 li
372.857 20.2237 li
372.957 20.2237 li
373.055 20.2237 li
373.153 20.2237 li
373.251 20.2237 li
373.344 20.1317 li
373.439 20.1317 li
373.536 20.1317 li
373.63 20.1317 li
373.724 20.1317 li
373.817 20.1317 li
373.913 20.1317 li
374.006 20.1317 li
374.1 20.1317 li
374.193 20.1317 li
374.281 20.1317 li
374.37 20.1317 li
374.458 20.1317 li
374.549 20.1317 li
374.638 20.1317 li
374.728 20.1317 li
374.815 20.0387 li
374.902 20.0387 li
374.985 20.0387 li
375.07 20.0387 li
375.157 20.0387 li
375.242 20.0387 li
375.329 20.0387 li
375.415 20.0387 li
375.499 20.0387 li
375.58 20.0387 li
375.663 20.0387 li
375.748 20.0387 li
375.829 20.0387 li
375.91 20.0387 li
375.993 20.0387 li
376.076 20.0387 li
376.157 20.0387 li
376.235 20.0387 li
376.316 20.0387 li
376.393 20.0387 li
376.473 20.0387 li
376.552 20.0387 li
376.632 20.0387 li
376.71 20.0387 li
376.79 20.0387 li
376.868 20.0387 li
376.945 20.0387 li
377.021 20.0387 li
377.096 20.0387 li
377.172 20.0387 li
377.248 20.0387 li
377.322 20.0387 li
377.393 20.0387 li
377.468 20.0387 li
377.543 20.0387 li
377.617 20.0387 li
377.691 20.0387 li
377.763 20.0387 li
377.836 20.0387 li
377.905 20.0387 li
377.973 20.0387 li
378.044 20.0387 li
378.114 20.0387 li
378.181 20.0387 li
378.251 20.0387 li
378.32 20.0387 li
378.39 20.0387 li
378.458 20.0387 li
378.527 20.0387 li
378.592 20.0387 li
378.659 20.0387 li
378.728 20.0387 li
378.793 20.0387 li
378.859 20.0387 li
378.924 20.0387 li
378.991 20.0387 li
379.055 20.0387 li
379.117 20.0387 li
379.181 20.0387 li
379.243 20.0387 li
379.305 20.0387 li
379.369 20.0387 li
379.431 20.0387 li
379.493 20.0387 li
379.556 19.9457 li
379.618 19.9457 li
379.678 19.9457 li
379.738 19.9457 li
379.798 19.9457 li
379.859 19.9457 li
379.918 19.9457 li
379.978 19.9457 li
380.036 19.9457 li
380.093 19.9457 li
380.15 19.8537 li
380.21 19.8537 li
380.267 19.8537 li
380.324 19.7617 li
380.379 19.6687 li
380.436 19.6687 li
380.491 19.6687 li
380.547 19.6687 li
380.604 19.6687 li
380.66 19.6687 li
380.716 19.6687 li
380.77 19.6687 li
380.824 19.6687 li
380.878 19.6687 li
380.932 19.6687 li
380.984 19.6687 li
381.035 19.5757 li
381.088 19.5757 li
381.14 19.5757 li
381.19 19.5757 li
381.242 19.5757 li
381.293 19.5757 li
381.342 19.5757 li
381.392 19.5757 li
381.442 19.5757 li
381.492 19.5757 li
381.543 19.5757 li
381.592 19.5757 li
381.642 19.5757 li
381.691 19.5757 li
381.738 19.5757 li
381.786 19.5757 li
381.833 19.5757 li
381.881 19.5757 li
381.927 19.5757 li
381.97 19.3917 li
382.018 19.3917 li
382.063 19.3917 li
382.111 19.3917 li
382.157 19.3917 li
382.202 19.3917 li
382.247 19.3917 li
382.291 19.3917 li
382.335 19.3917 li
382.378 19.3917 li
382.422 19.3917 li
382.465 19.3917 li
382.51 19.3917 li
382.551 19.3917 li
382.592 19.3917 li
382.633 19.2987 li
382.674 19.2987 li
382.717 19.2987 li
382.758 19.2987 li
382.8 19.2987 li
382.84 19.2987 li
382.881 19.2987 li
382.921 19.2987 li
382.963 19.2987 li
383.002 19.2987 li
383.042 19.2987 li
383.081 19.2987 li
383.12 19.2987 li
383.158 19.2987 li
383.197 19.2987 li
383.235 19.2987 li
383.272 19.2987 li
383.308 19.2987 li
383.347 19.2987 li
383.384 19.2987 li
383.421 19.2987 li
383.457 19.2987 li
383.493 19.2987 li
383.528 19.2987 li
383.565 19.2987 li
383.601 19.2987 li
383.635 19.2987 li
383.669 19.2987 li
383.704 19.2987 li
383.738 19.2987 li
383.773 19.2987 li
383.807 19.2987 li
383.84 19.2987 li
383.875 19.2987 li
383.907 19.2987 li
383.94 19.2987 li
383.972 19.2987 li
384.005 19.2987 li
384.036 19.2987 li
384.068 19.2987 li
384.101 19.2987 li
384.133 19.2987 li
384.165 19.2987 li
384.197 19.2987 li
384.227 19.2987 li
384.257 19.2987 li
384.289 19.2987 li
384.318 19.2987 li
384.348 19.2987 li
384.379 19.2987 li
384.41 19.2987 li
384.44 19.2067 li
384.469 19.2067 li
384.499 19.2067 li
384.529 19.2067 li
384.558 19.2067 li
384.586 19.2067 li
384.615 19.2067 li
384.642 19.2067 li
384.67 19.2067 li
384.696 19.2067 li
384.724 19.2067 li
384.75 19.2067 li
384.777 19.2067 li
384.804 19.2067 li
384.832 19.1137 li
384.857 19.1137 li
384.884 19.1137 li
384.909 19.1137 li
384.935 19.1137 li
384.961 19.1137 li
384.986 19.0217 li
385.01 19.0217 li
385.036 19.0217 li
385.06 19.0217 li
385.086 19.0217 li
385.11 19.0217 li
385.135 19.0217 li
385.159 19.0217 li
385.182 19.0217 li
385.205 19.0217 li
385.229 19.0217 li
385.251 19.0217 li
385.275 19.0217 li
385.298 19.0217 li
385.322 19.0217 li
385.345 19.0217 li
385.368 19.0217 li
385.39 19.0217 li
385.411 19.0217 li
385.434 19.0217 li
385.456 19.0217 li
385.477 19.0217 li
385.498 19.0217 li
385.52 19.0217 li
385.54 19.0217 li
385.56 19.0217 li
385.581 19.0217 li
385.601 19.0217 li
385.622 19.0217 li
385.642 19.0217 li
385.661 19.0217 li
385.682 19.0217 li
385.702 19.0217 li
385.721 19.0217 li
385.741 19.0217 li
385.76 19.0217 li
385.779 19.0217 li
385.797 19.0217 li
385.817 19.0217 li
385.836 19.0217 li
385.856 19.0217 li
385.874 19.0217 li
385.894 19.0217 li
385.913 19.0217 li
385.931 19.0217 li
385.949 19.0217 li
385.967 19.0217 li
385.984 19.0217 li
386.002 19.0217 li
386.019 19.0217 li
386.038 19.0217 li
386.055 19.0217 li
386.072 19.0217 li
386.088 19.0217 li
386.104 19.0217 li
386.121 19.0217 li
386.137 19.0217 li
386.152 19.0217 li
386.169 19.0217 li
386.185 19.0217 li
386.201 19.0217 li
386.216 19.0217 li
386.232 19.0217 li
386.247 19.0217 li
386.262 19.0217 li
386.276 19.0217 li
386.291 19.0217 li
386.305 19.0217 li
386.32 19.0217 li
386.335 19.0217 li
386.35 19.0217 li
386.364 19.0217 li
386.377 19.0217 li
386.393 19.0217 li
386.406 19.0217 li
386.418 19.0217 li
386.431 19.0217 li
386.445 19.0217 li
386.458 19.0217 li
386.472 19.0217 li
386.486 19.0217 li
386.499 19.0217 li
386.511 19.0217 li
386.524 19.0217 li
386.537 19.0217 li
386.55 19.0217 li
386.562 19.0217 li
386.575 19.0217 li
386.587 19.0217 li
386.599 19.0217 li
386.611 18.9287 li
386.624 18.9287 li
386.636 18.9287 li
386.647 18.9287 li
386.66 18.9287 li
386.67 18.9287 li
386.683 18.9287 li
386.695 18.9287 li
386.707 18.9287 li
386.717 18.9287 li
386.729 18.9287 li
386.74 18.9287 li
386.752 18.9287 li
386.763 18.9287 li
386.774 18.9287 li
386.785 18.9287 li
386.795 18.9287 li
386.806 18.9287 li
386.816 18.9287 li
386.827 18.9287 li
386.837 18.9287 li
386.847 18.9287 li
386.858 18.9287 li
386.868 18.9287 li
386.878 18.9287 li
386.888 18.9287 li
386.898 18.9287 li
386.908 18.9287 li
386.918 18.9287 li
386.927 18.9287 li
386.937 18.9287 li
386.946 18.9287 li
386.955 18.9287 li
386.964 18.9287 li
386.973 18.9287 li
386.982 18.9287 li
386.991 18.9287 li
387 18.9287 li
387.01 18.9287 li
387.018 18.9287 li
387.026 18.9287 li
387.035 18.9287 li
387.043 18.9287 li
387.052 18.9287 li
387.06 18.9287 li
387.068 18.9287 li
387.077 18.9287 li
387.085 18.9287 li
387.092 18.9287 li
387.099 18.9287 li
387.107 18.9287 li
387.115 18.9287 li
387.123 18.9287 li
387.13 18.9287 li
387.136 18.9287 li
387.144 18.9287 li
387.152 18.9287 li
387.158 18.9287 li
387.166 18.9287 li
387.173 18.9287 li
387.18 18.9287 li
387.187 18.9287 li
387.194 18.9287 li
387.201 18.9287 li
387.207 18.9287 li
387.214 18.9287 li
387.22 18.9287 li
387.227 18.9287 li
387.233 18.9287 li
387.239 18.9287 li
387.245 18.9287 li
387.252 18.9287 li
387.257 18.9287 li
387.264 18.9287 li
387.269 18.9287 li
387.275 18.9287 li
387.281 18.9287 li
387.287 18.9287 li
387.293 18.9287 li
387.298 18.9287 li
387.303 18.9287 li
387.309 18.9287 li
387.315 18.9287 li
387.321 18.9287 li
387.327 18.9287 li
387.332 18.9287 li
387.338 18.9287 li
387.343 18.9287 li
387.348 18.9287 li
387.352 18.9287 li
387.359 18.9287 li
387.364 18.9287 li
387.369 18.9287 li
387.374 18.9287 li
387.379 18.9287 li
387.385 18.9287 li
387.389 18.9287 li
387.394 18.9287 li
387.398 18.9287 li
387.404 18.9287 li
387.409 18.9287 li
387.413 18.9287 li
387.418 18.9287 li
387.423 18.9287 li
387.427 18.9287 li
387.432 18.9287 li
387.436 18.9287 li
387.44 18.9287 li
387.444 18.9287 li
387.449 18.9287 li
387.453 18.9287 li
387.457 18.9287 li
387.461 18.9287 li
387.466 18.9287 li
387.47 18.9287 li
387.475 18.9287 li
387.479 18.9287 li
387.482 18.9287 li
387.486 18.9287 li
387.49 18.9287 li
387.494 18.9287 li
387.498 18.9287 li
387.501 18.9287 li
387.506 18.9287 li
387.508 18.9287 li
387.512 18.9287 li
387.516 18.9287 li
387.519 18.9287 li
387.523 18.9287 li
387.526 18.9287 li
387.529 18.9287 li
387.533 18.9287 li
387.536 18.9287 li
387.539 18.9287 li
387.543 18.9287 li
387.546 18.9287 li
387.55 18.9287 li
387.553 18.9287 li
387.556 18.9287 li
387.559 18.9287 li
387.563 18.9287 li
387.565 18.9287 li
387.568 18.9287 li
387.571 18.9287 li
387.574 18.9287 li
387.577 18.9287 li
387.58 18.9287 li
387.583 18.9287 li
387.586 18.9287 li
387.589 18.9287 li
387.591 18.9287 li
387.594 18.9287 li
387.597 18.9287 li
387.6 18.9287 li
387.602 18.9287 li
387.605 18.9287 li
387.608 18.9287 li
387.611 18.9287 li
387.613 18.9287 li
387.616 18.9287 li
387.618 18.9287 li
387.621 18.9287 li
387.623 18.9287 li
387.626 18.9287 li
387.628 18.9287 li
387.63 18.9287 li
387.633 18.9287 li
387.635 18.9287 li
387.637 18.9287 li
387.639 18.9287 li
387.641 18.9287 li
387.643 18.9287 li
387.646 18.9287 li
387.648 18.9287 li
387.65 18.9287 li
387.652 18.9287 li
387.655 18.9287 li
387.657 18.9287 li
387.659 18.9287 li
387.661 18.9287 li
387.662 18.9287 li
387.665 18.9287 li
387.667 18.9287 li
387.669 18.9287 li
387.671 18.9287 li
387.673 18.9287 li
387.674 18.9287 li
387.676 18.9287 li
387.677 18.9287 li
387.679 18.9287 li
387.681 18.9287 li
387.683 18.9287 li
387.684 18.9287 li
387.686 18.9287 li
387.688 18.9287 li
387.689 18.9287 li
387.692 18.9287 li
387.693 18.9287 li
387.695 18.9287 li
387.696 18.9287 li
387.698 18.9287 li
387.7 18.9287 li
387.701 18.9287 li
387.703 18.9287 li
387.704 18.9287 li
387.706 18.9287 li
387.707 18.9287 li
387.709 18.9287 li
387.71 18.9287 li
387.712 18.9287 li
387.713 18.9287 li
387.715 18.9287 li
387.717 18.9287 li
387.718 18.9287 li
387.719 18.9287 li
387.722 18.9287 li
387.724 18.9287 li
387.725 18.9287 li
387.727 18.9287 li
387.728 18.9287 li
387.729 18.9287 li
387.731 18.9287 li
387.732 18.9287 li
387.733 18.9287 li
387.734 18.9287 li
387.735 18.9287 li
387.736 18.9287 li
387.738 18.9287 li
387.739 18.9287 li
387.74 18.9287 li
387.741 18.9287 li
387.742 18.9287 li
387.743 18.9287 li
387.744 18.9287 li
387.745 18.9287 li
387.746 18.9287 li
387.748 18.9287 li
387.749 18.9287 li
387.751 18.9287 li
387.752 18.9287 li
387.753 18.9287 li
387.754 18.9287 li
387.755 18.9287 li
387.756 18.9287 li
387.758 18.9287 li
387.759 18.9287 li
387.76 18.9287 li
387.761 18.9287 li
387.762 18.9287 li
387.763 18.9287 li
387.764 18.9287 li
387.765 18.9287 li
387.766 18.9287 li
387.767 18.9287 li
387.768 18.9287 li
387.769 18.9287 li
387.77 18.9287 li
387.771 18.9287 li
387.772 18.9287 li
387.773 18.9287 li
387.774 18.9287 li
387.775 18.9287 li
387.776 18.9287 li
387.777 18.9287 li
387.778 18.9287 li
387.779 18.9287 li
387.78 18.9287 li
387.781 18.9287 li
387.782 18.9287 li
387.783 18.9287 li
387.784 18.9287 li
387.785 18.9287 li
387.785 18.8367 li
387.786 18.8367 li
387.787 18.8367 li
387.788 18.8367 li
387.789 18.8367 li
387.79 18.8367 li
387.791 18.8367 li
387.792 18.8367 li
387.793 18.8367 li
387.794 18.8367 li
387.795 18.8367 li
387.796 18.8367 li
387.797 18.8367 li
387.798 18.8367 li
387.799 18.8367 li
387.8 18.8367 li
387.801 18.8367 li
387.802 18.8367 li
387.803 18.8367 li
387.804 18.8367 li
387.805 18.8367 li
387.806 18.8367 li
387.807 18.8367 li
387.808 18.8367 li
387.809 18.8367 li
387.81 18.8367 li
387.811 18.8367 li
387.812 18.8367 li
387.813 18.8367 li
387.814 18.8367 li
387.815 18.8367 li
387.816 18.8367 li
387.817 18.8367 li
387.818 18.8367 li
387.819 18.8367 li
387.82 18.8367 li
387.821 18.8367 li
387.822 18.8367 li
0 .990631 1 .000396735 cmyk
@
48.2173 81.6157 mo
49.5982 81.6157 50.7173 82.7347 50.7173 84.1157 cv
50.7173 85.4957 49.5982 86.6147 48.2173 86.6147 cv
46.8365 86.6147 45.7177 85.4957 45.7177 84.1157 cv
45.7177 82.7347 46.8365 81.6157 48.2173 81.6157 cv
cp
48.2173 80.6147 mo
46.2845 80.6147 44.7173 82.1827 44.7173 84.1157 cv
44.7173 86.0477 46.2845 87.6157 48.2173 87.6157 cv
50.1501 87.6157 51.7177 86.0477 51.7177 84.1157 cv
51.7177 82.1827 50.1501 80.6147 48.2173 80.6147 cv
f
52.3357 72.9237 mo
53.7165 72.9237 54.8353 74.0427 54.8353 75.4237 cv
54.8353 76.8047 53.7165 77.9237 52.3357 77.9237 cv
50.9548 77.9237 49.8357 76.8047 49.8357 75.4237 cv
49.8357 74.0427 50.9548 72.9237 52.3357 72.9237 cv
cp
52.3357 71.9237 mo
50.4029 71.9237 48.8353 73.4907 48.8353 75.4237 cv
48.8353 77.3567 50.4029 78.9237 52.3357 78.9237 cv
54.2685 78.9237 55.8357 77.3567 55.8357 75.4237 cv
55.8357 73.4907 54.2685 71.9237 52.3357 71.9237 cv
f
59.1658 65.6197 mo
60.5466 65.6197 61.6658 66.7387 61.6658 68.1187 cv
61.6658 69.4997 60.5466 70.6187 59.1658 70.6187 cv
57.7853 70.6187 56.6661 69.4997 56.6661 68.1187 cv
56.6661 66.7387 57.7853 65.6197 59.1658 65.6197 cv
cp
59.1658 64.6187 mo
57.2329 64.6187 55.6658 66.1867 55.6658 68.1187 cv
55.6658 70.0517 57.2329 71.6197 59.1658 71.6197 cv
61.0986 71.6197 62.6661 70.0517 62.6661 68.1187 cv
62.6661 66.1867 61.0986 64.6187 59.1658 64.6187 cv
f
61.131 59.3317 mo
62.5118 59.3317 63.6306 60.4507 63.6306 61.8317 cv
63.6306 63.2127 62.5118 64.3317 61.131 64.3317 cv
59.7501 64.3317 58.6314 63.2127 58.6314 61.8317 cv
58.6314 60.4507 59.7501 59.3317 61.131 59.3317 cv
cp
61.131 58.3317 mo
59.1982 58.3317 57.6306 59.8987 57.6306 61.8317 cv
57.6306 63.7647 59.1982 65.3317 61.131 65.3317 cv
63.0638 65.3317 64.6314 63.7647 64.6314 61.8317 cv
64.6314 59.8987 63.0638 58.3317 61.131 58.3317 cv
f
61.131 54.7087 mo
62.5118 54.7087 63.6306 55.8277 63.6306 57.2087 cv
63.6306 58.5897 62.5118 59.7087 61.131 59.7087 cv
59.7501 59.7087 58.6314 58.5897 58.6314 57.2087 cv
58.6314 55.8277 59.7501 54.7087 61.131 54.7087 cv
cp
61.131 53.7087 mo
59.1982 53.7087 57.6306 55.2757 57.6306 57.2087 cv
57.6306 59.1417 59.1982 60.7087 61.131 60.7087 cv
63.0638 60.7087 64.6314 59.1417 64.6314 57.2087 cv
64.6314 55.2757 63.0638 53.7087 61.131 53.7087 cv
f
64.7072 50.3637 mo
66.0876 50.3637 67.2068 51.4817 67.2068 52.8627 cv
67.2068 54.2437 66.0876 55.3627 64.7072 55.3627 cv
63.3263 55.3627 62.2072 54.2437 62.2072 52.8627 cv
62.2072 51.4817 63.3263 50.3637 64.7072 50.3637 cv
cp
64.7072 49.3627 mo
62.7743 49.3627 61.2068 50.9297 61.2068 52.8627 cv
61.2068 54.7957 62.7743 56.3637 64.7072 56.3637 cv
66.6396 56.3637 68.2072 54.7957 68.2072 52.8627 cv
68.2072 50.9297 66.6396 49.3627 64.7072 49.3627 cv
f
67.8958 46.4797 mo
69.2763 46.4797 70.3954 47.5987 70.3954 48.9797 cv
70.3954 50.3597 69.2763 51.4797 67.8958 51.4797 cv
66.515 51.4797 65.3958 50.3597 65.3958 48.9797 cv
65.3958 47.5987 66.515 46.4797 67.8958 46.4797 cv
cp
67.8958 45.4797 mo
65.963 45.4797 64.3954 47.0467 64.3954 48.9797 cv
64.3954 50.9117 65.963 52.4797 67.8958 52.4797 cv
69.8283 52.4797 71.3958 50.9117 71.3958 48.9797 cv
71.3958 47.0467 69.8283 45.4797 67.8958 45.4797 cv
f
73.3935 43.1507 mo
74.7743 43.1507 75.8935 44.2697 75.8935 45.6507 cv
75.8935 47.0317 74.7743 48.1507 73.3935 48.1507 cv
72.0126 48.1507 70.8939 47.0317 70.8939 45.6507 cv
70.8939 44.2697 72.0126 43.1507 73.3935 43.1507 cv
cp
73.3935 42.1507 mo
71.4607 42.1507 69.8935 43.7177 69.8935 45.6507 cv
69.8935 47.5837 71.4607 49.1507 73.3935 49.1507 cv
75.3263 49.1507 76.8939 47.5837 76.8939 45.6507 cv
76.8939 43.7177 75.3263 42.1507 73.3935 42.1507 cv
f
78.556 40.2847 mo
79.9368 40.2847 81.056 41.4037 81.056 42.7847 cv
81.056 44.1657 79.9368 45.2847 78.556 45.2847 cv
77.1755 45.2847 76.0564 44.1657 76.0564 42.7847 cv
76.0564 41.4037 77.1755 40.2847 78.556 40.2847 cv
cp
78.556 39.2847 mo
76.6236 39.2847 75.056 40.8517 75.056 42.7847 cv
75.056 44.7167 76.6236 46.2847 78.556 46.2847 cv
80.4888 46.2847 82.0564 44.7167 82.0564 42.7847 cv
82.0564 40.8517 80.4888 39.2847 78.556 39.2847 cv
f
81.5552 37.6037 mo
82.9361 37.6037 84.0552 38.7227 84.0552 40.1027 cv
84.0552 41.4837 82.9361 42.6027 81.5552 42.6027 cv
80.1743 42.6027 79.0556 41.4837 79.0556 40.1027 cv
79.0556 38.7227 80.1743 37.6037 81.5552 37.6037 cv
cp
81.5552 36.6027 mo
79.6224 36.6027 78.0552 38.1707 78.0552 40.1027 cv
78.0552 42.0357 79.6224 43.6037 81.5552 43.6037 cv
83.488 43.6037 85.0556 42.0357 85.0556 40.1027 cv
85.0556 38.1707 83.488 36.6027 81.5552 36.6027 cv
f
83.3974 35.0147 mo
84.7783 35.0147 85.8974 36.1337 85.8974 37.5137 cv
85.8974 38.8947 84.7783 40.0137 83.3974 40.0137 cv
82.0165 40.0137 80.8978 38.8947 80.8978 37.5137 cv
80.8978 36.1337 82.0165 35.0147 83.3974 35.0147 cv
cp
83.3974 34.0137 mo
81.4646 34.0137 79.8974 35.5817 79.8974 37.5137 cv
79.8974 39.4467 81.4646 41.0147 83.3974 41.0147 cv
85.3302 41.0147 86.8978 39.4467 86.8978 37.5137 cv
86.8978 35.5817 85.3302 34.0137 83.3974 34.0137 cv
f
87.94 33.9977 mo
89.32 33.9977 90.44 35.1167 90.44 36.4967 cv
90.44 37.8777 89.32 38.9967 87.94 38.9967 cv
86.5591 38.9967 85.44 37.8777 85.44 36.4967 cv
85.44 35.1167 86.5591 33.9977 87.94 33.9977 cv
cp
87.94 32.9967 mo
86.0068 32.9967 84.4396 34.5647 84.4396 36.4967 cv
84.4396 38.4297 86.0068 39.9977 87.94 39.9977 cv
89.872 39.9977 91.44 38.4297 91.44 36.4967 cv
91.44 34.5647 89.872 32.9967 87.94 32.9967 cv
f
91.538 31.6857 mo
92.918 31.6857 94.037 32.8047 94.037 34.1857 cv
94.037 35.5667 92.918 36.6847 91.538 36.6847 cv
90.157 36.6847 89.038 35.5667 89.038 34.1857 cv
89.038 32.8047 90.157 31.6857 91.538 31.6857 cv
cp
91.538 30.6847 mo
89.605 30.6847 88.037 32.2527 88.037 34.1857 cv
88.037 36.1187 89.605 37.6857 91.538 37.6857 cv
93.47 37.6857 95.038 36.1187 95.038 34.1857 cv
95.038 32.2527 93.47 30.6847 91.538 30.6847 cv
f
95.046 30.5757 mo
96.427 30.5757 97.545 31.6957 97.545 33.0757 cv
97.545 34.4567 96.427 35.5757 95.046 35.5757 cv
93.665 35.5757 92.546 34.4567 92.546 33.0757 cv
92.546 31.6957 93.665 30.5757 95.046 30.5757 cv
cp
95.046 29.5757 mo
93.113 29.5757 91.545 31.1437 91.545 33.0757 cv
91.545 35.0087 93.113 36.5757 95.046 36.5757 cv
96.979 36.5757 98.546 35.0087 98.546 33.0757 cv
98.546 31.1437 96.979 29.5757 95.046 29.5757 cv
f
100.267 29.1897 mo
101.648 29.1897 102.767 30.3077 102.767 31.6887 cv
102.767 33.0697 101.648 34.1887 100.267 34.1887 cv
98.886 34.1887 97.768 33.0697 97.768 31.6887 cv
97.768 30.3077 98.886 29.1897 100.267 29.1897 cv
cp
100.267 28.1887 mo
98.335 28.1887 96.767 29.7567 96.767 31.6887 cv
96.767 33.6217 98.335 35.1897 100.267 35.1897 cv
102.2 35.1897 103.768 33.6217 103.768 31.6887 cv
103.768 29.7567 102.2 28.1887 100.267 28.1887 cv
f
103.822 28.1727 mo
105.202 28.1727 106.322 29.2907 106.322 30.6717 cv
106.322 32.0527 105.202 33.1717 103.822 33.1717 cv
102.441 33.1717 101.322 32.0527 101.322 30.6717 cv
101.322 29.2907 102.441 28.1727 103.822 28.1727 cv
cp
103.822 27.1717 mo
101.889 27.1717 100.322 28.7387 100.322 30.6717 cv
100.322 32.6047 101.889 34.1727 103.822 34.1727 cv
105.754 34.1727 107.322 32.6047 107.322 30.6717 cv
107.322 28.7387 105.754 27.1717 103.822 27.1717 cv
f
110.575 27.1547 mo
111.956 27.1547 113.075 28.2737 113.075 29.6547 cv
113.075 31.0357 111.956 32.1547 110.575 32.1547 cv
109.194 32.1547 108.075 31.0357 108.075 29.6547 cv
108.075 28.2737 109.194 27.1547 110.575 27.1547 cv
cp
110.575 26.1547 mo
108.642 26.1547 107.075 27.7227 107.075 29.6547 cv
107.075 31.5877 108.642 33.1547 110.575 33.1547 cv
112.508 33.1547 114.075 31.5877 114.075 29.6547 cv
114.075 27.7227 112.508 26.1547 110.575 26.1547 cv
f
117.362 26.6007 mo
118.743 26.6007 119.862 27.7187 119.862 29.0997 cv
119.862 30.4807 118.743 31.5997 117.362 31.5997 cv
115.981 31.5997 114.863 30.4807 114.863 29.0997 cv
114.863 27.7187 115.981 26.6007 117.362 26.6007 cv
cp
117.362 25.5997 mo
115.429 25.5997 113.862 27.1667 113.862 29.0997 cv
113.862 31.0327 115.429 32.6007 117.362 32.6007 cv
119.295 32.6007 120.863 31.0327 120.863 29.0997 cv
120.863 27.1667 119.295 25.5997 117.362 25.5997 cv
f
121.438 25.8607 mo
122.818 25.8607 123.937 26.9797 123.937 28.3597 cv
123.937 29.7407 122.818 30.8597 121.438 30.8597 cv
120.057 30.8597 118.938 29.7407 118.938 28.3597 cv
118.938 26.9797 120.057 25.8607 121.438 25.8607 cv
cp
121.438 24.8597 mo
119.505 24.8597 117.937 26.4277 117.937 28.3597 cv
117.937 30.2927 119.505 31.8607 121.438 31.8607 cv
123.37 31.8607 124.938 30.2927 124.938 28.3597 cv
124.938 26.4277 123.37 24.8597 121.438 24.8597 cv
f
126.604 25.1207 mo
127.985 25.1207 129.104 26.2397 129.104 27.6207 cv
129.104 29.0017 127.985 30.1207 126.604 30.1207 cv
125.224 30.1207 124.105 29.0017 124.105 27.6207 cv
124.105 26.2397 125.224 25.1207 126.604 25.1207 cv
cp
126.604 24.1207 mo
124.672 24.1207 123.104 25.6877 123.104 27.6207 cv
123.104 29.5537 124.672 31.1207 126.604 31.1207 cv
128.537 31.1207 130.105 29.5537 130.105 27.6207 cv
130.105 25.6877 128.537 24.1207 126.604 24.1207 cv
f
132.301 24.7507 mo
133.682 24.7507 134.801 25.8697 134.801 27.2507 cv
134.801 28.6317 133.682 29.7507 132.301 29.7507 cv
130.92 29.7507 129.802 28.6317 129.802 27.2507 cv
129.802 25.8697 130.92 24.7507 132.301 24.7507 cv
cp
132.301 23.7507 mo
130.368 23.7507 128.801 25.3177 128.801 27.2507 cv
128.801 29.1837 130.368 30.7507 132.301 30.7507 cv
134.234 30.7507 135.802 29.1837 135.802 27.2507 cv
135.802 25.3177 134.234 23.7507 132.301 23.7507 cv
f
137.716 24.3817 mo
139.097 24.3817 140.216 25.5007 140.216 26.8807 cv
140.216 28.2617 139.097 29.3807 137.716 29.3807 cv
136.335 29.3807 135.216 28.2617 135.216 26.8807 cv
135.216 25.5007 136.335 24.3817 137.716 24.3817 cv
cp
137.716 23.3807 mo
135.783 23.3807 134.216 24.9477 134.216 26.8807 cv
134.216 28.8137 135.783 30.3817 137.716 30.3817 cv
139.649 30.3817 141.216 28.8137 141.216 26.8807 cv
141.216 24.9477 139.649 23.3807 137.716 23.3807 cv
f
145.333 23.8267 mo
146.713 23.8267 147.832 24.9457 147.832 26.3257 cv
147.832 27.7067 146.713 28.8257 145.333 28.8257 cv
143.952 28.8257 142.833 27.7067 142.833 26.3257 cv
142.833 24.9457 143.952 23.8267 145.333 23.8267 cv
cp
145.333 22.8257 mo
143.4 22.8257 141.832 24.3937 141.832 26.3257 cv
141.832 28.2587 143.4 29.8267 145.333 29.8267 cv
147.265 29.8267 148.833 28.2587 148.833 26.3257 cv
148.833 24.3937 147.265 22.8257 145.333 22.8257 cv
f
152.341 23.5487 mo
153.722 23.5487 154.841 24.6677 154.841 26.0487 cv
154.841 27.4297 153.722 28.5487 152.341 28.5487 cv
150.96 28.5487 149.841 27.4297 149.841 26.0487 cv
149.841 24.6677 150.96 23.5487 152.341 23.5487 cv
cp
152.341 22.5487 mo
150.408 22.5487 148.841 24.1157 148.841 26.0487 cv
148.841 27.9817 150.408 29.5487 152.341 29.5487 cv
154.274 29.5487 155.841 27.9817 155.841 26.0487 cv
155.841 24.1157 154.274 22.5487 152.341 22.5487 cv
f
160.022 23.3637 mo
161.403 23.3637 162.522 24.4827 162.522 25.8637 cv
162.522 27.2447 161.403 28.3637 160.022 28.3637 cv
158.641 28.3637 157.522 27.2447 157.522 25.8637 cv
157.522 24.4827 158.641 23.3637 160.022 23.3637 cv
cp
160.022 22.3637 mo
158.089 22.3637 156.522 23.9317 156.522 25.8637 cv
156.522 27.7967 158.089 29.3637 160.022 29.3637 cv
161.955 29.3637 163.522 27.7967 163.522 25.8637 cv
163.522 23.9317 161.955 22.3637 160.022 22.3637 cv
f
166.854 23.1797 mo
168.235 23.1797 169.354 24.2977 169.354 25.6787 cv
169.354 27.0597 168.235 28.1787 166.854 28.1787 cv
165.474 28.1787 164.355 27.0597 164.355 25.6787 cv
164.355 24.2977 165.474 23.1797 166.854 23.1797 cv
cp
166.854 22.1787 mo
164.922 22.1787 163.354 23.7457 163.354 25.6787 cv
163.354 27.6117 164.922 29.1797 166.854 29.1797 cv
168.787 29.1797 170.355 27.6117 170.355 25.6787 cv
170.355 23.7457 168.787 22.1787 166.854 22.1787 cv
f
173.801 22.9937 mo
175.181 22.9937 176.301 24.1137 176.301 25.4937 cv
176.301 26.8747 175.181 27.9937 173.801 27.9937 cv
172.42 27.9937 171.301 26.8747 171.301 25.4937 cv
171.301 24.1137 172.42 22.9937 173.801 22.9937 cv
cp
173.801 21.9937 mo
171.868 21.9937 170.301 23.5617 170.301 25.4937 cv
170.301 27.4267 171.868 28.9937 173.801 28.9937 cv
175.733 28.9937 177.301 27.4267 177.301 25.4937 cv
177.301 23.5617 175.733 21.9937 173.801 21.9937 cv
f
180.347 22.7167 mo
181.727 22.7167 182.847 23.8357 182.847 25.2167 cv
182.847 26.5977 181.727 27.7167 180.347 27.7167 cv
178.966 27.7167 177.847 26.5977 177.847 25.2167 cv
177.847 23.8357 178.966 22.7167 180.347 22.7167 cv
cp
180.347 21.7167 mo
178.414 21.7167 176.847 23.2837 176.847 25.2167 cv
176.847 27.1487 178.414 28.7167 180.347 28.7167 cv
182.279 28.7167 183.847 27.1487 183.847 25.2167 cv
183.847 23.2837 182.279 21.7167 180.347 21.7167 cv
f
187.147 22.5317 mo
188.528 22.5317 189.647 23.6507 189.647 25.0317 cv
189.647 26.4127 188.528 27.5317 187.147 27.5317 cv
185.767 27.5317 184.647 26.4127 184.647 25.0317 cv
184.647 23.6507 185.767 22.5317 187.147 22.5317 cv
cp
187.147 21.5317 mo
185.215 21.5317 183.647 23.0987 183.647 25.0317 cv
183.647 26.9647 185.215 28.5317 187.147 28.5317 cv
189.08 28.5317 190.647 26.9647 190.647 25.0317 cv
190.647 23.0987 189.08 21.5317 187.147 21.5317 cv
f
193.828 22.0697 mo
195.208 22.0697 196.327 23.1887 196.327 24.5697 cv
196.327 25.9497 195.208 27.0687 193.828 27.0687 cv
192.447 27.0687 191.328 25.9497 191.328 24.5697 cv
191.328 23.1887 192.447 22.0697 193.828 22.0697 cv
cp
193.828 21.0687 mo
191.895 21.0687 190.327 22.6367 190.327 24.5697 cv
190.327 26.5027 191.895 28.0697 193.828 28.0697 cv
195.761 28.0697 197.328 26.5027 197.328 24.5697 cv
197.328 22.6367 195.761 21.0687 193.828 21.0687 cv
f
200.679 21.9777 mo
202.06 21.9777 203.179 23.0957 203.179 24.4767 cv
203.179 25.8577 202.06 26.9767 200.679 26.9767 cv
199.299 26.9767 198.18 25.8577 198.18 24.4767 cv
198.18 23.0957 199.299 21.9777 200.679 21.9777 cv
cp
200.679 20.9767 mo
198.747 20.9767 197.179 22.5437 197.179 24.4767 cv
197.179 26.4097 198.747 27.9777 200.679 27.9777 cv
202.612 27.9777 204.18 26.4097 204.18 24.4767 cv
204.18 22.5437 202.612 20.9767 200.679 20.9767 cv
f
207.273 21.6997 mo
208.654 21.6997 209.773 22.8187 209.773 24.1997 cv
209.773 25.5807 208.654 26.6987 207.273 26.6987 cv
205.892 26.6987 204.773 25.5807 204.773 24.1997 cv
204.773 22.8187 205.892 21.6997 207.273 21.6997 cv
cp
207.273 20.6987 mo
205.34 20.6987 203.773 22.2667 203.773 24.1997 cv
203.773 26.1327 205.34 27.6997 207.273 27.6997 cv
209.206 27.6997 210.773 26.1327 210.773 24.1997 cv
210.773 22.2667 209.206 20.6987 207.273 20.6987 cv
f
213.651 21.4227 mo
215.032 21.4227 216.151 22.5417 216.151 23.9227 cv
216.151 25.3027 215.032 26.4217 213.651 26.4217 cv
212.27 26.4217 211.152 25.3027 211.152 23.9227 cv
211.152 22.5417 212.27 21.4227 213.651 21.4227 cv
cp
213.651 20.4217 mo
211.718 20.4217 210.151 21.9897 210.151 23.9227 cv
210.151 25.8547 211.718 27.4227 213.651 27.4227 cv
215.584 27.4227 217.152 25.8547 217.152 23.9227 cv
217.152 21.9897 215.584 20.4217 213.651 20.4217 cv
f
219.642 21.1447 mo
221.022 21.1447 222.142 22.2637 222.142 23.6447 cv
222.142 25.0257 221.022 26.1447 219.642 26.1447 cv
218.261 26.1447 217.142 25.0257 217.142 23.6447 cv
217.142 22.2637 218.261 21.1447 219.642 21.1447 cv
cp
219.642 20.1447 mo
217.709 20.1447 216.142 21.7117 216.142 23.6447 cv
216.142 25.5777 217.709 27.1447 219.642 27.1447 cv
221.575 27.1447 223.142 25.5777 223.142 23.6447 cv
223.142 21.7117 221.575 20.1447 219.642 20.1447 cv
f
225.618 20.5907 mo
226.999 20.5907 228.118 21.7097 228.118 23.0897 cv
228.118 24.4707 226.999 25.5897 225.618 25.5897 cv
224.238 25.5897 223.119 24.4707 223.119 23.0897 cv
223.119 21.7097 224.238 20.5907 225.618 20.5907 cv
cp
225.618 19.5897 mo
223.686 19.5897 222.118 21.1577 222.118 23.0897 cv
222.118 25.0227 223.686 26.5907 225.618 26.5907 cv
227.551 26.5907 229.119 25.0227 229.119 23.0897 cv
229.119 21.1577 227.551 19.5897 225.618 19.5897 cv
f
231.469 20.3127 mo
232.85 20.3127 233.969 21.4317 233.969 22.8127 cv
233.969 24.1937 232.85 25.3127 231.469 25.3127 cv
230.088 25.3127 228.969 24.1937 228.969 22.8127 cv
228.969 21.4317 230.088 20.3127 231.469 20.3127 cv
cp
231.469 19.3127 mo
229.536 19.3127 227.969 20.8797 227.969 22.8127 cv
227.969 24.7457 229.536 26.3127 231.469 26.3127 cv
233.402 26.3127 234.969 24.7457 234.969 22.8127 cv
234.969 20.8797 233.402 19.3127 231.469 19.3127 cv
f
236.951 20.1277 mo
238.332 20.1277 239.451 21.2467 239.451 22.6277 cv
239.451 24.0087 238.332 25.1277 236.951 25.1277 cv
235.57 25.1277 234.452 24.0087 234.452 22.6277 cv
234.452 21.2467 235.57 20.1277 236.951 20.1277 cv
cp
236.951 19.1277 mo
235.018 19.1277 233.451 20.6947 233.451 22.6277 cv
233.451 24.5607 235.018 26.1277 236.951 26.1277 cv
238.884 26.1277 240.452 24.5607 240.452 22.6277 cv
240.452 20.6947 238.884 19.1277 236.951 19.1277 cv
f
242.669 20.0357 mo
244.05 20.0357 245.169 21.1547 245.169 22.5347 cv
245.169 23.9157 244.05 25.0347 242.669 25.0347 cv
241.288 25.0347 240.169 23.9157 240.169 22.5347 cv
240.169 21.1547 241.288 20.0357 242.669 20.0357 cv
cp
242.669 19.0347 mo
240.736 19.0347 239.169 20.6027 239.169 22.5347 cv
239.169 24.4677 240.736 26.0357 242.669 26.0357 cv
244.602 26.0357 246.169 24.4677 246.169 22.5347 cv
246.169 20.6027 244.602 19.0347 242.669 19.0347 cv
f
248.142 19.8507 mo
249.522 19.8507 250.641 20.9697 250.641 22.3507 cv
250.641 23.7307 249.522 24.8497 248.142 24.8497 cv
246.761 24.8497 245.642 23.7307 245.642 22.3507 cv
245.642 20.9697 246.761 19.8507 248.142 19.8507 cv
cp
248.142 18.8497 mo
246.209 18.8497 244.641 20.4177 244.641 22.3507 cv
244.641 24.2827 246.209 25.8507 248.142 25.8507 cv
250.074 25.8507 251.642 24.2827 251.642 22.3507 cv
251.642 20.4177 250.074 18.8497 248.142 18.8497 cv
f
253.481 19.8507 mo
254.861 19.8507 255.981 20.9697 255.981 22.3507 cv
255.981 23.7307 254.861 24.8497 253.481 24.8497 cv
252.1 24.8497 250.981 23.7307 250.981 22.3507 cv
250.981 20.9697 252.1 19.8507 253.481 19.8507 cv
cp
253.481 18.8497 mo
251.548 18.8497 249.981 20.4177 249.981 22.3507 cv
249.981 24.2827 251.548 25.8507 253.481 25.8507 cv
255.414 25.8507 256.981 24.2827 256.981 22.3507 cv
256.981 20.4177 255.414 18.8497 253.481 18.8497 cv
f
258.661 19.8507 mo
260.042 19.8507 261.161 20.9697 261.161 22.3507 cv
261.161 23.7307 260.042 24.8497 258.661 24.8497 cv
257.28 24.8497 256.161 23.7307 256.161 22.3507 cv
256.161 20.9697 257.28 19.8507 258.661 19.8507 cv
cp
258.661 18.8497 mo
256.728 18.8497 255.161 20.4177 255.161 22.3507 cv
255.161 24.2827 256.728 25.8507 258.661 25.8507 cv
260.594 25.8507 262.161 24.2827 262.161 22.3507 cv
262.161 20.4177 260.594 18.8497 258.661 18.8497 cv
f
263.537 19.8507 mo
264.918 19.8507 266.037 20.9697 266.037 22.3507 cv
266.037 23.7307 264.918 24.8497 263.537 24.8497 cv
262.156 24.8497 261.038 23.7307 261.038 22.3507 cv
261.038 20.9697 262.156 19.8507 263.537 19.8507 cv
cp
263.537 18.8497 mo
261.604 18.8497 260.037 20.4177 260.037 22.3507 cv
260.037 24.2827 261.604 25.8507 263.537 25.8507 cv
265.47 25.8507 267.038 24.2827 267.038 22.3507 cv
267.038 20.4177 265.47 18.8497 263.537 18.8497 cv
f
268.204 19.8507 mo
269.585 19.8507 270.703 20.9697 270.703 22.3507 cv
270.703 23.7307 269.585 24.8497 268.204 24.8497 cv
266.823 24.8497 265.704 23.7307 265.704 22.3507 cv
265.704 20.9697 266.823 19.8507 268.204 19.8507 cv
cp
268.204 18.8497 mo
266.271 18.8497 264.703 20.4177 264.703 22.3507 cv
264.703 24.2827 266.271 25.8507 268.204 25.8507 cv
270.136 25.8507 271.704 24.2827 271.704 22.3507 cv
271.704 20.4177 270.136 18.8497 268.204 18.8497 cv
f
272.732 19.7577 mo
274.113 19.7577 275.232 20.8767 275.232 22.2577 cv
275.232 23.6387 274.113 24.7577 272.732 24.7577 cv
271.351 24.7577 270.232 23.6387 270.232 22.2577 cv
270.232 20.8767 271.351 19.7577 272.732 19.7577 cv
cp
272.732 18.7577 mo
270.799 18.7577 269.232 20.3247 269.232 22.2577 cv
269.232 24.1907 270.799 25.7577 272.732 25.7577 cv
274.665 25.7577 276.232 24.1907 276.232 22.2577 cv
276.232 20.3247 274.665 18.7577 272.732 18.7577 cv
f
277.262 19.7577 mo
278.643 19.7577 279.762 20.8767 279.762 22.2577 cv
279.762 23.6387 278.643 24.7577 277.262 24.7577 cv
275.881 24.7577 274.763 23.6387 274.763 22.2577 cv
274.763 20.8767 275.881 19.7577 277.262 19.7577 cv
cp
277.262 18.7577 mo
275.329 18.7577 273.762 20.3247 273.762 22.2577 cv
273.762 24.1907 275.329 25.7577 277.262 25.7577 cv
279.195 25.7577 280.763 24.1907 280.763 22.2577 cv
280.763 20.3247 279.195 18.7577 277.262 18.7577 cv
f
281.843 19.7577 mo
283.224 19.7577 284.343 20.8767 284.343 22.2577 cv
284.343 23.6387 283.224 24.7577 281.843 24.7577 cv
280.463 24.7577 279.344 23.6387 279.344 22.2577 cv
279.344 20.8767 280.463 19.7577 281.843 19.7577 cv
cp
281.843 18.7577 mo
279.911 18.7577 278.343 20.3247 278.343 22.2577 cv
278.343 24.1907 279.911 25.7577 281.843 25.7577 cv
283.776 25.7577 285.344 24.1907 285.344 22.2577 cv
285.344 20.3247 283.776 18.7577 281.843 18.7577 cv
f
286.192 19.7577 mo
287.573 19.7577 288.692 20.8767 288.692 22.2577 cv
288.692 23.6387 287.573 24.7577 286.192 24.7577 cv
284.811 24.7577 283.692 23.6387 283.692 22.2577 cv
283.692 20.8767 284.811 19.7577 286.192 19.7577 cv
cp
286.192 18.7577 mo
284.259 18.7577 282.692 20.3247 282.692 22.2577 cv
282.692 24.1907 284.259 25.7577 286.192 25.7577 cv
288.125 25.7577 289.692 24.1907 289.692 22.2577 cv
289.692 20.3247 288.125 18.7577 286.192 18.7577 cv
f
290.447 19.7577 mo
291.828 19.7577 292.947 20.8767 292.947 22.2577 cv
292.947 23.6387 291.828 24.7577 290.447 24.7577 cv
289.067 24.7577 287.948 23.6387 287.948 22.2577 cv
287.948 20.8767 289.067 19.7577 290.447 19.7577 cv
cp
290.447 18.7577 mo
288.515 18.7577 286.947 20.3247 286.947 22.2577 cv
286.947 24.1907 288.515 25.7577 290.447 25.7577 cv
292.38 25.7577 293.948 24.1907 293.948 22.2577 cv
293.948 20.3247 292.38 18.7577 290.447 18.7577 cv
f
294.431 19.5727 mo
295.812 19.5727 296.931 20.6917 296.931 22.0727 cv
296.931 23.4537 295.812 24.5727 294.431 24.5727 cv
293.05 24.5727 291.931 23.4537 291.931 22.0727 cv
291.931 20.6917 293.05 19.5727 294.431 19.5727 cv
cp
294.431 18.5727 mo
292.498 18.5727 290.931 20.1407 290.931 22.0727 cv
290.931 24.0057 292.498 25.5727 294.431 25.5727 cv
296.364 25.5727 297.931 24.0057 297.931 22.0727 cv
297.931 20.1407 296.364 18.5727 294.431 18.5727 cv
f
298.387 19.5727 mo
299.768 19.5727 300.887 20.6917 300.887 22.0727 cv
300.887 23.4537 299.768 24.5727 298.387 24.5727 cv
297.006 24.5727 295.887 23.4537 295.887 22.0727 cv
295.887 20.6917 297.006 19.5727 298.387 19.5727 cv
cp
298.387 18.5727 mo
296.454 18.5727 294.887 20.1407 294.887 22.0727 cv
294.887 24.0057 296.454 25.5727 298.387 25.5727 cv
300.32 25.5727 301.887 24.0057 301.887 22.0727 cv
301.887 20.1407 300.32 18.5727 298.387 18.5727 cv
f
302.181 19.5727 mo
303.562 19.5727 304.681 20.6917 304.681 22.0727 cv
304.681 23.4537 303.562 24.5727 302.181 24.5727 cv
300.801 24.5727 299.682 23.4537 299.682 22.0727 cv
299.682 20.6917 300.801 19.5727 302.181 19.5727 cv
cp
302.181 18.5727 mo
300.249 18.5727 298.681 20.1407 298.681 22.0727 cv
298.681 24.0057 300.249 25.5727 302.181 25.5727 cv
304.114 25.5727 305.682 24.0057 305.682 22.0727 cv
305.682 20.1407 304.114 18.5727 302.181 18.5727 cv
f
305.833 19.5727 mo
307.214 19.5727 308.333 20.6917 308.333 22.0727 cv
308.333 23.4537 307.214 24.5727 305.833 24.5727 cv
304.453 24.5727 303.334 23.4537 303.334 22.0727 cv
303.334 20.6917 304.453 19.5727 305.833 19.5727 cv
cp
305.833 18.5727 mo
303.901 18.5727 302.333 20.1407 302.333 22.0727 cv
302.333 24.0057 303.901 25.5727 305.833 25.5727 cv
307.766 25.5727 309.334 24.0057 309.334 22.0727 cv
309.334 20.1407 307.766 18.5727 305.833 18.5727 cv
f
309.46 19.2957 mo
310.84 19.2957 311.96 20.4147 311.96 21.7957 cv
311.96 23.1757 310.84 24.2957 309.46 24.2957 cv
308.079 24.2957 306.96 23.1757 306.96 21.7957 cv
306.96 20.4147 308.079 19.2957 309.46 19.2957 cv
cp
309.46 18.2957 mo
307.527 18.2957 305.96 19.8627 305.96 21.7957 cv
305.96 23.7277 307.527 25.2957 309.46 25.2957 cv
311.392 25.2957 312.96 23.7277 312.96 21.7957 cv
312.96 19.8627 311.392 18.2957 309.46 18.2957 cv
f
312.854 19.2027 mo
314.235 19.2027 315.354 20.3227 315.354 21.7027 cv
315.354 23.0837 314.235 24.2027 312.854 24.2027 cv
311.473 24.2027 310.354 23.0837 310.354 21.7027 cv
310.354 20.3227 311.473 19.2027 312.854 19.2027 cv
cp
312.854 18.2027 mo
310.921 18.2027 309.354 19.7707 309.354 21.7027 cv
309.354 23.6357 310.921 25.2027 312.854 25.2027 cv
314.787 25.2027 316.354 23.6357 316.354 21.7027 cv
316.354 19.7707 314.787 18.2027 312.854 18.2027 cv
f
316.188 19.1107 mo
317.569 19.1107 318.688 20.2297 318.688 21.6107 cv
318.688 22.9917 317.569 24.1097 316.188 24.1097 cv
314.807 24.1097 313.688 22.9917 313.688 21.6107 cv
313.688 20.2297 314.807 19.1107 316.188 19.1107 cv
cp
316.188 18.1097 mo
314.255 18.1097 312.688 19.6777 312.688 21.6107 cv
312.688 23.5437 314.255 25.1107 316.188 25.1107 cv
318.121 25.1107 319.688 23.5437 319.688 21.6107 cv
319.688 19.6777 318.121 18.1097 316.188 18.1097 cv
f
319.46 19.1107 mo
320.84 19.1107 321.96 20.2297 321.96 21.6107 cv
321.96 22.9917 320.84 24.1097 319.46 24.1097 cv
318.079 24.1097 316.96 22.9917 316.96 21.6107 cv
316.96 20.2297 318.079 19.1107 319.46 19.1107 cv
cp
319.46 18.1097 mo
317.527 18.1097 315.96 19.6777 315.96 21.6107 cv
315.96 23.5437 317.527 25.1107 319.46 25.1107 cv
321.392 25.1107 322.96 23.5437 322.96 21.6107 cv
322.96 19.6777 321.392 18.1097 319.46 18.1097 cv
f
322.597 19.1107 mo
323.978 19.1107 325.097 20.2297 325.097 21.6107 cv
325.097 22.9917 323.978 24.1097 322.597 24.1097 cv
321.216 24.1097 320.097 22.9917 320.097 21.6107 cv
320.097 20.2297 321.216 19.1107 322.597 19.1107 cv
cp
322.597 18.1097 mo
320.664 18.1097 319.097 19.6777 319.097 21.6107 cv
319.097 23.5437 320.664 25.1107 322.597 25.1107 cv
324.53 25.1107 326.097 23.5437 326.097 21.6107 cv
326.097 19.6777 324.53 18.1097 322.597 18.1097 cv
f
325.597 19.1107 mo
326.978 19.1107 328.097 20.2297 328.097 21.6107 cv
328.097 22.9917 326.978 24.1097 325.597 24.1097 cv
324.217 24.1097 323.097 22.9917 323.097 21.6107 cv
323.097 20.2297 324.217 19.1107 325.597 19.1107 cv
cp
325.597 18.1097 mo
323.665 18.1097 322.097 19.6777 322.097 21.6107 cv
322.097 23.5437 323.665 25.1107 325.597 25.1107 cv
327.53 25.1107 329.097 23.5437 329.097 21.6107 cv
329.097 19.6777 327.53 18.1097 325.597 18.1097 cv
f
328.457 19.1107 mo
329.838 19.1107 330.957 20.2297 330.957 21.6107 cv
330.957 22.9917 329.838 24.1097 328.457 24.1097 cv
327.076 24.1097 325.958 22.9917 325.958 21.6107 cv
325.958 20.2297 327.076 19.1107 328.457 19.1107 cv
cp
328.457 18.1097 mo
326.524 18.1097 324.957 19.6777 324.957 21.6107 cv
324.957 23.5437 326.524 25.1107 328.457 25.1107 cv
330.39 25.1107 331.958 23.5437 331.958 21.6107 cv
331.958 19.6777 330.39 18.1097 328.457 18.1097 cv
f
331.234 19.0187 mo
332.615 19.0187 333.734 20.1377 333.734 21.5177 cv
333.734 22.8987 332.615 24.0177 331.234 24.0177 cv
329.853 24.0177 328.734 22.8987 328.734 21.5177 cv
328.734 20.1377 329.853 19.0187 331.234 19.0187 cv
cp
331.234 18.0177 mo
329.301 18.0177 327.734 19.5857 327.734 21.5177 cv
327.734 23.4507 329.301 25.0187 331.234 25.0187 cv
333.167 25.0187 334.734 23.4507 334.734 21.5177 cv
334.734 19.5857 333.167 18.0177 331.234 18.0177 cv
f
333.908 19.0187 mo
335.288 19.0187 336.407 20.1377 336.407 21.5177 cv
336.407 22.8987 335.288 24.0177 333.908 24.0177 cv
332.527 24.0177 331.408 22.8987 331.408 21.5177 cv
331.408 20.1377 332.527 19.0187 333.908 19.0187 cv
cp
333.908 18.0177 mo
331.975 18.0177 330.407 19.5857 330.407 21.5177 cv
330.407 23.4507 331.975 25.0187 333.908 25.0187 cv
335.84 25.0187 337.408 23.4507 337.408 21.5177 cv
337.408 19.5857 335.84 18.0177 333.908 18.0177 cv
f
336.518 18.7407 mo
337.899 18.7407 339.017 19.8597 339.017 21.2407 cv
339.017 22.6217 337.899 23.7407 336.518 23.7407 cv
335.137 23.7407 334.018 22.6217 334.018 21.2407 cv
334.018 19.8597 335.137 18.7407 336.518 18.7407 cv
cp
336.518 17.7407 mo
334.585 17.7407 333.017 19.3077 333.017 21.2407 cv
333.017 23.1737 334.585 24.7407 336.518 24.7407 cv
338.451 24.7407 340.018 23.1737 340.018 21.2407 cv
340.018 19.3077 338.451 17.7407 336.518 17.7407 cv
f
339.013 18.7407 mo
340.393 18.7407 341.513 19.8597 341.513 21.2407 cv
341.513 22.6217 340.393 23.7407 339.013 23.7407 cv
337.632 23.7407 336.513 22.6217 336.513 21.2407 cv
336.513 19.8597 337.632 18.7407 339.013 18.7407 cv
cp
339.013 17.7407 mo
337.08 17.7407 335.513 19.3077 335.513 21.2407 cv
335.513 23.1737 337.08 24.7407 339.013 24.7407 cv
340.945 24.7407 342.513 23.1737 342.513 21.2407 cv
342.513 19.3077 340.945 17.7407 339.013 17.7407 cv
f
341.385 18.6487 mo
342.766 18.6487 343.885 19.7677 343.885 21.1487 cv
343.885 22.5287 342.766 23.6477 341.385 23.6477 cv
340.005 23.6477 338.886 22.5287 338.886 21.1487 cv
338.886 19.7677 340.005 18.6487 341.385 18.6487 cv
cp
341.385 17.6477 mo
339.453 17.6477 337.885 19.2157 337.885 21.1487 cv
337.885 23.0807 339.453 24.6487 341.385 24.6487 cv
343.318 24.6487 344.886 23.0807 344.886 21.1487 cv
344.886 19.2157 343.318 17.6477 341.385 17.6477 cv
f
343.7 18.5567 mo
345.081 18.5567 346.199 19.6747 346.199 21.0557 cv
346.199 22.4367 345.081 23.5557 343.7 23.5557 cv
342.319 23.5557 341.2 22.4367 341.2 21.0557 cv
341.2 19.6747 342.319 18.5567 343.7 18.5567 cv
cp
343.7 17.5557 mo
341.767 17.5557 340.199 19.1227 340.199 21.0557 cv
340.199 22.9887 341.767 24.5567 343.7 24.5567 cv
345.633 24.5567 347.2 22.9887 347.2 21.0557 cv
347.2 19.1227 345.633 17.5557 343.7 17.5557 cv
f
345.912 18.5567 mo
347.293 18.5567 348.412 19.6747 348.412 21.0557 cv
348.412 22.4367 347.293 23.5557 345.912 23.5557 cv
344.532 23.5557 343.413 22.4367 343.413 21.0557 cv
343.413 19.6747 344.532 18.5567 345.912 18.5567 cv
cp
345.912 17.5557 mo
343.979 17.5557 342.412 19.1227 342.412 21.0557 cv
342.412 22.9887 343.979 24.5567 345.912 24.5567 cv
347.845 24.5567 349.413 22.9887 349.413 21.0557 cv
349.413 19.1227 347.845 17.5557 345.912 17.5557 cv
f
348.076 18.5567 mo
349.457 18.5567 350.576 19.6747 350.576 21.0557 cv
350.576 22.4367 349.457 23.5557 348.076 23.5557 cv
346.695 23.5557 345.577 22.4367 345.577 21.0557 cv
345.577 19.6747 346.695 18.5567 348.076 18.5567 cv
cp
348.076 17.5557 mo
346.143 17.5557 344.576 19.1227 344.576 21.0557 cv
344.576 22.9887 346.143 24.5567 348.076 24.5567 cv
350.009 24.5567 351.577 22.9887 351.577 21.0557 cv
351.577 19.1227 350.009 17.5557 348.076 17.5557 cv
f
350.146 18.4637 mo
351.527 18.4637 352.645 19.5827 352.645 20.9637 cv
352.645 22.3437 351.527 23.4637 350.146 23.4637 cv
348.765 23.4637 347.646 22.3437 347.646 20.9637 cv
347.646 19.5827 348.765 18.4637 350.146 18.4637 cv
cp
350.146 17.4637 mo
348.213 17.4637 346.645 19.0307 346.645 20.9637 cv
346.645 22.8957 348.213 24.4637 350.146 24.4637 cv
352.079 24.4637 353.646 22.8957 353.646 20.9637 cv
353.646 19.0307 352.079 17.4637 350.146 17.4637 cv
f
352.125 18.3707 mo
353.505 18.3707 354.624 19.4907 354.624 20.8707 cv
354.624 22.2517 353.505 23.3707 352.125 23.3707 cv
350.744 23.3707 349.625 22.2517 349.625 20.8707 cv
349.625 19.4907 350.744 18.3707 352.125 18.3707 cv
cp
352.125 17.3707 mo
350.192 17.3707 348.624 18.9387 348.624 20.8707 cv
348.624 22.8037 350.192 24.3707 352.125 24.3707 cv
354.058 24.3707 355.625 22.8037 355.625 20.8707 cv
355.625 18.9387 354.058 17.3707 352.125 17.3707 cv
f
354.012 18.3707 mo
355.393 18.3707 356.512 19.4907 356.512 20.8707 cv
356.512 22.2517 355.393 23.3707 354.012 23.3707 cv
352.631 23.3707 351.513 22.2517 351.513 20.8707 cv
351.513 19.4907 352.631 18.3707 354.012 18.3707 cv
cp
354.012 17.3707 mo
352.079 17.3707 350.512 18.9387 350.512 20.8707 cv
350.512 22.8037 352.079 24.3707 354.012 24.3707 cv
355.945 24.3707 357.513 22.8037 357.513 20.8707 cv
357.513 18.9387 355.945 17.3707 354.012 17.3707 cv
f
355.806 18.2787 mo
357.186 18.2787 358.306 19.3977 358.306 20.7787 cv
358.306 22.1597 357.186 23.2777 355.806 23.2777 cv
354.425 23.2777 353.306 22.1597 353.306 20.7787 cv
353.306 19.3977 354.425 18.2787 355.806 18.2787 cv
cp
355.806 17.2777 mo
353.873 17.2777 352.306 18.8457 352.306 20.7787 cv
352.306 22.7117 353.873 24.2787 355.806 24.2787 cv
357.738 24.2787 359.306 22.7117 359.306 20.7787 cv
359.306 18.8457 357.738 17.2777 355.806 17.2777 cv
f
357.552 18.1867 mo
358.932 18.1867 360.051 19.3047 360.051 20.6857 cv
360.051 22.0667 358.932 23.1857 357.552 23.1857 cv
356.171 23.1857 355.052 22.0667 355.052 20.6857 cv
355.052 19.3047 356.171 18.1867 357.552 18.1867 cv
cp
357.552 17.1857 mo
355.619 17.1857 354.051 18.7527 354.051 20.6857 cv
354.051 22.6187 355.619 24.1867 357.552 24.1867 cv
359.484 24.1867 361.052 22.6187 361.052 20.6857 cv
361.052 18.7527 359.484 17.1857 357.552 17.1857 cv
f
359.209 18.1867 mo
360.59 18.1867 361.709 19.3047 361.709 20.6857 cv
361.709 22.0667 360.59 23.1857 359.209 23.1857 cv
357.829 23.1857 356.71 22.0667 356.71 20.6857 cv
356.71 19.3047 357.829 18.1867 359.209 18.1867 cv
cp
359.209 17.1857 mo
357.277 17.1857 355.709 18.7527 355.709 20.6857 cv
355.709 22.6187 357.277 24.1867 359.209 24.1867 cv
361.142 24.1867 362.71 22.6187 362.71 20.6857 cv
362.71 18.7527 361.142 17.1857 359.209 17.1857 cv
f
360.803 18.0937 mo
362.183 18.0937 363.302 19.2127 363.302 20.5937 cv
363.302 21.9737 362.183 23.0937 360.803 23.0937 cv
359.422 23.0937 358.303 21.9737 358.303 20.5937 cv
358.303 19.2127 359.422 18.0937 360.803 18.0937 cv
cp
360.803 17.0937 mo
358.87 17.0937 357.302 18.6607 357.302 20.5937 cv
357.302 22.5257 358.87 24.0937 360.803 24.0937 cv
362.735 24.0937 364.303 22.5257 364.303 20.5937 cv
364.303 18.6607 362.735 17.0937 360.803 17.0937 cv
f
362.331 18.0007 mo
363.711 18.0007 364.831 19.1207 364.831 20.5007 cv
364.831 21.8817 363.711 23.0007 362.331 23.0007 cv
360.95 23.0007 359.831 21.8817 359.831 20.5007 cv
359.831 19.1207 360.95 18.0007 362.331 18.0007 cv
cp
362.331 17.0007 mo
360.398 17.0007 358.831 18.5687 358.831 20.5007 cv
358.831 22.4337 360.398 24.0007 362.331 24.0007 cv
364.263 24.0007 365.831 22.4337 365.831 20.5007 cv
365.831 18.5687 364.263 17.0007 362.331 17.0007 cv
f
363.792 18.0007 mo
365.172 18.0007 366.292 19.1207 366.292 20.5007 cv
366.292 21.8817 365.172 23.0007 363.792 23.0007 cv
362.411 23.0007 361.292 21.8817 361.292 20.5007 cv
361.292 19.1207 362.411 18.0007 363.792 18.0007 cv
cp
363.792 17.0007 mo
361.859 17.0007 360.292 18.5687 360.292 20.5007 cv
360.292 22.4337 361.859 24.0007 363.792 24.0007 cv
365.724 24.0007 367.292 22.4337 367.292 20.5007 cv
367.292 18.5687 365.724 17.0007 363.792 17.0007 cv
f
365.177 18.0007 mo
366.558 18.0007 367.677 19.1207 367.677 20.5007 cv
367.677 21.8817 366.558 23.0007 365.177 23.0007 cv
363.796 23.0007 362.677 21.8817 362.677 20.5007 cv
362.677 19.1207 363.796 18.0007 365.177 18.0007 cv
cp
365.177 17.0007 mo
363.244 17.0007 361.677 18.5687 361.677 20.5007 cv
361.677 22.4337 363.244 24.0007 365.177 24.0007 cv
367.11 24.0007 368.677 22.4337 368.677 20.5007 cv
368.677 18.5687 367.11 17.0007 365.177 17.0007 cv
f
366.493 17.9087 mo
367.874 17.9087 368.993 19.0277 368.993 20.4087 cv
368.993 21.7897 367.874 22.9077 366.493 22.9077 cv
365.113 22.9077 363.993 21.7897 363.993 20.4087 cv
363.993 19.0277 365.113 17.9087 366.493 17.9087 cv
cp
366.493 16.9077 mo
364.56 16.9077 362.993 18.4757 362.993 20.4087 cv
362.993 22.3417 364.56 23.9087 366.493 23.9087 cv
368.426 23.9087 369.993 22.3417 369.993 20.4087 cv
369.993 18.4757 368.426 16.9077 366.493 16.9077 cv
f
367.758 17.9087 mo
369.139 17.9087 370.258 19.0277 370.258 20.4087 cv
370.258 21.7897 369.139 22.9077 367.758 22.9077 cv
366.377 22.9077 365.258 21.7897 365.258 20.4087 cv
365.258 19.0277 366.377 17.9087 367.758 17.9087 cv
cp
367.758 16.9077 mo
365.825 16.9077 364.258 18.4757 364.258 20.4087 cv
364.258 22.3417 365.825 23.9087 367.758 23.9087 cv
369.691 23.9087 371.258 22.3417 371.258 20.4087 cv
371.258 18.4757 369.691 16.9077 367.758 16.9077 cv
f
368.971 17.8167 mo
370.352 17.8167 371.471 18.9357 371.471 20.3157 cv
371.471 21.6967 370.352 22.8157 368.971 22.8157 cv
367.59 22.8157 366.471 21.6967 366.471 20.3157 cv
366.471 18.9357 367.59 17.8167 368.971 17.8167 cv
cp
368.971 16.8157 mo
367.038 16.8157 365.471 18.3827 365.471 20.3157 cv
365.471 22.2487 367.038 23.8167 368.971 23.8167 cv
370.904 23.8167 372.471 22.2487 372.471 20.3157 cv
372.471 18.3827 370.904 16.8157 368.971 16.8157 cv
f
370.129 17.8167 mo
371.51 17.8167 372.629 18.9357 372.629 20.3157 cv
372.629 21.6967 371.51 22.8157 370.129 22.8157 cv
368.749 22.8157 367.63 21.6967 367.63 20.3157 cv
367.63 18.9357 368.749 17.8167 370.129 17.8167 cv
cp
370.129 16.8157 mo
368.197 16.8157 366.629 18.3827 366.629 20.3157 cv
366.629 22.2487 368.197 23.8167 370.129 23.8167 cv
372.062 23.8167 373.63 22.2487 373.63 20.3157 cv
373.63 18.3827 372.062 16.8157 370.129 16.8157 cv
f
371.212 17.7237 mo
372.593 17.7237 373.712 18.8427 373.712 20.2237 cv
373.712 21.6047 372.593 22.7237 371.212 22.7237 cv
369.831 22.7237 368.713 21.6047 368.713 20.2237 cv
368.713 18.8427 369.831 17.7237 371.212 17.7237 cv
cp
371.212 16.7237 mo
369.279 16.7237 367.712 18.2907 367.712 20.2237 cv
367.712 22.1567 369.279 23.7237 371.212 23.7237 cv
373.145 23.7237 374.713 22.1567 374.713 20.2237 cv
374.713 18.2907 373.145 16.7237 371.212 16.7237 cv
f
372.258 17.7237 mo
373.638 17.7237 374.757 18.8427 374.757 20.2237 cv
374.757 21.6047 373.638 22.7237 372.258 22.7237 cv
370.877 22.7237 369.758 21.6047 369.758 20.2237 cv
369.758 18.8427 370.877 17.7237 372.258 17.7237 cv
cp
372.258 16.7237 mo
370.325 16.7237 368.757 18.2907 368.757 20.2237 cv
368.757 22.1567 370.325 23.7237 372.258 23.7237 cv
374.19 23.7237 375.758 22.1567 375.758 20.2237 cv
375.758 18.2907 374.19 16.7237 372.258 16.7237 cv
f
373.251 17.7237 mo
374.632 17.7237 375.751 18.8427 375.751 20.2237 cv
375.751 21.6047 374.632 22.7237 373.251 22.7237 cv
371.87 22.7237 370.751 21.6047 370.751 20.2237 cv
370.751 18.8427 371.87 17.7237 373.251 17.7237 cv
cp
373.251 16.7237 mo
371.318 16.7237 369.751 18.2907 369.751 20.2237 cv
369.751 22.1567 371.318 23.7237 373.251 23.7237 cv
375.184 23.7237 376.751 22.1567 376.751 20.2237 cv
376.751 18.2907 375.184 16.7237 373.251 16.7237 cv
f
374.193 17.6317 mo
375.574 17.6317 376.693 18.7507 376.693 20.1317 cv
376.693 21.5117 375.574 22.6307 374.193 22.6307 cv
372.812 22.6307 371.693 21.5117 371.693 20.1317 cv
371.693 18.7507 372.812 17.6317 374.193 17.6317 cv
cp
374.193 16.6307 mo
372.26 16.6307 370.693 18.1987 370.693 20.1317 cv
370.693 22.0637 372.26 23.6317 374.193 23.6317 cv
376.126 23.6317 377.693 22.0637 377.693 20.1317 cv
377.693 18.1987 376.126 16.6307 374.193 16.6307 cv
f
375.07 17.5387 mo
376.451 17.5387 377.57 18.6577 377.57 20.0387 cv
377.57 21.4197 376.451 22.5387 375.07 22.5387 cv
373.69 22.5387 372.57 21.4197 372.57 20.0387 cv
372.57 18.6577 373.69 17.5387 375.07 17.5387 cv
cp
375.07 16.5387 mo
373.138 16.5387 371.57 18.1057 371.57 20.0387 cv
371.57 21.9717 373.138 23.5387 375.07 23.5387 cv
377.003 23.5387 378.57 21.9717 378.57 20.0387 cv
378.57 18.1057 377.003 16.5387 375.07 16.5387 cv
f
375.91 17.5387 mo
377.291 17.5387 378.41 18.6577 378.41 20.0387 cv
378.41 21.4197 377.291 22.5387 375.91 22.5387 cv
374.529 22.5387 373.41 21.4197 373.41 20.0387 cv
373.41 18.6577 374.529 17.5387 375.91 17.5387 cv
cp
375.91 16.5387 mo
373.977 16.5387 372.41 18.1057 372.41 20.0387 cv
372.41 21.9717 373.977 23.5387 375.91 23.5387 cv
377.843 23.5387 379.41 21.9717 379.41 20.0387 cv
379.41 18.1057 377.843 16.5387 375.91 16.5387 cv
f
376.71 17.5387 mo
378.091 17.5387 379.21 18.6577 379.21 20.0387 cv
379.21 21.4197 378.091 22.5387 376.71 22.5387 cv
375.329 22.5387 374.211 21.4197 374.211 20.0387 cv
374.211 18.6577 375.329 17.5387 376.71 17.5387 cv
cp
376.71 16.5387 mo
374.777 16.5387 373.21 18.1057 373.21 20.0387 cv
373.21 21.9717 374.777 23.5387 376.71 23.5387 cv
378.643 23.5387 380.211 21.9717 380.211 20.0387 cv
380.211 18.1057 378.643 16.5387 376.71 16.5387 cv
f
377.468 17.5387 mo
378.849 17.5387 379.968 18.6577 379.968 20.0387 cv
379.968 21.4197 378.849 22.5387 377.468 22.5387 cv
376.087 22.5387 374.968 21.4197 374.968 20.0387 cv
374.968 18.6577 376.087 17.5387 377.468 17.5387 cv
cp
377.468 16.5387 mo
375.535 16.5387 373.968 18.1057 373.968 20.0387 cv
373.968 21.9717 375.535 23.5387 377.468 23.5387 cv
379.401 23.5387 380.968 21.9717 380.968 20.0387 cv
380.968 18.1057 379.401 16.5387 377.468 16.5387 cv
f
378.181 17.5387 mo
379.562 17.5387 380.681 18.6577 380.681 20.0387 cv
380.681 21.4197 379.562 22.5387 378.181 22.5387 cv
376.801 22.5387 375.681 21.4197 375.681 20.0387 cv
375.681 18.6577 376.801 17.5387 378.181 17.5387 cv
cp
378.181 16.5387 mo
376.249 16.5387 374.681 18.1057 374.681 20.0387 cv
374.681 21.9717 376.249 23.5387 378.181 23.5387 cv
380.114 23.5387 381.681 21.9717 381.681 20.0387 cv
381.681 18.1057 380.114 16.5387 378.181 16.5387 cv
f
378.859 17.5387 mo
380.24 17.5387 381.359 18.6577 381.359 20.0387 cv
381.359 21.4197 380.24 22.5387 378.859 22.5387 cv
377.478 22.5387 376.359 21.4197 376.359 20.0387 cv
376.359 18.6577 377.478 17.5387 378.859 17.5387 cv
cp
378.859 16.5387 mo
376.926 16.5387 375.359 18.1057 375.359 20.0387 cv
375.359 21.9717 376.926 23.5387 378.859 23.5387 cv
380.792 23.5387 382.359 21.9717 382.359 20.0387 cv
382.359 18.1057 380.792 16.5387 378.859 16.5387 cv
f
379.493 17.5387 mo
380.874 17.5387 381.993 18.6577 381.993 20.0387 cv
381.993 21.4197 380.874 22.5387 379.493 22.5387 cv
378.113 22.5387 376.993 21.4197 376.993 20.0387 cv
376.993 18.6577 378.113 17.5387 379.493 17.5387 cv
cp
379.493 16.5387 mo
377.561 16.5387 375.993 18.1057 375.993 20.0387 cv
375.993 21.9717 377.561 23.5387 379.493 23.5387 cv
381.426 23.5387 382.993 21.9717 382.993 20.0387 cv
382.993 18.1057 381.426 16.5387 379.493 16.5387 cv
f
380.093 17.4467 mo
381.474 17.4467 382.593 18.5657 382.593 19.9457 cv
382.593 21.3267 381.474 22.4457 380.093 22.4457 cv
378.712 22.4457 377.593 21.3267 377.593 19.9457 cv
377.593 18.5657 378.712 17.4467 380.093 17.4467 cv
cp
380.093 16.4457 mo
378.16 16.4457 376.593 18.0137 376.593 19.9457 cv
376.593 21.8787 378.16 23.4467 380.093 23.4467 cv
382.026 23.4467 383.593 21.8787 383.593 19.9457 cv
383.593 18.0137 382.026 16.4457 380.093 16.4457 cv
f
380.66 17.1687 mo
382.041 17.1687 383.16 18.2887 383.16 19.6687 cv
383.16 21.0497 382.041 22.1687 380.66 22.1687 cv
379.279 22.1687 378.16 21.0497 378.16 19.6687 cv
378.16 18.2887 379.279 17.1687 380.66 17.1687 cv
cp
380.66 16.1687 mo
378.727 16.1687 377.16 17.7367 377.16 19.6687 cv
377.16 21.6017 378.727 23.1687 380.66 23.1687 cv
382.593 23.1687 384.16 21.6017 384.16 19.6687 cv
384.16 17.7367 382.593 16.1687 380.66 16.1687 cv
f
381.19 17.0767 mo
382.571 17.0767 383.69 18.1957 383.69 19.5767 cv
383.69 20.9567 382.571 22.0757 381.19 22.0757 cv
379.81 22.0757 378.691 20.9567 378.691 19.5767 cv
378.691 18.1957 379.81 17.0767 381.19 17.0767 cv
cp
381.19 16.0757 mo
379.258 16.0757 377.69 17.6437 377.69 19.5767 cv
377.69 21.5087 379.258 23.0767 381.19 23.0767 cv
383.123 23.0767 384.691 21.5087 384.691 19.5767 cv
384.691 17.6437 383.123 16.0757 381.19 16.0757 cv
f
381.69 17.0767 mo
383.071 17.0767 384.19 18.1957 384.19 19.5767 cv
384.19 20.9567 383.071 22.0757 381.69 22.0757 cv
380.31 22.0757 379.191 20.9567 379.191 19.5767 cv
379.191 18.1957 380.31 17.0767 381.69 17.0767 cv
cp
381.69 16.0757 mo
379.758 16.0757 378.19 17.6437 378.19 19.5767 cv
378.19 21.5087 379.758 23.0767 381.69 23.0767 cv
383.623 23.0767 385.191 21.5087 385.191 19.5767 cv
385.191 17.6437 383.623 16.0757 381.69 16.0757 cv
f
382.157 16.8917 mo
383.538 16.8917 384.657 18.0107 384.657 19.3917 cv
384.657 20.7727 383.538 21.8917 382.157 21.8917 cv
380.777 21.8917 379.658 20.7727 379.658 19.3917 cv
379.658 18.0107 380.777 16.8917 382.157 16.8917 cv
cp
382.157 15.8917 mo
380.225 15.8917 378.657 17.4587 378.657 19.3917 cv
378.657 21.3237 380.225 22.8917 382.157 22.8917 cv
384.09 22.8917 385.658 21.3237 385.658 19.3917 cv
385.658 17.4587 384.09 15.8917 382.157 15.8917 cv
f
382.592 16.8917 mo
383.973 16.8917 385.092 18.0107 385.092 19.3917 cv
385.092 20.7727 383.973 21.8917 382.592 21.8917 cv
381.211 21.8917 380.092 20.7727 380.092 19.3917 cv
380.092 18.0107 381.211 16.8917 382.592 16.8917 cv
cp
382.592 15.8917 mo
380.659 15.8917 379.092 17.4587 379.092 19.3917 cv
379.092 21.3237 380.659 22.8917 382.592 22.8917 cv
384.525 22.8917 386.092 21.3237 386.092 19.3917 cv
386.092 17.4587 384.525 15.8917 382.592 15.8917 cv
f
383.002 16.7987 mo
384.383 16.7987 385.502 17.9187 385.502 19.2987 cv
385.502 20.6797 384.383 21.7987 383.002 21.7987 cv
381.622 21.7987 380.503 20.6797 380.503 19.2987 cv
380.503 17.9187 381.622 16.7987 383.002 16.7987 cv
cp
383.002 15.7987 mo
381.07 15.7987 379.502 17.3667 379.502 19.2987 cv
379.502 21.2317 381.07 22.7987 383.002 22.7987 cv
384.935 22.7987 386.503 21.2317 386.503 19.2987 cv
386.503 17.3667 384.935 15.7987 383.002 15.7987 cv
f
383.384 16.7987 mo
384.765 16.7987 385.884 17.9187 385.884 19.2987 cv
385.884 20.6797 384.765 21.7987 383.384 21.7987 cv
382.004 21.7987 380.885 20.6797 380.885 19.2987 cv
380.885 17.9187 382.004 16.7987 383.384 16.7987 cv
cp
383.384 15.7987 mo
381.451 15.7987 379.884 17.3667 379.884 19.2987 cv
379.884 21.2317 381.451 22.7987 383.384 22.7987 cv
385.317 22.7987 386.885 21.2317 386.885 19.2987 cv
386.885 17.3667 385.317 15.7987 383.384 15.7987 cv
f
383.738 16.7987 mo
385.119 16.7987 386.238 17.9187 386.238 19.2987 cv
386.238 20.6797 385.119 21.7987 383.738 21.7987 cv
382.358 21.7987 381.238 20.6797 381.238 19.2987 cv
381.238 17.9187 382.358 16.7987 383.738 16.7987 cv
cp
383.738 15.7987 mo
381.806 15.7987 380.238 17.3667 380.238 19.2987 cv
380.238 21.2317 381.806 22.7987 383.738 22.7987 cv
385.671 22.7987 387.238 21.2317 387.238 19.2987 cv
387.238 17.3667 385.671 15.7987 383.738 15.7987 cv
f
384.068 16.7987 mo
385.449 16.7987 386.568 17.9187 386.568 19.2987 cv
386.568 20.6797 385.449 21.7987 384.068 21.7987 cv
382.687 21.7987 381.568 20.6797 381.568 19.2987 cv
381.568 17.9187 382.687 16.7987 384.068 16.7987 cv
cp
384.068 15.7987 mo
382.135 15.7987 380.568 17.3667 380.568 19.2987 cv
380.568 21.2317 382.135 22.7987 384.068 22.7987 cv
386.001 22.7987 387.568 21.2317 387.568 19.2987 cv
387.568 17.3667 386.001 15.7987 384.068 15.7987 cv
f
384.379 16.7987 mo
385.76 16.7987 386.879 17.9187 386.879 19.2987 cv
386.879 20.6797 385.76 21.7987 384.379 21.7987 cv
382.998 21.7987 381.879 20.6797 381.879 19.2987 cv
381.879 17.9187 382.998 16.7987 384.379 16.7987 cv
cp
384.379 15.7987 mo
382.446 15.7987 380.879 17.3667 380.879 19.2987 cv
380.879 21.2317 382.446 22.7987 384.379 22.7987 cv
386.311 22.7987 387.879 21.2317 387.879 19.2987 cv
387.879 17.3667 386.311 15.7987 384.379 15.7987 cv
f
384.67 16.7067 mo
386.051 16.7067 387.17 17.8257 387.17 19.2067 cv
387.17 20.5877 386.051 21.7067 384.67 21.7067 cv
383.29 21.7067 382.17 20.5877 382.17 19.2067 cv
382.17 17.8257 383.29 16.7067 384.67 16.7067 cv
cp
384.67 15.7067 mo
382.738 15.7067 381.17 17.2737 381.17 19.2067 cv
381.17 21.1397 382.738 22.7067 384.67 22.7067 cv
386.603 22.7067 388.17 21.1397 388.17 19.2067 cv
388.17 17.2737 386.603 15.7067 384.67 15.7067 cv
f
384.935 16.6147 mo
386.316 16.6147 387.435 17.7327 387.435 19.1137 cv
387.435 20.4947 386.316 21.6137 384.935 21.6137 cv
383.554 21.6137 382.435 20.4947 382.435 19.1137 cv
382.435 17.7327 383.554 16.6147 384.935 16.6147 cv
cp
384.935 15.6137 mo
383.002 15.6137 381.435 17.1817 381.435 19.1137 cv
381.435 21.0467 383.002 22.6147 384.935 22.6147 cv
386.868 22.6147 388.435 21.0467 388.435 19.1137 cv
388.435 17.1817 386.868 15.6137 384.935 15.6137 cv
f
385.182 16.5217 mo
386.563 16.5217 387.682 17.6407 387.682 19.0217 cv
387.682 20.4027 386.563 21.5217 385.182 21.5217 cv
383.801 21.5217 382.683 20.4027 382.683 19.0217 cv
382.683 17.6407 383.801 16.5217 385.182 16.5217 cv
cp
385.182 15.5217 mo
383.249 15.5217 381.682 17.0887 381.682 19.0217 cv
381.682 20.9547 383.249 22.5217 385.182 22.5217 cv
387.115 22.5217 388.683 20.9547 388.683 19.0217 cv
388.683 17.0887 387.115 15.5217 385.182 15.5217 cv
f
385.411 16.5217 mo
386.792 16.5217 387.911 17.6407 387.911 19.0217 cv
387.911 20.4027 386.792 21.5217 385.411 21.5217 cv
384.031 21.5217 382.912 20.4027 382.912 19.0217 cv
382.912 17.6407 384.031 16.5217 385.411 16.5217 cv
cp
385.411 15.5217 mo
383.479 15.5217 381.911 17.0887 381.911 19.0217 cv
381.911 20.9547 383.479 22.5217 385.411 22.5217 cv
387.344 22.5217 388.912 20.9547 388.912 19.0217 cv
388.912 17.0887 387.344 15.5217 385.411 15.5217 cv
f
385.621 16.5217 mo
387.002 16.5217 388.121 17.6407 388.121 19.0217 cv
388.121 20.4027 387.002 21.5217 385.621 21.5217 cv
384.24 21.5217 383.122 20.4027 383.122 19.0217 cv
383.122 17.6407 384.24 16.5217 385.621 16.5217 cv
cp
385.621 15.5217 mo
383.688 15.5217 382.121 17.0887 382.121 19.0217 cv
382.121 20.9547 383.688 22.5217 385.621 22.5217 cv
387.554 22.5217 389.122 20.9547 389.122 19.0217 cv
389.122 17.0887 387.554 15.5217 385.621 15.5217 cv
f
385.817 16.5217 mo
387.198 16.5217 388.317 17.6407 388.317 19.0217 cv
388.317 20.4027 387.198 21.5217 385.817 21.5217 cv
384.436 21.5217 383.317 20.4027 383.317 19.0217 cv
383.317 17.6407 384.436 16.5217 385.817 16.5217 cv
cp
385.817 15.5217 mo
383.884 15.5217 382.317 17.0887 382.317 19.0217 cv
382.317 20.9547 383.884 22.5217 385.817 22.5217 cv
387.75 22.5217 389.317 20.9547 389.317 19.0217 cv
389.317 17.0887 387.75 15.5217 385.817 15.5217 cv
f
386.001 16.5217 mo
387.382 16.5217 388.501 17.6407 388.501 19.0217 cv
388.501 20.4027 387.382 21.5217 386.001 21.5217 cv
384.621 21.5217 383.502 20.4027 383.502 19.0217 cv
383.502 17.6407 384.621 16.5217 386.001 16.5217 cv
cp
386.001 15.5217 mo
384.069 15.5217 382.501 17.0887 382.501 19.0217 cv
382.501 20.9547 384.069 22.5217 386.001 22.5217 cv
387.934 22.5217 389.502 20.9547 389.502 19.0217 cv
389.502 17.0887 387.934 15.5217 386.001 15.5217 cv
f
386.169 16.5217 mo
387.55 16.5217 388.668 17.6407 388.668 19.0217 cv
388.668 20.4027 387.55 21.5217 386.169 21.5217 cv
384.788 21.5217 383.669 20.4027 383.669 19.0217 cv
383.669 17.6407 384.788 16.5217 386.169 16.5217 cv
cp
386.169 15.5217 mo
384.236 15.5217 382.668 17.0887 382.668 19.0217 cv
382.668 20.9547 384.236 22.5217 386.169 22.5217 cv
388.102 22.5217 389.669 20.9547 389.669 19.0217 cv
389.669 17.0887 388.102 15.5217 386.169 15.5217 cv
f
386.32 16.5217 mo
387.701 16.5217 388.819 17.6407 388.819 19.0217 cv
388.819 20.4027 387.701 21.5217 386.32 21.5217 cv
384.939 21.5217 383.82 20.4027 383.82 19.0217 cv
383.82 17.6407 384.939 16.5217 386.32 16.5217 cv
cp
386.32 15.5217 mo
384.387 15.5217 382.819 17.0887 382.819 19.0217 cv
382.819 20.9547 384.387 22.5217 386.32 22.5217 cv
388.252 22.5217 389.82 20.9547 389.82 19.0217 cv
389.82 17.0887 388.252 15.5217 386.32 15.5217 cv
f
386.459 16.5217 mo
387.84 16.5217 388.959 17.6407 388.959 19.0217 cv
388.959 20.4027 387.84 21.5217 386.459 21.5217 cv
385.078 21.5217 383.959 20.4027 383.959 19.0217 cv
383.959 17.6407 385.078 16.5217 386.459 16.5217 cv
cp
386.459 15.5217 mo
384.526 15.5217 382.959 17.0887 382.959 19.0217 cv
382.959 20.9547 384.526 22.5217 386.459 22.5217 cv
388.392 22.5217 389.959 20.9547 389.959 19.0217 cv
389.959 17.0887 388.392 15.5217 386.459 15.5217 cv
f
386.587 16.5217 mo
387.968 16.5217 389.087 17.6407 389.087 19.0217 cv
389.087 20.4027 387.968 21.5217 386.587 21.5217 cv
385.206 21.5217 384.087 20.4027 384.087 19.0217 cv
384.087 17.6407 385.206 16.5217 386.587 16.5217 cv
cp
386.587 15.5217 mo
384.654 15.5217 383.087 17.0887 383.087 19.0217 cv
383.087 20.9547 384.654 22.5217 386.587 22.5217 cv
388.52 22.5217 390.087 20.9547 390.087 19.0217 cv
390.087 17.0887 388.52 15.5217 386.587 15.5217 cv
f
386.707 16.4297 mo
388.087 16.4297 389.206 17.5487 389.206 18.9297 cv
389.206 20.3097 388.087 21.4287 386.707 21.4287 cv
385.326 21.4287 384.207 20.3097 384.207 18.9297 cv
384.207 17.5487 385.326 16.4297 386.707 16.4297 cv
cp
386.707 15.4287 mo
384.774 15.4287 383.206 16.9967 383.206 18.9297 cv
383.206 20.8617 384.774 22.4297 386.707 22.4297 cv
388.639 22.4297 390.207 20.8617 390.207 18.9297 cv
390.207 16.9967 388.639 15.4287 386.707 15.4287 cv
f
386.816 16.4297 mo
388.197 16.4297 389.316 17.5487 389.316 18.9297 cv
389.316 20.3097 388.197 21.4287 386.816 21.4287 cv
385.435 21.4287 384.316 20.3097 384.316 18.9297 cv
384.316 17.5487 385.435 16.4297 386.816 16.4297 cv
cp
386.816 15.4287 mo
384.883 15.4287 383.316 16.9967 383.316 18.9297 cv
383.316 20.8617 384.883 22.4297 386.816 22.4297 cv
388.749 22.4297 390.316 20.8617 390.316 18.9297 cv
390.316 16.9967 388.749 15.4287 386.816 15.4287 cv
f
386.918 16.4297 mo
388.299 16.4297 389.418 17.5487 389.418 18.9297 cv
389.418 20.3097 388.299 21.4287 386.918 21.4287 cv
385.537 21.4287 384.418 20.3097 384.418 18.9297 cv
384.418 17.5487 385.537 16.4297 386.918 16.4297 cv
cp
386.918 15.4287 mo
384.985 15.4287 383.418 16.9967 383.418 18.9297 cv
383.418 20.8617 384.985 22.4297 386.918 22.4297 cv
388.851 22.4297 390.418 20.8617 390.418 18.9297 cv
390.418 16.9967 388.851 15.4287 386.918 15.4287 cv
f
387.01 16.4297 mo
388.39 16.4297 389.51 17.5487 389.51 18.9297 cv
389.51 20.3097 388.39 21.4287 387.01 21.4287 cv
385.629 21.4287 384.51 20.3097 384.51 18.9297 cv
384.51 17.5487 385.629 16.4297 387.01 16.4297 cv
cp
387.01 15.4287 mo
385.077 15.4287 383.51 16.9967 383.51 18.9297 cv
383.51 20.8617 385.077 22.4297 387.01 22.4297 cv
388.942 22.4297 390.51 20.8617 390.51 18.9297 cv
390.51 16.9967 388.942 15.4287 387.01 15.4287 cv
f
387.092 16.4297 mo
388.473 16.4297 389.592 17.5487 389.592 18.9297 cv
389.592 20.3097 388.473 21.4287 387.092 21.4287 cv
385.711 21.4287 384.592 20.3097 384.592 18.9297 cv
384.592 17.5487 385.711 16.4297 387.092 16.4297 cv
cp
387.092 15.4287 mo
385.159 15.4287 383.592 16.9967 383.592 18.9297 cv
383.592 20.8617 385.159 22.4297 387.092 22.4297 cv
389.025 22.4297 390.592 20.8617 390.592 18.9297 cv
390.592 16.9967 389.025 15.4287 387.092 15.4287 cv
f
387.166 16.4297 mo
388.547 16.4297 389.665 17.5487 389.665 18.9297 cv
389.665 20.3097 388.547 21.4287 387.166 21.4287 cv
385.785 21.4287 384.666 20.3097 384.666 18.9297 cv
384.666 17.5487 385.785 16.4297 387.166 16.4297 cv
cp
387.166 15.4287 mo
385.233 15.4287 383.665 16.9967 383.665 18.9297 cv
383.665 20.8617 385.233 22.4297 387.166 22.4297 cv
389.099 22.4297 390.666 20.8617 390.666 18.9297 cv
390.666 16.9967 389.099 15.4287 387.166 15.4287 cv
f
387.233 16.4297 mo
388.614 16.4297 389.733 17.5487 389.733 18.9297 cv
389.733 20.3097 388.614 21.4287 387.233 21.4287 cv
385.852 21.4287 384.734 20.3097 384.734 18.9297 cv
384.734 17.5487 385.852 16.4297 387.233 16.4297 cv
cp
387.233 15.4287 mo
385.301 15.4287 383.733 16.9967 383.733 18.9297 cv
383.733 20.8617 385.301 22.4297 387.233 22.4297 cv
389.166 22.4297 390.734 20.8617 390.734 18.9297 cv
390.734 16.9967 389.166 15.4287 387.233 15.4287 cv
f
387.293 16.4297 mo
388.674 16.4297 389.792 17.5487 389.792 18.9297 cv
389.792 20.3097 388.674 21.4287 387.293 21.4287 cv
385.912 21.4287 384.793 20.3097 384.793 18.9297 cv
384.793 17.5487 385.912 16.4297 387.293 16.4297 cv
cp
387.293 15.4287 mo
385.36 15.4287 383.792 16.9967 383.792 18.9297 cv
383.792 20.8617 385.36 22.4297 387.293 22.4297 cv
389.226 22.4297 390.793 20.8617 390.793 18.9297 cv
390.793 16.9967 389.226 15.4287 387.293 15.4287 cv
f
387.348 16.4297 mo
388.728 16.4297 389.847 17.5487 389.847 18.9297 cv
389.847 20.3097 388.728 21.4287 387.348 21.4287 cv
385.967 21.4287 384.848 20.3097 384.848 18.9297 cv
384.848 17.5487 385.967 16.4297 387.348 16.4297 cv
cp
387.348 15.4287 mo
385.415 15.4287 383.847 16.9967 383.847 18.9297 cv
383.847 20.8617 385.415 22.4297 387.348 22.4297 cv
389.281 22.4297 390.848 20.8617 390.848 18.9297 cv
390.848 16.9967 389.281 15.4287 387.348 15.4287 cv
f
387.398 16.4297 mo
388.779 16.4297 389.898 17.5487 389.898 18.9297 cv
389.898 20.3097 388.779 21.4287 387.398 21.4287 cv
386.017 21.4287 384.899 20.3097 384.899 18.9297 cv
384.899 17.5487 386.017 16.4297 387.398 16.4297 cv
cp
387.398 15.4287 mo
385.465 15.4287 383.898 16.9967 383.898 18.9297 cv
383.898 20.8617 385.465 22.4297 387.398 22.4297 cv
389.331 22.4297 390.899 20.8617 390.899 18.9297 cv
390.899 16.9967 389.331 15.4287 387.398 15.4287 cv
f
387.444 16.4297 mo
388.825 16.4297 389.944 17.5487 389.944 18.9297 cv
389.944 20.3097 388.825 21.4287 387.444 21.4287 cv
386.063 21.4287 384.945 20.3097 384.945 18.9297 cv
384.945 17.5487 386.063 16.4297 387.444 16.4297 cv
cp
387.444 15.4287 mo
385.511 15.4287 383.944 16.9967 383.944 18.9297 cv
383.944 20.8617 385.511 22.4297 387.444 22.4297 cv
389.377 22.4297 390.945 20.8617 390.945 18.9297 cv
390.945 16.9967 389.377 15.4287 387.444 15.4287 cv
f
387.486 16.4297 mo
388.867 16.4297 389.986 17.5487 389.986 18.9297 cv
389.986 20.3097 388.867 21.4287 387.486 21.4287 cv
386.106 21.4287 384.986 20.3097 384.986 18.9297 cv
384.986 17.5487 386.106 16.4297 387.486 16.4297 cv
cp
387.486 15.4287 mo
385.554 15.4287 383.986 16.9967 383.986 18.9297 cv
383.986 20.8617 385.554 22.4297 387.486 22.4297 cv
389.419 22.4297 390.986 20.8617 390.986 18.9297 cv
390.986 16.9967 389.419 15.4287 387.486 15.4287 cv
f
387.523 16.4297 mo
388.903 16.4297 390.022 17.5487 390.022 18.9297 cv
390.022 20.3097 388.903 21.4287 387.523 21.4287 cv
386.142 21.4287 385.023 20.3097 385.023 18.9297 cv
385.023 17.5487 386.142 16.4297 387.523 16.4297 cv
cp
387.523 15.4287 mo
385.59 15.4287 384.022 16.9967 384.022 18.9297 cv
384.022 20.8617 385.59 22.4297 387.523 22.4297 cv
389.455 22.4297 391.023 20.8617 391.023 18.9297 cv
391.023 16.9967 389.455 15.4287 387.523 15.4287 cv
f
387.556 16.4297 mo
388.937 16.4297 390.056 17.5487 390.056 18.9297 cv
390.056 20.3097 388.937 21.4287 387.556 21.4287 cv
386.176 21.4287 385.056 20.3097 385.056 18.9297 cv
385.056 17.5487 386.176 16.4297 387.556 16.4297 cv
cp
387.556 15.4287 mo
385.623 15.4287 384.056 16.9967 384.056 18.9297 cv
384.056 20.8617 385.623 22.4297 387.556 22.4297 cv
389.489 22.4297 391.056 20.8617 391.056 18.9297 cv
391.056 16.9967 389.489 15.4287 387.556 15.4287 cv
f
387.586 16.4297 mo
388.967 16.4297 390.085 17.5487 390.085 18.9297 cv
390.085 20.3097 388.967 21.4287 387.586 21.4287 cv
386.205 21.4287 385.086 20.3097 385.086 18.9297 cv
385.086 17.5487 386.205 16.4297 387.586 16.4297 cv
cp
387.586 15.4287 mo
385.653 15.4287 384.085 16.9967 384.085 18.9297 cv
384.085 20.8617 385.653 22.4297 387.586 22.4297 cv
389.518 22.4297 391.086 20.8617 391.086 18.9297 cv
391.086 16.9967 389.518 15.4287 387.586 15.4287 cv
f
387.613 16.4297 mo
388.994 16.4297 390.113 17.5487 390.113 18.9297 cv
390.113 20.3097 388.994 21.4287 387.613 21.4287 cv
386.233 21.4287 385.114 20.3097 385.114 18.9297 cv
385.114 17.5487 386.233 16.4297 387.613 16.4297 cv
cp
387.613 15.4287 mo
385.681 15.4287 384.113 16.9967 384.113 18.9297 cv
384.113 20.8617 385.681 22.4297 387.613 22.4297 cv
389.546 22.4297 391.114 20.8617 391.114 18.9297 cv
391.114 16.9967 389.546 15.4287 387.613 15.4287 cv
f
387.637 16.4297 mo
389.018 16.4297 390.136 17.5487 390.136 18.9297 cv
390.136 20.3097 389.018 21.4287 387.637 21.4287 cv
386.256 21.4287 385.137 20.3097 385.137 18.9297 cv
385.137 17.5487 386.256 16.4297 387.637 16.4297 cv
cp
387.637 15.4287 mo
385.704 15.4287 384.136 16.9967 384.136 18.9297 cv
384.136 20.8617 385.704 22.4297 387.637 22.4297 cv
389.57 22.4297 391.137 20.8617 391.137 18.9297 cv
391.137 16.9967 389.57 15.4287 387.637 15.4287 cv
f
387.659 16.4297 mo
389.04 16.4297 390.159 17.5487 390.159 18.9297 cv
390.159 20.3097 389.04 21.4287 387.659 21.4287 cv
386.278 21.4287 385.16 20.3097 385.16 18.9297 cv
385.16 17.5487 386.278 16.4297 387.659 16.4297 cv
cp
387.659 15.4287 mo
385.726 15.4287 384.159 16.9967 384.159 18.9297 cv
384.159 20.8617 385.726 22.4297 387.659 22.4297 cv
389.592 22.4297 391.16 20.8617 391.16 18.9297 cv
391.16 16.9967 389.592 15.4287 387.659 15.4287 cv
f
387.677 16.4297 mo
389.058 16.4297 390.177 17.5487 390.177 18.9297 cv
390.177 20.3097 389.058 21.4287 387.677 21.4287 cv
386.297 21.4287 385.178 20.3097 385.178 18.9297 cv
385.178 17.5487 386.297 16.4297 387.677 16.4297 cv
cp
387.677 15.4287 mo
385.745 15.4287 384.177 16.9967 384.177 18.9297 cv
384.177 20.8617 385.745 22.4297 387.677 22.4297 cv
389.61 22.4297 391.178 20.8617 391.178 18.9297 cv
391.178 16.9967 389.61 15.4287 387.677 15.4287 cv
f
387.695 16.4297 mo
389.076 16.4297 390.194 17.5487 390.194 18.9297 cv
390.194 20.3097 389.076 21.4287 387.695 21.4287 cv
386.314 21.4287 385.195 20.3097 385.195 18.9297 cv
385.195 17.5487 386.314 16.4297 387.695 16.4297 cv
cp
387.695 15.4287 mo
385.762 15.4287 384.194 16.9967 384.194 18.9297 cv
384.194 20.8617 385.762 22.4297 387.695 22.4297 cv
389.627 22.4297 391.195 20.8617 391.195 18.9297 cv
391.195 16.9967 389.627 15.4287 387.695 15.4287 cv
f
387.71 16.4297 mo
389.091 16.4297 390.21 17.5487 390.21 18.9297 cv
390.21 20.3097 389.091 21.4287 387.71 21.4287 cv
386.329 21.4287 385.21 20.3097 385.21 18.9297 cv
385.21 17.5487 386.329 16.4297 387.71 16.4297 cv
cp
387.71 15.4287 mo
385.777 15.4287 384.21 16.9967 384.21 18.9297 cv
384.21 20.8617 385.777 22.4297 387.71 22.4297 cv
389.643 22.4297 391.21 20.8617 391.21 18.9297 cv
391.21 16.9967 389.643 15.4287 387.71 15.4287 cv
f
387.724 16.4297 mo
389.104 16.4297 390.223 17.5487 390.223 18.9297 cv
390.223 20.3097 389.104 21.4287 387.724 21.4287 cv
386.343 21.4287 385.224 20.3097 385.224 18.9297 cv
385.224 17.5487 386.343 16.4297 387.724 16.4297 cv
cp
387.724 15.4287 mo
385.791 15.4287 384.223 16.9967 384.223 18.9297 cv
384.223 20.8617 385.791 22.4297 387.724 22.4297 cv
389.656 22.4297 391.224 20.8617 391.224 18.9297 cv
391.224 16.9967 389.656 15.4287 387.724 15.4287 cv
f
387.735 16.4297 mo
389.116 16.4297 390.235 17.5487 390.235 18.9297 cv
390.235 20.3097 389.116 21.4287 387.735 21.4287 cv
386.354 21.4287 385.236 20.3097 385.236 18.9297 cv
385.236 17.5487 386.354 16.4297 387.735 16.4297 cv
cp
387.735 15.4287 mo
385.802 15.4287 384.235 16.9967 384.235 18.9297 cv
384.235 20.8617 385.802 22.4297 387.735 22.4297 cv
389.668 22.4297 391.236 20.8617 391.236 18.9297 cv
391.236 16.9967 389.668 15.4287 387.735 15.4287 cv
f
387.746 16.4297 mo
389.127 16.4297 390.246 17.5487 390.246 18.9297 cv
390.246 20.3097 389.127 21.4287 387.746 21.4287 cv
386.366 21.4287 385.247 20.3097 385.247 18.9297 cv
385.247 17.5487 386.366 16.4297 387.746 16.4297 cv
cp
387.746 15.4287 mo
385.814 15.4287 384.246 16.9967 384.246 18.9297 cv
384.246 20.8617 385.814 22.4297 387.746 22.4297 cv
389.679 22.4297 391.247 20.8617 391.247 18.9297 cv
391.247 16.9967 389.679 15.4287 387.746 15.4287 cv
f
387.756 16.4297 mo
389.137 16.4297 390.256 17.5487 390.256 18.9297 cv
390.256 20.3097 389.137 21.4287 387.756 21.4287 cv
386.376 21.4287 385.256 20.3097 385.256 18.9297 cv
385.256 17.5487 386.376 16.4297 387.756 16.4297 cv
cp
387.756 15.4287 mo
385.824 15.4287 384.256 16.9967 384.256 18.9297 cv
384.256 20.8617 385.824 22.4297 387.756 22.4297 cv
389.689 22.4297 391.256 20.8617 391.256 18.9297 cv
391.256 16.9967 389.689 15.4287 387.756 15.4287 cv
f
387.764 16.4297 mo
389.145 16.4297 390.264 17.5487 390.264 18.9297 cv
390.264 20.3097 389.145 21.4287 387.764 21.4287 cv
386.384 21.4287 385.265 20.3097 385.265 18.9297 cv
385.265 17.5487 386.384 16.4297 387.764 16.4297 cv
cp
387.764 15.4287 mo
385.831 15.4287 384.264 16.9967 384.264 18.9297 cv
384.264 20.8617 385.831 22.4297 387.764 22.4297 cv
389.697 22.4297 391.265 20.8617 391.265 18.9297 cv
391.265 16.9967 389.697 15.4287 387.764 15.4287 cv
f
387.772 16.4297 mo
389.152 16.4297 390.272 17.5487 390.272 18.9297 cv
390.272 20.3097 389.152 21.4287 387.772 21.4287 cv
386.391 21.4287 385.272 20.3097 385.272 18.9297 cv
385.272 17.5487 386.391 16.4297 387.772 16.4297 cv
cp
387.772 15.4287 mo
385.839 15.4287 384.272 16.9967 384.272 18.9297 cv
384.272 20.8617 385.839 22.4297 387.772 22.4297 cv
389.704 22.4297 391.272 20.8617 391.272 18.9297 cv
391.272 16.9967 389.704 15.4287 387.772 15.4287 cv
f
387.778 16.4297 mo
389.159 16.4297 390.278 17.5487 390.278 18.9297 cv
390.278 20.3097 389.159 21.4287 387.778 21.4287 cv
386.397 21.4287 385.279 20.3097 385.279 18.9297 cv
385.279 17.5487 386.397 16.4297 387.778 16.4297 cv
cp
387.778 15.4287 mo
385.845 15.4287 384.278 16.9967 384.278 18.9297 cv
384.278 20.8617 385.845 22.4297 387.778 22.4297 cv
389.711 22.4297 391.279 20.8617 391.279 18.9297 cv
391.279 16.9967 389.711 15.4287 387.778 15.4287 cv
f
387.784 16.4297 mo
389.165 16.4297 390.284 17.5487 390.284 18.9297 cv
390.284 20.3097 389.165 21.4287 387.784 21.4287 cv
386.403 21.4287 385.284 20.3097 385.284 18.9297 cv
385.284 17.5487 386.403 16.4297 387.784 16.4297 cv
cp
387.784 15.4287 mo
385.851 15.4287 384.284 16.9967 384.284 18.9297 cv
384.284 20.8617 385.851 22.4297 387.784 22.4297 cv
389.717 22.4297 391.284 20.8617 391.284 18.9297 cv
391.284 16.9967 389.717 15.4287 387.784 15.4287 cv
f
387.789 16.3367 mo
389.17 16.3367 390.289 17.4557 390.289 18.8367 cv
390.289 20.2177 389.17 21.3367 387.789 21.3367 cv
386.408 21.3367 385.289 20.2177 385.289 18.8367 cv
385.289 17.4557 386.408 16.3367 387.789 16.3367 cv
cp
387.789 15.3367 mo
385.856 15.3367 384.289 16.9037 384.289 18.8367 cv
384.289 20.7697 385.856 22.3367 387.789 22.3367 cv
389.722 22.3367 391.289 20.7697 391.289 18.8367 cv
391.289 16.9037 389.722 15.3367 387.789 15.3367 cv
f
387.793 16.3367 mo
389.174 16.3367 390.293 17.4557 390.293 18.8367 cv
390.293 20.2177 389.174 21.3367 387.793 21.3367 cv
386.413 21.3367 385.293 20.2177 385.293 18.8367 cv
385.293 17.4557 386.413 16.3367 387.793 16.3367 cv
cp
387.793 15.3367 mo
385.86 15.3367 384.293 16.9037 384.293 18.8367 cv
384.293 20.7697 385.86 22.3367 387.793 22.3367 cv
389.726 22.3367 391.293 20.7697 391.293 18.8367 cv
391.293 16.9037 389.726 15.3367 387.793 15.3367 cv
f
387.797 16.3367 mo
389.178 16.3367 390.297 17.4557 390.297 18.8367 cv
390.297 20.2177 389.178 21.3367 387.797 21.3367 cv
386.417 21.3367 385.297 20.2177 385.297 18.8367 cv
385.297 17.4557 386.417 16.3367 387.797 16.3367 cv
cp
387.797 15.3367 mo
385.865 15.3367 384.297 16.9037 384.297 18.8367 cv
384.297 20.7697 385.865 22.3367 387.797 22.3367 cv
389.73 22.3367 391.297 20.7697 391.297 18.8367 cv
391.297 16.9037 389.73 15.3367 387.797 15.3367 cv
f
387.801 16.3367 mo
389.181 16.3367 390.3 17.4557 390.3 18.8367 cv
390.3 20.2177 389.181 21.3367 387.801 21.3367 cv
386.42 21.3367 385.301 20.2177 385.301 18.8367 cv
385.301 17.4557 386.42 16.3367 387.801 16.3367 cv
cp
387.801 15.3367 mo
385.868 15.3367 384.3 16.9037 384.3 18.8367 cv
384.3 20.7697 385.868 22.3367 387.801 22.3367 cv
389.733 22.3367 391.301 20.7697 391.301 18.8367 cv
391.301 16.9037 389.733 15.3367 387.801 15.3367 cv
f
387.803 16.3367 mo
389.184 16.3367 390.303 17.4557 390.303 18.8367 cv
390.303 20.2177 389.184 21.3367 387.803 21.3367 cv
386.423 21.3367 385.304 20.2177 385.304 18.8367 cv
385.304 17.4557 386.423 16.3367 387.803 16.3367 cv
cp
387.803 15.3367 mo
385.871 15.3367 384.303 16.9037 384.303 18.8367 cv
384.303 20.7697 385.871 22.3367 387.803 22.3367 cv
389.736 22.3367 391.304 20.7697 391.304 18.8367 cv
391.304 16.9037 389.736 15.3367 387.803 15.3367 cv
f
387.806 16.3367 mo
389.187 16.3367 390.306 17.4557 390.306 18.8367 cv
390.306 20.2177 389.187 21.3367 387.806 21.3367 cv
386.425 21.3367 385.306 20.2177 385.306 18.8367 cv
385.306 17.4557 386.425 16.3367 387.806 16.3367 cv
cp
387.806 15.3367 mo
385.873 15.3367 384.306 16.9037 384.306 18.8367 cv
384.306 20.7697 385.873 22.3367 387.806 22.3367 cv
389.739 22.3367 391.306 20.7697 391.306 18.8367 cv
391.306 16.9037 389.739 15.3367 387.806 15.3367 cv
f
387.808 16.3367 mo
389.189 16.3367 390.308 17.4557 390.308 18.8367 cv
390.308 20.2177 389.189 21.3367 387.808 21.3367 cv
386.427 21.3367 385.309 20.2177 385.309 18.8367 cv
385.309 17.4557 386.427 16.3367 387.808 16.3367 cv
cp
387.808 15.3367 mo
385.876 15.3367 384.308 16.9037 384.308 18.8367 cv
384.308 20.7697 385.876 22.3367 387.808 22.3367 cv
389.741 22.3367 391.309 20.7697 391.309 18.8367 cv
391.309 16.9037 389.741 15.3367 387.808 15.3367 cv
f
387.81 16.3367 mo
389.191 16.3367 390.31 17.4557 390.31 18.8367 cv
390.31 20.2177 389.191 21.3367 387.81 21.3367 cv
386.429 21.3367 385.31 20.2177 385.31 18.8367 cv
385.31 17.4557 386.429 16.3367 387.81 16.3367 cv
cp
387.81 15.3367 mo
385.877 15.3367 384.31 16.9037 384.31 18.8367 cv
384.31 20.7697 385.877 22.3367 387.81 22.3367 cv
389.743 22.3367 391.31 20.7697 391.31 18.8367 cv
391.31 16.9037 389.743 15.3367 387.81 15.3367 cv
f
387.811 16.3367 mo
389.192 16.3367 390.311 17.4557 390.311 18.8367 cv
390.311 20.2177 389.192 21.3367 387.811 21.3367 cv
386.431 21.3367 385.312 20.2177 385.312 18.8367 cv
385.312 17.4557 386.431 16.3367 387.811 16.3367 cv
cp
387.811 15.3367 mo
385.879 15.3367 384.311 16.9037 384.311 18.8367 cv
384.311 20.7697 385.879 22.3367 387.811 22.3367 cv
389.744 22.3367 391.312 20.7697 391.312 18.8367 cv
391.312 16.9037 389.744 15.3367 387.811 15.3367 cv
f
387.813 16.3367 mo
389.194 16.3367 390.313 17.4557 390.313 18.8367 cv
390.313 20.2177 389.194 21.3367 387.813 21.3367 cv
386.432 21.3367 385.313 20.2177 385.313 18.8367 cv
385.313 17.4557 386.432 16.3367 387.813 16.3367 cv
cp
387.813 15.3367 mo
385.88 15.3367 384.313 16.9037 384.313 18.8367 cv
384.313 20.7697 385.88 22.3367 387.813 22.3367 cv
389.746 22.3367 391.313 20.7697 391.313 18.8367 cv
391.313 16.9037 389.746 15.3367 387.813 15.3367 cv
f
387.815 16.3367 mo
389.195 16.3367 390.314 17.4557 390.314 18.8367 cv
390.314 20.2177 389.195 21.3367 387.815 21.3367 cv
386.434 21.3367 385.315 20.2177 385.315 18.8367 cv
385.315 17.4557 386.434 16.3367 387.815 16.3367 cv
cp
387.815 15.3367 mo
385.882 15.3367 384.314 16.9037 384.314 18.8367 cv
384.314 20.7697 385.882 22.3367 387.815 22.3367 cv
389.747 22.3367 391.315 20.7697 391.315 18.8367 cv
391.315 16.9037 389.747 15.3367 387.815 15.3367 cv
f
387.815 16.3367 mo
389.196 16.3367 390.315 17.4557 390.315 18.8367 cv
390.315 20.2177 389.196 21.3367 387.815 21.3367 cv
386.435 21.3367 385.316 20.2177 385.316 18.8367 cv
385.316 17.4557 386.435 16.3367 387.815 16.3367 cv
cp
387.815 15.3367 mo
385.883 15.3367 384.315 16.9037 384.315 18.8367 cv
384.315 20.7697 385.883 22.3367 387.815 22.3367 cv
389.748 22.3367 391.316 20.7697 391.316 18.8367 cv
391.316 16.9037 389.748 15.3367 387.815 15.3367 cv
f
387.817 16.3367 mo
389.197 16.3367 390.316 17.4557 390.316 18.8367 cv
390.316 20.2177 389.197 21.3367 387.817 21.3367 cv
386.436 21.3367 385.317 20.2177 385.317 18.8367 cv
385.317 17.4557 386.436 16.3367 387.817 16.3367 cv
cp
387.817 15.3367 mo
385.884 15.3367 384.316 16.9037 384.316 18.8367 cv
384.316 20.7697 385.884 22.3367 387.817 22.3367 cv
389.749 22.3367 391.317 20.7697 391.317 18.8367 cv
391.317 16.9037 389.749 15.3367 387.817 15.3367 cv
f
387.817 16.3367 mo
389.198 16.3367 390.317 17.4557 390.317 18.8367 cv
390.317 20.2177 389.198 21.3367 387.817 21.3367 cv
386.436 21.3367 385.318 20.2177 385.318 18.8367 cv
385.318 17.4557 386.436 16.3367 387.817 16.3367 cv
cp
387.817 15.3367 mo
385.885 15.3367 384.317 16.9037 384.317 18.8367 cv
384.317 20.7697 385.885 22.3367 387.817 22.3367 cv
389.75 22.3367 391.318 20.7697 391.318 18.8367 cv
391.318 16.9037 389.75 15.3367 387.817 15.3367 cv
f
387.818 16.3367 mo
389.199 16.3367 390.318 17.4557 390.318 18.8367 cv
390.318 20.2177 389.199 21.3367 387.818 21.3367 cv
386.438 21.3367 385.318 20.2177 385.318 18.8367 cv
385.318 17.4557 386.438 16.3367 387.818 16.3367 cv
cp
387.818 15.3367 mo
385.885 15.3367 384.318 16.9037 384.318 18.8367 cv
384.318 20.7697 385.885 22.3367 387.818 22.3367 cv
389.751 22.3367 391.318 20.7697 391.318 18.8367 cv
391.318 16.9037 389.751 15.3367 387.818 15.3367 cv
f
387.819 16.3367 mo
389.2 16.3367 390.318 17.4557 390.318 18.8367 cv
390.318 20.2177 389.2 21.3367 387.819 21.3367 cv
386.438 21.3367 385.319 20.2177 385.319 18.8367 cv
385.319 17.4557 386.438 16.3367 387.819 16.3367 cv
cp
387.819 15.3367 mo
385.886 15.3367 384.318 16.9037 384.318 18.8367 cv
384.318 20.7697 385.886 22.3367 387.819 22.3367 cv
389.752 22.3367 391.319 20.7697 391.319 18.8367 cv
391.319 16.9037 389.752 15.3367 387.819 15.3367 cv
f
387.819 16.3367 mo
389.2 16.3367 390.319 17.4557 390.319 18.8367 cv
390.319 20.2177 389.2 21.3367 387.819 21.3367 cv
386.439 21.3367 385.32 20.2177 385.32 18.8367 cv
385.32 17.4557 386.439 16.3367 387.819 16.3367 cv
cp
387.819 15.3367 mo
385.887 15.3367 384.319 16.9037 384.319 18.8367 cv
384.319 20.7697 385.887 22.3367 387.819 22.3367 cv
389.752 22.3367 391.32 20.7697 391.32 18.8367 cv
391.32 16.9037 389.752 15.3367 387.819 15.3367 cv
f
387.82 16.3367 mo
389.201 16.3367 390.32 17.4557 390.32 18.8367 cv
390.32 20.2177 389.201 21.3367 387.82 21.3367 cv
386.439 21.3367 385.32 20.2177 385.32 18.8367 cv
385.32 17.4557 386.439 16.3367 387.82 16.3367 cv
cp
387.82 15.3367 mo
385.887 15.3367 384.32 16.9037 384.32 18.8367 cv
384.32 20.7697 385.887 22.3367 387.82 22.3367 cv
389.752 22.3367 391.32 20.7697 391.32 18.8367 cv
391.32 16.9037 389.752 15.3367 387.82 15.3367 cv
f
387.82 16.3367 mo
389.201 16.3367 390.32 17.4557 390.32 18.8367 cv
390.32 20.2177 389.201 21.3367 387.82 21.3367 cv
386.439 21.3367 385.32 20.2177 385.32 18.8367 cv
385.32 17.4557 386.439 16.3367 387.82 16.3367 cv
cp
387.82 15.3367 mo
385.887 15.3367 384.32 16.9037 384.32 18.8367 cv
384.32 20.7697 385.887 22.3367 387.82 22.3367 cv
389.753 22.3367 391.32 20.7697 391.32 18.8367 cv
391.32 16.9037 389.753 15.3367 387.82 15.3367 cv
f
387.82 16.3367 mo
389.201 16.3367 390.32 17.4557 390.32 18.8367 cv
390.32 20.2177 389.201 21.3367 387.82 21.3367 cv
386.44 21.3367 385.321 20.2177 385.321 18.8367 cv
385.321 17.4557 386.44 16.3367 387.82 16.3367 cv
cp
387.82 15.3367 mo
385.888 15.3367 384.32 16.9037 384.32 18.8367 cv
384.32 20.7697 385.888 22.3367 387.82 22.3367 cv
389.753 22.3367 391.321 20.7697 391.321 18.8367 cv
391.321 16.9037 389.753 15.3367 387.82 15.3367 cv
f
387.821 16.3367 mo
389.201 16.3367 390.32 17.4557 390.32 18.8367 cv
390.32 20.2177 389.201 21.3367 387.821 21.3367 cv
386.44 21.3367 385.321 20.2177 385.321 18.8367 cv
385.321 17.4557 386.44 16.3367 387.821 16.3367 cv
cp
387.821 15.3367 mo
385.888 15.3367 384.32 16.9037 384.32 18.8367 cv
384.32 20.7697 385.888 22.3367 387.821 22.3367 cv
389.753 22.3367 391.321 20.7697 391.321 18.8367 cv
391.321 16.9037 389.753 15.3367 387.821 15.3367 cv
f
387.821 16.3367 mo
389.202 16.3367 390.32 17.4557 390.32 18.8367 cv
390.32 20.2177 389.202 21.3367 387.821 21.3367 cv
386.44 21.3367 385.321 20.2177 385.321 18.8367 cv
385.321 17.4557 386.44 16.3367 387.821 16.3367 cv
cp
387.821 15.3367 mo
385.888 15.3367 384.32 16.9037 384.32 18.8367 cv
384.32 20.7697 385.888 22.3367 387.821 22.3367 cv
389.754 22.3367 391.321 20.7697 391.321 18.8367 cv
391.321 16.9037 389.754 15.3367 387.821 15.3367 cv
f
387.821 16.3367 mo
389.202 16.3367 390.321 17.4557 390.321 18.8367 cv
390.321 20.2177 389.202 21.3367 387.821 21.3367 cv
386.44 21.3367 385.321 20.2177 385.321 18.8367 cv
385.321 17.4557 386.44 16.3367 387.821 16.3367 cv
cp
387.821 15.3367 mo
385.888 15.3367 384.321 16.9037 384.321 18.8367 cv
384.321 20.7697 385.888 22.3367 387.821 22.3367 cv
389.754 22.3367 391.321 20.7697 391.321 18.8367 cv
391.321 16.9037 389.754 15.3367 387.821 15.3367 cv
f
387.821 16.3367 mo
389.202 16.3367 390.321 17.4557 390.321 18.8367 cv
390.321 20.2177 389.202 21.3367 387.821 21.3367 cv
386.44 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.44 16.3367 387.821 16.3367 cv
cp
387.821 15.3367 mo
385.888 15.3367 384.321 16.9037 384.321 18.8367 cv
384.321 20.7697 385.888 22.3367 387.821 22.3367 cv
389.754 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.754 15.3367 387.821 15.3367 cv
f
387.821 16.3367 mo
389.202 16.3367 390.321 17.4557 390.321 18.8367 cv
390.321 20.2177 389.202 21.3367 387.821 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.821 16.3367 cv
cp
387.821 15.3367 mo
385.889 15.3367 384.321 16.9037 384.321 18.8367 cv
384.321 20.7697 385.889 22.3367 387.821 22.3367 cv
389.754 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.754 15.3367 387.821 15.3367 cv
f
387.822 16.3367 mo
389.202 16.3367 390.321 17.4557 390.321 18.8367 cv
390.321 20.2177 389.202 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.321 16.9037 384.321 18.8367 cv
384.321 20.7697 385.889 22.3367 387.822 22.3367 cv
389.754 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.754 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.202 16.3367 390.321 17.4557 390.321 18.8367 cv
390.321 20.2177 389.202 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.321 16.9037 384.321 18.8367 cv
384.321 20.7697 385.889 22.3367 387.822 22.3367 cv
389.754 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.754 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.202 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.202 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.754 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.754 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.202 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.202 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.754 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.754 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.202 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.202 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.754 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.754 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.202 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.202 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.754 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.754 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.202 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.202 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.755 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.755 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.203 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.203 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.755 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.755 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.203 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.203 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.755 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.755 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.203 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.203 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.755 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.755 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.203 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.203 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.755 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.755 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.203 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.203 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.755 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.755 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.203 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.203 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.755 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.755 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.203 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.203 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.755 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.755 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.203 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.203 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.755 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.755 15.3367 387.822 15.3367 cv
f
387.822 16.3367 mo
389.203 16.3367 390.322 17.4557 390.322 18.8367 cv
390.322 20.2177 389.203 21.3367 387.822 21.3367 cv
386.441 21.3367 385.322 20.2177 385.322 18.8367 cv
385.322 17.4557 386.441 16.3367 387.822 16.3367 cv
cp
387.822 15.3367 mo
385.889 15.3367 384.322 16.9037 384.322 18.8367 cv
384.322 20.7697 385.889 22.3367 387.822 22.3367 cv
389.755 22.3367 391.322 20.7697 391.322 18.8367 cv
391.322 16.9037 389.755 15.3367 387.822 15.3367 cv
f
117.072 247.587 mo
379.572 247.587 li
379.572 202.587 li
117.072 202.587 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
IGPSRW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E2
2FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D216
1CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361
A4431D76AF6F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IGPSRW+Helvetica /Encoding get
dup 37 /percent put
dup 58 /colon put
dup 59 /semicolon put
dup 68 /D put
dup 69 /E put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 111 /o put
dup 114 /r put
pop
%ADOEndSubsetFont
/IGPSRW+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 2{/.notdef}rp /D 
/E /F /G 10{/.notdef}rp /R 8{/.notdef}rp /bracketleft /.notdef 
/bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef 
/r /s /t /u 138{/.notdef}rp]
IGPSRW+Helvetica nf
IGPSRW+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
152.322 220.488 mo
(Detector [35]; EER: 6.51%)
[12.2741 9.45212 4.72604 9.45212 8.50009 4.72606 9.4521 5.66095 4.72604 4.72606 9.4521 9.45212 
4.72604 4.72607 4.72604 11.3393 11.3392 12.2742 4.72604 4.72604 9.45212 4.72604 9.45212 9.45212 
0 ]xsh
120.072 214.488 mo
150.072 214.488 li
.895628 .7673 0 0 cmyk
@
0 lj
135.072 211.488 mo
135.072 217.488 li
132.072 214.488 mo
138.072 214.488 li
132.951 212.366 mo
137.193 216.609 li
132.951 216.609 mo
137.193 212.366 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
IGPSRW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IGPSRW+Helvetica /Encoding get
dup 79 /O put
pop
%ADOEndSubsetFont
/IGPSRW+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 2{/.notdef}rp /D 
/E /F /G 7{/.notdef}rp /O 2{/.notdef}rp /R 8{/.notdef}rp 
/bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef 
/e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /s /t /u 138{/.notdef}rp]
IGPSRW+Helvetica nf
IGPSRW+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
152.322 241.686 mo
(Our D)sh
197.661 241.686 mo
(etector; E)sh
270.422 241.686 mo
(ER: 1.33%)
[11.3393 12.2741 4.72607 4.72607 9.45209 4.72607 9.45209 9.45209 0 ]xsh
1 lj
120.072 235.686 mo
150.072 235.686 li
0 .990631 1 .000396735 cmyk
@
135.072 233.186 mo
136.453 233.186 137.572 234.305 137.572 235.686 cv
137.572 237.067 136.453 238.186 135.072 238.186 cv
133.691 238.186 132.572 237.067 132.572 235.686 cv
132.572 234.305 133.691 233.186 135.072 233.186 cv
cp
135.072 232.186 mo
133.139 232.186 131.572 233.753 131.572 235.686 cv
131.572 237.619 133.139 239.186 135.072 239.186 cv
137.005 239.186 138.572 237.619 138.572 235.686 cv
138.572 233.753 137.005 232.186 135.072 232.186 cv
f
0 lj
117.072 247.587 mo
379.572 247.587 li
379.572 202.587 li
117.072 202.587 li
cp
1 /0 /CSD get_res sepcs
.851074 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/IGPSRX+Helvetica-Bold*1 uf
/IGPSRX+Helvetica-Bold uf
/JAAAAA+Helvetica-Bold uf
/IGPSRW+Helvetica*1 uf
/IGPSRW+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
