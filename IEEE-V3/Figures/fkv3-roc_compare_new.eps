%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fkv3-roc_compare_new.eps-65017.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/16/2022, 11:10:07 AM
%%BoundingBox: 0 0 506 420
%%HiResBoundingBox: 0 0 505.3083 419.7165
%%CropBox: 0 0 505.3083 419.7165
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 971 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-16T11:09:41+08:00"
   xmp:CreateDate="2022-08-16T11:09:41+08:00"
   xmp:CreatorTool="Adobe Acrobat 20.6.0"
   xmpMM:DocumentID="uuid:5ea986f1-1f6c-11ed-0000-8e2278aa72f1"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">fkv3-roc_compare_new.eps-51380.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>ZhenyuZHOU</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -419.716 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 419.716 li
505.308 419.716 li
505.308 0 li
cp
clp
-29.7986 422.49 mo
546.201 422.49 li
546.201 -9.51016 li
-29.7986 -9.51016 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
-29.7986 422.49 mo
546.201 422.49 li
546.201 -9.51016 li
-29.7986 -9.51016 li
cp
f
45.2014 375.24 mo
491.451 375.24 li
491.451 22.7398 li
45.2014 22.7398 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
45.9823 375.24 mo
45.9823 22.7398 li
1 /0 /CSD get_res sepcs
.224609 sep
@
50.9936 375.24 mo
50.9936 22.7398 li
@
55.4143 375.24 mo
55.4143 22.7398 li
@
85.3814 375.24 mo
85.3814 22.7398 li
@
100.599 375.24 mo
100.599 22.7398 li
@
111.396 375.24 mo
111.396 22.7398 li
@
119.771 375.24 mo
119.771 22.7398 li
@
126.613 375.24 mo
126.613 22.7398 li
@
132.398 375.24 mo
132.398 22.7398 li
@
137.41 375.24 mo
137.41 22.7398 li
@
141.83 375.24 mo
141.83 22.7398 li
@
145.784 375.24 mo
145.784 22.7398 li
@
171.799 375.24 mo
171.799 22.7398 li
@
187.015 375.24 mo
187.015 22.7398 li
@
197.812 375.24 mo
197.812 22.7398 li
@
206.187 375.24 mo
206.187 22.7398 li
@
213.03 375.24 mo
213.03 22.7398 li
@
218.815 375.24 mo
218.815 22.7398 li
@
223.826 375.24 mo
223.826 22.7398 li
@
228.247 375.24 mo
228.247 22.7398 li
@
258.215 375.24 mo
258.215 22.7398 li
@
273.432 375.24 mo
273.432 22.7398 li
@
284.229 375.24 mo
284.229 22.7398 li
@
292.603 375.24 mo
292.603 22.7398 li
@
299.446 375.24 mo
299.446 22.7398 li
@
305.231 375.24 mo
305.231 22.7398 li
@
310.243 375.24 mo
310.243 22.7398 li
@
314.663 375.24 mo
314.663 22.7398 li
@
344.632 375.24 mo
344.632 22.7398 li
@
359.849 375.24 mo
359.849 22.7398 li
@
370.646 375.24 mo
370.646 22.7398 li
@
379.021 375.24 mo
379.021 22.7398 li
@
385.863 375.24 mo
385.863 22.7398 li
@
391.649 375.24 mo
391.649 22.7398 li
@
396.66 375.24 mo
396.66 22.7398 li
@
401.08 375.24 mo
401.08 22.7398 li
@
431.048 375.24 mo
431.048 22.7398 li
@
446.266 375.24 mo
446.266 22.7398 li
@
457.062 375.24 mo
457.062 22.7398 li
@
465.437 375.24 mo
465.437 22.7398 li
@
472.28 375.24 mo
472.28 22.7398 li
@
478.065 375.24 mo
478.065 22.7398 li
@
483.076 375.24 mo
483.076 22.7398 li
@
487.497 375.24 mo
487.497 22.7398 li
@
1 lj
[] 0 dsh
59.3682 375.24 mo
59.3682 22.7398 li
1 /0 /CSD get_res sepcs
.126953 sep
@
145.784 375.24 mo
145.784 22.7398 li
@
232.201 375.24 mo
232.201 22.7398 li
@
318.618 375.24 mo
318.618 22.7398 li
@
405.035 375.24 mo
405.035 22.7398 li
@
491.451 375.24 mo
491.451 22.7398 li
@
491.451 375.24 mo
45.2014 375.24 li
@
491.451 339.99 mo
45.2014 339.99 li
@
491.451 304.74 mo
45.2014 304.74 li
@
491.451 269.49 mo
45.2014 269.49 li
@
491.451 234.24 mo
45.2014 234.24 li
@
491.451 198.99 mo
45.2014 198.99 li
@
491.451 163.74 mo
45.2014 163.74 li
@
491.451 128.49 mo
45.2014 128.49 li
@
491.451 93.2398 mo
45.2014 93.2398 li
@
491.451 57.9898 mo
45.2014 57.9898 li
@
491.451 22.7398 mo
45.2014 22.7398 li
@
2 lc
45.2014 375.24 mo
491.451 375.24 li
1 /0 /CSD get_res sepcs
.851563 sep
@
45.2014 22.7398 mo
491.451 22.7398 li
@
59.3682 375.24 mo
59.3682 370.778 li
@
145.784 375.24 mo
145.784 370.778 li
@
232.201 375.24 mo
232.201 370.778 li
@
318.618 375.24 mo
318.618 370.778 li
@
405.035 375.24 mo
405.035 370.778 li
@
491.451 375.24 mo
491.451 370.778 li
@
59.3682 22.7398 mo
59.3682 27.2018 li
@
145.784 22.7398 mo
145.784 27.2018 li
@
232.201 22.7398 mo
232.201 27.2018 li
@
318.618 22.7398 mo
318.618 27.2018 li
@
405.035 22.7398 mo
405.035 27.2018 li
@
491.451 22.7398 mo
491.451 27.2018 li
@
45.9823 375.24 mo
45.9823 373.009 li
@
50.9936 375.24 mo
50.9936 373.009 li
@
55.4143 375.24 mo
55.4143 373.009 li
@
59.3682 375.24 mo
59.3682 373.009 li
@
85.3814 375.24 mo
85.3814 373.009 li
@
100.599 375.24 mo
100.599 373.009 li
@
111.396 375.24 mo
111.396 373.009 li
@
119.771 375.24 mo
119.771 373.009 li
@
126.613 375.24 mo
126.613 373.009 li
@
132.398 375.24 mo
132.398 373.009 li
@
137.41 375.24 mo
137.41 373.009 li
@
141.83 375.24 mo
141.83 373.009 li
@
145.784 375.24 mo
145.784 373.009 li
@
145.784 375.24 mo
145.784 373.009 li
@
171.799 375.24 mo
171.799 373.009 li
@
187.015 375.24 mo
187.015 373.009 li
@
197.812 375.24 mo
197.812 373.009 li
@
206.187 375.24 mo
206.187 373.009 li
@
213.03 375.24 mo
213.03 373.009 li
@
218.815 375.24 mo
218.815 373.009 li
@
223.826 375.24 mo
223.826 373.009 li
@
228.247 375.24 mo
228.247 373.009 li
@
232.201 375.24 mo
232.201 373.009 li
@
258.215 375.24 mo
258.215 373.009 li
@
273.432 375.24 mo
273.432 373.009 li
@
284.229 375.24 mo
284.229 373.009 li
@
292.603 375.24 mo
292.603 373.009 li
@
299.446 375.24 mo
299.446 373.009 li
@
305.231 375.24 mo
305.231 373.009 li
@
310.243 375.24 mo
310.243 373.009 li
@
314.663 375.24 mo
314.663 373.009 li
@
318.618 375.24 mo
318.618 373.009 li
@
344.632 375.24 mo
344.632 373.009 li
@
359.849 375.24 mo
359.849 373.009 li
@
370.646 375.24 mo
370.646 373.009 li
@
379.021 375.24 mo
379.021 373.009 li
@
385.863 375.24 mo
385.863 373.009 li
@
391.649 375.24 mo
391.649 373.009 li
@
396.66 375.24 mo
396.66 373.009 li
@
401.08 375.24 mo
401.08 373.009 li
@
405.035 375.24 mo
405.035 373.009 li
@
431.048 375.24 mo
431.048 373.009 li
@
446.266 375.24 mo
446.266 373.009 li
@
457.062 375.24 mo
457.062 373.009 li
@
465.437 375.24 mo
465.437 373.009 li
@
472.28 375.24 mo
472.28 373.009 li
@
478.065 375.24 mo
478.065 373.009 li
@
483.076 375.24 mo
483.076 373.009 li
@
487.497 375.24 mo
487.497 373.009 li
@
491.451 375.24 mo
491.451 373.009 li
@
45.9823 22.7398 mo
45.9823 24.9708 li
@
50.9936 22.7398 mo
50.9936 24.9708 li
@
55.4143 22.7398 mo
55.4143 24.9708 li
@
59.3682 22.7398 mo
59.3682 24.9708 li
@
85.3814 22.7398 mo
85.3814 24.9708 li
@
100.599 22.7398 mo
100.599 24.9708 li
@
111.396 22.7398 mo
111.396 24.9708 li
@
119.771 22.7398 mo
119.771 24.9708 li
@
126.613 22.7398 mo
126.613 24.9708 li
@
132.398 22.7398 mo
132.398 24.9708 li
@
137.41 22.7398 mo
137.41 24.9708 li
@
141.83 22.7398 mo
141.83 24.9708 li
@
145.784 22.7398 mo
145.784 24.9708 li
@
145.784 22.7398 mo
145.784 24.9708 li
@
171.799 22.7398 mo
171.799 24.9708 li
@
187.015 22.7398 mo
187.015 24.9708 li
@
197.812 22.7398 mo
197.812 24.9708 li
@
206.187 22.7398 mo
206.187 24.9708 li
@
213.03 22.7398 mo
213.03 24.9708 li
@
218.815 22.7398 mo
218.815 24.9708 li
@
223.826 22.7398 mo
223.826 24.9708 li
@
228.247 22.7398 mo
228.247 24.9708 li
@
232.201 22.7398 mo
232.201 24.9708 li
@
258.215 22.7398 mo
258.215 24.9708 li
@
273.432 22.7398 mo
273.432 24.9708 li
@
284.229 22.7398 mo
284.229 24.9708 li
@
292.603 22.7398 mo
292.603 24.9708 li
@
299.446 22.7398 mo
299.446 24.9708 li
@
305.231 22.7398 mo
305.231 24.9708 li
@
310.243 22.7398 mo
310.243 24.9708 li
@
314.663 22.7398 mo
314.663 24.9708 li
@
318.618 22.7398 mo
318.618 24.9708 li
@
344.632 22.7398 mo
344.632 24.9708 li
@
359.849 22.7398 mo
359.849 24.9708 li
@
370.646 22.7398 mo
370.646 24.9708 li
@
379.021 22.7398 mo
379.021 24.9708 li
@
385.863 22.7398 mo
385.863 24.9708 li
@
391.649 22.7398 mo
391.649 24.9708 li
@
396.66 22.7398 mo
396.66 24.9708 li
@
401.08 22.7398 mo
401.08 24.9708 li
@
405.035 22.7398 mo
405.035 24.9708 li
@
431.048 22.7398 mo
431.048 24.9708 li
@
446.266 22.7398 mo
446.266 24.9708 li
@
457.062 22.7398 mo
457.062 24.9708 li
@
465.437 22.7398 mo
465.437 24.9708 li
@
472.28 22.7398 mo
472.28 24.9708 li
@
478.065 22.7398 mo
478.065 24.9708 li
@
483.076 22.7398 mo
483.076 24.9708 li
@
487.497 22.7398 mo
487.497 24.9708 li
@
491.451 22.7398 mo
491.451 24.9708 li
@
%ADOBeginSubsetFont: LAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /LAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
20 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3
518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE7
19F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E5897699
5550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77
D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFF
C73DA426D2C4> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NXCGNZ+Helvetica /LAAAAA+Helvetica findfont ct_VMDictPut
/NXCGNZ+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five 11{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp 
/R 14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
139{/.notdef}rp]
NXCGNZ+Helvetica nf
NXCGNZ+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
45.2014 396.24 mo
(10)
[7.36216 0 ]xsh
NXCGNZ+Helvetica*1 [10.593 0 0 -10.593 0 0 ]msf
62.4514 390.24 mo
(-5)
[3.52739 0 ]xsh
NXCGNZ+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
131.451 396.24 mo
(10)
[7.36215 0 ]xsh
NXCGNZ+Helvetica*1 [10.593 0 0 -10.593 0 0 ]msf
148.701 390.24 mo
(-4)
[3.52739 0 ]xsh
NXCGNZ+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
217.701 396.24 mo
(10)
[7.36215 0 ]xsh
NXCGNZ+Helvetica*1 [10.593 0 0 -10.593 0 0 ]msf
234.951 390.24 mo
(-3)
[3.5274 0 ]xsh
NXCGNZ+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
304.701 396.24 mo
(10)
[7.36215 0 ]xsh
NXCGNZ+Helvetica*1 [10.593 0 0 -10.593 0 0 ]msf
321.951 390.24 mo
(-2)
[3.5274 0 ]xsh
NXCGNZ+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
390.951 396.24 mo
(10)
[7.36215 0 ]xsh
NXCGNZ+Helvetica*1 [10.593 0 0 -10.593 0 0 ]msf
408.201 390.24 mo
(-1)
[3.5274 0 ]xsh
NXCGNZ+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
479.451 396.24 mo
(10)
[7.36218 0 ]xsh
NXCGNZ+Helvetica*1 [10.593 0 0 -10.593 0 0 ]msf
496.701 390.24 mo
(0)sh
NXCGNZ+Helvetica*1 [14.5658 0 0 -14.5658 0 0 ]msf
177.179 412.708 mo
(Fal)sh
197.411 412.708 mo
(se A)sh
226.557 412.708 mo
(cceptance R)sh
307.514 412.708 mo
(ate)sh
45.2014 375.24 mo
45.2014 22.7398 li
@
491.451 375.24 mo
491.451 22.7398 li
@
45.2014 375.24 mo
49.6639 375.24 li
@
45.2014 339.99 mo
49.6639 339.99 li
@
45.2014 304.74 mo
49.6639 304.74 li
@
45.2014 269.49 mo
49.6639 269.49 li
@
45.2014 234.24 mo
49.6639 234.24 li
@
45.2014 198.99 mo
49.6639 198.99 li
@
45.2014 163.74 mo
49.6639 163.74 li
@
45.2014 128.49 mo
49.6639 128.49 li
@
45.2014 93.2398 mo
49.6639 93.2398 li
@
45.2014 57.9898 mo
49.6639 57.9898 li
@
45.2014 22.7398 mo
49.6639 22.7398 li
@
491.451 375.24 mo
486.989 375.24 li
@
491.451 339.99 mo
486.989 339.99 li
@
491.451 304.74 mo
486.989 304.74 li
@
491.451 269.49 mo
486.989 269.49 li
@
491.451 234.24 mo
486.989 234.24 li
@
491.451 198.99 mo
486.989 198.99 li
@
491.451 163.74 mo
486.989 163.74 li
@
491.451 128.49 mo
486.989 128.49 li
@
491.451 93.2398 mo
486.989 93.2398 li
@
491.451 57.9898 mo
486.989 57.9898 li
@
491.451 22.7398 mo
486.989 22.7398 li
@
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
NXCGNZ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NXCGNZ+Helvetica /Encoding get
dup 46 /period put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/NXCGNZ+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /three /four /five /six /seven /eight /nine 
7{/.notdef}rp /A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
NXCGNZ+Helvetica nf
NXCGNZ+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
31.553 379.74 mo
(0)sh
18.803 344.49 mo
(0.1)sh
18.803 309.24 mo
(0.2)sh
18.803 273.99 mo
(0.3)sh
18.803 238.74 mo
(0.4)sh
18.803 203.49 mo
(0.5)sh
18.803 168.24 mo
(0.6)sh
18.803 132.99 mo
(0.7)sh
18.803 97.7398 mo
(0.8)sh
18.803 62.4898 mo
(0.9)sh
31.553 27.2398 mo
(1)sh
NXCGNZ+Helvetica*1 [0 -14.5658 -14.5658 0 0 0 ]msf
12.053 293.49 mo
(Genuine Acceptance Rate)
[-11.3322 -8.09857 -8.0986 -8.09857 -3.23361 -8.09859 -8.09857 -4.0493 -9.71548 -7.2829 -7.2829 -8.0986 
-8.09857 -4.04929 -8.09859 -8.09859 -7.2829 -8.09857 -4.04929 -10.5165 -8.0986 -4.04926 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: NAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /NAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NXCGOA+Helvetica-Bold /NAAAAA+Helvetica-Bold findfont ct_VMDictPut
/NXCGOA+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
NXCGOA+Helvetica-Bold nf
NXCGOA+Helvetica-Bold*1 [14.5658 0 0 -14.5658 0 0 ]msf
129.717 13.9758 mo
(Receiver Operating Characteristics)
[10.5165 8.09859 8.09857 8.09859 4.04929 8.09859 8.09857 5.66621 4.04929 11.3322 8.8996 8.09857 
5.6662 8.0986 4.85028 4.04932 8.89957 8.8996 4.04929 10.5165 8.89957 8.0986 5.6662 8.09857 
8.09857 4.85031 8.0986 5.6662 4.04926 8.0986 4.85031 4.04929 8.09857 0 ]xsh
0 lc
491.078 22.7398 mo
490.306 22.7398 li
490.265 23.0058 li
489.035 23.0058 li
488.935 23.2719 li
488.823 23.2719 li
488.713 23.2719 li
488.6 23.2719 li
488.467 23.2719 li
488.336 23.2719 li
488.204 23.2719 li
488.063 23.2719 li
487.91 23.2719 li
487.747 23.2719 li
487.585 23.2719 li
487.409 23.2719 li
487.21 23.5368 li
487.014 23.5368 li
486.808 23.5368 li
486.59 23.5368 li
486.359 23.5368 li
486.122 23.5368 li
485.874 23.5368 li
485.612 24.0688 li
485.339 24.0688 li
485.043 24.0688 li
484.722 24.0688 li
484.388 24.0688 li
484.033 24.0688 li
483.68 24.0688 li
483.305 24.3348 li
482.896 24.3348 li
482.467 24.3348 li
482.024 24.3348 li
481.549 24.3348 li
481.067 24.8668 li
480.554 25.1328 li
480.005 25.1328 li
479.419 25.1328 li
478.811 25.3978 li
478.156 25.6638 li
477.485 25.9298 li
476.773 25.9298 li
476.013 25.9298 li
475.231 25.9298 li
474.446 25.9298 li
473.592 26.1958 li
472.718 26.4608 li
471.785 26.9928 li
470.848 27.2598 li
469.868 27.5248 li
468.835 27.5248 li
467.79 27.5248 li
466.712 27.7908 li
465.595 27.7908 li
464.436 27.7908 li
463.249 27.7908 li
461.975 27.7908 li
460.654 28.0568 li
459.329 28.0568 li
457.943 28.0568 li
456.539 28.3218 li
455.089 29.1198 li
453.621 29.1198 li
452.117 29.1198 li
450.551 29.3858 li
448.98 29.6519 li
447.425 30.1838 li
445.758 30.1838 li
444.16 30.1838 li
442.454 30.7148 li
440.71 31.2468 li
438.867 31.5128 li
437.024 31.7778 li
435.181 32.0448 li
433.373 32.5758 li
431.494 33.1078 li
429.54 34.1708 li
427.467 35.5009 li
425.527 35.5009 li
423.506 35.7658 li
421.411 36.2979 li
419.39 36.2979 li
417.337 36.8288 li
415.151 38.1578 li
413.055 39.2218 li
410.926 40.0188 li
408.784 40.5508 li
406.486 41.0828 li
404.223 41.6148 li
401.979 41.8798 li
399.623 42.1458 li
397.342 42.6778 li
395.196 43.4749 li
392.884 44.2719 li
390.606 45.0698 li
388.079 45.8678 li
385.693 47.1968 li
383.399 47.7288 li
380.961 48.5258 li
378.687 48.7918 li
376.133 49.5888 li
373.83 50.3868 li
371.221 51.1848 li
368.679 51.9818 li
366.217 52.7798 li
363.695 54.3738 li
361.314 55.4378 li
359.018 56.2358 li
356.381 57.5648 li
354.012 58.0968 li
351.59 58.8938 li
349.077 59.9568 li
346.462 61.0208 li
343.889 62.0838 li
341.273 62.6148 li
338.84 63.9448 li
335.978 66.6028 li
333.509 67.1348 li
330.399 68.4638 li
327.932 71.3878 li
325.314 72.9828 li
322.406 73.7808 li
319.706 75.3759 li
316.891 76.7048 li
314.326 78.8318 li
311.278 80.4268 li
308.972 80.6918 li
306.514 81.4898 li
304.489 82.8198 li
302.486 84.4138 li
300.246 87.3378 li
297.751 88.1358 li
295.414 91.8578 li
293.074 93.4528 li
290.142 96.3768 li
286.571 97.7058 li
283.78 100.896 li
280.835 101.428 li
278.587 104.617 li
275.915 107.276 li
273.211 109.934 li
270.436 112.061 li
267.64 113.656 li
265.478 115.517 li
261.57 119.239 li
258.888 121.366 li
255.726 124.29 li
253.166 126.416 li
249.699 130.67 li
246.146 131.733 li
243.194 133.594 li
240.198 136.784 li
237.168 139.974 li
233.126 142.898 li
228.737 145.291 li
226.108 148.215 li
223.604 153.798 li
219.865 155.659 li
217.467 160.177 li
213.871 163.9 li
210.815 167.355 li
205.444 170.545 li
201.285 174.267 li
200.093 177.191 li
197.59 183.837 li
194.908 187.559 li
190.488 191.546 li
187.647 197.926 li
184.572 199.787 li
180.209 204.041 li
178.094 208.56 li
176.426 214.408 li
172.218 220.522 li
170.26 225.042 li
169.583 231.422 li
162.877 236.739 li
162.877 242.056 li
160.346 246.841 li
157.632 251.094 li
150.412 255.347 li
148.066 259.335 li
146.835 263.056 li
144.245 269.437 li
141.464 272.893 li
135.195 276.881 li
129.692 282.463 li
129.692 285.387 li
127.664 287.248 li
123.243 289.64 li
115.451 293.096 li
112.446 299.476 li
109.181 303.198 li
109.181 308.249 li
109.181 312.768 li
105.604 316.756 li
86.4324 321.009 li
86.4324 324.465 li
79.5904 326.326 li
71.2154 329.782 li
71.2154 332.972 li
60.419 335.365 li
60.419 339.086 li
60.419 342.542 li
60.419 344.137 li
60.419 348.656 li
45.1483 349.247 li
.519531 0 .126221 0 cmyk
@
491.077 20.2398 mo
492.458 20.2398 493.577 21.3588 493.577 22.7398 cv
493.577 24.1208 492.458 25.2398 491.077 25.2398 cv
489.696 25.2398 488.578 24.1208 488.578 22.7398 cv
488.578 21.3588 489.696 20.2398 491.077 20.2398 cv
cp
491.077 19.2398 mo
489.144 19.2398 487.577 20.8068 487.577 22.7398 cv
487.577 24.6729 489.144 26.2398 491.077 26.2398 cv
493.01 26.2398 494.578 24.6729 494.578 22.7398 cv
494.578 20.8068 493.01 19.2398 491.077 19.2398 cv
f
491.004 20.2398 mo
492.385 20.2398 493.503 21.3588 493.503 22.7398 cv
493.503 24.1208 492.385 25.2398 491.004 25.2398 cv
489.623 25.2398 488.504 24.1208 488.504 22.7398 cv
488.504 21.3588 489.623 20.2398 491.004 20.2398 cv
cp
491.004 19.2398 mo
489.071 19.2398 487.503 20.8068 487.503 22.7398 cv
487.503 24.6729 489.071 26.2398 491.004 26.2398 cv
492.937 26.2398 494.504 24.6729 494.504 22.7398 cv
494.504 20.8068 492.937 19.2398 491.004 19.2398 cv
f
490.887 20.2398 mo
492.267 20.2398 493.386 21.3588 493.386 22.7398 cv
493.386 24.1208 492.267 25.2398 490.887 25.2398 cv
489.506 25.2398 488.387 24.1208 488.387 22.7398 cv
488.387 21.3588 489.506 20.2398 490.887 20.2398 cv
cp
490.887 19.2398 mo
488.954 19.2398 487.386 20.8068 487.386 22.7398 cv
487.386 24.6729 488.954 26.2398 490.887 26.2398 cv
492.819 26.2398 494.387 24.6729 494.387 22.7398 cv
494.387 20.8068 492.819 19.2398 490.887 19.2398 cv
f
490.681 20.2398 mo
492.062 20.2398 493.181 21.3588 493.181 22.7398 cv
493.181 24.1208 492.062 25.2398 490.681 25.2398 cv
489.3 25.2398 488.181 24.1208 488.181 22.7398 cv
488.181 21.3588 489.3 20.2398 490.681 20.2398 cv
cp
490.681 19.2398 mo
488.748 19.2398 487.181 20.8068 487.181 22.7398 cv
487.181 24.6729 488.748 26.2398 490.681 26.2398 cv
492.614 26.2398 494.181 24.6729 494.181 22.7398 cv
494.181 20.8068 492.614 19.2398 490.681 19.2398 cv
f
490.35 20.2398 mo
491.731 20.2398 492.85 21.3588 492.85 22.7398 cv
492.85 24.1208 491.731 25.2398 490.35 25.2398 cv
488.97 25.2398 487.851 24.1208 487.851 22.7398 cv
487.851 21.3588 488.97 20.2398 490.35 20.2398 cv
cp
490.35 19.2398 mo
488.418 19.2398 486.85 20.8068 486.85 22.7398 cv
486.85 24.6729 488.418 26.2398 490.35 26.2398 cv
492.283 26.2398 493.851 24.6729 493.851 22.7398 cv
493.851 20.8068 492.283 19.2398 490.35 19.2398 cv
f
489.835 20.5058 mo
491.215 20.5058 492.335 21.6248 492.335 23.0058 cv
492.335 24.3858 491.215 25.5058 489.835 25.5058 cv
488.454 25.5058 487.335 24.3858 487.335 23.0058 cv
487.335 21.6248 488.454 20.5058 489.835 20.5058 cv
cp
489.835 19.5058 mo
487.902 19.5058 486.335 21.0728 486.335 23.0058 cv
486.335 24.9378 487.902 26.5058 489.835 26.5058 cv
491.768 26.5058 493.335 24.9378 493.335 23.0058 cv
493.335 21.0728 491.768 19.5058 489.835 19.5058 cv
f
489.035 20.5058 mo
490.416 20.5058 491.535 21.6248 491.535 23.0058 cv
491.535 24.3858 490.416 25.5058 489.035 25.5058 cv
487.655 25.5058 486.536 24.3858 486.536 23.0058 cv
486.536 21.6248 487.655 20.5058 489.035 20.5058 cv
cp
489.035 19.5058 mo
487.103 19.5058 485.535 21.0728 485.535 23.0058 cv
485.535 24.9378 487.103 26.5058 489.035 26.5058 cv
490.968 26.5058 492.536 24.9378 492.536 23.0058 cv
492.536 21.0728 490.968 19.5058 489.035 19.5058 cv
f
487.747 20.7719 mo
489.128 20.7719 490.247 21.8908 490.247 23.2719 cv
490.247 24.6519 489.128 25.7708 487.747 25.7708 cv
486.366 25.7708 485.247 24.6519 485.247 23.2719 cv
485.247 21.8908 486.366 20.7719 487.747 20.7719 cv
cp
487.747 19.7708 mo
485.814 19.7708 484.247 21.3388 484.247 23.2719 cv
484.247 25.2038 485.814 26.7719 487.747 26.7719 cv
489.68 26.7719 491.247 25.2038 491.247 23.2719 cv
491.247 21.3388 489.68 19.7708 487.747 19.7708 cv
f
485.612 21.5688 mo
486.993 21.5688 488.112 22.6878 488.112 24.0688 cv
488.112 25.4498 486.993 26.5688 485.612 26.5688 cv
484.231 26.5688 483.112 25.4498 483.112 24.0688 cv
483.112 22.6878 484.231 21.5688 485.612 21.5688 cv
cp
485.612 20.5688 mo
483.68 20.5688 482.112 22.1358 482.112 24.0688 cv
482.112 26.0018 483.68 27.5688 485.612 27.5688 cv
487.545 27.5688 489.112 26.0018 489.112 24.0688 cv
489.112 22.1358 487.545 20.5688 485.612 20.5688 cv
f
482.024 21.8348 mo
483.405 21.8348 484.524 22.9538 484.524 24.3348 cv
484.524 25.7158 483.405 26.8348 482.024 26.8348 cv
480.643 26.8348 479.524 25.7158 479.524 24.3348 cv
479.524 22.9538 480.643 21.8348 482.024 21.8348 cv
cp
482.024 20.8348 mo
480.091 20.8348 478.524 22.4019 478.524 24.3348 cv
478.524 26.2678 480.091 27.8348 482.024 27.8348 cv
483.956 27.8348 485.524 26.2678 485.524 24.3348 cv
485.524 22.4019 483.956 20.8348 482.024 20.8348 cv
f
476.013 23.4298 mo
477.394 23.4298 478.513 24.5488 478.513 25.9298 cv
478.513 27.3108 477.394 28.4298 476.013 28.4298 cv
474.632 28.4298 473.513 27.3108 473.513 25.9298 cv
473.513 24.5488 474.632 23.4298 476.013 23.4298 cv
cp
476.013 22.4298 mo
474.08 22.4298 472.513 23.9968 472.513 25.9298 cv
472.513 27.8628 474.08 29.4298 476.013 29.4298 cv
477.946 29.4298 479.513 27.8628 479.513 25.9298 cv
479.513 23.9968 477.946 22.4298 476.013 22.4298 cv
f
466.711 25.2908 mo
468.092 25.2908 469.211 26.4098 469.211 27.7908 cv
469.211 29.1718 468.092 30.2908 466.711 30.2908 cv
465.33 30.2908 464.212 29.1718 464.212 27.7908 cv
464.212 26.4098 465.33 25.2908 466.711 25.2908 cv
cp
466.711 24.2908 mo
464.778 24.2908 463.211 25.8578 463.211 27.7908 cv
463.211 29.7238 464.778 31.2908 466.711 31.2908 cv
468.644 31.2908 470.212 29.7238 470.212 27.7908 cv
470.212 25.8578 468.644 24.2908 466.711 24.2908 cv
f
453.621 26.6198 mo
455.002 26.6198 456.121 27.7388 456.121 29.1198 cv
456.121 30.5009 455.002 31.6198 453.621 31.6198 cv
452.24 31.6198 451.121 30.5009 451.121 29.1198 cv
451.121 27.7388 452.24 26.6198 453.621 26.6198 cv
cp
453.621 25.6198 mo
451.688 25.6198 450.121 27.1868 450.121 29.1198 cv
450.121 31.0528 451.688 32.6198 453.621 32.6198 cv
455.554 32.6198 457.121 31.0528 457.121 29.1198 cv
457.121 27.1868 455.554 25.6198 453.621 25.6198 cv
f
437.024 29.2788 mo
438.405 29.2788 439.524 30.3978 439.524 31.7778 cv
439.524 33.1588 438.405 34.2778 437.024 34.2778 cv
435.644 34.2778 434.525 33.1588 434.525 31.7778 cv
434.525 30.3978 435.644 29.2788 437.024 29.2788 cv
cp
437.024 28.2778 mo
435.092 28.2778 433.524 29.8458 433.524 31.7778 cv
433.524 33.7108 435.092 35.2788 437.024 35.2788 cv
438.957 35.2788 440.525 33.7108 440.525 31.7778 cv
440.525 29.8458 438.957 28.2778 437.024 28.2778 cv
f
417.337 34.3288 mo
418.717 34.3288 419.837 35.4489 419.837 36.8288 cv
419.837 38.2098 418.717 39.3288 417.337 39.3288 cv
415.956 39.3288 414.837 38.2098 414.837 36.8288 cv
414.837 35.4489 415.956 34.3288 417.337 34.3288 cv
cp
417.337 33.3288 mo
415.404 33.3288 413.837 34.8969 413.837 36.8288 cv
413.837 38.7618 415.404 40.3288 417.337 40.3288 cv
419.269 40.3288 420.837 38.7618 420.837 36.8288 cv
420.837 34.8969 419.269 33.3288 417.337 33.3288 cv
f
395.196 40.9758 mo
396.577 40.9758 397.696 42.0948 397.696 43.4749 cv
397.696 44.8558 396.577 45.9749 395.196 45.9749 cv
393.815 45.9749 392.696 44.8558 392.696 43.4749 cv
392.696 42.0948 393.815 40.9758 395.196 40.9758 cv
cp
395.196 39.9749 mo
393.264 39.9749 391.696 41.5428 391.696 43.4749 cv
391.696 45.4078 393.264 46.9758 395.196 46.9758 cv
397.129 46.9758 398.696 45.4078 398.696 43.4749 cv
398.696 41.5428 397.129 39.9749 395.196 39.9749 cv
f
371.221 48.6848 mo
372.602 48.6848 373.721 49.8038 373.721 51.1848 cv
373.721 52.5648 372.602 53.6838 371.221 53.6838 cv
369.84 53.6838 368.721 52.5648 368.721 51.1848 cv
368.721 49.8038 369.84 48.6848 371.221 48.6848 cv
cp
371.221 47.6838 mo
369.288 47.6838 367.721 49.2518 367.721 51.1848 cv
367.721 53.1168 369.288 54.6848 371.221 54.6848 cv
373.154 54.6848 374.721 53.1168 374.721 51.1848 cv
374.721 49.2518 373.154 47.6838 371.221 47.6838 cv
f
346.462 58.5208 mo
347.843 58.5208 348.962 59.6398 348.962 61.0198 cv
348.962 62.4008 347.843 63.5198 346.462 63.5198 cv
345.081 63.5198 343.962 62.4008 343.962 61.0198 cv
343.962 59.6398 345.081 58.5208 346.462 58.5208 cv
cp
346.462 57.5198 mo
344.53 57.5198 342.962 59.0878 342.962 61.0198 cv
342.962 62.9528 344.53 64.5208 346.462 64.5208 cv
348.395 64.5208 349.962 62.9528 349.962 61.0198 cv
349.962 59.0878 348.395 57.5198 346.462 57.5198 cv
f
319.706 72.8759 mo
321.087 72.8759 322.205 73.9948 322.205 75.3759 cv
322.205 76.7558 321.087 77.8759 319.706 77.8759 cv
318.325 77.8759 317.206 76.7558 317.206 75.3759 cv
317.206 73.9948 318.325 72.8759 319.706 72.8759 cv
cp
319.706 71.8759 mo
317.773 71.8759 316.205 73.4428 316.205 75.3759 cv
316.205 77.3078 317.773 78.8759 319.706 78.8759 cv
321.639 78.8759 323.206 77.3078 323.206 75.3759 cv
323.206 73.4428 321.639 71.8759 319.706 71.8759 cv
f
295.414 89.3578 mo
296.794 89.3578 297.914 90.4768 297.914 91.8578 cv
297.914 93.2378 296.794 94.3578 295.414 94.3578 cv
294.033 94.3578 292.914 93.2378 292.914 91.8578 cv
292.914 90.4768 294.033 89.3578 295.414 89.3578 cv
cp
295.414 88.3578 mo
293.481 88.3578 291.914 89.9248 291.914 91.8578 cv
291.914 93.7898 293.481 95.3578 295.414 95.3578 cv
297.346 95.3578 298.914 93.7898 298.914 91.8578 cv
298.914 89.9248 297.346 88.3578 295.414 88.3578 cv
f
267.64 111.156 mo
269.021 111.156 270.14 112.276 270.14 113.656 cv
270.14 115.037 269.021 116.156 267.64 116.156 cv
266.259 116.156 265.14 115.037 265.14 113.656 cv
265.14 112.276 266.259 111.156 267.64 111.156 cv
cp
267.64 110.156 mo
265.707 110.156 264.14 111.724 264.14 113.656 cv
264.14 115.589 265.707 117.156 267.64 117.156 cv
269.573 117.156 271.14 115.589 271.14 113.656 cv
271.14 111.724 269.573 110.156 267.64 110.156 cv
f
237.168 137.474 mo
238.549 137.474 239.668 138.594 239.668 139.974 cv
239.668 141.355 238.549 142.474 237.168 142.474 cv
235.787 142.474 234.669 141.355 234.669 139.974 cv
234.669 138.594 235.787 137.474 237.168 137.474 cv
cp
237.168 136.474 mo
235.235 136.474 233.668 138.042 233.668 139.974 cv
233.668 141.907 235.235 143.474 237.168 143.474 cv
239.101 143.474 240.669 141.907 240.669 139.974 cv
240.669 138.042 239.101 136.474 237.168 136.474 cv
f
201.285 171.767 mo
202.666 171.767 203.785 172.886 203.785 174.267 cv
203.785 175.648 202.666 176.767 201.285 176.767 cv
199.904 176.767 198.785 175.648 198.785 174.267 cv
198.785 172.886 199.904 171.767 201.285 171.767 cv
cp
201.285 170.767 mo
199.352 170.767 197.785 172.335 197.785 174.267 cv
197.785 176.2 199.352 177.767 201.285 177.767 cv
203.218 177.767 204.785 176.2 204.785 174.267 cv
204.785 172.335 203.218 170.767 201.285 170.767 cv
f
172.218 218.023 mo
173.599 218.023 174.718 219.142 174.718 220.523 cv
174.718 221.904 173.599 223.022 172.218 223.022 cv
170.837 223.022 169.718 221.904 169.718 220.523 cv
169.718 219.142 170.837 218.023 172.218 218.023 cv
cp
172.218 217.022 mo
170.285 217.022 168.718 218.59 168.718 220.523 cv
168.718 222.456 170.285 224.023 172.218 224.023 cv
174.151 224.023 175.718 222.456 175.718 220.523 cv
175.718 218.59 174.151 217.022 172.218 217.022 cv
f
144.246 266.937 mo
145.626 266.937 146.745 268.056 146.745 269.437 cv
146.745 270.818 145.626 271.936 144.246 271.936 cv
142.865 271.936 141.746 270.818 141.746 269.437 cv
141.746 268.056 142.865 266.937 144.246 266.937 cv
cp
144.246 265.936 mo
142.313 265.936 140.745 267.504 140.745 269.437 cv
140.745 271.37 142.313 272.937 144.246 272.937 cv
146.178 272.937 147.746 271.37 147.746 269.437 cv
147.746 267.504 146.178 265.936 144.246 265.936 cv
f
109.181 305.749 mo
110.562 305.749 111.68 306.868 111.68 308.249 cv
111.68 309.63 110.562 310.749 109.181 310.749 cv
107.8 310.749 106.681 309.63 106.681 308.249 cv
106.681 306.868 107.8 305.749 109.181 305.749 cv
cp
109.181 304.749 mo
107.248 304.749 105.68 306.316 105.68 308.249 cv
105.68 310.182 107.248 311.749 109.181 311.749 cv
111.114 311.749 112.681 310.182 112.681 308.249 cv
112.681 306.316 111.114 304.749 109.181 304.749 cv
f
60.4186 340.042 mo
61.7994 340.042 62.9182 341.161 62.9182 342.542 cv
62.9182 343.923 61.7994 345.042 60.4186 345.042 cv
59.0377 345.042 57.919 343.923 57.919 342.542 cv
57.919 341.161 59.0377 340.042 60.4186 340.042 cv
cp
60.4186 339.042 mo
58.4858 339.042 56.9182 340.609 56.9182 342.542 cv
56.9182 344.475 58.4858 346.042 60.4186 346.042 cv
62.3514 346.042 63.919 344.475 63.919 342.542 cv
63.919 340.609 62.3514 339.042 60.4186 339.042 cv
f
45.2014 318.883 mo
45.2014 281.399 li
71.2154 271.564 li
86.4324 260.132 li
86.4324 250.829 li
86.4324 238.6 li
105.604 232.486 li
115.451 223.979 li
123.243 215.472 li
136.863 203.243 li
146.835 197.661 li
153.677 190.483 li
162.052 182.508 li
173.469 177.191 li
180.72 170.545 li
186.36 165.229 li
192.02 162.304 li
197.913 156.722 li
203.283 150.608 li
208.226 145.291 li
214.08 139.442 li
223.442 135.986 li
228.878 132.797 li
234.117 126.948 li
240.302 123.758 li
242.808 114.985 li
248.049 111.264 li
251.97 105.681 li
256 101.693 li
261.863 99.5668 li
265.211 95.8448 li
269.112 93.1868 li
272.907 91.8578 li
276.551 88.1358 li
280.411 85.7438 li
283.453 84.1488 li
287.318 82.2878 li
291.571 79.8948 li
294.885 77.7678 li
298.086 74.8438 li
301.24 73.7808 li
304.301 70.5908 li
307.147 69.2618 li
310.215 67.4008 li
312.796 66.3378 li
315.266 65.0078 li
317.558 63.4128 li
319.843 62.0838 li
322.348 61.0208 li
324.76 59.9568 li
327.121 58.8938 li
329.457 58.6278 li
331.51 56.7668 li
333.475 54.9058 li
335.497 53.0448 li
337.518 52.7798 li
339.539 51.4508 li
341.554 51.4508 li
343.173 51.1848 li
345.026 50.9188 li
346.906 49.8558 li
348.559 49.0578 li
350.38 47.9948 li
352.111 46.6648 li
353.72 45.6018 li
355.117 45.0698 li
356.601 44.8038 li
358.261 44.2719 li
359.601 43.4749 li
361.174 42.6778 li
362.707 41.3478 li
364.18 40.2848 li
365.431 40.0188 li
366.721 39.4878 li
367.936 38.4248 li
369.331 38.1578 li
370.553 37.6268 li
371.865 36.8288 li
373.156 36.5628 li
374.335 36.2979 li
375.565 35.5009 li
376.824 35.5009 li
377.985 35.2338 li
379.085 35.2338 li
380.161 34.7018 li
381.251 33.9048 li
382.338 33.3738 li
383.463 33.3738 li
384.562 33.1078 li
385.518 32.3098 li
386.515 32.0448 li
387.472 32.0448 li
388.347 32.0448 li
389.259 32.0448 li
390.158 32.0448 li
391.088 31.7778 li
391.893 31.5128 li
392.759 31.5128 li
393.643 31.2468 li
394.538 30.7148 li
395.383 30.7148 li
396.089 30.7148 li
396.885 30.7148 li
397.648 30.7148 li
398.384 30.4489 li
399.139 30.1838 li
399.839 29.9168 li
400.578 29.3858 li
401.315 29.3858 li
402.096 29.1198 li
402.847 29.1198 li
403.574 28.8538 li
404.287 28.8538 li
404.935 28.8538 li
405.619 28.8538 li
406.248 28.5878 li
406.961 28.5878 li
407.582 28.0568 li
408.271 28.0568 li
408.885 27.5248 li
409.515 27.2598 li
410.154 26.9928 li
410.758 26.7278 li
411.349 26.7278 li
411.937 26.1958 li
412.504 26.1958 li
413.087 25.9298 li
413.633 25.9298 li
414.15 25.9298 li
414.693 25.9298 li
415.249 25.9298 li
415.769 25.9298 li
416.266 25.9298 li
416.781 25.9298 li
417.314 25.9298 li
417.781 25.9298 li
418.315 25.9298 li
418.79 25.3978 li
419.333 25.3978 li
419.826 25.3978 li
420.305 25.3978 li
420.796 25.3978 li
421.263 25.3978 li
421.69 25.1328 li
422.108 24.8668 li
422.557 24.8668 li
422.989 24.8668 li
423.442 24.8668 li
423.835 24.6008 li
424.271 24.6008 li
424.717 24.6008 li
425.117 24.6008 li
425.513 24.3348 li
425.928 24.3348 li
426.316 24.3348 li
426.693 24.0688 li
427.067 23.8038 li
427.458 23.8038 li
427.833 23.8038 li
428.176 23.8038 li
428.549 23.8038 li
428.909 23.8038 li
429.255 23.8038 li
429.584 23.8038 li
429.927 23.8038 li
430.276 23.8038 li
430.657 23.5368 li
430.999 23.5368 li
431.342 23.5368 li
431.709 23.5368 li
432.041 23.5368 li
432.349 23.5368 li
432.694 23.5368 li
433.034 23.2719 li
433.356 23.2719 li
433.672 23.2719 li
433.999 23.2719 li
434.297 23.2719 li
434.6 23.2719 li
434.887 23.2719 li
435.164 23.2719 li
435.47 23.2719 li
435.758 23.2719 li
436.067 23.2719 li
436.351 23.2719 li
436.661 23.2719 li
436.94 23.2719 li
437.238 23.2719 li
437.524 23.2719 li
437.829 23.2719 li
438.096 23.2719 li
438.362 23.2719 li
438.639 23.2719 li
438.918 23.2719 li
439.176 23.2719 li
439.425 23.2719 li
439.687 23.2719 li
439.961 23.2719 li
440.207 23.2719 li
440.459 23.2719 li
440.708 23.2719 li
440.962 23.2719 li
441.222 23.2719 li
441.464 23.2719 li
441.706 23.2719 li
441.94 23.2719 li
442.173 23.2719 li
442.432 23.2719 li
442.664 23.2719 li
442.913 23.0058 li
443.157 23.0058 li
443.421 23.0058 li
443.651 23.0058 li
443.9 23.0058 li
444.152 23.0058 li
444.397 23.0058 li
444.62 23.0058 li
444.858 23.0058 li
445.079 23.0058 li
445.311 23.0058 li
445.519 23.0058 li
445.736 23.0058 li
445.942 23.0058 li
446.156 23.0058 li
446.367 23.0058 li
446.56 23.0058 li
446.766 23.0058 li
446.976 23.0058 li
447.191 23.0058 li
447.383 23.0058 li
447.589 23.0058 li
447.793 23.0058 li
447.994 23.0058 li
448.217 23.0058 li
448.43 23.0058 li
448.624 23.0058 li
448.822 23.0058 li
449.042 23.0058 li
449.249 23.0058 li
449.464 23.0058 li
449.671 23.0058 li
449.861 23.0058 li
450.062 23.0058 li
450.25 23.0058 li
450.447 23.0058 li
450.639 23.0058 li
450.817 23.0058 li
451.012 23.0058 li
451.199 23.0058 li
451.379 23.0058 li
451.565 23.0058 li
451.73 23.0058 li
451.918 23.0058 li
452.093 23.0058 li
452.268 23.0058 li
452.451 23.0058 li
452.636 23.0058 li
452.827 23.0058 li
453.015 22.7398 li
453.199 22.7398 li
453.391 22.7398 li
453.564 22.7398 li
453.757 22.7398 li
453.938 22.7398 li
454.103 22.7398 li
454.281 22.7398 li
454.451 22.7398 li
454.624 22.7398 li
454.803 22.7398 li
454.976 22.7398 li
455.151 22.7398 li
455.304 22.7398 li
455.467 22.7398 li
455.65 22.7398 li
455.829 22.7398 li
455.987 22.7398 li
456.164 22.7398 li
456.338 22.7398 li
456.495 22.7398 li
456.656 22.7398 li
456.815 22.7398 li
456.985 22.7398 li
457.134 22.7398 li
457.304 22.7398 li
457.476 22.7398 li
457.64 22.7398 li
457.796 22.7398 li
457.963 22.7398 li
458.117 22.7398 li
458.292 22.7398 li
458.443 22.7398 li
458.598 22.7398 li
458.758 22.7398 li
458.903 22.7398 li
459.058 22.7398 li
459.217 22.7398 li
459.391 22.7398 li
459.55 22.7398 li
459.701 22.7398 li
459.851 22.7398 li
460.019 22.7398 li
460.171 22.7398 li
460.32 22.7398 li
460.47 22.7398 li
460.634 22.7398 li
460.778 22.7398 li
460.935 22.7398 li
461.101 22.7398 li
461.251 22.7398 li
461.396 22.7398 li
461.536 22.7398 li
461.677 22.7398 li
461.833 22.7398 li
461.981 22.7398 li
462.122 22.7398 li
462.278 22.7398 li
462.424 22.7398 li
462.575 22.7398 li
462.723 22.7398 li
462.881 22.7398 li
463.027 22.7398 li
463.172 22.7398 li
463.326 22.7398 li
463.481 22.7398 li
463.614 22.7398 li
463.758 22.7398 li
463.889 22.7398 li
464.03 22.7398 li
464.174 22.7398 li
464.306 22.7398 li
464.452 22.7398 li
464.59 22.7398 li
464.731 22.7398 li
464.869 22.7398 li
465.01 22.7398 li
465.151 22.7398 li
465.287 22.7398 li
465.435 22.7398 li
465.593 22.7398 li
465.732 22.7398 li
465.875 22.7398 li
466.015 22.7398 li
466.153 22.7398 li
466.289 22.7398 li
466.42 22.7398 li
466.556 22.7398 li
466.697 22.7398 li
466.829 22.7398 li
466.962 22.7398 li
467.099 22.7398 li
467.225 22.7398 li
467.356 22.7398 li
467.492 22.7398 li
467.628 22.7398 li
467.756 22.7398 li
467.887 22.7398 li
468.017 22.7398 li
468.148 22.7398 li
468.271 22.7398 li
468.4 22.7398 li
468.533 22.7398 li
468.663 22.7398 li
468.797 22.7398 li
468.916 22.7398 li
469.049 22.7398 li
469.174 22.7398 li
469.296 22.7398 li
469.43 22.7398 li
469.553 22.7398 li
469.683 22.7398 li
469.809 22.7398 li
469.929 22.7398 li
470.057 22.7398 li
470.179 22.7398 li
470.306 22.7398 li
470.419 22.7398 li
470.542 22.7398 li
470.661 22.7398 li
470.776 22.7398 li
470.896 22.7398 li
471.008 22.7398 li
471.136 22.7398 li
471.257 22.7398 li
471.384 22.7398 li
471.502 22.7398 li
471.614 22.7398 li
471.723 22.7398 li
471.84 22.7398 li
471.954 22.7398 li
472.069 22.7398 li
472.191 22.7398 li
472.304 22.7398 li
472.424 22.7398 li
472.544 22.7398 li
472.661 22.7398 li
472.778 22.7398 li
472.881 22.7398 li
472.988 22.7398 li
473.107 22.7398 li
473.226 22.7398 li
473.334 22.7398 li
473.447 22.7398 li
473.551 22.7398 li
473.663 22.7398 li
473.784 22.7398 li
473.89 22.7398 li
473.999 22.7398 li
474.1 22.7398 li
474.22 22.7398 li
474.338 22.7398 li
474.45 22.7398 li
474.551 22.7398 li
474.656 22.7398 li
474.758 22.7398 li
474.865 22.7398 li
474.972 22.7398 li
475.076 22.7398 li
475.182 22.7398 li
475.289 22.7398 li
475.385 22.7398 li
475.481 22.7398 li
475.58 22.7398 li
475.679 22.7398 li
475.767 22.7398 li
475.87 22.7398 li
475.97 22.7398 li
476.066 22.7398 li
476.162 22.7398 li
476.26 22.7398 li
476.36 22.7398 li
476.462 22.7398 li
476.569 22.7398 li
476.68 22.7398 li
476.778 22.7398 li
476.875 22.7398 li
476.983 22.7398 li
477.078 22.7398 li
477.175 22.7398 li
477.268 22.7398 li
477.367 22.7398 li
477.463 22.7398 li
477.55 22.7398 li
477.649 22.7398 li
477.738 22.7398 li
477.825 22.7398 li
477.918 22.7398 li
478.003 22.7398 li
478.094 22.7398 li
478.191 22.7398 li
478.271 22.7398 li
478.358 22.7398 li
478.446 22.7398 li
478.539 22.7398 li
478.626 22.7398 li
478.725 22.7398 li
478.811 22.7398 li
478.901 22.7398 li
478.988 22.7398 li
479.081 22.7398 li
479.162 22.7398 li
479.243 22.7398 li
479.323 22.7398 li
479.405 22.7398 li
479.489 22.7398 li
479.568 22.7398 li
479.651 22.7398 li
479.731 22.7398 li
479.814 22.7398 li
479.888 22.7398 li
479.967 22.7398 li
480.043 22.7398 li
480.119 22.7398 li
480.2 22.7398 li
480.283 22.7398 li
480.353 22.7398 li
480.429 22.7398 li
480.508 22.7398 li
480.592 22.7398 li
480.663 22.7398 li
480.733 22.7398 li
480.809 22.7398 li
480.881 22.7398 li
480.958 22.7398 li
481.029 22.7398 li
481.1 22.7398 li
481.173 22.7398 li
481.252 22.7398 li
481.326 22.7398 li
481.406 22.7398 li
481.482 22.7398 li
481.555 22.7398 li
481.629 22.7398 li
481.698 22.7398 li
481.777 22.7398 li
481.848 22.7398 li
481.916 22.7398 li
481.988 22.7398 li
482.066 22.7398 li
482.139 22.7398 li
482.21 22.7398 li
482.275 22.7398 li
482.344 22.7398 li
482.408 22.7398 li
482.467 22.7398 li
482.534 22.7398 li
482.602 22.7398 li
482.667 22.7398 li
482.73 22.7398 li
482.789 22.7398 li
482.854 22.7398 li
482.913 22.7398 li
482.973 22.7398 li
483.035 22.7398 li
483.102 22.7398 li
483.169 22.7398 li
483.232 22.7398 li
483.294 22.7398 li
483.352 22.7398 li
483.418 22.7398 li
483.476 22.7398 li
483.53 22.7398 li
483.59 22.7398 li
483.647 22.7398 li
483.708 22.7398 li
483.767 22.7398 li
483.82 22.7398 li
483.881 22.7398 li
483.938 22.7398 li
483.995 22.7398 li
484.056 22.7398 li
484.109 22.7398 li
484.165 22.7398 li
484.222 22.7398 li
484.273 22.7398 li
484.328 22.7398 li
484.383 22.7398 li
484.441 22.7398 li
484.492 22.7398 li
484.549 22.7398 li
484.6 22.7398 li
484.658 22.7398 li
484.711 22.7398 li
484.759 22.7398 li
484.808 22.7398 li
484.856 22.7398 li
484.91 22.7398 li
484.96 22.7398 li
485.009 22.7398 li
485.056 22.7398 li
485.103 22.7398 li
485.157 22.7398 li
485.212 22.7398 li
485.259 22.7398 li
485.306 22.7398 li
485.351 22.7398 li
485.396 22.7398 li
485.442 22.7398 li
485.489 22.7398 li
485.533 22.7398 li
485.583 22.7398 li
485.626 22.7398 li
485.673 22.7398 li
485.71 22.7398 li
485.756 22.7398 li
485.798 22.7398 li
485.842 22.7398 li
485.885 22.7398 li
485.921 22.7398 li
485.963 22.7398 li
486.008 22.7398 li
486.051 22.7398 li
486.094 22.7398 li
486.134 22.7398 li
486.176 22.7398 li
486.217 22.7398 li
486.256 22.7398 li
486.298 22.7398 li
486.338 22.7398 li
486.376 22.7398 li
486.41 22.7398 li
486.448 22.7398 li
486.485 22.7398 li
486.526 22.7398 li
486.569 22.7398 li
486.608 22.7398 li
486.641 22.7398 li
486.68 22.7398 li
486.72 22.7398 li
486.755 22.7398 li
486.79 22.7398 li
486.828 22.7398 li
486.86 22.7398 li
486.899 22.7398 li
486.935 22.7398 li
486.968 22.7398 li
487.003 22.7398 li
487.041 22.7398 li
487.077 22.7398 li
487.113 22.7398 li
487.148 22.7398 li
487.183 22.7398 li
487.212 22.7398 li
487.246 22.7398 li
487.279 22.7398 li
487.312 22.7398 li
487.346 22.7398 li
487.377 22.7398 li
487.406 22.7398 li
487.44 22.7398 li
487.475 22.7398 li
487.506 22.7398 li
487.54 22.7398 li
487.571 22.7398 li
487.601 22.7398 li
487.633 22.7398 li
487.666 22.7398 li
487.697 22.7398 li
487.726 22.7398 li
487.758 22.7398 li
487.787 22.7398 li
487.82 22.7398 li
487.852 22.7398 li
487.882 22.7398 li
487.911 22.7398 li
487.938 22.7398 li
487.964 22.7398 li
487.993 22.7398 li
488.022 22.7398 li
488.047 22.7398 li
488.076 22.7398 li
488.104 22.7398 li
488.13 22.7398 li
488.158 22.7398 li
488.185 22.7398 li
488.212 22.7398 li
488.237 22.7398 li
488.263 22.7398 li
488.29 22.7398 li
488.317 22.7398 li
488.342 22.7398 li
488.365 22.7398 li
488.39 22.7398 li
488.411 22.7398 li
488.437 22.7398 li
488.462 22.7398 li
488.485 22.7398 li
488.51 22.7398 li
488.534 22.7398 li
488.555 22.7398 li
488.581 22.7398 li
488.603 22.7398 li
488.625 22.7398 li
488.647 22.7398 li
488.672 22.7398 li
488.692 22.7398 li
488.717 22.7398 li
488.74 22.7398 li
488.765 22.7398 li
488.785 22.7398 li
488.806 22.7398 li
488.824 22.7398 li
488.844 22.7398 li
488.864 22.7398 li
488.881 22.7398 li
488.906 22.7398 li
488.927 22.7398 li
488.949 22.7398 li
488.969 22.7398 li
488.988 22.7398 li
489.006 22.7398 li
489.025 22.7398 li
489.044 22.7398 li
489.063 22.7398 li
489.081 22.7398 li
489.1 22.7398 li
489.119 22.7398 li
489.137 22.7398 li
489.154 22.7398 li
489.172 22.7398 li
489.191 22.7398 li
489.208 22.7398 li
489.225 22.7398 li
489.242 22.7398 li
489.26 22.7398 li
489.279 22.7398 li
489.295 22.7398 li
489.31 22.7398 li
489.326 22.7398 li
489.342 22.7398 li
489.358 22.7398 li
489.375 22.7398 li
489.39 22.7398 li
489.406 22.7398 li
489.421 22.7398 li
489.438 22.7398 li
489.454 22.7398 li
489.47 22.7398 li
489.486 22.7398 li
489.506 22.7398 li
489.521 22.7398 li
489.538 22.7398 li
489.552 22.7398 li
489.566 22.7398 li
489.583 22.7398 li
489.596 22.7398 li
489.61 22.7398 li
489.626 22.7398 li
489.64 22.7398 li
489.658 22.7398 li
489.67 22.7398 li
489.681 22.7398 li
489.692 22.7398 li
489.706 22.7398 li
489.721 22.7398 li
489.735 22.7398 li
489.746 22.7398 li
489.758 22.7398 li
489.773 22.7398 li
489.785 22.7398 li
489.799 22.7398 li
489.813 22.7398 li
489.826 22.7398 li
489.842 22.7398 li
489.853 22.7398 li
489.865 22.7398 li
489.878 22.7398 li
489.889 22.7398 li
489.901 22.7398 li
489.914 22.7398 li
489.925 22.7398 li
489.936 22.7398 li
489.947 22.7398 li
489.959 22.7398 li
489.971 22.7398 li
489.981 22.7398 li
489.995 22.7398 li
490.006 22.7398 li
490.017 22.7398 li
490.027 22.7398 li
490.038 22.7398 li
490.047 22.7398 li
490.057 22.7398 li
490.067 22.7398 li
490.079 22.7398 li
490.089 22.7398 li
490.099 22.7398 li
490.111 22.7398 li
490.121 22.7398 li
490.13 22.7398 li
490.142 22.7398 li
490.152 22.7398 li
490.161 22.7398 li
490.17 22.7398 li
490.18 22.7398 li
490.19 22.7398 li
490.201 22.7398 li
490.209 22.7398 li
490.219 22.7398 li
490.228 22.7398 li
490.236 22.7398 li
490.246 22.7398 li
490.256 22.7398 li
490.265 22.7398 li
490.272 22.7398 li
490.283 22.7398 li
490.292 22.7398 li
490.301 22.7398 li
490.308 22.7398 li
490.315 22.7398 li
490.324 22.7398 li
490.332 22.7398 li
490.342 22.7398 li
490.351 22.7398 li
490.359 22.7398 li
490.367 22.7398 li
490.374 22.7398 li
490.384 22.7398 li
490.392 22.7398 li
490.4 22.7398 li
490.408 22.7398 li
490.416 22.7398 li
490.424 22.7398 li
490.43 22.7398 li
490.438 22.7398 li
490.445 22.7398 li
490.454 22.7398 li
490.461 22.7398 li
490.471 22.7398 li
490.48 22.7398 li
490.487 22.7398 li
490.493 22.7398 li
490.501 22.7398 li
490.509 22.7398 li
490.517 22.7398 li
490.526 22.7398 li
490.531 22.7398 li
490.539 22.7398 li
490.546 22.7398 li
490.553 22.7398 li
490.561 22.7398 li
490.568 22.7398 li
490.575 22.7398 li
490.582 22.7398 li
490.59 22.7398 li
490.596 22.7398 li
490.604 22.7398 li
490.612 22.7398 li
490.617 22.7398 li
490.622 22.7398 li
490.628 22.7398 li
490.633 22.7398 li
490.639 22.7398 li
490.644 22.7398 li
490.65 22.7398 li
490.658 22.7398 li
490.664 22.7398 li
490.668 22.7398 li
490.674 22.7398 li
490.681 22.7398 li
490.685 22.7398 li
490.691 22.7398 li
490.696 22.7398 li
490.702 22.7398 li
490.708 22.7398 li
490.715 22.7398 li
490.721 22.7398 li
490.726 22.7398 li
490.732 22.7398 li
490.738 22.7398 li
490.744 22.7398 li
490.747 22.7398 li
490.752 22.7398 li
490.757 22.7398 li
490.763 22.7398 li
490.77 22.7398 li
490.774 22.7398 li
490.778 22.7398 li
490.783 22.7398 li
490.788 22.7398 li
490.793 22.7398 li
490.799 22.7398 li
490.805 22.7398 li
490.81 22.7398 li
490.817 22.7398 li
490.821 22.7398 li
490.826 22.7398 li
490.83 22.7398 li
490.835 22.7398 li
490.84 22.7398 li
490.845 22.7398 li
490.851 22.7398 li
490.856 22.7398 li
490.86 22.7398 li
490.865 22.7398 li
490.871 22.7398 li
490.875 22.7398 li
490.878 22.7398 li
490.883 22.7398 li
490.888 22.7398 li
490.893 22.7398 li
490.897 22.7398 li
490.901 22.7398 li
490.905 22.7398 li
490.908 22.7398 li
490.911 22.7398 li
490.914 22.7398 li
490.92 22.7398 li
490.924 22.7398 li
490.929 22.7398 li
490.932 22.7398 li
490.935 22.7398 li
490.94 22.7398 li
490.944 22.7398 li
490.947 22.7398 li
490.949 22.7398 li
490.953 22.7398 li
490.958 22.7398 li
490.959 22.7398 li
490.963 22.7398 li
490.966 22.7398 li
490.969 22.7398 li
490.972 22.7398 li
490.976 22.7398 li
490.979 22.7398 li
490.982 22.7398 li
490.985 22.7398 li
490.988 22.7398 li
490.99 22.7398 li
490.994 22.7398 li
490.997 22.7398 li
490.999 22.7398 li
491.003 22.7398 li
491.006 22.7398 li
491.008 22.7398 li
491.012 22.7398 li
491.015 22.7398 li
491.017 22.7398 li
491.02 22.7398 li
491.022 22.7398 li
491.025 22.7398 li
491.028 22.7398 li
491.03 22.7398 li
491.034 22.7398 li
491.037 22.7398 li
491.039 22.7398 li
491.044 22.7398 li
491.047 22.7398 li
491.051 22.7398 li
491.052 22.7398 li
491.054 22.7398 li
491.057 22.7398 li
491.06 22.7398 li
491.063 22.7398 li
491.065 22.7398 li
491.069 22.7398 li
491.071 22.7398 li
491.074 22.7398 li
491.075 22.7398 li
491.078 22.7398 li
491.081 22.7398 li
491.083 22.7398 li
491.085 22.7398 li
491.088 22.7398 li
491.09 22.7398 li
491.092 22.7398 li
491.094 22.7398 li
491.096 22.7398 li
491.1 22.7398 li
491.103 22.7398 li
491.105 22.7398 li
491.107 22.7398 li
491.109 22.7398 li
491.112 22.7398 li
491.114 22.7398 li
491.115 22.7398 li
491.117 22.7398 li
491.12 22.7398 li
491.121 22.7398 li
491.124 22.7398 li
491.127 22.7398 li
491.128 22.7398 li
491.131 22.7398 li
491.132 22.7398 li
491.135 22.7398 li
491.136 22.7398 li
491.139 22.7398 li
491.142 22.7398 li
491.144 22.7398 li
491.147 22.7398 li
491.149 22.7398 li
491.152 22.7398 li
491.154 22.7398 li
491.156 22.7398 li
491.157 22.7398 li
491.159 22.7398 li
491.162 22.7398 li
491.163 22.7398 li
491.165 22.7398 li
491.166 22.7398 li
491.168 22.7398 li
491.171 22.7398 li
491.173 22.7398 li
491.174 22.7398 li
491.176 22.7398 li
491.178 22.7398 li
491.18 22.7398 li
491.182 22.7398 li
491.183 22.7398 li
491.184 22.7398 li
491.186 22.7398 li
491.189 22.7398 li
491.19 22.7398 li
491.192 22.7398 li
491.194 22.7398 li
491.195 22.7398 li
491.197 22.7398 li
491.199 22.7398 li
491.2 22.7398 li
491.201 22.7398 li
491.203 22.7398 li
491.205 22.7398 li
491.206 22.7398 li
491.208 22.7398 li
491.209 22.7398 li
491.211 22.7398 li
491.213 22.7398 li
491.214 22.7398 li
491.215 22.7398 li
491.216 22.7398 li
491.217 22.7398 li
491.219 22.7398 li
491.22 22.7398 li
491.222 22.7398 li
491.223 22.7398 li
491.224 22.7398 li
491.226 22.7398 li
491.228 22.7398 li
491.23 22.7398 li
491.231 22.7398 li
491.233 22.7398 li
491.235 22.7398 li
491.237 22.7398 li
491.24 22.7398 li
491.241 22.7398 li
491.242 22.7398 li
491.244 22.7398 li
491.246 22.7398 li
491.248 22.7398 li
491.249 22.7398 li
491.25 22.7398 li
491.251 22.7398 li
491.252 22.7398 li
491.254 22.7398 li
491.256 22.7398 li
491.258 22.7398 li
491.26 22.7398 li
491.261 22.7398 li
491.263 22.7398 li
491.264 22.7398 li
491.265 22.7398 li
491.267 22.7398 li
491.268 22.7398 li
491.269 22.7398 li
491.271 22.7398 li
491.272 22.7398 li
491.273 22.7398 li
491.275 22.7398 li
491.276 22.7398 li
491.278 22.7398 li
491.279 22.7398 li
491.28 22.7398 li
491.281 22.7398 li
491.282 22.7398 li
491.283 22.7398 li
491.284 22.7398 li
491.285 22.7398 li
491.287 22.7398 li
491.288 22.7398 li
491.289 22.7398 li
491.29 22.7398 li
491.291 22.7398 li
491.293 22.7398 li
491.294 22.7398 li
491.295 22.7398 li
491.296 22.7398 li
491.297 22.7398 li
491.299 22.7398 li
491.3 22.7398 li
491.301 22.7398 li
491.302 22.7398 li
491.303 22.7398 li
491.304 22.7398 li
491.306 22.7398 li
491.307 22.7398 li
491.308 22.7398 li
491.309 22.7398 li
491.31 22.7398 li
491.311 22.7398 li
491.312 22.7398 li
491.313 22.7398 li
491.314 22.7398 li
491.315 22.7398 li
491.316 22.7398 li
491.317 22.7398 li
491.318 22.7398 li
491.319 22.7398 li
491.321 22.7398 li
491.322 22.7398 li
491.323 22.7398 li
491.324 22.7398 li
491.326 22.7398 li
491.327 22.7398 li
491.328 22.7398 li
491.329 22.7398 li
491.33 22.7398 li
491.331 22.7398 li
491.333 22.7398 li
491.334 22.7398 li
491.335 22.7398 li
491.336 22.7398 li
491.337 22.7398 li
491.338 22.7398 li
491.339 22.7398 li
491.34 22.7398 li
491.341 22.7398 li
491.342 22.7398 li
491.343 22.7398 li
491.344 22.7398 li
491.345 22.7398 li
491.346 22.7398 li
491.347 22.7398 li
491.348 22.7398 li
491.349 22.7398 li
491.35 22.7398 li
491.351 22.7398 li
491.352 22.7398 li
491.353 22.7398 li
491.354 22.7398 li
491.355 22.7398 li
491.356 22.7398 li
491.357 22.7398 li
491.359 22.7398 li
491.36 22.7398 li
491.361 22.7398 li
491.363 22.7398 li
491.365 22.7398 li
491.366 22.7398 li
491.367 22.7398 li
491.368 22.7398 li
491.369 22.7398 li
491.371 22.7398 li
491.372 22.7398 li
491.373 22.7398 li
491.374 22.7398 li
491.375 22.7398 li
491.376 22.7398 li
491.377 22.7398 li
491.378 22.7398 li
491.379 22.7398 li
491.38 22.7398 li
491.381 22.7398 li
491.382 22.7398 li
491.383 22.7398 li
491.384 22.7398 li
491.385 22.7398 li
491.387 22.7398 li
491.388 22.7398 li
491.389 22.7398 li
491.39 22.7398 li
491.391 22.7398 li
491.392 22.7398 li
491.393 22.7398 li
491.394 22.7398 li
491.395 22.7398 li
491.396 22.7398 li
491.397 22.7398 li
491.398 22.7398 li
491.399 22.7398 li
491.4 22.7398 li
491.401 22.7398 li
491.402 22.7398 li
491.403 22.7398 li
491.404 22.7398 li
491.405 22.7398 li
491.406 22.7398 li
491.407 22.7398 li
491.408 22.7398 li
491.409 22.7398 li
491.41 22.7398 li
491.411 22.7398 li
491.412 22.7398 li
491.413 22.7398 li
491.414 22.7398 li
491.415 22.7398 li
491.416 22.7398 li
491.417 22.7398 li
491.418 22.7398 li
491.419 22.7398 li
491.42 22.7398 li
491.421 22.7398 li
491.422 22.7398 li
491.423 22.7398 li
491.424 22.7398 li
491.425 22.7398 li
491.426 22.7398 li
491.427 22.7398 li
491.428 22.7398 li
491.429 22.7398 li
491.43 22.7398 li
491.431 22.7398 li
491.432 22.7398 li
491.433 22.7398 li
491.434 22.7398 li
491.435 22.7398 li
491.436 22.7398 li
491.437 22.7398 li
491.438 22.7398 li
491.439 22.7398 li
491.44 22.7398 li
491.441 22.7398 li
491.442 22.7398 li
491.443 22.7398 li
491.444 22.7398 li
491.445 22.7398 li
491.446 22.7398 li
491.447 22.7398 li
491.448 22.7398 li
491.449 22.7398 li
491.45 22.7398 li
491.451 22.7398 li
.265137 .808594 0 0 cmyk
@
0 lj
42.9514 321.133 mo
47.4514 321.133 li
47.4514 316.633 li
42.9514 316.633 li
cp
@
113.2 226.229 mo
117.7 226.229 li
117.7 221.729 li
113.2 221.729 li
cp
@
195.663 158.972 mo
200.163 158.972 li
200.163 154.472 li
195.663 154.472 li
cp
@
249.72 107.931 mo
254.22 107.931 li
254.22 103.431 li
249.72 103.431 li
cp
@
289.321 82.1448 mo
293.821 82.1448 li
293.821 77.6448 li
289.321 77.6448 li
cp
@
317.593 64.3338 mo
322.093 64.3338 li
322.093 59.8338 li
317.593 59.8338 li
cp
@
339.304 53.7008 mo
343.804 53.7008 li
343.804 49.2008 li
339.304 49.2008 li
cp
@
356.011 46.5228 mo
360.511 46.5228 li
360.511 42.0228 li
356.011 42.0228 li
cp
@
369.615 39.0788 mo
374.115 39.0788 li
374.115 34.5788 li
369.615 34.5788 li
cp
@
381.213 35.6238 mo
385.713 35.6238 li
385.713 31.1238 li
381.213 31.1238 li
cp
@
390.509 33.7628 mo
395.009 33.7628 li
395.009 29.2628 li
390.509 29.2628 li
cp
@
398.328 31.6358 mo
402.828 31.6358 li
402.828 27.1358 li
398.328 27.1358 li
cp
@
405.332 30.3068 mo
409.832 30.3068 li
409.832 25.8068 li
405.332 25.8068 li
cp
@
411.383 28.1798 mo
415.883 28.1798 li
415.883 23.6798 li
411.383 23.6798 li
cp
@
416.54 27.6478 mo
421.04 27.6478 li
421.04 23.1478 li
416.54 23.1478 li
cp
@
421.192 27.1168 mo
425.692 27.1168 li
425.692 22.6168 li
421.192 22.6168 li
cp
@
425.208 26.0528 mo
429.708 26.0528 li
429.708 21.5528 li
425.208 21.5528 li
cp
@
428.749 25.7878 mo
433.249 25.7878 li
433.249 21.2878 li
428.749 21.2878 li
cp
@
432.047 25.5219 mo
436.547 25.5219 li
436.547 21.0219 li
432.047 21.0219 li
cp
@
434.988 25.5219 mo
439.488 25.5219 li
439.488 21.0219 li
434.988 21.0219 li
cp
@
437.712 25.5219 mo
442.212 25.5219 li
442.212 21.0219 li
437.712 21.0219 li
cp
@
440.181 25.5219 mo
444.681 25.5219 li
444.681 21.0219 li
440.181 21.0219 li
cp
@
442.608 25.2558 mo
447.108 25.2558 li
447.108 20.7558 li
442.608 20.7558 li
cp
@
444.726 25.2558 mo
449.226 25.2558 li
449.226 20.7558 li
444.726 20.7558 li
cp
@
446.792 25.2558 mo
451.292 25.2558 li
451.292 20.7558 li
446.792 20.7558 li
cp
@
448.762 25.2558 mo
453.262 25.2558 li
453.262 20.7558 li
448.762 20.7558 li
cp
@
450.577 25.2558 mo
455.077 25.2558 li
455.077 20.7558 li
450.577 20.7558 li
cp
@
452.374 24.9898 mo
456.874 24.9898 li
456.874 20.4898 li
452.374 20.4898 li
cp
@
454.088 24.9898 mo
458.588 24.9898 li
458.588 20.4898 li
454.088 20.4898 li
cp
@
455.713 24.9898 mo
460.213 24.9898 li
460.213 20.4898 li
455.713 20.4898 li
cp
@
457.3 24.9898 mo
461.8 24.9898 li
461.8 20.4898 li
457.3 20.4898 li
cp
@
458.851 24.9898 mo
463.351 24.9898 li
463.351 20.4898 li
458.851 20.4898 li
cp
@
460.326 24.9898 mo
464.826 24.9898 li
464.826 20.4898 li
460.326 20.4898 li
cp
@
461.78 24.9898 mo
466.28 24.9898 li
466.28 20.4898 li
461.78 20.4898 li
cp
@
463.185 24.9898 mo
467.685 24.9898 li
467.685 20.4898 li
463.185 20.4898 li
cp
@
464.579 24.9898 mo
469.079 24.9898 li
469.079 20.4898 li
464.579 20.4898 li
cp
@
465.898 24.9898 mo
470.398 24.9898 li
470.398 20.4898 li
465.898 20.4898 li
cp
@
467.18 24.9898 mo
471.68 24.9898 li
471.68 20.4898 li
467.18 20.4898 li
cp
@
468.411 24.9898 mo
472.911 24.9898 li
472.911 20.4898 li
468.411 20.4898 li
cp
@
469.59 24.9898 mo
474.09 24.9898 li
474.09 20.4898 li
469.59 20.4898 li
cp
@
470.738 24.9898 mo
475.238 24.9898 li
475.238 20.4898 li
470.738 20.4898 li
cp
@
471.85 24.9898 mo
476.35 24.9898 li
476.35 20.4898 li
471.85 20.4898 li
cp
@
472.932 24.9898 mo
477.432 24.9898 li
477.432 20.4898 li
472.932 20.4898 li
cp
@
473.912 24.9898 mo
478.412 24.9898 li
478.412 20.4898 li
473.912 20.4898 li
cp
@
474.925 24.9898 mo
479.425 24.9898 li
479.425 20.4898 li
474.925 20.4898 li
cp
@
475.844 24.9898 mo
480.344 24.9898 li
480.344 20.4898 li
475.844 20.4898 li
cp
@
476.739 24.9898 mo
481.239 24.9898 li
481.239 20.4898 li
476.739 20.4898 li
cp
@
477.564 24.9898 mo
482.064 24.9898 li
482.064 20.4898 li
477.564 20.4898 li
cp
@
478.342 24.9898 mo
482.842 24.9898 li
482.842 20.4898 li
478.342 20.4898 li
cp
@
479.076 24.9898 mo
483.576 24.9898 li
483.576 20.4898 li
479.076 20.4898 li
cp
@
479.816 24.9898 mo
484.316 24.9898 li
484.316 20.4898 li
479.816 20.4898 li
cp
@
480.48 24.9898 mo
484.98 24.9898 li
484.98 20.4898 li
480.48 20.4898 li
cp
@
481.102 24.9898 mo
485.602 24.9898 li
485.602 20.4898 li
481.102 20.4898 li
cp
@
481.688 24.9898 mo
486.188 24.9898 li
486.188 20.4898 li
481.688 20.4898 li
cp
@
482.242 24.9898 mo
486.742 24.9898 li
486.742 20.4898 li
482.242 20.4898 li
cp
@
482.759 24.9898 mo
487.259 24.9898 li
487.259 20.4898 li
482.759 20.4898 li
cp
@
483.239 24.9898 mo
487.739 24.9898 li
487.739 20.4898 li
483.239 20.4898 li
cp
@
483.672 24.9898 mo
488.172 24.9898 li
488.172 20.4898 li
483.672 20.4898 li
cp
@
484.088 24.9898 mo
488.588 24.9898 li
488.588 20.4898 li
484.088 20.4898 li
cp
@
484.47 24.9898 mo
488.97 24.9898 li
488.97 20.4898 li
484.47 20.4898 li
cp
@
484.827 24.9898 mo
489.327 24.9898 li
489.327 20.4898 li
484.827 20.4898 li
cp
@
485.156 24.9898 mo
489.656 24.9898 li
489.656 20.4898 li
485.156 20.4898 li
cp
@
485.476 24.9898 mo
489.976 24.9898 li
489.976 20.4898 li
485.476 20.4898 li
cp
@
485.772 24.9898 mo
490.272 24.9898 li
490.272 20.4898 li
485.772 20.4898 li
cp
@
486.041 24.9898 mo
490.541 24.9898 li
490.541 20.4898 li
486.041 20.4898 li
cp
@
486.284 24.9898 mo
490.784 24.9898 li
490.784 20.4898 li
486.284 20.4898 li
cp
@
486.514 24.9898 mo
491.014 24.9898 li
491.014 20.4898 li
486.514 20.4898 li
cp
@
486.719 24.9898 mo
491.219 24.9898 li
491.219 20.4898 li
486.719 20.4898 li
cp
@
486.904 24.9898 mo
491.404 24.9898 li
491.404 20.4898 li
486.904 20.4898 li
cp
@
487.076 24.9898 mo
491.576 24.9898 li
491.576 20.4898 li
487.076 20.4898 li
cp
@
487.236 24.9898 mo
491.736 24.9898 li
491.736 20.4898 li
487.236 20.4898 li
cp
@
487.39 24.9898 mo
491.89 24.9898 li
491.89 20.4898 li
487.39 20.4898 li
cp
@
487.524 24.9898 mo
492.024 24.9898 li
492.024 20.4898 li
487.524 20.4898 li
cp
@
487.651 24.9898 mo
492.151 24.9898 li
492.151 20.4898 li
487.651 20.4898 li
cp
@
487.767 24.9898 mo
492.267 24.9898 li
492.267 20.4898 li
487.767 20.4898 li
cp
@
487.871 24.9898 mo
492.371 24.9898 li
492.371 20.4898 li
487.871 20.4898 li
cp
@
487.969 24.9898 mo
492.469 24.9898 li
492.469 20.4898 li
487.969 20.4898 li
cp
@
488.058 24.9898 mo
492.558 24.9898 li
492.558 20.4898 li
488.058 20.4898 li
cp
@
488.142 24.9898 mo
492.642 24.9898 li
492.642 20.4898 li
488.142 20.4898 li
cp
@
488.221 24.9898 mo
492.721 24.9898 li
492.721 20.4898 li
488.221 20.4898 li
cp
@
488.296 24.9898 mo
492.796 24.9898 li
492.796 20.4898 li
488.296 20.4898 li
cp
@
488.367 24.9898 mo
492.867 24.9898 li
492.867 20.4898 li
488.367 20.4898 li
cp
@
488.424 24.9898 mo
492.924 24.9898 li
492.924 20.4898 li
488.424 20.4898 li
cp
@
488.482 24.9898 mo
492.982 24.9898 li
492.982 20.4898 li
488.482 20.4898 li
cp
@
488.533 24.9898 mo
493.033 24.9898 li
493.033 20.4898 li
488.533 20.4898 li
cp
@
488.585 24.9898 mo
493.085 24.9898 li
493.085 20.4898 li
488.585 20.4898 li
cp
@
488.632 24.9898 mo
493.132 24.9898 li
493.132 20.4898 li
488.632 20.4898 li
cp
@
488.675 24.9898 mo
493.175 24.9898 li
493.175 20.4898 li
488.675 20.4898 li
cp
@
488.709 24.9898 mo
493.209 24.9898 li
493.209 20.4898 li
488.709 20.4898 li
cp
@
488.74 24.9898 mo
493.24 24.9898 li
493.24 20.4898 li
488.74 20.4898 li
cp
@
488.77 24.9898 mo
493.27 24.9898 li
493.27 20.4898 li
488.77 20.4898 li
cp
@
488.8 24.9898 mo
493.3 24.9898 li
493.3 20.4898 li
488.8 20.4898 li
cp
@
488.826 24.9898 mo
493.326 24.9898 li
493.326 20.4898 li
488.826 20.4898 li
cp
@
488.85 24.9898 mo
493.35 24.9898 li
493.35 20.4898 li
488.85 20.4898 li
cp
@
488.871 24.9898 mo
493.371 24.9898 li
493.371 20.4898 li
488.871 20.4898 li
cp
@
488.894 24.9898 mo
493.394 24.9898 li
493.394 20.4898 li
488.894 20.4898 li
cp
@
488.915 24.9898 mo
493.415 24.9898 li
493.415 20.4898 li
488.915 20.4898 li
cp
@
488.933 24.9898 mo
493.433 24.9898 li
493.433 20.4898 li
488.933 20.4898 li
cp
@
488.949 24.9898 mo
493.449 24.9898 li
493.449 20.4898 li
488.949 20.4898 li
cp
@
488.964 24.9898 mo
493.464 24.9898 li
493.464 20.4898 li
488.964 20.4898 li
cp
@
488.976 24.9898 mo
493.476 24.9898 li
493.476 20.4898 li
488.976 20.4898 li
cp
@
488.991 24.9898 mo
493.491 24.9898 li
493.491 20.4898 li
488.991 20.4898 li
cp
@
489.004 24.9898 mo
493.504 24.9898 li
493.504 20.4898 li
489.004 20.4898 li
cp
@
489.017 24.9898 mo
493.517 24.9898 li
493.517 20.4898 li
489.017 20.4898 li
cp
@
489.028 24.9898 mo
493.528 24.9898 li
493.528 20.4898 li
489.028 20.4898 li
cp
@
489.038 24.9898 mo
493.538 24.9898 li
493.538 20.4898 li
489.038 20.4898 li
cp
@
489.048 24.9898 mo
493.548 24.9898 li
493.548 20.4898 li
489.048 20.4898 li
cp
@
489.057 24.9898 mo
493.557 24.9898 li
493.557 20.4898 li
489.057 20.4898 li
cp
@
489.064 24.9898 mo
493.564 24.9898 li
493.564 20.4898 li
489.064 20.4898 li
cp
@
489.071 24.9898 mo
493.571 24.9898 li
493.571 20.4898 li
489.071 20.4898 li
cp
@
489.078 24.9898 mo
493.578 24.9898 li
493.578 20.4898 li
489.078 20.4898 li
cp
@
489.086 24.9898 mo
493.586 24.9898 li
493.586 20.4898 li
489.086 20.4898 li
cp
@
489.093 24.9898 mo
493.593 24.9898 li
493.593 20.4898 li
489.093 20.4898 li
cp
@
489.098 24.9898 mo
493.598 24.9898 li
493.598 20.4898 li
489.098 20.4898 li
cp
@
489.104 24.9898 mo
493.604 24.9898 li
493.604 20.4898 li
489.104 20.4898 li
cp
@
489.111 24.9898 mo
493.611 24.9898 li
493.611 20.4898 li
489.111 20.4898 li
cp
@
489.117 24.9898 mo
493.617 24.9898 li
493.617 20.4898 li
489.117 20.4898 li
cp
@
489.122 24.9898 mo
493.622 24.9898 li
493.622 20.4898 li
489.122 20.4898 li
cp
@
489.126 24.9898 mo
493.626 24.9898 li
493.626 20.4898 li
489.126 20.4898 li
cp
@
489.131 24.9898 mo
493.631 24.9898 li
493.631 20.4898 li
489.131 20.4898 li
cp
@
489.133 24.9898 mo
493.633 24.9898 li
493.633 20.4898 li
489.133 20.4898 li
cp
@
489.137 24.9898 mo
493.637 24.9898 li
493.637 20.4898 li
489.137 20.4898 li
cp
@
489.142 24.9898 mo
493.642 24.9898 li
493.642 20.4898 li
489.142 20.4898 li
cp
@
489.144 24.9898 mo
493.644 24.9898 li
493.644 20.4898 li
489.144 20.4898 li
cp
@
489.147 24.9898 mo
493.647 24.9898 li
493.647 20.4898 li
489.147 20.4898 li
cp
@
489.15 24.9898 mo
493.65 24.9898 li
493.65 20.4898 li
489.15 20.4898 li
cp
@
489.153 24.9898 mo
493.653 24.9898 li
493.653 20.4898 li
489.153 20.4898 li
cp
@
489.155 24.9898 mo
493.655 24.9898 li
493.655 20.4898 li
489.155 20.4898 li
cp
@
489.157 24.9898 mo
493.657 24.9898 li
493.657 20.4898 li
489.157 20.4898 li
cp
@
489.159 24.9898 mo
493.659 24.9898 li
493.659 20.4898 li
489.159 20.4898 li
cp
@
489.16 24.9898 mo
493.66 24.9898 li
493.66 20.4898 li
489.16 20.4898 li
cp
@
489.162 24.9898 mo
493.662 24.9898 li
493.662 20.4898 li
489.162 20.4898 li
cp
@
489.164 24.9898 mo
493.664 24.9898 li
493.664 20.4898 li
489.164 20.4898 li
cp
@
489.164 24.9898 mo
493.664 24.9898 li
493.664 20.4898 li
489.164 20.4898 li
cp
@
489.165 24.9898 mo
493.665 24.9898 li
493.665 20.4898 li
489.165 20.4898 li
cp
@
489.167 24.9898 mo
493.667 24.9898 li
493.667 20.4898 li
489.167 20.4898 li
cp
@
489.168 24.9898 mo
493.668 24.9898 li
493.668 20.4898 li
489.168 20.4898 li
cp
@
489.171 24.9898 mo
493.671 24.9898 li
493.671 20.4898 li
489.171 20.4898 li
cp
@
489.172 24.9898 mo
493.672 24.9898 li
493.672 20.4898 li
489.172 20.4898 li
cp
@
489.173 24.9898 mo
493.673 24.9898 li
493.673 20.4898 li
489.173 20.4898 li
cp
@
489.176 24.9898 mo
493.676 24.9898 li
493.676 20.4898 li
489.176 20.4898 li
cp
@
489.177 24.9898 mo
493.677 24.9898 li
493.677 20.4898 li
489.177 20.4898 li
cp
@
489.178 24.9898 mo
493.678 24.9898 li
493.678 20.4898 li
489.178 20.4898 li
cp
@
489.179 24.9898 mo
493.679 24.9898 li
493.679 20.4898 li
489.179 20.4898 li
cp
@
489.18 24.9898 mo
493.68 24.9898 li
493.68 20.4898 li
489.18 20.4898 li
cp
@
489.181 24.9898 mo
493.681 24.9898 li
493.681 20.4898 li
489.181 20.4898 li
cp
@
489.182 24.9898 mo
493.682 24.9898 li
493.682 20.4898 li
489.182 20.4898 li
cp
@
489.183 24.9898 mo
493.683 24.9898 li
493.683 20.4898 li
489.183 20.4898 li
cp
@
489.184 24.9898 mo
493.684 24.9898 li
493.684 20.4898 li
489.184 20.4898 li
cp
@
489.185 24.9898 mo
493.685 24.9898 li
493.685 20.4898 li
489.185 20.4898 li
cp
@
489.186 24.9898 mo
493.686 24.9898 li
493.686 20.4898 li
489.186 20.4898 li
cp
@
489.186 24.9898 mo
493.686 24.9898 li
493.686 20.4898 li
489.186 20.4898 li
cp
@
489.188 24.9898 mo
493.688 24.9898 li
493.688 20.4898 li
489.188 20.4898 li
cp
@
489.188 24.9898 mo
493.688 24.9898 li
493.688 20.4898 li
489.188 20.4898 li
cp
@
489.189 24.9898 mo
493.689 24.9898 li
493.689 20.4898 li
489.189 20.4898 li
cp
@
489.189 24.9898 mo
493.689 24.9898 li
493.689 20.4898 li
489.189 20.4898 li
cp
@
489.19 24.9898 mo
493.69 24.9898 li
493.69 20.4898 li
489.19 20.4898 li
cp
@
489.19 24.9898 mo
493.69 24.9898 li
493.69 20.4898 li
489.19 20.4898 li
cp
@
489.191 24.9898 mo
493.691 24.9898 li
493.691 20.4898 li
489.191 20.4898 li
cp
@
489.192 24.9898 mo
493.692 24.9898 li
493.692 20.4898 li
489.192 20.4898 li
cp
@
489.192 24.9898 mo
493.692 24.9898 li
493.692 20.4898 li
489.192 20.4898 li
cp
@
489.193 24.9898 mo
493.693 24.9898 li
493.693 20.4898 li
489.193 20.4898 li
cp
@
489.194 24.9898 mo
493.694 24.9898 li
493.694 20.4898 li
489.194 20.4898 li
cp
@
489.194 24.9898 mo
493.694 24.9898 li
493.694 20.4898 li
489.194 20.4898 li
cp
@
489.194 24.9898 mo
493.694 24.9898 li
493.694 20.4898 li
489.194 20.4898 li
cp
@
489.195 24.9898 mo
493.695 24.9898 li
493.695 20.4898 li
489.195 20.4898 li
cp
@
489.196 24.9898 mo
493.696 24.9898 li
493.696 20.4898 li
489.196 20.4898 li
cp
@
489.196 24.9898 mo
493.696 24.9898 li
493.696 20.4898 li
489.196 20.4898 li
cp
@
489.197 24.9898 mo
493.697 24.9898 li
493.697 20.4898 li
489.197 20.4898 li
cp
@
489.197 24.9898 mo
493.697 24.9898 li
493.697 20.4898 li
489.197 20.4898 li
cp
@
489.197 24.9898 mo
493.697 24.9898 li
493.697 20.4898 li
489.197 20.4898 li
cp
@
489.198 24.9898 mo
493.698 24.9898 li
493.698 20.4898 li
489.198 20.4898 li
cp
@
489.198 24.9898 mo
493.698 24.9898 li
493.698 20.4898 li
489.198 20.4898 li
cp
@
489.198 24.9898 mo
493.698 24.9898 li
493.698 20.4898 li
489.198 20.4898 li
cp
@
489.199 24.9898 mo
493.699 24.9898 li
493.699 20.4898 li
489.199 20.4898 li
cp
@
489.199 24.9898 mo
493.699 24.9898 li
493.699 20.4898 li
489.199 20.4898 li
cp
@
489.199 24.9898 mo
493.699 24.9898 li
493.699 20.4898 li
489.199 20.4898 li
cp
@
489.199 24.9898 mo
493.699 24.9898 li
493.699 20.4898 li
489.199 20.4898 li
cp
@
489.199 24.9898 mo
493.699 24.9898 li
493.699 20.4898 li
489.199 20.4898 li
cp
@
489.199 24.9898 mo
493.699 24.9898 li
493.699 20.4898 li
489.199 20.4898 li
cp
@
489.199 24.9898 mo
493.699 24.9898 li
493.699 20.4898 li
489.199 20.4898 li
cp
@
489.199 24.9898 mo
493.699 24.9898 li
493.699 20.4898 li
489.199 20.4898 li
cp
@
489.2 24.9898 mo
493.7 24.9898 li
493.7 20.4898 li
489.2 20.4898 li
cp
@
489.2 24.9898 mo
493.7 24.9898 li
493.7 20.4898 li
489.2 20.4898 li
cp
@
489.2 24.9898 mo
493.7 24.9898 li
493.7 20.4898 li
489.2 20.4898 li
cp
@
489.2 24.9898 mo
493.7 24.9898 li
493.7 20.4898 li
489.2 20.4898 li
cp
@
489.2 24.9898 mo
493.7 24.9898 li
493.7 20.4898 li
489.2 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
489.201 24.9898 mo
493.701 24.9898 li
493.701 20.4898 li
489.201 20.4898 li
cp
@
1 lj
45.2014 228.232 mo
45.2014 210.421 li
60.419 207.497 li
60.419 192.344 li
79.5904 190.483 li
79.5904 189.154 li
86.4324 185.699 li
86.4324 183.572 li
105.604 180.913 li
112.446 179.85 li
112.446 177.723 li
115.451 175.331 li
115.451 174.001 li
115.451 172.141 li
118.231 170.545 li
118.231 169.482 li
118.231 168.419 li
120.821 166.558 li
125.519 164.165 li
129.692 163.368 li
129.692 161.241 li
136.863 159.646 li
142.881 159.38 li
142.881 156.722 li
145.562 155.392 li
152.621 154.063 li
156.682 153 li
156.682 151.406 li
157.632 150.342 li
163.684 149.013 li
170.26 148.215 li
176.99 146.089 li
180.209 144.227 li
181.223 143.165 li
184.112 141.038 li
188.066 139.708 li
190.488 138.379 li
192.02 137.581 li
195.597 135.455 li
198.232 134.657 li
199.79 134.126 li
203.004 132.531 li
205.965 131.201 li
208.949 129.075 li
210.815 128.809 li
212.155 128.011 li
215.311 126.683 li
220.044 124.822 li
222.952 124.556 li
226.558 123.492 li
229.019 121.897 li
231.719 120.834 li
233.995 120.037 li
237.168 118.175 li
239.463 116.049 li
242.418 114.985 li
243.954 113.922 li
246.058 111.529 li
248.552 110.732 li
250.419 110.732 li
252.498 109.403 li
254.751 108.872 li
256.068 108.074 li
258.698 106.744 li
261.275 106.213 li
262.899 105.681 li
265.53 104.617 li
266.984 103.555 li
269.4 101.96 li
271.399 101.428 li
273.167 100.631 li
275.103 99.5668 li
276.826 99.0348 li
279.106 98.7698 li
280.871 97.4398 li
282.353 96.6428 li
284.039 95.3138 li
285.808 94.7818 li
288.081 94.5158 li
289.589 93.4528 li
291.172 91.3258 li
292.819 90.7938 li
294.957 90.7938 li
296.264 90.5288 li
297.885 88.9328 li
299.353 88.4019 li
300.663 87.3378 li
302.427 86.0088 li
303.883 85.2118 li
305.231 84.9458 li
306.3 84.1488 li
307.822 83.6168 li
309.418 83.6168 li
310.456 82.8198 li
311.636 82.5528 li
313.583 82.5528 li
314.885 82.2878 li
315.866 81.7558 li
317.132 80.9578 li
318.654 79.6288 li
320.104 78.8318 li
321.535 78.5648 li
322.753 78.0338 li
324.122 77.5028 li
325.507 77.2358 li
326.801 75.3759 li
328.103 75.3759 li
329.553 75.3759 li
330.643 75.3759 li
331.883 74.0468 li
333.065 73.2488 li
334.178 72.9828 li
335.167 72.4508 li
336.1 71.3878 li
337.104 71.1218 li
338.219 70.8558 li
339.31 70.0588 li
340.384 69.7938 li
341.56 68.9948 li
342.641 68.4638 li
343.876 68.1978 li
344.912 67.4008 li
345.888 66.8688 li
346.816 66.8688 li
347.698 66.6028 li
348.53 65.2738 li
349.565 64.4768 li
350.633 63.9448 li
351.58 63.9448 li
352.546 63.9448 li
353.608 63.6788 li
354.712 62.8808 li
355.692 62.6148 li
356.601 61.8178 li
357.502 61.5518 li
358.324 60.7538 li
359.267 60.2228 li
360.214 59.9568 li
361.153 59.1598 li
361.956 58.6278 li
363.035 58.3618 li
363.942 56.7668 li
364.917 55.7038 li
365.915 55.1718 li
366.77 54.6398 li
367.686 53.5768 li
368.512 53.0448 li
369.321 52.5128 li
370.079 51.9818 li
370.954 51.9818 li
371.815 51.1848 li
372.504 51.1848 li
373.339 50.9188 li
374.238 50.9188 li
375.068 50.6528 li
375.801 49.8558 li
376.694 49.8558 li
377.53 49.3239 li
378.35 49.0578 li
379.059 48.5258 li
379.827 48.2598 li
380.474 47.9948 li
381.197 47.1968 li
382.002 47.1968 li
382.729 46.9308 li
383.479 46.9308 li
384.23 46.9308 li
385.001 46.9308 li
385.785 46.9308 li
386.439 46.1338 li
387.177 45.6018 li
387.874 45.6018 li
388.533 45.6018 li
389.171 45.0698 li
389.904 45.0698 li
390.587 45.0698 li
391.28 45.0698 li
391.969 45.0698 li
392.615 44.8038 li
393.257 44.8038 li
393.903 44.8038 li
394.601 44.8038 li
395.2 44.2719 li
395.818 44.2719 li
396.391 44.0068 li
397.03 43.7418 li
397.654 43.4749 li
398.24 43.4749 li
398.812 43.4749 li
399.474 43.4749 li
400.072 43.4749 li
400.658 43.4749 li
401.228 42.6778 li
401.888 42.6778 li
402.471 42.4118 li
403.071 41.8798 li
403.634 41.0828 li
404.256 40.5508 li
404.867 40.2848 li
405.444 39.7538 li
406.06 39.4878 li
406.633 38.9558 li
407.233 38.9558 li
407.785 38.9558 li
408.32 38.6898 li
408.912 38.1578 li
409.451 38.1578 li
409.963 37.3608 li
410.535 37.3608 li
411.057 36.8288 li
411.608 36.5628 li
412.104 36.2979 li
412.558 36.2979 li
413.099 35.5009 li
413.604 35.5009 li
414.072 35.2338 li
414.535 35.2338 li
415.027 35.2338 li
415.565 34.9688 li
416.006 34.9688 li
416.451 34.7018 li
416.968 34.7018 li
417.389 34.7018 li
417.869 34.4368 li
418.338 34.1708 li
418.794 33.6388 li
419.227 33.6388 li
419.658 33.1078 li
420.115 33.1078 li
420.579 33.1078 li
421.058 32.8418 li
421.509 32.8418 li
421.985 32.8418 li
422.41 32.8418 li
422.847 32.8418 li
423.299 32.8418 li
423.722 32.8418 li
424.146 32.8418 li
424.562 32.3098 li
424.969 32.3098 li
425.387 32.3098 li
425.817 31.5128 li
426.243 31.5128 li
426.659 31.2468 li
427.044 31.2468 li
427.424 30.9808 li
427.831 30.4489 li
428.213 30.4489 li
428.567 30.4489 li
428.96 30.1838 li
429.369 29.9168 li
429.755 29.9168 li
430.152 29.9168 li
430.51 29.9168 li
430.892 29.6519 li
431.293 29.3858 li
431.66 29.3858 li
432.023 29.3858 li
432.386 29.3858 li
432.737 29.3858 li
433.072 29.3858 li
433.427 29.3858 li
433.773 29.3858 li
434.153 29.3858 li
434.506 29.1198 li
434.863 29.1198 li
435.256 29.1198 li
435.59 29.1198 li
435.943 29.1198 li
436.297 29.1198 li
436.648 28.8538 li
436.999 28.8538 li
437.344 28.8538 li
437.692 28.8538 li
438.004 28.5878 li
438.314 28.0568 li
438.616 28.0568 li
438.944 28.0568 li
439.252 28.0568 li
439.569 28.0568 li
439.904 28.0568 li
440.205 28.0568 li
440.495 28.0568 li
440.806 28.0568 li
441.1 28.0568 li
441.389 28.0568 li
441.701 28.0568 li
442.006 28.0568 li
442.294 28.0568 li
442.606 28.0568 li
442.899 28.0568 li
443.207 28.0568 li
443.51 28.0568 li
443.799 28.0568 li
444.078 28.0568 li
444.361 28.0568 li
444.652 28.0568 li
444.897 28.0568 li
445.169 28.0568 li
445.428 27.7908 li
445.698 27.5248 li
445.961 27.5248 li
446.224 27.5248 li
446.479 27.5248 li
446.744 27.5248 li
446.993 27.2598 li
447.255 26.9928 li
447.542 26.9928 li
447.798 26.9928 li
448.082 26.9928 li
448.355 26.9928 li
448.597 26.9928 li
448.878 26.9928 li
449.135 26.9928 li
449.373 26.9928 li
449.64 26.9928 li
449.886 26.9928 li
450.139 26.9928 li
450.373 26.9928 li
450.618 26.9928 li
450.853 26.9928 li
451.097 26.9928 li
451.329 26.9928 li
451.593 26.9928 li
451.837 26.9928 li
452.074 26.9928 li
452.32 26.9928 li
452.539 26.9928 li
452.765 26.9928 li
453.005 26.9928 li
453.247 26.9928 li
453.469 26.7278 li
453.675 26.1958 li
453.905 26.1958 li
454.115 25.9298 li
454.341 25.9298 li
454.557 25.9298 li
454.788 25.9298 li
455.002 25.6638 li
455.215 25.6638 li
455.418 25.1328 li
455.63 25.1328 li
455.842 25.1328 li
456.049 25.1328 li
456.271 25.1328 li
456.481 25.1328 li
456.697 25.1328 li
456.896 25.1328 li
457.096 25.1328 li
457.313 25.1328 li
457.519 25.1328 li
457.714 25.1328 li
457.912 25.1328 li
458.116 25.1328 li
458.306 25.1328 li
458.493 25.1328 li
458.679 25.1328 li
458.86 25.1328 li
459.037 25.1328 li
459.23 25.1328 li
459.43 25.1328 li
459.612 24.8668 li
459.794 24.8668 li
459.971 24.8668 li
460.169 24.8668 li
460.358 24.8668 li
460.559 24.8668 li
460.733 24.8668 li
460.919 24.6008 li
461.087 24.6008 li
461.275 24.6008 li
461.449 24.6008 li
461.624 24.6008 li
461.811 24.6008 li
461.99 24.6008 li
462.16 24.6008 li
462.334 24.6008 li
462.506 24.6008 li
462.682 24.6008 li
462.863 24.6008 li
463.049 24.6008 li
463.212 24.3348 li
463.385 24.3348 li
463.555 24.3348 li
463.718 24.3348 li
463.877 24.3348 li
464.046 24.3348 li
464.206 24.3348 li
464.363 24.0688 li
464.524 24.0688 li
464.676 24.0688 li
464.837 24.0688 li
464.992 24.0688 li
465.148 24.0688 li
465.304 24.0688 li
465.455 24.0688 li
465.611 24.0688 li
465.772 24.0688 li
465.928 24.0688 li
466.077 24.0688 li
466.217 24.0688 li
466.364 24.0688 li
466.517 24.0688 li
466.656 24.0688 li
466.798 24.0688 li
466.946 24.0688 li
467.097 24.0688 li
467.237 24.0688 li
467.379 24.0688 li
467.524 24.0688 li
467.669 24.0688 li
467.808 24.0688 li
467.949 24.0688 li
468.082 24.0688 li
468.217 24.0688 li
468.359 24.0688 li
468.499 24.0688 li
468.635 24.0688 li
468.779 23.8038 li
468.914 23.8038 li
469.051 23.8038 li
469.183 23.8038 li
469.31 23.8038 li
469.442 23.8038 li
469.576 23.8038 li
469.708 23.8038 li
469.829 23.8038 li
469.947 23.8038 li
470.071 23.8038 li
470.206 23.8038 li
470.314 23.8038 li
470.449 23.8038 li
470.565 23.8038 li
470.685 23.8038 li
470.806 23.8038 li
470.941 23.8038 li
471.058 23.8038 li
471.186 23.8038 li
471.31 23.8038 li
471.427 23.8038 li
471.547 23.8038 li
471.672 23.8038 li
471.783 23.8038 li
471.887 23.8038 li
472.003 23.8038 li
472.115 23.8038 li
472.223 23.8038 li
472.345 23.8038 li
472.453 23.8038 li
472.566 23.8038 li
472.682 23.8038 li
472.798 23.8038 li
472.908 23.8038 li
473.015 23.8038 li
473.13 23.8038 li
473.242 23.8038 li
473.347 23.8038 li
473.455 23.8038 li
473.56 23.8038 li
473.669 23.8038 li
473.778 23.5368 li
473.879 23.5368 li
473.982 23.5368 li
474.094 23.5368 li
474.197 23.5368 li
474.3 23.5368 li
474.415 23.5368 li
474.512 23.5368 li
474.613 23.5368 li
474.713 23.5368 li
474.812 23.5368 li
474.918 23.5368 li
475.015 23.5368 li
475.105 23.5368 li
475.204 23.5368 li
475.3 23.5368 li
475.399 23.5368 li
475.501 23.5368 li
475.594 23.5368 li
475.688 23.5368 li
475.782 23.5368 li
475.882 23.5368 li
475.98 23.5368 li
476.076 23.2719 li
476.174 23.2719 li
476.274 23.2719 li
476.368 23.2719 li
476.468 23.2719 li
476.551 23.2719 li
476.644 23.2719 li
476.735 23.2719 li
476.822 23.2719 li
476.903 23.2719 li
476.981 23.2719 li
477.068 23.2719 li
477.155 23.2719 li
477.238 23.2719 li
477.317 23.2719 li
477.401 23.2719 li
477.488 23.2719 li
477.562 23.2719 li
477.647 23.2719 li
477.728 23.2719 li
477.81 23.2719 li
477.896 23.2719 li
477.974 23.2719 li
478.057 23.2719 li
478.134 23.2719 li
478.22 23.2719 li
478.297 23.2719 li
478.379 23.2719 li
478.453 23.2719 li
478.531 23.2719 li
478.612 23.0058 li
478.699 23.0058 li
478.775 23.0058 li
478.847 23.0058 li
478.919 23.0058 li
479 23.0058 li
479.083 23.0058 li
479.159 23.0058 li
479.236 23.0058 li
479.308 23.0058 li
479.391 23.0058 li
479.46 23.0058 li
479.528 23.0058 li
479.596 23.0058 li
479.667 23.0058 li
479.732 23.0058 li
479.807 23.0058 li
479.878 23.0058 li
479.95 23.0058 li
480.034 23.0058 li
480.109 23.0058 li
480.184 23.0058 li
480.253 23.0058 li
480.322 23.0058 li
480.387 23.0058 li
480.455 23.0058 li
480.519 23.0058 li
480.59 22.7398 li
480.658 22.7398 li
480.73 22.7398 li
480.801 22.7398 li
480.867 22.7398 li
480.931 22.7398 li
481 22.7398 li
481.062 22.7398 li
481.131 22.7398 li
481.199 22.7398 li
481.256 22.7398 li
481.316 22.7398 li
481.383 22.7398 li
481.445 22.7398 li
481.496 22.7398 li
481.558 22.7398 li
481.613 22.7398 li
481.673 22.7398 li
481.738 22.7398 li
481.803 22.7398 li
481.865 22.7398 li
481.922 22.7398 li
481.987 22.7398 li
482.044 22.7398 li
482.104 22.7398 li
482.163 22.7398 li
482.221 22.7398 li
482.274 22.7398 li
482.331 22.7398 li
482.386 22.7398 li
482.444 22.7398 li
482.499 22.7398 li
482.551 22.7398 li
482.606 22.7398 li
482.657 22.7398 li
482.717 22.7398 li
482.771 22.7398 li
482.822 22.7398 li
482.874 22.7398 li
482.924 22.7398 li
482.974 22.7398 li
483.03 22.7398 li
483.084 22.7398 li
483.132 22.7398 li
483.179 22.7398 li
483.232 22.7398 li
483.283 22.7398 li
483.341 22.7398 li
483.393 22.7398 li
483.44 22.7398 li
483.496 22.7398 li
483.544 22.7398 li
483.59 22.7398 li
483.637 22.7398 li
483.683 22.7398 li
483.737 22.7398 li
483.786 22.7398 li
483.83 22.7398 li
483.874 22.7398 li
483.918 22.7398 li
483.963 22.7398 li
484.011 22.7398 li
484.058 22.7398 li
484.106 22.7398 li
484.156 22.7398 li
484.207 22.7398 li
484.253 22.7398 li
484.303 22.7398 li
484.342 22.7398 li
484.385 22.7398 li
484.43 22.7398 li
484.474 22.7398 li
484.519 22.7398 li
484.556 22.7398 li
484.6 22.7398 li
484.646 22.7398 li
484.687 22.7398 li
484.731 22.7398 li
484.774 22.7398 li
484.812 22.7398 li
484.851 22.7398 li
484.894 22.7398 li
484.933 22.7398 li
484.976 22.7398 li
485.017 22.7398 li
485.055 22.7398 li
485.094 22.7398 li
485.132 22.7398 li
485.179 22.7398 li
485.223 22.7398 li
485.265 22.7398 li
485.303 22.7398 li
485.342 22.7398 li
485.376 22.7398 li
485.415 22.7398 li
485.451 22.7398 li
485.483 22.7398 li
485.521 22.7398 li
485.558 22.7398 li
485.599 22.7398 li
485.636 22.7398 li
485.675 22.7398 li
485.71 22.7398 li
485.749 22.7398 li
485.785 22.7398 li
485.822 22.7398 li
485.851 22.7398 li
485.892 22.7398 li
485.931 22.7398 li
485.968 22.7398 li
486.005 22.7398 li
486.037 22.7398 li
486.076 22.7398 li
486.113 22.7398 li
486.15 22.7398 li
486.183 22.7398 li
486.216 22.7398 li
486.252 22.7398 li
486.283 22.7398 li
486.312 22.7398 li
486.346 22.7398 li
486.381 22.7398 li
486.41 22.7398 li
486.44 22.7398 li
486.476 22.7398 li
486.508 22.7398 li
486.538 22.7398 li
486.568 22.7398 li
486.596 22.7398 li
486.623 22.7398 li
486.656 22.7398 li
486.689 22.7398 li
486.717 22.7398 li
486.748 22.7398 li
486.778 22.7398 li
486.808 22.7398 li
486.839 22.7398 li
486.872 22.7398 li
486.902 22.7398 li
486.933 22.7398 li
486.964 22.7398 li
486.992 22.7398 li
487.019 22.7398 li
487.049 22.7398 li
487.077 22.7398 li
487.105 22.7398 li
487.133 22.7398 li
487.162 22.7398 li
487.192 22.7398 li
487.222 22.7398 li
487.247 22.7398 li
487.272 22.7398 li
487.301 22.7398 li
487.324 22.7398 li
487.349 22.7398 li
487.377 22.7398 li
487.401 22.7398 li
487.428 22.7398 li
487.453 22.7398 li
487.479 22.7398 li
487.508 22.7398 li
487.533 22.7398 li
487.555 22.7398 li
487.58 22.7398 li
487.608 22.7398 li
487.635 22.7398 li
487.66 22.7398 li
487.685 22.7398 li
487.706 22.7398 li
487.733 22.7398 li
487.76 22.7398 li
487.783 22.7398 li
487.807 22.7398 li
487.827 22.7398 li
487.853 22.7398 li
487.876 22.7398 li
487.9 22.7398 li
487.921 22.7398 li
487.945 22.7398 li
487.969 22.7398 li
487.99 22.7398 li
488.012 22.7398 li
488.031 22.7398 li
488.051 22.7398 li
488.074 22.7398 li
488.096 22.7398 li
488.114 22.7398 li
488.136 22.7398 li
488.155 22.7398 li
488.178 22.7398 li
488.199 22.7398 li
488.221 22.7398 li
488.244 22.7398 li
488.266 22.7398 li
488.287 22.7398 li
488.308 22.7398 li
488.326 22.7398 li
488.347 22.7398 li
488.367 22.7398 li
488.387 22.7398 li
488.405 22.7398 li
488.422 22.7398 li
488.444 22.7398 li
488.465 22.7398 li
488.482 22.7398 li
488.502 22.7398 li
488.522 22.7398 li
488.54 22.7398 li
488.558 22.7398 li
488.578 22.7398 li
488.597 22.7398 li
488.616 22.7398 li
488.634 22.7398 li
488.653 22.7398 li
488.669 22.7398 li
488.687 22.7398 li
488.708 22.7398 li
488.725 22.7398 li
488.745 22.7398 li
488.767 22.7398 li
488.784 22.7398 li
488.798 22.7398 li
488.816 22.7398 li
488.831 22.7398 li
488.849 22.7398 li
488.866 22.7398 li
488.883 22.7398 li
488.899 22.7398 li
488.914 22.7398 li
488.93 22.7398 li
488.948 22.7398 li
488.965 22.7398 li
488.981 22.7398 li
488.997 22.7398 li
489.012 22.7398 li
489.028 22.7398 li
489.043 22.7398 li
489.062 22.7398 li
489.079 22.7398 li
489.094 22.7398 li
489.11 22.7398 li
489.123 22.7398 li
489.135 22.7398 li
489.149 22.7398 li
489.165 22.7398 li
489.179 22.7398 li
489.196 22.7398 li
489.212 22.7398 li
489.227 22.7398 li
489.24 22.7398 li
489.253 22.7398 li
489.266 22.7398 li
489.281 22.7398 li
489.292 22.7398 li
489.307 22.7398 li
489.319 22.7398 li
489.332 22.7398 li
489.346 22.7398 li
489.358 22.7398 li
489.373 22.7398 li
489.386 22.7398 li
489.401 22.7398 li
489.413 22.7398 li
489.431 22.7398 li
489.447 22.7398 li
489.46 22.7398 li
489.472 22.7398 li
489.487 22.7398 li
489.5 22.7398 li
489.515 22.7398 li
489.53 22.7398 li
489.542 22.7398 li
489.553 22.7398 li
489.567 22.7398 li
489.581 22.7398 li
489.595 22.7398 li
489.608 22.7398 li
489.62 22.7398 li
489.631 22.7398 li
489.646 22.7398 li
489.657 22.7398 li
489.669 22.7398 li
489.68 22.7398 li
489.692 22.7398 li
489.703 22.7398 li
489.713 22.7398 li
489.724 22.7398 li
489.738 22.7398 li
489.748 22.7398 li
489.759 22.7398 li
489.769 22.7398 li
489.781 22.7398 li
489.795 22.7398 li
489.806 22.7398 li
489.818 22.7398 li
489.83 22.7398 li
489.841 22.7398 li
489.853 22.7398 li
489.863 22.7398 li
489.874 22.7398 li
489.884 22.7398 li
489.893 22.7398 li
489.904 22.7398 li
489.915 22.7398 li
489.924 22.7398 li
489.935 22.7398 li
489.943 22.7398 li
489.953 22.7398 li
489.964 22.7398 li
489.974 22.7398 li
489.984 22.7398 li
489.994 22.7398 li
490.003 22.7398 li
490.012 22.7398 li
490.023 22.7398 li
490.036 22.7398 li
490.045 22.7398 li
490.054 22.7398 li
490.063 22.7398 li
490.071 22.7398 li
490.081 22.7398 li
490.088 22.7398 li
490.099 22.7398 li
490.108 22.7398 li
490.117 22.7398 li
490.125 22.7398 li
490.133 22.7398 li
490.142 22.7398 li
490.15 22.7398 li
490.158 22.7398 li
490.167 22.7398 li
490.178 22.7398 li
490.187 22.7398 li
490.196 22.7398 li
490.205 22.7398 li
490.214 22.7398 li
490.222 22.7398 li
490.23 22.7398 li
490.238 22.7398 li
490.245 22.7398 li
490.253 22.7398 li
490.261 22.7398 li
490.269 22.7398 li
490.276 22.7398 li
490.285 22.7398 li
490.292 22.7398 li
490.301 22.7398 li
490.31 22.7398 li
490.315 22.7398 li
490.324 22.7398 li
490.333 22.7398 li
490.34 22.7398 li
490.347 22.7398 li
490.354 22.7398 li
490.36 22.7398 li
490.367 22.7398 li
490.376 22.7398 li
490.384 22.7398 li
490.39 22.7398 li
490.399 22.7398 li
490.406 22.7398 li
490.413 22.7398 li
490.42 22.7398 li
490.426 22.7398 li
490.434 22.7398 li
490.442 22.7398 li
490.448 22.7398 li
490.455 22.7398 li
490.462 22.7398 li
490.469 22.7398 li
490.474 22.7398 li
490.481 22.7398 li
490.489 22.7398 li
490.496 22.7398 li
490.501 22.7398 li
490.507 22.7398 li
490.514 22.7398 li
490.519 22.7398 li
490.525 22.7398 li
490.531 22.7398 li
490.536 22.7398 li
490.541 22.7398 li
490.549 22.7398 li
490.554 22.7398 li
490.561 22.7398 li
490.567 22.7398 li
490.573 22.7398 li
490.576 22.7398 li
490.584 22.7398 li
490.591 22.7398 li
490.597 22.7398 li
490.606 22.7398 li
490.613 22.7398 li
490.619 22.7398 li
490.625 22.7398 li
490.631 22.7398 li
490.637 22.7398 li
490.646 22.7398 li
490.651 22.7398 li
490.656 22.7398 li
490.664 22.7398 li
490.669 22.7398 li
490.673 22.7398 li
490.677 22.7398 li
490.682 22.7398 li
490.687 22.7398 li
490.694 22.7398 li
490.699 22.7398 li
490.703 22.7398 li
490.709 22.7398 li
490.714 22.7398 li
490.721 22.7398 li
490.726 22.7398 li
490.731 22.7398 li
490.736 22.7398 li
490.741 22.7398 li
490.745 22.7398 li
490.748 22.7398 li
490.753 22.7398 li
490.759 22.7398 li
490.762 22.7398 li
490.767 22.7398 li
490.772 22.7398 li
490.776 22.7398 li
490.781 22.7398 li
490.785 22.7398 li
490.79 22.7398 li
490.794 22.7398 li
490.798 22.7398 li
490.802 22.7398 li
490.807 22.7398 li
490.812 22.7398 li
490.816 22.7398 li
490.819 22.7398 li
490.824 22.7398 li
490.828 22.7398 li
490.834 22.7398 li
490.837 22.7398 li
490.842 22.7398 li
490.846 22.7398 li
490.851 22.7398 li
490.856 22.7398 li
490.858 22.7398 li
490.863 22.7398 li
490.867 22.7398 li
490.87 22.7398 li
490.873 22.7398 li
490.876 22.7398 li
490.881 22.7398 li
490.883 22.7398 li
490.888 22.7398 li
490.891 22.7398 li
490.896 22.7398 li
490.9 22.7398 li
490.905 22.7398 li
490.908 22.7398 li
490.912 22.7398 li
490.916 22.7398 li
490.92 22.7398 li
490.923 22.7398 li
490.926 22.7398 li
490.93 22.7398 li
490.933 22.7398 li
490.937 22.7398 li
490.94 22.7398 li
490.942 22.7398 li
490.947 22.7398 li
490.951 22.7398 li
490.954 22.7398 li
490.957 22.7398 li
490.96 22.7398 li
490.964 22.7398 li
490.967 22.7398 li
490.972 22.7398 li
490.975 22.7398 li
490.978 22.7398 li
490.981 22.7398 li
490.985 22.7398 li
490.988 22.7398 li
490.991 22.7398 li
490.994 22.7398 li
490.997 22.7398 li
490.999 22.7398 li
491.002 22.7398 li
491.006 22.7398 li
491.008 22.7398 li
491.01 22.7398 li
491.012 22.7398 li
491.015 22.7398 li
491.018 22.7398 li
491.021 22.7398 li
491.024 22.7398 li
491.026 22.7398 li
491.03 22.7398 li
491.034 22.7398 li
491.038 22.7398 li
491.04 22.7398 li
491.043 22.7398 li
491.046 22.7398 li
491.05 22.7398 li
491.053 22.7398 li
491.055 22.7398 li
491.059 22.7398 li
491.06 22.7398 li
491.062 22.7398 li
491.065 22.7398 li
491.067 22.7398 li
491.069 22.7398 li
491.072 22.7398 li
491.074 22.7398 li
491.077 22.7398 li
491.08 22.7398 li
491.083 22.7398 li
491.086 22.7398 li
491.088 22.7398 li
491.091 22.7398 li
491.094 22.7398 li
491.097 22.7398 li
491.1 22.7398 li
491.102 22.7398 li
491.105 22.7398 li
491.107 22.7398 li
491.108 22.7398 li
491.111 22.7398 li
491.114 22.7398 li
491.117 22.7398 li
491.12 22.7398 li
491.122 22.7398 li
491.125 22.7398 li
491.127 22.7398 li
491.13 22.7398 li
491.132 22.7398 li
491.135 22.7398 li
491.137 22.7398 li
491.14 22.7398 li
491.142 22.7398 li
491.144 22.7398 li
491.147 22.7398 li
491.149 22.7398 li
491.151 22.7398 li
491.154 22.7398 li
491.156 22.7398 li
491.158 22.7398 li
491.16 22.7398 li
491.162 22.7398 li
491.164 22.7398 li
491.165 22.7398 li
491.167 22.7398 li
491.17 22.7398 li
491.172 22.7398 li
491.174 22.7398 li
491.176 22.7398 li
491.178 22.7398 li
491.18 22.7398 li
491.181 22.7398 li
491.183 22.7398 li
491.185 22.7398 li
491.187 22.7398 li
491.189 22.7398 li
491.191 22.7398 li
491.192 22.7398 li
491.194 22.7398 li
491.196 22.7398 li
491.197 22.7398 li
491.2 22.7398 li
491.201 22.7398 li
491.203 22.7398 li
491.205 22.7398 li
491.206 22.7398 li
491.208 22.7398 li
491.21 22.7398 li
491.211 22.7398 li
491.213 22.7398 li
491.215 22.7398 li
491.217 22.7398 li
491.219 22.7398 li
491.221 22.7398 li
491.224 22.7398 li
491.225 22.7398 li
491.227 22.7398 li
491.228 22.7398 li
491.231 22.7398 li
491.232 22.7398 li
491.234 22.7398 li
491.236 22.7398 li
491.237 22.7398 li
491.239 22.7398 li
491.241 22.7398 li
491.242 22.7398 li
491.244 22.7398 li
491.245 22.7398 li
491.246 22.7398 li
491.247 22.7398 li
491.249 22.7398 li
491.25 22.7398 li
491.251 22.7398 li
491.254 22.7398 li
491.256 22.7398 li
491.258 22.7398 li
491.259 22.7398 li
491.26 22.7398 li
491.262 22.7398 li
491.264 22.7398 li
491.265 22.7398 li
491.267 22.7398 li
491.268 22.7398 li
491.27 22.7398 li
491.272 22.7398 li
491.273 22.7398 li
491.274 22.7398 li
491.276 22.7398 li
491.277 22.7398 li
491.279 22.7398 li
491.28 22.7398 li
491.281 22.7398 li
491.283 22.7398 li
491.284 22.7398 li
491.286 22.7398 li
491.287 22.7398 li
491.289 22.7398 li
491.29 22.7398 li
491.292 22.7398 li
491.293 22.7398 li
491.294 22.7398 li
491.295 22.7398 li
491.296 22.7398 li
491.297 22.7398 li
491.298 22.7398 li
491.299 22.7398 li
491.301 22.7398 li
491.302 22.7398 li
491.303 22.7398 li
491.305 22.7398 li
491.306 22.7398 li
491.308 22.7398 li
491.309 22.7398 li
491.311 22.7398 li
491.312 22.7398 li
491.313 22.7398 li
491.315 22.7398 li
491.316 22.7398 li
491.317 22.7398 li
491.318 22.7398 li
491.319 22.7398 li
491.32 22.7398 li
491.321 22.7398 li
491.322 22.7398 li
491.323 22.7398 li
491.324 22.7398 li
491.325 22.7398 li
491.326 22.7398 li
491.327 22.7398 li
491.328 22.7398 li
491.329 22.7398 li
491.33 22.7398 li
491.331 22.7398 li
491.332 22.7398 li
491.333 22.7398 li
491.334 22.7398 li
491.335 22.7398 li
491.336 22.7398 li
491.338 22.7398 li
491.339 22.7398 li
491.341 22.7398 li
491.342 22.7398 li
491.343 22.7398 li
491.344 22.7398 li
491.345 22.7398 li
491.347 22.7398 li
491.348 22.7398 li
491.349 22.7398 li
491.35 22.7398 li
491.351 22.7398 li
491.352 22.7398 li
491.353 22.7398 li
491.354 22.7398 li
491.355 22.7398 li
491.356 22.7398 li
491.357 22.7398 li
491.358 22.7398 li
491.359 22.7398 li
491.36 22.7398 li
491.361 22.7398 li
491.362 22.7398 li
491.363 22.7398 li
491.364 22.7398 li
491.365 22.7398 li
491.366 22.7398 li
491.367 22.7398 li
491.368 22.7398 li
491.369 22.7398 li
491.37 22.7398 li
491.371 22.7398 li
491.372 22.7398 li
491.373 22.7398 li
491.374 22.7398 li
491.375 22.7398 li
491.376 22.7398 li
491.377 22.7398 li
491.378 22.7398 li
491.379 22.7398 li
491.38 22.7398 li
491.381 22.7398 li
491.382 22.7398 li
491.383 22.7398 li
491.384 22.7398 li
491.385 22.7398 li
491.386 22.7398 li
491.387 22.7398 li
491.388 22.7398 li
491.389 22.7398 li
491.39 22.7398 li
491.391 22.7398 li
491.392 22.7398 li
491.393 22.7398 li
491.394 22.7398 li
491.395 22.7398 li
491.396 22.7398 li
491.397 22.7398 li
491.398 22.7398 li
491.399 22.7398 li
491.4 22.7398 li
491.401 22.7398 li
491.402 22.7398 li
491.403 22.7398 li
491.404 22.7398 li
491.405 22.7398 li
491.406 22.7398 li
491.407 22.7398 li
491.408 22.7398 li
491.409 22.7398 li
491.41 22.7398 li
491.411 22.7398 li
491.412 22.7398 li
491.413 22.7398 li
491.414 22.7398 li
491.415 22.7398 li
491.416 22.7398 li
491.417 22.7398 li
491.418 22.7398 li
491.419 22.7398 li
491.42 22.7398 li
491.421 22.7398 li
491.422 22.7398 li
491.423 22.7398 li
491.424 22.7398 li
491.425 22.7398 li
491.426 22.7398 li
491.427 22.7398 li
491.428 22.7398 li
491.429 22.7398 li
491.43 22.7398 li
491.431 22.7398 li
491.432 22.7398 li
491.433 22.7398 li
491.434 22.7398 li
491.435 22.7398 li
491.436 22.7398 li
491.437 22.7398 li
491.438 22.7398 li
491.439 22.7398 li
491.44 22.7398 li
491.441 22.7398 li
491.442 22.7398 li
491.443 22.7398 li
491.444 22.7398 li
491.445 22.7398 li
491.446 22.7398 li
491.447 22.7398 li
491.448 22.7398 li
491.449 22.7398 li
491.45 22.7398 li
491.451 22.7398 li
1 /0 /CSD get_res sepcs
1 sep
@
0 lj
60.4186 198.648 mo
60.4186 204.648 li
@
112.446 174.723 mo
112.446 180.723 li
@
129.692 158.241 mo
129.692 164.241 li
@
170.26 145.215 mo
170.26 151.215 li
@
199.79 131.126 mo
199.79 137.126 li
@
229.018 118.897 mo
229.018 124.897 li
@
252.498 106.403 mo
252.498 112.403 li
@
273.167 97.6298 mo
273.167 103.63 li
@
291.172 88.3258 mo
291.172 94.3258 li
@
306.3 81.1478 mo
306.3 87.1478 li
@
320.103 75.8318 mo
320.103 81.8318 li
@
333.065 70.2488 mo
333.065 76.2488 li
@
343.876 65.1978 mo
343.876 71.1978 li
@
353.609 60.6788 mo
353.609 66.6788 li
@
363.035 55.3618 mo
363.035 61.3618 li
@
371.815 48.1848 mo
371.815 54.1848 li
@
379.827 45.2598 mo
379.827 51.2598 li
@
387.177 42.6018 mo
387.177 48.6018 li
@
393.903 41.8038 mo
393.903 47.8038 li
@
400.072 40.4749 mo
400.072 46.4749 li
@
406.06 36.4878 mo
406.06 42.4878 li
@
411.609 33.5628 mo
411.609 39.5628 li
@
416.451 31.7018 mo
416.451 37.7018 li
@
421.058 29.8418 mo
421.058 35.8418 li
@
425.387 29.3098 mo
425.387 35.3098 li
@
429.369 26.9178 mo
429.369 32.9178 li
@
433.072 26.3858 mo
433.072 32.3858 li
@
436.648 25.8538 mo
436.648 31.8538 li
@
439.904 25.0568 mo
439.904 31.0568 li
@
442.899 25.0568 mo
442.899 31.0568 li
@
445.698 24.5248 mo
445.698 30.5248 li
@
448.355 23.9938 mo
448.355 29.9938 li
@
450.853 23.9938 mo
450.853 29.9938 li
@
453.247 23.9938 mo
453.247 29.9938 li
@
455.418 22.1328 mo
455.418 28.1328 li
@
457.519 22.1328 mo
457.519 28.1328 li
@
459.43 22.1328 mo
459.43 28.1328 li
@
461.275 21.6008 mo
461.275 27.6008 li
@
463.049 21.6008 mo
463.049 27.6008 li
@
464.676 21.0688 mo
464.676 27.0688 li
@
466.216 21.0688 mo
466.216 27.0688 li
@
467.669 21.0688 mo
467.669 27.0688 li
@
469.051 20.8028 mo
469.051 26.8028 li
@
470.314 20.8028 mo
470.314 26.8028 li
@
471.546 20.8028 mo
471.546 26.8028 li
@
472.682 20.8028 mo
472.682 26.8028 li
@
473.778 20.5378 mo
473.778 26.5378 li
@
474.812 20.5378 mo
474.812 26.5378 li
@
475.782 20.5378 mo
475.782 26.5378 li
@
476.735 20.2719 mo
476.735 26.2719 li
@
477.562 20.2719 mo
477.562 26.2719 li
@
478.379 20.2719 mo
478.379 26.2719 li
@
479.16 20.0058 mo
479.16 26.0058 li
@
479.878 20.0058 mo
479.878 26.0058 li
@
480.59 19.7398 mo
480.59 25.7398 li
@
481.256 19.7398 mo
481.256 25.7398 li
@
481.865 19.7398 mo
481.865 25.7398 li
@
482.443 19.7398 mo
482.443 25.7398 li
@
482.974 19.7398 mo
482.974 25.7398 li
@
483.496 19.7398 mo
483.496 25.7398 li
@
483.963 19.7398 mo
483.963 25.7398 li
@
484.43 19.7398 mo
484.43 25.7398 li
@
484.851 19.7398 mo
484.851 25.7398 li
@
485.265 19.7398 mo
485.265 25.7398 li
@
485.637 19.7398 mo
485.637 25.7398 li
@
486.005 19.7398 mo
486.005 25.7398 li
@
486.347 19.7398 mo
486.347 25.7398 li
@
486.656 19.7398 mo
486.656 25.7398 li
@
486.964 19.7398 mo
486.964 25.7398 li
@
487.246 19.7398 mo
487.246 25.7398 li
@
487.508 19.7398 mo
487.508 25.7398 li
@
487.76 19.7398 mo
487.76 25.7398 li
@
487.99 19.7398 mo
487.99 25.7398 li
@
488.199 19.7398 mo
488.199 25.7398 li
@
488.405 19.7398 mo
488.405 25.7398 li
@
488.597 19.7398 mo
488.597 25.7398 li
@
488.784 19.7398 mo
488.784 25.7398 li
@
488.949 19.7398 mo
488.949 25.7398 li
@
489.11 19.7398 mo
489.11 25.7398 li
@
489.254 19.7398 mo
489.254 25.7398 li
@
489.387 19.7398 mo
489.387 25.7398 li
@
489.53 19.7398 mo
489.53 25.7398 li
@
489.657 19.7398 mo
489.657 25.7398 li
@
489.769 19.7398 mo
489.769 25.7398 li
@
489.885 19.7398 mo
489.885 25.7398 li
@
489.984 19.7398 mo
489.984 25.7398 li
@
490.08 19.7398 mo
490.08 25.7398 li
@
490.167 19.7398 mo
490.167 25.7398 li
@
490.252 19.7398 mo
490.252 25.7398 li
@
490.333 19.7398 mo
490.333 25.7398 li
@
490.406 19.7398 mo
490.406 25.7398 li
@
490.474 19.7398 mo
490.474 25.7398 li
@
490.536 19.7398 mo
490.536 25.7398 li
@
490.597 19.7398 mo
490.597 25.7398 li
@
490.664 19.7398 mo
490.664 25.7398 li
@
490.714 19.7398 mo
490.714 25.7398 li
@
490.762 19.7398 mo
490.762 25.7398 li
@
490.807 19.7398 mo
490.807 25.7398 li
@
490.851 19.7398 mo
490.851 25.7398 li
@
490.887 19.7398 mo
490.887 25.7398 li
@
490.926 19.7398 mo
490.926 25.7398 li
@
490.96 19.7398 mo
490.96 25.7398 li
@
490.995 19.7398 mo
490.995 25.7398 li
@
491.021 19.7398 mo
491.021 25.7398 li
@
491.053 19.7398 mo
491.053 25.7398 li
@
491.077 19.7398 mo
491.077 25.7398 li
@
491.105 19.7398 mo
491.105 25.7398 li
@
491.13 19.7398 mo
491.13 25.7398 li
@
491.154 19.7398 mo
491.154 25.7398 li
@
491.174 19.7398 mo
491.174 25.7398 li
@
491.192 19.7398 mo
491.192 25.7398 li
@
491.21 19.7398 mo
491.21 25.7398 li
@
491.227 19.7398 mo
491.227 25.7398 li
@
491.244 19.7398 mo
491.244 25.7398 li
@
491.259 19.7398 mo
491.259 25.7398 li
@
491.273 19.7398 mo
491.273 25.7398 li
@
491.287 19.7398 mo
491.287 25.7398 li
@
491.298 19.7398 mo
491.298 25.7398 li
@
491.309 19.7398 mo
491.309 25.7398 li
@
491.319 19.7398 mo
491.319 25.7398 li
@
491.328 19.7398 mo
491.328 25.7398 li
@
491.337 19.7398 mo
491.337 25.7398 li
@
491.347 19.7398 mo
491.347 25.7398 li
@
491.355 19.7398 mo
491.355 25.7398 li
@
491.361 19.7398 mo
491.361 25.7398 li
@
491.368 19.7398 mo
491.368 25.7398 li
@
491.374 19.7398 mo
491.374 25.7398 li
@
491.381 19.7398 mo
491.381 25.7398 li
@
491.387 19.7398 mo
491.387 25.7398 li
@
491.39 19.7398 mo
491.39 25.7398 li
@
491.394 19.7398 mo
491.394 25.7398 li
@
491.396 19.7398 mo
491.396 25.7398 li
@
491.4 19.7398 mo
491.4 25.7398 li
@
491.402 19.7398 mo
491.402 25.7398 li
@
491.406 19.7398 mo
491.406 25.7398 li
@
491.408 19.7398 mo
491.408 25.7398 li
@
491.41 19.7398 mo
491.41 25.7398 li
@
491.414 19.7398 mo
491.414 25.7398 li
@
491.416 19.7398 mo
491.416 25.7398 li
@
491.418 19.7398 mo
491.418 25.7398 li
@
491.421 19.7398 mo
491.421 25.7398 li
@
491.422 19.7398 mo
491.422 25.7398 li
@
491.424 19.7398 mo
491.424 25.7398 li
@
491.427 19.7398 mo
491.427 25.7398 li
@
491.429 19.7398 mo
491.429 25.7398 li
@
491.431 19.7398 mo
491.431 25.7398 li
@
491.431 19.7398 mo
491.431 25.7398 li
@
491.433 19.7398 mo
491.433 25.7398 li
@
491.434 19.7398 mo
491.434 25.7398 li
@
491.435 19.7398 mo
491.435 25.7398 li
@
491.437 19.7398 mo
491.437 25.7398 li
@
491.438 19.7398 mo
491.438 25.7398 li
@
491.439 19.7398 mo
491.439 25.7398 li
@
491.439 19.7398 mo
491.439 25.7398 li
@
491.44 19.7398 mo
491.44 25.7398 li
@
491.441 19.7398 mo
491.441 25.7398 li
@
491.441 19.7398 mo
491.441 25.7398 li
@
491.442 19.7398 mo
491.442 25.7398 li
@
491.443 19.7398 mo
491.443 25.7398 li
@
491.444 19.7398 mo
491.444 25.7398 li
@
491.444 19.7398 mo
491.444 25.7398 li
@
491.445 19.7398 mo
491.445 25.7398 li
@
491.446 19.7398 mo
491.446 25.7398 li
@
491.446 19.7398 mo
491.446 25.7398 li
@
491.447 19.7398 mo
491.447 25.7398 li
@
491.447 19.7398 mo
491.447 25.7398 li
@
491.447 19.7398 mo
491.447 25.7398 li
@
491.447 19.7398 mo
491.447 25.7398 li
@
491.448 19.7398 mo
491.448 25.7398 li
@
491.448 19.7398 mo
491.448 25.7398 li
@
491.448 19.7398 mo
491.448 25.7398 li
@
491.448 19.7398 mo
491.448 25.7398 li
@
491.449 19.7398 mo
491.449 25.7398 li
@
491.449 19.7398 mo
491.449 25.7398 li
@
491.449 19.7398 mo
491.449 25.7398 li
@
491.449 19.7398 mo
491.449 25.7398 li
@
491.449 19.7398 mo
491.449 25.7398 li
@
491.449 19.7398 mo
491.449 25.7398 li
@
491.449 19.7398 mo
491.449 25.7398 li
@
491.45 19.7398 mo
491.45 25.7398 li
@
491.45 19.7398 mo
491.45 25.7398 li
@
491.45 19.7398 mo
491.45 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
491.451 19.7398 mo
491.451 25.7398 li
@
1 lj
45.2014 89.7308 mo
45.2014 62.0838 li
71.2154 61.5518 li
71.2154 61.0208 li
86.4324 60.7538 li
86.4324 59.9568 li
86.4324 59.4258 li
86.4324 58.6278 li
86.4324 58.3618 li
86.4324 58.0968 li
86.4324 57.8298 li
97.2294 57.8298 li
105.604 57.2988 li
105.604 57.0328 li
112.446 57.0328 li
112.446 56.7668 li
112.446 56.5009 li
118.231 56.2358 li
120.821 56.2358 li
125.519 56.2358 li
125.519 55.7038 li
125.519 55.4378 li
125.519 55.1718 li
125.519 54.9058 li
125.519 54.3738 li
136.863 53.8428 li
136.863 53.5768 li
139.992 53.3108 li
142.881 53.0448 li
142.881 52.7798 li
145.562 52.7798 li
148.066 52.2478 li
150.412 52.2478 li
151.532 52.2478 li
151.532 51.9818 li
155.707 51.7158 li
159.463 51.4508 li
159.463 51.1848 li
161.209 51.1848 li
162.877 51.1848 li
164.474 50.9188 li
166.75 50.6528 li
166.75 50.3868 li
166.75 50.1208 li
166.75 49.3239 li
168.194 49.3239 li
169.583 47.9948 li
173.469 47.4628 li
174.68 47.4628 li
178.634 47.4628 li
179.692 47.4628 li
180.72 47.4628 li
183.173 47.1968 li
184.112 46.9308 li
185.027 46.9308 li
186.794 46.9308 li
188.481 46.9308 li
188.891 46.6648 li
189.698 46.3988 li
190.488 46.3988 li
191.643 46.3988 li
193.13 46.1338 li
193.852 46.1338 li
194.56 45.6018 li
195.937 45.6018 li
197.913 45.6018 li
199.174 45.6018 li
199.79 45.6018 li
200.694 45.6018 li
201.285 45.0698 li
201.867 44.8038 li
202.44 44.2719 li
203.56 44.2719 li
205.706 44.0068 li
206.734 44.0068 li
207.487 44.0068 li
208.949 44.0068 li
210.587 44.0068 li
212.808 43.4749 li
214.905 43.4749 li
215.311 43.4749 li
216.891 42.6778 li
218.222 42.6778 li
219.506 42.6778 li
220.574 42.6778 li
222.787 42.4118 li
224.246 42.4118 li
224.877 42.1458 li
226.558 41.8798 li
228.596 41.8798 li
229.158 41.8798 li
230.393 41.8798 li
231.194 41.8798 li
231.98 41.3478 li
233.872 41.3478 li
234.482 41.3478 li
235.32 41.3478 li
235.907 40.8168 li
237.056 40.5508 li
238.059 40.5508 li
239.037 40.5508 li
240.094 40.0188 li
240.817 40.0188 li
241.626 39.7538 li
242.222 39.7538 li
243.481 39.2218 li
244.235 39.2218 li
245.7 39.2218 li
246.675 39.2218 li
248.049 38.6898 li
248.801 38.6898 li
250.26 38.6898 li
251.97 38.6898 li
253.093 38.6898 li
254.326 38.6898 li
255.242 38.6898 li
256.407 38.6898 li
258.058 38.4248 li
259.203 38.4248 li
260.07 38.4248 li
260.978 38.4248 li
262.5 38.4248 li
262.899 38.1578 li
264.018 38.1578 li
265.583 38.1578 li
266.574 38.1578 li
267.389 37.8928 li
268.628 37.6268 li
269.495 37.3608 li
270.25 37.0948 li
271.624 37.0948 li
272.426 36.8288 li
273.468 36.5628 li
274.607 36.0308 li
275.794 36.0308 li
276.865 36.0308 li
277.717 36.0308 li
278.774 36.0308 li
280.34 36.0308 li
280.941 36.0308 li
282.218 36.0308 li
283.715 36.0308 li
284.585 36.0308 li
285.776 36.0308 li
286.721 36.0308 li
287.935 35.7658 li
289.14 35.7658 li
290.251 35.7658 li
291.252 35.7658 li
291.913 35.7658 li
292.947 35.5009 li
294.274 35.5009 li
295.414 35.2338 li
296.24 35.2338 li
297.094 34.7018 li
297.93 34.7018 li
298.79 34.7018 li
299.589 34.7018 li
300.829 34.7018 li
302.168 34.7018 li
303.153 34.7018 li
303.922 34.7018 li
305.01 34.7018 li
306.013 34.4368 li
306.973 34.4368 li
308.317 34.1708 li
309.17 34.1708 li
309.989 34.1708 li
310.79 33.9048 li
311.558 33.9048 li
312.509 33.9048 li
313.258 33.9048 li
314.065 33.9048 li
314.927 33.6388 li
315.617 33.6388 li
316.633 33.6388 li
317.426 33.6388 li
318.434 33.3738 li
319.468 33.3738 li
320.325 33.3738 li
321.056 33.3738 li
321.867 33.3738 li
322.637 33.3738 li
323.54 33.3738 li
324.465 33.3738 li
325.142 33.3738 li
326.039 33.1078 li
327.08 33.1078 li
327.781 33.1078 li
328.658 32.8418 li
329.659 32.8418 li
330.521 32.5758 li
331.611 32.3098 li
332.51 32.3098 li
333.283 32.0448 li
334.22 31.7778 li
335.11 31.7778 li
335.922 31.7778 li
336.851 31.5128 li
337.727 31.5128 li
338.629 31.5128 li
339.539 31.5128 li
340.556 31.5128 li
341.54 31.5128 li
342.416 31.2468 li
343.34 31.2468 li
344.274 31.2468 li
345.026 31.2468 li
345.913 31.2468 li
346.64 31.2468 li
347.507 30.9808 li
348.116 30.7148 li
348.836 30.4489 li
349.756 30.4489 li
350.599 30.4489 li
351.505 30.4489 li
352.216 30.4489 li
352.976 30.4489 li
353.725 30.4489 li
354.534 30.4489 li
355.268 30.4489 li
355.969 30.4489 li
356.647 30.1838 li
357.442 30.1838 li
358.211 30.1838 li
359.097 30.1838 li
359.932 30.1838 li
360.53 30.1838 li
361.256 30.1838 li
361.976 30.1838 li
362.735 30.1838 li
363.536 30.1838 li
364.367 30.1838 li
365.078 30.1838 li
365.685 30.1838 li
366.441 30.1838 li
367.245 29.9168 li
367.957 29.9168 li
368.631 29.6519 li
369.387 29.6519 li
370.086 29.6519 li
370.739 29.6519 li
371.555 29.6519 li
372.218 29.6519 li
372.872 29.6519 li
373.53 29.6519 li
374.209 29.6519 li
374.847 29.6519 li
375.545 29.6519 li
376.289 29.3858 li
376.982 29.3858 li
377.666 29.3858 li
378.395 29.3858 li
379.146 29.3858 li
379.721 29.3858 li
380.367 29.3858 li
381.047 29.3858 li
381.697 29.3858 li
382.342 29.3858 li
383.035 29.3858 li
383.623 29.3858 li
384.324 29.1198 li
384.949 29.1198 li
385.555 29.1198 li
386.195 29.1198 li
386.865 29.1198 li
387.462 29.1198 li
388.182 28.8538 li
388.819 28.5878 li
389.435 28.5878 li
390.08 28.5878 li
390.708 28.5878 li
391.315 28.5878 li
391.982 28.5878 li
392.651 28.5878 li
393.256 28.5878 li
393.867 28.5878 li
394.498 28.3218 li
395.11 28.3218 li
395.713 28.3218 li
396.3 28.3218 li
396.949 28.3218 li
397.569 28.3218 li
398.15 27.7908 li
398.704 27.7908 li
399.269 27.7908 li
399.868 27.7908 li
400.466 27.7908 li
400.99 27.7908 li
401.554 27.7908 li
402.103 27.7908 li
402.631 27.7908 li
403.182 27.7908 li
403.726 27.5248 li
404.285 27.5248 li
404.863 27.2598 li
405.44 27.2598 li
405.976 27.2598 li
406.513 27.2598 li
407.078 27.2598 li
407.606 27.2598 li
408.191 27.2598 li
408.713 27.2598 li
409.241 27.2598 li
409.782 27.2598 li
410.279 27.2598 li
410.88 27.2598 li
411.383 27.2598 li
411.914 27.2598 li
412.429 26.9928 li
412.928 26.9928 li
413.442 26.7278 li
413.942 26.7278 li
414.458 26.7278 li
414.989 26.4608 li
415.487 26.4608 li
416.026 26.4608 li
416.522 26.4608 li
416.999 26.4608 li
417.452 26.4608 li
417.965 26.4608 li
418.458 26.4608 li
418.937 26.4608 li
419.408 26.1958 li
419.84 26.1958 li
420.338 26.1958 li
420.796 26.1958 li
421.265 26.1958 li
421.736 26.1958 li
422.267 26.1958 li
422.728 26.1958 li
423.194 26.1958 li
423.665 26.1958 li
424.124 26.1958 li
424.589 26.1958 li
425.056 26.1958 li
425.54 26.1958 li
426.008 26.1958 li
426.48 26.1958 li
426.91 26.1958 li
427.325 26.1958 li
427.774 26.1958 li
428.215 26.1958 li
428.677 26.1958 li
429.138 26.1958 li
429.596 26.1958 li
430.043 26.1958 li
430.489 26.1958 li
430.941 26.1958 li
431.352 26.1958 li
431.801 26.1958 li
432.215 26.1958 li
432.639 26.1958 li
433.065 26.1958 li
433.46 26.1958 li
433.872 26.1958 li
434.291 26.1958 li
434.694 25.9298 li
435.126 25.9298 li
435.53 25.9298 li
435.97 25.6638 li
436.398 25.6638 li
436.788 25.6638 li
437.197 25.6638 li
437.587 25.6638 li
438.01 25.6638 li
438.383 25.6638 li
438.813 25.6638 li
439.209 25.3978 li
439.583 25.3978 li
439.99 25.3978 li
440.391 25.3978 li
440.744 25.3978 li
441.14 25.3978 li
441.504 25.3978 li
441.846 25.3978 li
442.249 25.3978 li
442.597 25.3978 li
442.948 25.1328 li
443.308 25.1328 li
443.671 25.1328 li
444.022 25.1328 li
444.356 25.1328 li
444.705 25.1328 li
445.053 25.1328 li
445.43 25.1328 li
445.788 25.1328 li
446.135 25.1328 li
446.463 24.8668 li
446.806 24.8668 li
447.147 24.8668 li
447.492 24.8668 li
447.821 24.8668 li
448.146 24.8668 li
448.471 24.8668 li
448.774 24.8668 li
449.09 24.8668 li
449.416 24.8668 li
449.753 24.8668 li
450.08 24.8668 li
450.391 24.8668 li
450.709 24.8668 li
451.049 24.6008 li
451.372 24.6008 li
451.705 24.6008 li
452.008 24.3348 li
452.315 24.3348 li
452.647 24.3348 li
452.953 24.3348 li
453.247 24.3348 li
453.556 24.3348 li
453.86 24.3348 li
454.153 24.3348 li
454.435 24.3348 li
454.722 24.3348 li
455.002 24.3348 li
455.293 24.3348 li
455.573 24.3348 li
455.838 24.3348 li
456.116 24.3348 li
456.381 24.3348 li
456.662 24.3348 li
456.951 24.3348 li
457.227 24.3348 li
457.484 24.3348 li
457.756 24.3348 li
458.027 24.3348 li
458.3 24.3348 li
458.56 23.8038 li
458.835 23.8038 li
459.085 23.8038 li
459.353 23.5368 li
459.615 23.5368 li
459.869 23.5368 li
460.103 23.5368 li
460.355 23.5368 li
460.603 23.5368 li
460.86 23.5368 li
461.105 23.5368 li
461.364 23.5368 li
461.617 23.5368 li
461.871 23.5368 li
462.109 23.5368 li
462.356 23.5368 li
462.588 23.5368 li
462.819 23.5368 li
463.053 23.5368 li
463.293 23.5368 li
463.536 23.5368 li
463.753 23.5368 li
463.996 23.5368 li
464.228 23.5368 li
464.45 23.5368 li
464.669 23.5368 li
464.881 23.2719 li
465.095 23.2719 li
465.322 23.2719 li
465.539 23.2719 li
465.755 23.2719 li
465.984 23.2719 li
466.203 23.2719 li
466.419 23.2719 li
466.638 23.2719 li
466.845 23.2719 li
467.055 23.2719 li
467.256 23.2719 li
467.445 23.2719 li
467.654 23.2719 li
467.851 23.2719 li
468.051 23.2719 li
468.252 23.2719 li
468.452 23.2719 li
468.646 23.2719 li
468.842 23.2719 li
469.051 23.2719 li
469.238 23.2719 li
469.416 23.2719 li
469.599 23.2719 li
469.79 23.2719 li
469.969 23.2719 li
470.158 23.2719 li
470.336 23.2719 li
470.517 23.2719 li
470.696 23.2719 li
470.876 23.2719 li
471.056 23.2719 li
471.236 23.2719 li
471.414 23.2719 li
471.568 23.2719 li
471.748 23.2719 li
471.917 23.2719 li
472.081 23.2719 li
472.253 23.2719 li
472.421 23.2719 li
472.582 23.2719 li
472.741 23.2719 li
472.893 23.2719 li
473.052 23.2719 li
473.207 23.2719 li
473.364 23.2719 li
473.515 23.2719 li
473.665 23.2719 li
473.82 23.2719 li
473.988 23.2719 li
474.133 23.2719 li
474.287 23.2719 li
474.426 23.2719 li
474.586 23.2719 li
474.732 23.2719 li
474.875 23.2719 li
475.016 23.2719 li
475.162 23.2719 li
475.303 23.2719 li
475.437 23.2719 li
475.576 23.2719 li
475.708 23.2719 li
475.852 23.2719 li
475.989 23.2719 li
476.122 23.2719 li
476.256 23.2719 li
476.393 23.2719 li
476.54 23.2719 li
476.671 23.2719 li
476.803 23.2719 li
476.93 23.2719 li
477.053 23.2719 li
477.179 23.2719 li
477.3 23.2719 li
477.42 23.2719 li
477.552 23.2719 li
477.686 23.2719 li
477.81 23.2719 li
477.94 23.2719 li
478.055 23.2719 li
478.164 23.2719 li
478.286 23.2719 li
478.406 23.2719 li
478.519 23.2719 li
478.629 23.2719 li
478.747 23.2719 li
478.853 23.2719 li
478.968 23.2719 li
479.081 23.2719 li
479.189 23.2719 li
479.297 23.2719 li
479.414 23.2719 li
479.524 23.2719 li
479.629 23.2719 li
479.731 23.2719 li
479.833 23.2719 li
479.939 23.2719 li
480.039 23.2719 li
480.133 23.2719 li
480.233 23.2719 li
480.337 23.2719 li
480.437 23.2719 li
480.534 23.2719 li
480.636 23.2719 li
480.736 23.2719 li
480.835 23.2719 li
480.929 23.2719 li
481.024 23.2719 li
481.121 23.2719 li
481.215 23.2719 li
481.312 23.2719 li
481.399 23.2719 li
481.483 23.2719 li
481.574 23.2719 li
481.669 23.2719 li
481.759 23.2719 li
481.844 23.2719 li
481.922 23.2719 li
482.006 23.2719 li
482.094 23.2719 li
482.176 23.2719 li
482.263 23.2719 li
482.339 23.2719 li
482.42 23.2719 li
482.506 23.2719 li
482.587 23.2719 li
482.667 23.2719 li
482.749 23.2719 li
482.825 23.2719 li
482.902 23.2719 li
482.972 23.2719 li
483.056 23.2719 li
483.127 23.2719 li
483.204 23.2719 li
483.278 23.2719 li
483.348 23.2719 li
483.419 23.2719 li
483.493 23.2719 li
483.569 23.2719 li
483.64 23.2719 li
483.715 23.2719 li
483.782 23.2719 li
483.849 23.2719 li
483.918 23.2719 li
483.992 23.2719 li
484.06 23.2719 li
484.129 23.2719 li
484.192 23.2719 li
484.259 23.2719 li
484.326 23.2719 li
484.397 23.2719 li
484.46 23.2719 li
484.531 23.2719 li
484.597 23.2719 li
484.664 23.0058 li
484.721 23.0058 li
484.783 23.0058 li
484.838 23.0058 li
484.897 23.0058 li
484.957 23.0058 li
485.018 23.0058 li
485.079 23.0058 li
485.14 23.0058 li
485.196 23.0058 li
485.25 23.0058 li
485.303 23.0058 li
485.36 23.0058 li
485.419 23.0058 li
485.473 23.0058 li
485.524 23.0058 li
485.58 23.0058 li
485.635 23.0058 li
485.687 23.0058 li
485.731 23.0058 li
485.783 23.0058 li
485.832 23.0058 li
485.883 23.0058 li
485.934 23.0058 li
485.983 23.0058 li
486.031 23.0058 li
486.077 23.0058 li
486.13 23.0058 li
486.176 23.0058 li
486.22 23.0058 li
486.266 23.0058 li
486.314 23.0058 li
486.363 23.0058 li
486.408 23.0058 li
486.455 23.0058 li
486.506 23.0058 li
486.551 23.0058 li
486.599 23.0058 li
486.642 23.0058 li
486.689 23.0058 li
486.731 23.0058 li
486.774 23.0058 li
486.816 23.0058 li
486.859 23.0058 li
486.9 23.0058 li
486.94 23.0058 li
486.983 23.0058 li
487.024 23.0058 li
487.064 23.0058 li
487.104 23.0058 li
487.145 23.0058 li
487.184 23.0058 li
487.222 23.0058 li
487.261 23.0058 li
487.301 23.0058 li
487.34 23.0058 li
487.371 23.0058 li
487.409 23.0058 li
487.444 23.0058 li
487.478 23.0058 li
487.513 23.0058 li
487.548 23.0058 li
487.583 23.0058 li
487.617 23.0058 li
487.655 23.0058 li
487.689 23.0058 li
487.724 23.0058 li
487.755 23.0058 li
487.787 23.0058 li
487.821 23.0058 li
487.852 23.0058 li
487.886 23.0058 li
487.922 23.0058 li
487.951 23.0058 li
487.981 23.0058 li
488.011 23.0058 li
488.039 23.0058 li
488.073 23.0058 li
488.103 23.0058 li
488.135 23.0058 li
488.166 23.0058 li
488.194 23.0058 li
488.225 23.0058 li
488.251 23.0058 li
488.281 23.0058 li
488.311 23.0058 li
488.34 23.0058 li
488.364 23.0058 li
488.39 23.0058 li
488.417 23.0058 li
488.442 23.0058 li
488.468 23.0058 li
488.493 23.0058 li
488.521 23.0058 li
488.549 23.0058 li
488.574 23.0058 li
488.601 23.0058 li
488.628 22.7398 li
488.657 22.7398 li
488.683 22.7398 li
488.709 22.7398 li
488.734 22.7398 li
488.762 22.7398 li
488.788 22.7398 li
488.813 22.7398 li
488.837 22.7398 li
488.863 22.7398 li
488.887 22.7398 li
488.912 22.7398 li
488.934 22.7398 li
488.956 22.7398 li
488.982 22.7398 li
489.008 22.7398 li
489.03 22.7398 li
489.053 22.7398 li
489.073 22.7398 li
489.095 22.7398 li
489.118 22.7398 li
489.138 22.7398 li
489.158 22.7398 li
489.18 22.7398 li
489.202 22.7398 li
489.223 22.7398 li
489.244 22.7398 li
489.268 22.7398 li
489.287 22.7398 li
489.306 22.7398 li
489.326 22.7398 li
489.346 22.7398 li
489.365 22.7398 li
489.383 22.7398 li
489.401 22.7398 li
489.422 22.7398 li
489.443 22.7398 li
489.464 22.7398 li
489.481 22.7398 li
489.498 22.7398 li
489.517 22.7398 li
489.535 22.7398 li
489.551 22.7398 li
489.568 22.7398 li
489.586 22.7398 li
489.601 22.7398 li
489.617 22.7398 li
489.635 22.7398 li
489.652 22.7398 li
489.672 22.7398 li
489.689 22.7398 li
489.704 22.7398 li
489.72 22.7398 li
489.736 22.7398 li
489.751 22.7398 li
489.767 22.7398 li
489.782 22.7398 li
489.797 22.7398 li
489.812 22.7398 li
489.83 22.7398 li
489.844 22.7398 li
489.858 22.7398 li
489.874 22.7398 li
489.887 22.7398 li
489.901 22.7398 li
489.916 22.7398 li
489.931 22.7398 li
489.945 22.7398 li
489.958 22.7398 li
489.969 22.7398 li
489.983 22.7398 li
489.994 22.7398 li
490.006 22.7398 li
490.019 22.7398 li
490.033 22.7398 li
490.046 22.7398 li
490.06 22.7398 li
490.072 22.7398 li
490.085 22.7398 li
490.097 22.7398 li
490.11 22.7398 li
490.121 22.7398 li
490.134 22.7398 li
490.147 22.7398 li
490.16 22.7398 li
490.172 22.7398 li
490.184 22.7398 li
490.197 22.7398 li
490.21 22.7398 li
490.222 22.7398 li
490.231 22.7398 li
490.243 22.7398 li
490.253 22.7398 li
490.264 22.7398 li
490.276 22.7398 li
490.285 22.7398 li
490.297 22.7398 li
490.307 22.7398 li
490.318 22.7398 li
490.328 22.7398 li
490.336 22.7398 li
490.349 22.7398 li
490.36 22.7398 li
490.369 22.7398 li
490.379 22.7398 li
490.387 22.7398 li
490.398 22.7398 li
490.408 22.7398 li
490.417 22.7398 li
490.426 22.7398 li
490.436 22.7398 li
490.445 22.7398 li
490.456 22.7398 li
490.466 22.7398 li
490.475 22.7398 li
490.485 22.7398 li
490.496 22.7398 li
490.502 22.7398 li
490.511 22.7398 li
490.52 22.7398 li
490.529 22.7398 li
490.539 22.7398 li
490.547 22.7398 li
490.556 22.7398 li
490.565 22.7398 li
490.576 22.7398 li
490.583 22.7398 li
490.591 22.7398 li
490.6 22.7398 li
490.61 22.7398 li
490.616 22.7398 li
490.623 22.7398 li
490.632 22.7398 li
490.64 22.7398 li
490.648 22.7398 li
490.655 22.7398 li
490.664 22.7398 li
490.671 22.7398 li
490.677 22.7398 li
490.685 22.7398 li
490.692 22.7398 li
490.699 22.7398 li
490.706 22.7398 li
490.712 22.7398 li
490.717 22.7398 li
490.725 22.7398 li
490.733 22.7398 li
490.739 22.7398 li
490.744 22.7398 li
490.752 22.7398 li
490.758 22.7398 li
490.764 22.7398 li
490.77 22.7398 li
490.776 22.7398 li
490.783 22.7398 li
490.79 22.7398 li
490.797 22.7398 li
490.801 22.7398 li
490.808 22.7398 li
490.814 22.7398 li
490.817 22.7398 li
490.822 22.7398 li
490.828 22.7398 li
490.834 22.7398 li
490.84 22.7398 li
490.846 22.7398 li
490.853 22.7398 li
490.858 22.7398 li
490.862 22.7398 li
490.869 22.7398 li
490.875 22.7398 li
490.879 22.7398 li
490.885 22.7398 li
490.892 22.7398 li
490.897 22.7398 li
490.903 22.7398 li
490.908 22.7398 li
490.914 22.7398 li
490.92 22.7398 li
490.924 22.7398 li
490.928 22.7398 li
490.933 22.7398 li
490.938 22.7398 li
490.942 22.7398 li
490.946 22.7398 li
490.951 22.7398 li
490.955 22.7398 li
490.959 22.7398 li
490.964 22.7398 li
490.968 22.7398 li
490.972 22.7398 li
490.975 22.7398 li
490.981 22.7398 li
490.986 22.7398 li
490.991 22.7398 li
490.996 22.7398 li
490.999 22.7398 li
491.003 22.7398 li
491.008 22.7398 li
491.012 22.7398 li
491.016 22.7398 li
491.019 22.7398 li
491.024 22.7398 li
491.028 22.7398 li
491.031 22.7398 li
491.035 22.7398 li
491.038 22.7398 li
491.042 22.7398 li
491.047 22.7398 li
491.051 22.7398 li
491.055 22.7398 li
491.059 22.7398 li
491.063 22.7398 li
491.069 22.7398 li
491.07 22.7398 li
491.074 22.7398 li
491.078 22.7398 li
491.081 22.7398 li
491.085 22.7398 li
491.09 22.7398 li
491.092 22.7398 li
491.095 22.7398 li
491.099 22.7398 li
491.103 22.7398 li
491.106 22.7398 li
491.11 22.7398 li
491.115 22.7398 li
491.119 22.7398 li
491.122 22.7398 li
491.127 22.7398 li
491.13 22.7398 li
491.134 22.7398 li
491.137 22.7398 li
491.14 22.7398 li
491.144 22.7398 li
491.147 22.7398 li
491.15 22.7398 li
491.154 22.7398 li
491.157 22.7398 li
491.16 22.7398 li
491.164 22.7398 li
491.166 22.7398 li
491.169 22.7398 li
491.171 22.7398 li
491.174 22.7398 li
491.176 22.7398 li
491.18 22.7398 li
491.182 22.7398 li
491.185 22.7398 li
491.189 22.7398 li
491.192 22.7398 li
491.194 22.7398 li
491.197 22.7398 li
491.199 22.7398 li
491.202 22.7398 li
491.203 22.7398 li
491.206 22.7398 li
491.209 22.7398 li
491.213 22.7398 li
491.215 22.7398 li
491.217 22.7398 li
491.22 22.7398 li
491.221 22.7398 li
491.224 22.7398 li
491.226 22.7398 li
491.228 22.7398 li
491.231 22.7398 li
491.233 22.7398 li
491.236 22.7398 li
491.237 22.7398 li
491.24 22.7398 li
491.242 22.7398 li
491.244 22.7398 li
491.247 22.7398 li
491.249 22.7398 li
491.251 22.7398 li
491.252 22.7398 li
491.256 22.7398 li
491.258 22.7398 li
491.26 22.7398 li
491.262 22.7398 li
491.264 22.7398 li
491.266 22.7398 li
491.267 22.7398 li
491.269 22.7398 li
491.27 22.7398 li
491.273 22.7398 li
491.275 22.7398 li
491.276 22.7398 li
491.279 22.7398 li
491.28 22.7398 li
491.284 22.7398 li
491.285 22.7398 li
491.287 22.7398 li
491.289 22.7398 li
491.29 22.7398 li
491.293 22.7398 li
491.294 22.7398 li
491.296 22.7398 li
491.298 22.7398 li
491.3 22.7398 li
491.301 22.7398 li
491.303 22.7398 li
491.305 22.7398 li
491.306 22.7398 li
491.307 22.7398 li
491.309 22.7398 li
491.312 22.7398 li
491.313 22.7398 li
491.315 22.7398 li
491.317 22.7398 li
491.318 22.7398 li
491.32 22.7398 li
491.321 22.7398 li
491.322 22.7398 li
491.324 22.7398 li
491.325 22.7398 li
491.326 22.7398 li
491.327 22.7398 li
491.33 22.7398 li
491.331 22.7398 li
491.332 22.7398 li
491.334 22.7398 li
491.335 22.7398 li
491.337 22.7398 li
491.339 22.7398 li
491.342 22.7398 li
491.344 22.7398 li
491.346 22.7398 li
491.347 22.7398 li
491.348 22.7398 li
491.349 22.7398 li
491.351 22.7398 li
491.353 22.7398 li
491.355 22.7398 li
491.356 22.7398 li
491.357 22.7398 li
491.359 22.7398 li
491.36 22.7398 li
491.361 22.7398 li
491.362 22.7398 li
491.363 22.7398 li
491.364 22.7398 li
491.365 22.7398 li
491.366 22.7398 li
491.367 22.7398 li
491.368 22.7398 li
491.369 22.7398 li
491.371 22.7398 li
491.372 22.7398 li
491.374 22.7398 li
491.375 22.7398 li
491.377 22.7398 li
491.378 22.7398 li
491.381 22.7398 li
491.383 22.7398 li
491.384 22.7398 li
491.386 22.7398 li
491.387 22.7398 li
491.388 22.7398 li
491.389 22.7398 li
491.39 22.7398 li
491.392 22.7398 li
491.394 22.7398 li
491.395 22.7398 li
491.396 22.7398 li
491.397 22.7398 li
491.398 22.7398 li
491.399 22.7398 li
491.4 22.7398 li
491.401 22.7398 li
491.402 22.7398 li
491.403 22.7398 li
491.404 22.7398 li
491.405 22.7398 li
491.406 22.7398 li
491.407 22.7398 li
491.408 22.7398 li
491.409 22.7398 li
491.41 22.7398 li
491.411 22.7398 li
491.412 22.7398 li
491.413 22.7398 li
491.414 22.7398 li
491.415 22.7398 li
491.416 22.7398 li
491.417 22.7398 li
491.418 22.7398 li
491.419 22.7398 li
491.42 22.7398 li
491.421 22.7398 li
491.422 22.7398 li
491.423 22.7398 li
491.424 22.7398 li
491.425 22.7398 li
491.426 22.7398 li
491.427 22.7398 li
491.428 22.7398 li
491.429 22.7398 li
491.43 22.7398 li
491.431 22.7398 li
491.432 22.7398 li
491.433 22.7398 li
491.434 22.7398 li
491.435 22.7398 li
491.436 22.7398 li
491.437 22.7398 li
491.438 22.7398 li
491.439 22.7398 li
491.44 22.7398 li
491.441 22.7398 li
491.442 22.7398 li
491.443 22.7398 li
491.444 22.7398 li
491.445 22.7398 li
491.446 22.7398 li
491.447 22.7398 li
491.448 22.7398 li
491.449 22.7398 li
491.45 22.7398 li
491.451 22.7398 li
0 .990234 1 .000396729 cmyk
@
45.2014 272.893 mo
45.2014 271.564 li
60.419 269.437 li
60.419 255.613 li
79.5904 254.55 li
79.5904 253.221 li
79.5904 251.36 li
79.5904 249.765 li
79.5904 248.436 li
79.5904 246.841 li
92.2184 246.044 li
92.2184 245.245 li
92.2184 242.056 li
92.2184 241.258 li
101.65 239.131 li
101.65 238.865 li
101.65 237.271 li
101.65 235.676 li
101.65 234.878 li
105.604 233.017 li
118.231 229.827 li
118.231 228.763 li
118.231 226.106 li
123.243 225.042 li
123.243 223.181 li
123.243 220.789 li
123.243 219.46 li
127.664 217.598 li
129.692 216.535 li
129.692 216.269 li
129.692 214.675 li
133.449 212.548 li
139.992 211.751 li
139.992 210.421 li
145.562 208.294 li
150.412 206.434 li
150.412 203.51 li
152.621 200.054 li
154.706 198.458 li
158.558 198.193 li
158.558 196.597 li
158.558 195.8 li
163.684 193.673 li
167.478 191.281 li
168.895 189.685 li
171.577 188.356 li
174.08 187.293 li
176.426 185.432 li
178.094 183.837 li
178.094 183.04 li
178.094 180.382 li
181.721 179.318 li
186.794 178.786 li
188.481 177.723 li
189.297 175.596 li
190.488 175.331 li
193.13 173.47 li
193.13 173.204 li
195.254 170.811 li
196.607 169.482 li
198.549 168.95 li
199.174 167.09 li
199.79 166.558 li
201.285 164.963 li
204.648 164.165 li
206.223 162.57 li
206.48 162.304 li
207.981 161.241 li
209.424 159.912 li
212.808 158.849 li
213.449 157.519 li
215.912 156.19 li
217.276 154.595 li
218.593 153 li
219.686 151.406 li
221.096 150.342 li
223.28 148.215 li
225.497 146.886 li
228.025 145.557 li
229.986 145.291 li
230.528 145.025 li
231.98 142.898 li
232.874 141.835 li
234.603 141.569 li
234.963 139.974 li
236.024 138.379 li
237.839 137.848 li
238.714 136.518 li
239.78 135.455 li
240.612 134.392 li
242.516 131.999 li
243.954 131.201 li
245.43 131.201 li
247.11 130.67 li
249.457 129.075 li
250.576 127.214 li
252.797 126.948 li
254.11 124.822 li
255.726 123.758 li
257.01 121.631 li
258.571 120.037 li
260.192 118.442 li
261.452 118.175 li
263.069 116.846 li
264.728 116.846 li
266.056 114.985 li
267.035 114.985 li
268.334 114.188 li
269.638 113.125 li
270.76 112.061 li
271.759 110.998 li
273.081 110.466 li
274.774 109.137 li
276.393 108.872 li
278.06 108.34 li
278.959 107.542 li
279.764 106.213 li
281.256 105.149 li
282.353 103.288 li
283.877 103.023 li
285.092 101.96 li
285.9 101.428 li
287.081 100.099 li
287.965 97.9718 li
289.112 97.4398 li
290.579 96.6428 li
292.122 95.8448 li
293.15 94.7818 li
294.569 94.2498 li
296.147 93.4528 li
297.277 93.1868 li
298.417 92.1228 li
299.332 90.2628 li
300.287 89.1989 li
301.342 88.9328 li
302.585 88.4019 li
303.75 87.0728 li
305.01 87.0728 li
306.389 86.8058 li
307.703 86.2748 li
308.921 85.7438 li
310.151 84.4138 li
311.356 83.0848 li
312.235 82.8198 li
313.583 82.8198 li
314.499 82.0219 li
315.547 81.4898 li
316.348 81.2238 li
317.146 81.2238 li
318.331 80.6918 li
319.228 79.3628 li
320.24 79.0968 li
321.176 78.2998 li
322.359 78.0338 li
323.313 77.2358 li
324.233 76.1729 li
325.184 75.9078 li
325.954 75.3759 li
326.967 75.1098 li
327.721 74.8438 li
328.461 74.5788 li
329.495 74.3118 li
330.54 74.3118 li
331.556 74.0468 li
332.465 73.7808 li
333.397 73.2488 li
334.051 72.9828 li
334.885 72.1858 li
335.719 71.9198 li
336.549 70.3239 li
337.51 69.2618 li
338.333 69.2618 li
339.428 68.9948 li
340.225 68.7298 li
341.182 67.9318 li
342.212 67.9318 li
342.931 67.4008 li
343.717 67.1348 li
344.616 66.3378 li
345.317 65.8058 li
346.124 65.5398 li
346.997 64.7418 li
347.603 64.4768 li
348.46 63.1469 li
349.31 62.3499 li
350.357 61.8178 li
351.279 61.0208 li
352.09 60.2228 li
352.862 58.8938 li
353.669 58.6278 li
354.391 58.0968 li
355.025 58.0968 li
355.697 57.8298 li
356.456 57.5648 li
357.037 57.5648 li
357.833 57.2988 li
358.506 56.7668 li
359.371 55.9698 li
360.073 55.7038 li
360.761 55.1718 li
361.536 54.1088 li
362.242 53.5768 li
362.999 53.3108 li
363.672 53.0448 li
364.461 52.7798 li
365.153 51.9818 li
365.956 51.4508 li
366.599 50.3868 li
367.326 49.3239 li
367.856 48.5258 li
368.489 47.9948 li
369.1 47.4628 li
369.827 46.9308 li
370.524 46.6648 li
371.135 46.6648 li
371.79 46.3988 li
372.424 45.8678 li
373.045 45.6018 li
373.765 45.3358 li
374.329 45.3358 li
374.944 44.8038 li
375.506 44.5388 li
376.136 44.2719 li
376.753 44.2719 li
377.409 44.2719 li
377.971 43.7418 li
378.596 43.4749 li
379.336 42.6778 li
379.893 42.6778 li
380.553 42.4118 li
381.168 42.1458 li
381.821 41.8798 li
382.366 41.6148 li
382.859 41.6148 li
383.415 41.3478 li
383.951 40.8168 li
384.529 40.8168 li
385.17 40.2848 li
385.751 39.7538 li
386.335 39.4878 li
386.859 39.4878 li
387.431 39.4878 li
388.01 39.4878 li
388.557 39.4878 li
389.14 39.4878 li
389.767 39.4878 li
390.359 39.4878 li
390.952 39.2218 li
391.48 39.2218 li
392.015 39.2218 li
392.503 39.2218 li
393.007 38.6898 li
393.494 38.4248 li
393.965 38.1578 li
394.465 38.1578 li
395.032 37.8928 li
395.624 37.3608 li
396.157 37.0948 li
396.692 36.8288 li
397.22 36.8288 li
397.69 36.8288 li
398.24 36.5628 li
398.707 36.2979 li
399.191 35.7658 li
399.647 35.7658 li
400.172 35.5009 li
400.712 35.5009 li
401.19 35.5009 li
401.687 35.5009 li
402.187 34.7018 li
402.665 34.7018 li
403.157 34.7018 li
403.62 34.4368 li
404.063 34.4368 li
404.49 34.1708 li
404.975 34.1708 li
405.463 33.9048 li
405.892 33.6388 li
406.357 33.6388 li
406.814 33.6388 li
407.287 33.6388 li
407.747 33.6388 li
408.203 33.6388 li
408.649 33.6388 li
409.067 33.6388 li
409.483 33.6388 li
409.922 33.1078 li
410.353 33.1078 li
410.797 32.8418 li
411.184 32.8418 li
411.556 32.5758 li
412 32.3098 li
412.424 32.3098 li
412.83 32.0448 li
413.237 31.5128 li
413.669 31.5128 li
414.084 31.5128 li
414.536 31.2468 li
414.931 31.2468 li
415.369 31.2468 li
415.782 30.9808 li
416.169 30.9808 li
416.557 30.9808 li
416.969 30.9808 li
417.364 30.9808 li
417.76 30.9808 li
418.12 30.9808 li
418.504 30.9808 li
418.915 30.9808 li
419.279 30.9808 li
419.683 30.9808 li
420.002 30.9808 li
420.356 30.9808 li
420.719 30.9808 li
421.086 30.9808 li
421.436 30.7148 li
421.836 30.7148 li
422.208 30.7148 li
422.574 30.7148 li
422.965 30.7148 li
423.313 30.1838 li
423.653 30.1838 li
424.012 29.9168 li
424.366 29.3858 li
424.682 29.3858 li
425.036 28.8538 li
425.362 28.8538 li
425.732 28.5878 li
426.106 28.5878 li
426.458 28.5878 li
426.815 28.5878 li
427.141 28.5878 li
427.488 28.5878 li
427.822 28.3218 li
428.161 28.3218 li
428.497 28.3218 li
428.852 28.3218 li
429.23 28.3218 li
429.553 28.3218 li
429.873 28.3218 li
430.217 28.3218 li
430.509 28.3218 li
430.808 28.3218 li
431.164 28.3218 li
431.485 28.0568 li
431.787 28.0568 li
432.087 28.0568 li
432.427 28.0568 li
432.718 28.0568 li
433.04 28.0568 li
433.36 28.0568 li
433.68 28.0568 li
433.997 28.0568 li
434.291 28.0568 li
434.622 28.0568 li
434.921 28.0568 li
435.21 28.0568 li
435.485 27.7908 li
435.774 27.7908 li
436.066 27.7908 li
436.383 27.7908 li
436.687 27.7908 li
436.981 27.7908 li
437.236 27.7908 li
437.534 27.7908 li
437.826 27.2598 li
438.097 26.9928 li
438.382 26.9928 li
438.674 26.9928 li
438.965 26.9928 li
439.243 26.9928 li
439.517 26.9928 li
439.765 26.7278 li
440.026 26.7278 li
440.295 26.4608 li
440.576 26.4608 li
440.851 26.1958 li
441.106 26.1958 li
441.371 26.1958 li
441.644 25.9298 li
441.922 25.9298 li
442.192 25.9298 li
442.451 25.6638 li
442.696 25.6638 li
442.955 25.6638 li
443.21 25.6638 li
443.456 25.6638 li
443.714 25.6638 li
443.964 25.6638 li
444.21 25.6638 li
444.473 25.6638 li
444.71 25.6638 li
444.953 25.6638 li
445.206 25.6638 li
445.464 25.6638 li
445.712 25.6638 li
445.951 25.6638 li
446.178 25.6638 li
446.428 25.6638 li
446.691 25.6638 li
446.926 25.6638 li
447.187 25.3978 li
447.422 25.3978 li
447.654 25.3978 li
447.903 25.3978 li
448.133 25.3978 li
448.353 25.3978 li
448.565 25.3978 li
448.799 25.1328 li
449.021 24.8668 li
449.251 24.8668 li
449.465 24.8668 li
449.678 24.8668 li
449.915 24.8668 li
450.138 24.8668 li
450.358 24.8668 li
450.565 24.8668 li
450.779 24.8668 li
450.998 24.8668 li
451.236 24.8668 li
451.448 24.8668 li
451.672 24.8668 li
451.903 24.8668 li
452.113 24.8668 li
452.32 24.8668 li
452.513 24.8668 li
452.722 24.8668 li
452.933 24.8668 li
453.129 24.8668 li
453.33 24.8668 li
453.538 24.8668 li
453.742 24.8668 li
453.939 24.8668 li
454.142 24.8668 li
454.328 24.8668 li
454.522 24.8668 li
454.721 24.8668 li
454.914 24.8668 li
455.113 24.8668 li
455.295 24.8668 li
455.476 24.8668 li
455.652 24.8668 li
455.846 24.8668 li
456.033 24.8668 li
456.213 24.8668 li
456.391 24.8668 li
456.566 24.8668 li
456.763 24.8668 li
456.949 24.8668 li
457.116 24.8668 li
457.295 24.6008 li
457.463 24.6008 li
457.629 24.6008 li
457.801 24.6008 li
457.981 24.6008 li
458.174 24.6008 li
458.346 24.6008 li
458.521 24.6008 li
458.694 24.6008 li
458.866 24.6008 li
459.03 24.6008 li
459.208 24.6008 li
459.377 24.6008 li
459.56 24.6008 li
459.726 24.3348 li
459.886 24.3348 li
460.058 24.3348 li
460.221 24.3348 li
460.384 24.3348 li
460.549 24.3348 li
460.713 24.3348 li
460.876 24.3348 li
461.039 24.3348 li
461.192 24.3348 li
461.365 24.3348 li
461.515 24.3348 li
461.672 24.3348 li
461.833 24.3348 li
461.984 24.3348 li
462.135 24.3348 li
462.278 24.3348 li
462.437 24.3348 li
462.581 24.3348 li
462.732 24.3348 li
462.878 24.3348 li
463.024 24.3348 li
463.163 24.0688 li
463.305 24.0688 li
463.455 24.0688 li
463.599 24.0688 li
463.757 24.0688 li
463.901 24.0688 li
464.033 24.0688 li
464.176 24.0688 li
464.317 24.0688 li
464.468 24.0688 li
464.616 24.0688 li
464.772 24.0688 li
464.906 24.0688 li
465.045 24.0688 li
465.188 24.0688 li
465.327 24.0688 li
465.46 23.8038 li
465.604 23.8038 li
465.731 23.8038 li
465.87 23.8038 li
466.013 23.8038 li
466.153 23.8038 li
466.288 23.8038 li
466.42 23.8038 li
466.555 23.8038 li
466.686 23.8038 li
466.818 23.8038 li
466.949 23.8038 li
467.082 23.8038 li
467.203 23.8038 li
467.333 23.8038 li
467.453 23.8038 li
467.576 23.8038 li
467.7 23.8038 li
467.826 23.8038 li
467.947 23.8038 li
468.057 23.8038 li
468.185 23.8038 li
468.303 23.8038 li
468.424 23.5368 li
468.541 23.5368 li
468.666 23.5368 li
468.782 23.5368 li
468.911 23.5368 li
469.032 23.5368 li
469.168 23.2719 li
469.283 23.2719 li
469.397 23.2719 li
469.512 23.2719 li
469.64 23.2719 li
469.764 23.2719 li
469.878 23.2719 li
469.988 23.2719 li
470.108 23.2719 li
470.228 23.2719 li
470.35 23.2719 li
470.456 23.2719 li
470.569 23.2719 li
470.683 23.2719 li
470.789 23.2719 li
470.894 23.2719 li
471.013 23.2719 li
471.122 23.2719 li
471.225 23.2719 li
471.334 23.2719 li
471.443 23.2719 li
471.547 23.2719 li
471.657 23.2719 li
471.764 23.2719 li
471.858 23.2719 li
471.973 23.2719 li
472.077 23.2719 li
472.183 23.2719 li
472.28 23.2719 li
472.386 23.2719 li
472.481 23.2719 li
472.592 23.2719 li
472.689 23.2719 li
472.79 23.2719 li
472.891 23.0058 li
472.984 23.0058 li
473.076 23.0058 li
473.164 23.0058 li
473.261 23.0058 li
473.353 23.0058 li
473.454 23.0058 li
473.558 23.0058 li
473.654 22.7398 li
473.762 22.7398 li
473.862 22.7398 li
473.953 22.7398 li
474.05 22.7398 li
474.139 22.7398 li
474.235 22.7398 li
474.333 22.7398 li
474.422 22.7398 li
474.51 22.7398 li
474.605 22.7398 li
474.699 22.7398 li
474.787 22.7398 li
474.881 22.7398 li
474.974 22.7398 li
475.06 22.7398 li
475.15 22.7398 li
475.24 22.7398 li
475.332 22.7398 li
475.418 22.7398 li
475.494 22.7398 li
475.58 22.7398 li
475.666 22.7398 li
475.757 22.7398 li
475.843 22.7398 li
475.928 22.7398 li
476.006 22.7398 li
476.092 22.7398 li
476.171 22.7398 li
476.255 22.7398 li
476.335 22.7398 li
476.413 22.7398 li
476.493 22.7398 li
476.575 22.7398 li
476.649 22.7398 li
476.728 22.7398 li
476.802 22.7398 li
476.882 22.7398 li
476.96 22.7398 li
477.039 22.7398 li
477.114 22.7398 li
477.184 22.7398 li
477.261 22.7398 li
477.344 22.7398 li
477.417 22.7398 li
477.494 22.7398 li
477.583 22.7398 li
477.659 22.7398 li
477.741 22.7398 li
477.809 22.7398 li
477.884 22.7398 li
477.958 22.7398 li
478.033 22.7398 li
478.11 22.7398 li
478.178 22.7398 li
478.252 22.7398 li
478.319 22.7398 li
478.394 22.7398 li
478.466 22.7398 li
478.539 22.7398 li
478.614 22.7398 li
478.681 22.7398 li
478.743 22.7398 li
478.812 22.7398 li
478.875 22.7398 li
478.947 22.7398 li
479.014 22.7398 li
479.088 22.7398 li
479.15 22.7398 li
479.212 22.7398 li
479.277 22.7398 li
479.34 22.7398 li
479.408 22.7398 li
479.476 22.7398 li
479.542 22.7398 li
479.608 22.7398 li
479.67 22.7398 li
479.729 22.7398 li
479.792 22.7398 li
479.859 22.7398 li
479.922 22.7398 li
479.981 22.7398 li
480.044 22.7398 li
480.1 22.7398 li
480.163 22.7398 li
480.221 22.7398 li
480.285 22.7398 li
480.346 22.7398 li
480.406 22.7398 li
480.464 22.7398 li
480.528 22.7398 li
480.593 22.7398 li
480.646 22.7398 li
480.706 22.7398 li
480.769 22.7398 li
480.828 22.7398 li
480.887 22.7398 li
480.947 22.7398 li
481.001 22.7398 li
481.055 22.7398 li
481.113 22.7398 li
481.173 22.7398 li
481.232 22.7398 li
481.287 22.7398 li
481.343 22.7398 li
481.403 22.7398 li
481.46 22.7398 li
481.515 22.7398 li
481.57 22.7398 li
481.623 22.7398 li
481.676 22.7398 li
481.731 22.7398 li
481.787 22.7398 li
481.846 22.7398 li
481.899 22.7398 li
481.951 22.7398 li
482.006 22.7398 li
482.059 22.7398 li
482.111 22.7398 li
482.162 22.7398 li
482.215 22.7398 li
482.264 22.7398 li
482.312 22.7398 li
482.366 22.7398 li
482.417 22.7398 li
482.471 22.7398 li
482.524 22.7398 li
482.573 22.7398 li
482.62 22.7398 li
482.672 22.7398 li
482.726 22.7398 li
482.78 22.7398 li
482.83 22.7398 li
482.88 22.7398 li
482.927 22.7398 li
482.975 22.7398 li
483.024 22.7398 li
483.071 22.7398 li
483.118 22.7398 li
483.166 22.7398 li
483.213 22.7398 li
483.262 22.7398 li
483.308 22.7398 li
483.356 22.7398 li
483.401 22.7398 li
483.444 22.7398 li
483.491 22.7398 li
483.537 22.7398 li
483.583 22.7398 li
483.628 22.7398 li
483.672 22.7398 li
483.713 22.7398 li
483.758 22.7398 li
483.799 22.7398 li
483.845 22.7398 li
483.891 22.7398 li
483.931 22.7398 li
483.98 22.7398 li
484.024 22.7398 li
484.064 22.7398 li
484.108 22.7398 li
484.147 22.7398 li
484.192 22.7398 li
484.232 22.7398 li
484.275 22.7398 li
484.317 22.7398 li
484.355 22.7398 li
484.394 22.7398 li
484.438 22.7398 li
484.48 22.7398 li
484.519 22.7398 li
484.558 22.7398 li
484.597 22.7398 li
484.637 22.7398 li
484.676 22.7398 li
484.72 22.7398 li
484.76 22.7398 li
484.801 22.7398 li
484.841 22.7398 li
484.872 22.7398 li
484.91 22.7398 li
484.946 22.7398 li
484.982 22.7398 li
485.022 22.7398 li
485.059 22.7398 li
485.095 22.7398 li
485.127 22.7398 li
485.162 22.7398 li
485.196 22.7398 li
485.231 22.7398 li
485.269 22.7398 li
485.306 22.7398 li
485.344 22.7398 li
485.376 22.7398 li
485.416 22.7398 li
485.45 22.7398 li
485.484 22.7398 li
485.522 22.7398 li
485.555 22.7398 li
485.588 22.7398 li
485.624 22.7398 li
485.655 22.7398 li
485.692 22.7398 li
485.726 22.7398 li
485.759 22.7398 li
485.796 22.7398 li
485.832 22.7398 li
485.866 22.7398 li
485.903 22.7398 li
485.933 22.7398 li
485.967 22.7398 li
486.001 22.7398 li
486.033 22.7398 li
486.069 22.7398 li
486.103 22.7398 li
486.14 22.7398 li
486.169 22.7398 li
486.201 22.7398 li
486.236 22.7398 li
486.266 22.7398 li
486.298 22.7398 li
486.333 22.7398 li
486.363 22.7398 li
486.396 22.7398 li
486.428 22.7398 li
486.458 22.7398 li
486.488 22.7398 li
486.516 22.7398 li
486.544 22.7398 li
486.574 22.7398 li
486.602 22.7398 li
486.631 22.7398 li
486.658 22.7398 li
486.686 22.7398 li
486.714 22.7398 li
486.74 22.7398 li
486.767 22.7398 li
486.794 22.7398 li
486.822 22.7398 li
486.851 22.7398 li
486.88 22.7398 li
486.908 22.7398 li
486.935 22.7398 li
486.965 22.7398 li
486.989 22.7398 li
487.016 22.7398 li
487.046 22.7398 li
487.073 22.7398 li
487.106 22.7398 li
487.134 22.7398 li
487.162 22.7398 li
487.187 22.7398 li
487.214 22.7398 li
487.244 22.7398 li
487.271 22.7398 li
487.296 22.7398 li
487.326 22.7398 li
487.355 22.7398 li
487.378 22.7398 li
487.404 22.7398 li
487.432 22.7398 li
487.456 22.7398 li
487.478 22.7398 li
487.501 22.7398 li
487.525 22.7398 li
487.551 22.7398 li
487.579 22.7398 li
487.606 22.7398 li
487.629 22.7398 li
487.651 22.7398 li
487.678 22.7398 li
487.699 22.7398 li
487.721 22.7398 li
487.743 22.7398 li
487.765 22.7398 li
487.789 22.7398 li
487.817 22.7398 li
487.838 22.7398 li
487.862 22.7398 li
487.888 22.7398 li
487.913 22.7398 li
487.935 22.7398 li
487.958 22.7398 li
487.981 22.7398 li
488.005 22.7398 li
488.028 22.7398 li
488.051 22.7398 li
488.073 22.7398 li
488.096 22.7398 li
488.119 22.7398 li
488.139 22.7398 li
488.161 22.7398 li
488.182 22.7398 li
488.204 22.7398 li
488.227 22.7398 li
488.246 22.7398 li
488.267 22.7398 li
488.287 22.7398 li
488.308 22.7398 li
488.331 22.7398 li
488.349 22.7398 li
488.369 22.7398 li
488.39 22.7398 li
488.409 22.7398 li
488.426 22.7398 li
488.447 22.7398 li
488.468 22.7398 li
488.489 22.7398 li
488.507 22.7398 li
488.528 22.7398 li
488.549 22.7398 li
488.567 22.7398 li
488.586 22.7398 li
488.604 22.7398 li
488.621 22.7398 li
488.642 22.7398 li
488.658 22.7398 li
488.678 22.7398 li
488.699 22.7398 li
488.716 22.7398 li
488.734 22.7398 li
488.752 22.7398 li
488.769 22.7398 li
488.788 22.7398 li
488.806 22.7398 li
488.824 22.7398 li
488.845 22.7398 li
488.86 22.7398 li
488.876 22.7398 li
488.896 22.7398 li
488.913 22.7398 li
488.928 22.7398 li
488.944 22.7398 li
488.96 22.7398 li
488.975 22.7398 li
488.99 22.7398 li
489.005 22.7398 li
489.019 22.7398 li
489.038 22.7398 li
489.056 22.7398 li
489.074 22.7398 li
489.09 22.7398 li
489.107 22.7398 li
489.124 22.7398 li
489.141 22.7398 li
489.156 22.7398 li
489.172 22.7398 li
489.184 22.7398 li
489.2 22.7398 li
489.217 22.7398 li
489.233 22.7398 li
489.249 22.7398 li
489.267 22.7398 li
489.281 22.7398 li
489.295 22.7398 li
489.31 22.7398 li
489.324 22.7398 li
489.338 22.7398 li
489.353 22.7398 li
489.367 22.7398 li
489.38 22.7398 li
489.396 22.7398 li
489.411 22.7398 li
489.426 22.7398 li
489.441 22.7398 li
489.455 22.7398 li
489.468 22.7398 li
489.484 22.7398 li
489.497 22.7398 li
489.511 22.7398 li
489.524 22.7398 li
489.538 22.7398 li
489.551 22.7398 li
489.564 22.7398 li
489.577 22.7398 li
489.59 22.7398 li
489.603 22.7398 li
489.617 22.7398 li
489.631 22.7398 li
489.643 22.7398 li
489.656 22.7398 li
489.67 22.7398 li
489.682 22.7398 li
489.695 22.7398 li
489.71 22.7398 li
489.722 22.7398 li
489.737 22.7398 li
489.747 22.7398 li
489.76 22.7398 li
489.776 22.7398 li
489.791 22.7398 li
489.801 22.7398 li
489.812 22.7398 li
489.823 22.7398 li
489.833 22.7398 li
489.845 22.7398 li
489.855 22.7398 li
489.866 22.7398 li
489.879 22.7398 li
489.888 22.7398 li
489.898 22.7398 li
489.906 22.7398 li
489.919 22.7398 li
489.93 22.7398 li
489.94 22.7398 li
489.95 22.7398 li
489.958 22.7398 li
489.969 22.7398 li
489.979 22.7398 li
489.988 22.7398 li
489.997 22.7398 li
490.006 22.7398 li
490.015 22.7398 li
490.024 22.7398 li
490.035 22.7398 li
490.046 22.7398 li
490.057 22.7398 li
490.067 22.7398 li
490.076 22.7398 li
490.086 22.7398 li
490.097 22.7398 li
490.108 22.7398 li
490.119 22.7398 li
490.13 22.7398 li
490.138 22.7398 li
490.148 22.7398 li
490.156 22.7398 li
490.167 22.7398 li
490.175 22.7398 li
490.183 22.7398 li
490.192 22.7398 li
490.204 22.7398 li
490.212 22.7398 li
490.22 22.7398 li
490.231 22.7398 li
490.239 22.7398 li
490.247 22.7398 li
490.256 22.7398 li
490.266 22.7398 li
490.274 22.7398 li
490.283 22.7398 li
490.292 22.7398 li
490.303 22.7398 li
490.31 22.7398 li
490.319 22.7398 li
490.328 22.7398 li
490.337 22.7398 li
490.346 22.7398 li
490.355 22.7398 li
490.362 22.7398 li
490.37 22.7398 li
490.378 22.7398 li
490.387 22.7398 li
490.396 22.7398 li
490.403 22.7398 li
490.413 22.7398 li
490.421 22.7398 li
490.43 22.7398 li
490.435 22.7398 li
490.442 22.7398 li
490.451 22.7398 li
490.46 22.7398 li
490.467 22.7398 li
490.474 22.7398 li
490.481 22.7398 li
490.49 22.7398 li
490.5 22.7398 li
490.506 22.7398 li
490.514 22.7398 li
490.522 22.7398 li
490.53 22.7398 li
490.537 22.7398 li
490.546 22.7398 li
490.555 22.7398 li
490.559 22.7398 li
490.566 22.7398 li
490.574 22.7398 li
490.582 22.7398 li
490.589 22.7398 li
490.595 22.7398 li
490.601 22.7398 li
490.61 22.7398 li
490.617 22.7398 li
490.624 22.7398 li
490.631 22.7398 li
490.638 22.7398 li
490.643 22.7398 li
490.65 22.7398 li
490.657 22.7398 li
490.664 22.7398 li
490.669 22.7398 li
490.675 22.7398 li
490.682 22.7398 li
490.687 22.7398 li
490.696 22.7398 li
490.703 22.7398 li
490.708 22.7398 li
490.714 22.7398 li
490.721 22.7398 li
490.725 22.7398 li
490.731 22.7398 li
490.737 22.7398 li
490.742 22.7398 li
490.747 22.7398 li
490.753 22.7398 li
490.759 22.7398 li
490.766 22.7398 li
490.772 22.7398 li
490.777 22.7398 li
490.783 22.7398 li
490.788 22.7398 li
490.792 22.7398 li
490.797 22.7398 li
490.802 22.7398 li
490.808 22.7398 li
490.814 22.7398 li
490.818 22.7398 li
490.822 22.7398 li
490.825 22.7398 li
490.83 22.7398 li
490.835 22.7398 li
490.839 22.7398 li
490.845 22.7398 li
490.849 22.7398 li
490.854 22.7398 li
490.858 22.7398 li
490.863 22.7398 li
490.866 22.7398 li
490.871 22.7398 li
490.875 22.7398 li
490.88 22.7398 li
490.885 22.7398 li
490.89 22.7398 li
490.894 22.7398 li
490.898 22.7398 li
490.903 22.7398 li
490.906 22.7398 li
490.912 22.7398 li
490.915 22.7398 li
490.92 22.7398 li
490.924 22.7398 li
490.929 22.7398 li
490.933 22.7398 li
490.936 22.7398 li
490.942 22.7398 li
490.946 22.7398 li
490.951 22.7398 li
490.955 22.7398 li
490.959 22.7398 li
490.963 22.7398 li
490.968 22.7398 li
490.973 22.7398 li
490.978 22.7398 li
490.981 22.7398 li
490.985 22.7398 li
490.989 22.7398 li
490.992 22.7398 li
490.995 22.7398 li
490.999 22.7398 li
491.003 22.7398 li
491.007 22.7398 li
491.011 22.7398 li
491.014 22.7398 li
491.017 22.7398 li
491.021 22.7398 li
491.025 22.7398 li
491.028 22.7398 li
491.031 22.7398 li
491.036 22.7398 li
491.041 22.7398 li
491.044 22.7398 li
491.047 22.7398 li
491.051 22.7398 li
491.055 22.7398 li
491.058 22.7398 li
491.061 22.7398 li
491.065 22.7398 li
491.069 22.7398 li
491.072 22.7398 li
491.074 22.7398 li
491.078 22.7398 li
491.082 22.7398 li
491.086 22.7398 li
491.088 22.7398 li
491.09 22.7398 li
491.093 22.7398 li
491.096 22.7398 li
491.099 22.7398 li
491.102 22.7398 li
491.105 22.7398 li
491.108 22.7398 li
491.11 22.7398 li
491.113 22.7398 li
491.116 22.7398 li
491.119 22.7398 li
491.12 22.7398 li
491.125 22.7398 li
491.128 22.7398 li
491.13 22.7398 li
491.132 22.7398 li
491.135 22.7398 li
491.137 22.7398 li
491.14 22.7398 li
491.144 22.7398 li
491.145 22.7398 li
491.148 22.7398 li
491.151 22.7398 li
491.155 22.7398 li
491.157 22.7398 li
491.158 22.7398 li
491.162 22.7398 li
491.165 22.7398 li
491.167 22.7398 li
491.17 22.7398 li
491.171 22.7398 li
491.175 22.7398 li
491.177 22.7398 li
491.18 22.7398 li
491.182 22.7398 li
491.184 22.7398 li
491.186 22.7398 li
491.189 22.7398 li
491.191 22.7398 li
491.192 22.7398 li
491.195 22.7398 li
491.197 22.7398 li
491.199 22.7398 li
491.202 22.7398 li
491.203 22.7398 li
491.206 22.7398 li
491.209 22.7398 li
491.211 22.7398 li
491.213 22.7398 li
491.215 22.7398 li
491.218 22.7398 li
491.219 22.7398 li
491.221 22.7398 li
491.224 22.7398 li
491.227 22.7398 li
491.231 22.7398 li
491.233 22.7398 li
491.235 22.7398 li
491.237 22.7398 li
491.238 22.7398 li
491.24 22.7398 li
491.242 22.7398 li
491.244 22.7398 li
491.246 22.7398 li
491.249 22.7398 li
491.251 22.7398 li
491.253 22.7398 li
491.254 22.7398 li
491.256 22.7398 li
491.258 22.7398 li
491.259 22.7398 li
491.261 22.7398 li
491.263 22.7398 li
491.264 22.7398 li
491.266 22.7398 li
491.267 22.7398 li
491.268 22.7398 li
491.269 22.7398 li
491.271 22.7398 li
491.272 22.7398 li
491.276 22.7398 li
491.277 22.7398 li
491.279 22.7398 li
491.281 22.7398 li
491.285 22.7398 li
491.287 22.7398 li
491.29 22.7398 li
491.291 22.7398 li
491.293 22.7398 li
491.295 22.7398 li
491.296 22.7398 li
491.297 22.7398 li
491.299 22.7398 li
491.301 22.7398 li
491.303 22.7398 li
491.305 22.7398 li
491.306 22.7398 li
491.308 22.7398 li
491.309 22.7398 li
491.311 22.7398 li
491.312 22.7398 li
491.314 22.7398 li
491.315 22.7398 li
491.316 22.7398 li
491.318 22.7398 li
491.319 22.7398 li
491.321 22.7398 li
491.323 22.7398 li
491.324 22.7398 li
491.326 22.7398 li
491.329 22.7398 li
491.33 22.7398 li
491.331 22.7398 li
491.332 22.7398 li
491.333 22.7398 li
491.335 22.7398 li
491.336 22.7398 li
491.338 22.7398 li
491.339 22.7398 li
491.341 22.7398 li
491.342 22.7398 li
491.343 22.7398 li
491.344 22.7398 li
491.345 22.7398 li
491.347 22.7398 li
491.348 22.7398 li
491.35 22.7398 li
491.351 22.7398 li
491.352 22.7398 li
491.353 22.7398 li
491.354 22.7398 li
491.355 22.7398 li
491.356 22.7398 li
491.358 22.7398 li
491.359 22.7398 li
491.36 22.7398 li
491.361 22.7398 li
491.362 22.7398 li
491.363 22.7398 li
491.364 22.7398 li
491.365 22.7398 li
491.366 22.7398 li
491.368 22.7398 li
491.369 22.7398 li
491.371 22.7398 li
491.372 22.7398 li
491.373 22.7398 li
491.374 22.7398 li
491.376 22.7398 li
491.377 22.7398 li
491.378 22.7398 li
491.379 22.7398 li
491.38 22.7398 li
491.382 22.7398 li
491.383 22.7398 li
491.384 22.7398 li
491.385 22.7398 li
491.386 22.7398 li
491.387 22.7398 li
491.388 22.7398 li
491.389 22.7398 li
491.39 22.7398 li
491.391 22.7398 li
491.392 22.7398 li
491.393 22.7398 li
491.395 22.7398 li
491.396 22.7398 li
491.397 22.7398 li
491.398 22.7398 li
491.399 22.7398 li
491.4 22.7398 li
491.401 22.7398 li
491.403 22.7398 li
491.405 22.7398 li
491.406 22.7398 li
491.407 22.7398 li
491.408 22.7398 li
491.409 22.7398 li
491.41 22.7398 li
491.412 22.7398 li
491.413 22.7398 li
491.414 22.7398 li
491.415 22.7398 li
491.416 22.7398 li
491.417 22.7398 li
491.418 22.7398 li
491.419 22.7398 li
491.42 22.7398 li
491.421 22.7398 li
491.422 22.7398 li
491.423 22.7398 li
491.424 22.7398 li
491.425 22.7398 li
491.426 22.7398 li
491.427 22.7398 li
491.428 22.7398 li
491.429 22.7398 li
491.43 22.7398 li
491.431 22.7398 li
491.432 22.7398 li
491.433 22.7398 li
491.434 22.7398 li
491.435 22.7398 li
491.436 22.7398 li
491.437 22.7398 li
491.438 22.7398 li
491.439 22.7398 li
491.44 22.7398 li
491.441 22.7398 li
491.442 22.7398 li
491.443 22.7398 li
491.444 22.7398 li
491.445 22.7398 li
491.446 22.7398 li
491.447 22.7398 li
491.448 22.7398 li
491.449 22.7398 li
491.45 22.7398 li
491.451 22.7398 li
.896484 .767578 0 0 cmyk
@
0 lj
60.4186 263.247 mo
60.4186 269.247 li
57.4186 266.247 mo
63.4186 266.247 li
58.2975 264.126 mo
62.5397 268.368 li
58.2975 268.368 mo
62.5397 264.126 li
@
79.5904 248.36 mo
79.5904 254.36 li
76.5904 251.36 mo
82.5904 251.36 li
77.4694 249.239 mo
81.7114 253.481 li
77.4694 253.481 mo
81.7114 249.239 li
@
101.649 235.865 mo
101.649 241.865 li
98.6494 238.865 mo
104.649 238.865 li
99.5284 236.745 mo
103.771 240.986 li
99.5284 240.986 mo
103.771 236.745 li
@
123.243 217.789 mo
123.243 223.789 li
120.243 220.789 mo
126.243 220.789 li
121.122 218.668 mo
125.364 222.91 li
121.122 222.91 mo
125.364 218.668 li
@
150.412 203.433 mo
150.412 209.433 li
147.412 206.433 mo
153.412 206.433 li
148.291 204.312 mo
152.533 208.554 li
148.291 208.554 mo
152.533 204.312 li
@
171.576 185.356 mo
171.576 191.356 li
168.576 188.356 mo
174.576 188.356 li
169.456 186.235 mo
173.697 190.477 li
169.456 190.477 mo
173.697 186.235 li
@
190.488 172.331 mo
190.488 178.331 li
187.488 175.331 mo
193.488 175.331 li
188.367 173.21 mo
192.609 177.451 li
188.367 177.451 mo
192.609 173.21 li
@
206.223 159.57 mo
206.223 165.57 li
203.223 162.57 mo
209.223 162.57 li
204.102 160.449 mo
208.344 164.691 li
204.102 164.691 mo
208.344 160.449 li
@
221.096 147.342 mo
221.096 153.342 li
218.096 150.342 mo
224.096 150.342 li
218.975 148.221 mo
223.217 152.463 li
218.975 152.463 mo
223.217 148.221 li
@
236.024 135.379 mo
236.024 141.379 li
233.024 138.379 mo
239.024 138.379 li
233.903 136.258 mo
238.145 140.5 li
233.903 140.5 mo
238.145 136.258 li
@
250.577 124.214 mo
250.577 130.214 li
247.577 127.214 mo
253.577 127.214 li
248.456 125.093 mo
252.698 129.335 li
248.456 129.335 mo
252.698 125.093 li
@
266.056 111.985 mo
266.056 117.985 li
263.056 114.985 mo
269.056 114.985 li
263.935 112.865 mo
268.177 117.106 li
263.935 117.106 mo
268.177 112.865 li
@
278.959 104.542 mo
278.959 110.542 li
275.959 107.542 mo
281.959 107.542 li
276.838 105.421 mo
281.08 109.663 li
276.838 109.663 mo
281.08 105.421 li
@
290.579 93.6428 mo
290.579 99.6428 li
287.579 96.6428 mo
293.579 96.6428 li
288.458 94.5219 mo
292.7 98.7638 li
288.458 98.7638 mo
292.7 94.5219 li
@
302.585 85.4019 mo
302.585 91.4019 li
299.585 88.4019 mo
305.585 88.4019 li
300.464 86.2808 mo
304.706 90.5228 li
300.464 90.5228 mo
304.706 86.2808 li
@
314.499 79.0219 mo
314.499 85.0219 li
311.499 82.0219 mo
317.499 82.0219 li
312.378 79.9008 mo
316.62 84.1428 li
312.378 84.1428 mo
316.62 79.9008 li
@
324.233 73.1729 mo
324.233 79.1729 li
321.233 76.1729 mo
327.233 76.1729 li
322.112 74.0518 mo
326.354 78.2938 li
322.112 78.2938 mo
326.354 74.0518 li
@
333.397 70.2488 mo
333.397 76.2488 li
330.397 73.2488 mo
336.397 73.2488 li
331.276 71.1278 mo
335.518 75.3698 li
331.276 75.3698 mo
335.518 71.1278 li
@
342.211 64.9318 mo
342.211 70.9318 li
339.211 67.9318 mo
345.211 67.9318 li
340.09 65.8108 mo
344.332 70.0528 li
340.09 70.0528 mo
344.332 65.8108 li
@
350.358 58.8178 mo
350.358 64.8178 li
347.358 61.8178 mo
353.358 61.8178 li
348.237 59.6968 mo
352.478 63.9388 li
348.237 63.9388 mo
352.478 59.6968 li
@
357.833 54.2988 mo
357.833 60.2988 li
354.833 57.2988 mo
360.833 57.2988 li
355.712 55.1778 mo
359.955 59.4198 li
355.712 59.4198 mo
359.955 55.1778 li
@
365.153 48.9818 mo
365.153 54.9818 li
362.153 51.9818 mo
368.153 51.9818 li
363.031 49.8608 mo
367.274 54.1028 li
363.031 54.1028 mo
367.274 49.8608 li
@
371.79 43.3988 mo
371.79 49.3988 li
368.79 46.3988 mo
374.79 46.3988 li
369.669 44.2788 mo
373.911 48.5198 li
369.669 48.5198 mo
373.911 44.2788 li
@
377.971 40.7408 mo
377.971 46.7408 li
374.971 43.7408 mo
380.971 43.7408 li
375.851 41.6198 mo
380.092 45.8618 li
375.851 45.8618 mo
380.092 41.6198 li
@
383.951 37.8168 mo
383.951 43.8168 li
380.951 40.8168 mo
386.951 40.8168 li
381.83 38.6958 mo
386.072 42.9378 li
381.83 42.9378 mo
386.072 38.6958 li
@
389.767 36.4878 mo
389.767 42.4878 li
386.767 39.4878 mo
392.767 39.4878 li
387.646 37.3668 mo
391.888 41.6088 li
387.646 41.6088 mo
391.888 37.3668 li
@
395.032 34.8928 mo
395.032 40.8928 li
392.032 37.8928 mo
398.032 37.8928 li
392.911 35.7719 mo
397.153 40.0138 li
392.911 40.0138 mo
397.153 35.7719 li
@
400.172 32.4998 mo
400.172 38.4998 li
397.172 35.4998 mo
403.172 35.4998 li
398.051 33.3788 mo
402.293 37.6208 li
398.051 37.6208 mo
402.293 33.3788 li
@
404.975 31.1708 mo
404.975 37.1708 li
401.975 34.1708 mo
407.975 34.1708 li
402.854 32.0498 mo
407.096 36.2918 li
402.854 36.2918 mo
407.096 32.0498 li
@
409.483 30.6388 mo
409.483 36.6388 li
406.483 33.6388 mo
412.483 33.6388 li
407.362 31.5188 mo
411.604 35.7598 li
407.362 35.7598 mo
411.604 31.5188 li
@
413.669 28.5128 mo
413.669 34.5128 li
410.669 31.5128 mo
416.669 31.5128 li
411.547 29.3918 mo
415.79 33.6338 li
411.547 33.6338 mo
415.79 29.3918 li
@
417.76 27.9808 mo
417.76 33.9808 li
414.76 30.9808 mo
420.76 30.9808 li
415.639 28.8598 mo
419.881 33.1018 li
415.639 33.1018 mo
419.881 28.8598 li
@
421.436 27.7148 mo
421.436 33.7148 li
418.436 30.7148 mo
424.436 30.7148 li
419.315 28.5938 mo
423.557 32.8358 li
419.315 32.8358 mo
423.557 28.5938 li
@
425.037 25.8538 mo
425.037 31.8538 li
422.037 28.8538 mo
428.037 28.8538 li
422.915 26.7328 mo
427.157 30.9749 li
422.915 30.9749 mo
427.157 26.7328 li
@
428.497 25.3218 mo
428.497 31.3218 li
425.497 28.3218 mo
431.497 28.3218 li
426.376 26.2018 mo
430.618 30.4438 li
426.376 30.4438 mo
430.618 26.2018 li
@
431.787 25.0568 mo
431.787 31.0568 li
428.787 28.0568 mo
434.787 28.0568 li
429.666 25.9358 mo
433.908 30.1778 li
429.666 30.1778 mo
433.908 25.9358 li
@
434.921 25.0568 mo
434.921 31.0568 li
431.921 28.0568 mo
437.921 28.0568 li
432.8 25.9358 mo
437.042 30.1778 li
432.8 30.1778 mo
437.042 25.9358 li
@
437.826 24.2588 mo
437.826 30.2588 li
434.826 27.2588 mo
440.826 27.2588 li
435.705 25.1378 mo
439.947 29.3798 li
435.705 29.3798 mo
439.947 25.1378 li
@
440.576 23.4618 mo
440.576 29.4618 li
437.576 26.4618 mo
443.576 26.4618 li
438.455 24.3408 mo
442.697 28.5828 li
438.455 28.5828 mo
442.697 24.3408 li
@
443.21 22.6638 mo
443.21 28.6638 li
440.21 25.6638 mo
446.21 25.6638 li
441.089 23.5428 mo
445.331 27.7848 li
441.089 27.7848 mo
445.331 23.5428 li
@
445.711 22.6638 mo
445.711 28.6638 li
442.711 25.6638 mo
448.711 25.6638 li
443.59 23.5428 mo
447.832 27.7848 li
443.59 27.7848 mo
447.832 23.5428 li
@
448.132 22.3978 mo
448.132 28.3978 li
445.132 25.3978 mo
451.132 25.3978 li
446.011 23.2769 mo
450.253 27.5188 li
446.011 27.5188 mo
450.253 23.2769 li
@
450.358 21.8668 mo
450.358 27.8668 li
447.358 24.8668 mo
453.358 24.8668 li
448.237 22.7458 mo
452.479 26.9878 li
448.237 26.9878 mo
452.479 22.7458 li
@
452.513 21.8668 mo
452.513 27.8668 li
449.513 24.8668 mo
455.513 24.8668 li
450.392 22.7458 mo
454.634 26.9878 li
450.392 26.9878 mo
454.634 22.7458 li
@
454.523 21.8668 mo
454.523 27.8668 li
451.523 24.8668 mo
457.523 24.8668 li
452.402 22.7458 mo
456.644 26.9878 li
452.402 26.9878 mo
456.644 22.7458 li
@
456.39 21.8668 mo
456.39 27.8668 li
453.39 24.8668 mo
459.39 24.8668 li
454.27 22.7458 mo
458.512 26.9878 li
454.27 26.9878 mo
458.512 22.7458 li
@
458.174 21.6008 mo
458.174 27.6008 li
455.174 24.6008 mo
461.174 24.6008 li
456.053 22.4798 mo
460.295 26.7218 li
456.053 26.7218 mo
460.295 22.4798 li
@
459.886 21.3348 mo
459.886 27.3348 li
456.886 24.3348 mo
462.886 24.3348 li
457.765 22.2138 mo
462.007 26.4558 li
457.765 26.4558 mo
462.007 22.2138 li
@
461.515 21.3348 mo
461.515 27.3348 li
458.515 24.3348 mo
464.515 24.3348 li
459.394 22.2138 mo
463.635 26.4558 li
459.394 26.4558 mo
463.635 22.2138 li
@
463.023 21.3348 mo
463.023 27.3348 li
460.023 24.3348 mo
466.023 24.3348 li
460.903 22.2138 mo
465.144 26.4558 li
460.903 26.4558 mo
465.144 22.2138 li
@
464.468 21.0688 mo
464.468 27.0688 li
461.468 24.0688 mo
467.468 24.0688 li
462.347 21.9478 mo
466.589 26.1898 li
462.347 26.1898 mo
466.589 21.9478 li
@
465.87 20.8028 mo
465.87 26.8028 li
462.87 23.8028 mo
468.87 23.8028 li
463.749 21.6818 mo
467.991 25.9238 li
463.749 25.9238 mo
467.991 21.6818 li
@
467.203 20.8028 mo
467.203 26.8028 li
464.203 23.8028 mo
470.203 23.8028 li
465.081 21.6818 mo
469.323 25.9238 li
465.081 25.9238 mo
469.323 21.6818 li
@
468.424 20.5378 mo
468.424 26.5378 li
465.424 23.5378 mo
471.424 23.5378 li
466.303 21.4168 mo
470.545 25.6578 li
466.303 25.6578 mo
470.545 21.4168 li
@
469.64 20.2719 mo
469.64 26.2719 li
466.64 23.2719 mo
472.64 23.2719 li
467.519 21.1508 mo
471.762 25.3928 li
467.519 25.3928 mo
471.762 21.1508 li
@
470.788 20.2719 mo
470.788 26.2719 li
467.788 23.2719 mo
473.788 23.2719 li
468.667 21.1508 mo
472.909 25.3928 li
468.667 25.3928 mo
472.909 21.1508 li
@
471.858 20.2719 mo
471.858 26.2719 li
468.858 23.2719 mo
474.858 23.2719 li
469.737 21.1508 mo
473.979 25.3928 li
469.737 25.3928 mo
473.979 21.1508 li
@
472.891 20.0058 mo
472.891 26.0058 li
469.891 23.0058 mo
475.891 23.0058 li
470.77 20.8848 mo
475.012 25.1268 li
470.77 25.1268 mo
475.012 20.8848 li
@
473.862 19.7398 mo
473.862 25.7398 li
470.862 22.7398 mo
476.862 22.7398 li
471.741 20.6188 mo
475.983 24.8608 li
471.741 24.8608 mo
475.983 20.6188 li
@
474.787 19.7398 mo
474.787 25.7398 li
471.787 22.7398 mo
477.787 22.7398 li
472.666 20.6188 mo
476.908 24.8608 li
472.666 24.8608 mo
476.908 20.6188 li
@
475.665 19.7398 mo
475.665 25.7398 li
472.665 22.7398 mo
478.665 22.7398 li
473.545 20.6188 mo
477.787 24.8608 li
473.545 24.8608 mo
477.787 20.6188 li
@
476.493 19.7398 mo
476.493 25.7398 li
473.493 22.7398 mo
479.493 22.7398 li
474.372 20.6188 mo
478.614 24.8608 li
474.372 24.8608 mo
478.614 20.6188 li
@
477.261 19.7398 mo
477.261 25.7398 li
474.261 22.7398 mo
480.261 22.7398 li
475.14 20.6188 mo
479.382 24.8608 li
475.14 24.8608 mo
479.382 20.6188 li
@
478.034 19.7398 mo
478.034 25.7398 li
475.034 22.7398 mo
481.034 22.7398 li
475.913 20.6188 mo
480.155 24.8608 li
475.913 24.8608 mo
480.155 20.6188 li
@
478.743 19.7398 mo
478.743 25.7398 li
475.743 22.7398 mo
481.743 22.7398 li
476.622 20.6188 mo
480.864 24.8608 li
476.622 24.8608 mo
480.864 20.6188 li
@
479.408 19.7398 mo
479.408 25.7398 li
476.408 22.7398 mo
482.408 22.7398 li
477.287 20.6188 mo
481.529 24.8608 li
477.287 24.8608 mo
481.529 20.6188 li
@
480.044 19.7398 mo
480.044 25.7398 li
477.044 22.7398 mo
483.044 22.7398 li
477.923 20.6188 mo
482.165 24.8608 li
477.923 24.8608 mo
482.165 20.6188 li
@
480.646 19.7398 mo
480.646 25.7398 li
477.646 22.7398 mo
483.646 22.7398 li
478.524 20.6188 mo
482.767 24.8608 li
478.524 24.8608 mo
482.767 20.6188 li
@
481.233 19.7398 mo
481.233 25.7398 li
478.233 22.7398 mo
484.233 22.7398 li
479.112 20.6188 mo
483.354 24.8608 li
479.112 24.8608 mo
483.354 20.6188 li
@
481.787 19.7398 mo
481.787 25.7398 li
478.787 22.7398 mo
484.787 22.7398 li
479.666 20.6188 mo
483.908 24.8608 li
479.666 24.8608 mo
483.908 20.6188 li
@
482.312 19.7398 mo
482.312 25.7398 li
479.312 22.7398 mo
485.312 22.7398 li
480.191 20.6188 mo
484.433 24.8608 li
480.191 24.8608 mo
484.433 20.6188 li
@
482.83 19.7398 mo
482.83 25.7398 li
479.83 22.7398 mo
485.83 22.7398 li
480.709 20.6188 mo
484.951 24.8608 li
480.709 24.8608 mo
484.951 20.6188 li
@
483.308 19.7398 mo
483.308 25.7398 li
480.308 22.7398 mo
486.308 22.7398 li
481.187 20.6188 mo
485.429 24.8608 li
481.187 24.8608 mo
485.429 20.6188 li
@
483.758 19.7398 mo
483.758 25.7398 li
480.758 22.7398 mo
486.758 22.7398 li
481.637 20.6188 mo
485.878 24.8608 li
481.637 24.8608 mo
485.878 20.6188 li
@
484.192 19.7398 mo
484.192 25.7398 li
481.192 22.7398 mo
487.192 22.7398 li
482.071 20.6188 mo
486.313 24.8608 li
482.071 24.8608 mo
486.313 20.6188 li
@
484.597 19.7398 mo
484.597 25.7398 li
481.597 22.7398 mo
487.597 22.7398 li
482.476 20.6188 mo
486.718 24.8608 li
482.476 24.8608 mo
486.718 20.6188 li
@
484.982 19.7398 mo
484.982 25.7398 li
481.982 22.7398 mo
487.982 22.7398 li
482.861 20.6188 mo
487.103 24.8608 li
482.861 24.8608 mo
487.103 20.6188 li
@
485.344 19.7398 mo
485.344 25.7398 li
482.344 22.7398 mo
488.344 22.7398 li
483.223 20.6188 mo
487.465 24.8608 li
483.223 24.8608 mo
487.465 20.6188 li
@
485.693 19.7398 mo
485.693 25.7398 li
482.693 22.7398 mo
488.693 22.7398 li
483.572 20.6188 mo
487.814 24.8608 li
483.572 24.8608 mo
487.814 20.6188 li
@
486.033 19.7398 mo
486.033 25.7398 li
483.033 22.7398 mo
489.033 22.7398 li
483.912 20.6188 mo
488.154 24.8608 li
483.912 24.8608 mo
488.154 20.6188 li
@
486.363 19.7398 mo
486.363 25.7398 li
483.363 22.7398 mo
489.363 22.7398 li
484.242 20.6188 mo
488.484 24.8608 li
484.242 24.8608 mo
488.484 20.6188 li
@
486.658 19.7398 mo
486.658 25.7398 li
483.658 22.7398 mo
489.658 22.7398 li
484.537 20.6188 mo
488.779 24.8608 li
484.537 24.8608 mo
488.779 20.6188 li
@
486.936 19.7398 mo
486.936 25.7398 li
483.936 22.7398 mo
489.936 22.7398 li
484.815 20.6188 mo
489.056 24.8608 li
484.815 24.8608 mo
489.056 20.6188 li
@
487.214 19.7398 mo
487.214 25.7398 li
484.214 22.7398 mo
490.214 22.7398 li
485.094 20.6188 mo
489.335 24.8608 li
485.094 24.8608 mo
489.335 20.6188 li
@
487.477 19.7398 mo
487.477 25.7398 li
484.477 22.7398 mo
490.477 22.7398 li
485.356 20.6188 mo
489.598 24.8608 li
485.356 24.8608 mo
489.598 20.6188 li
@
487.72 19.7398 mo
487.72 25.7398 li
484.72 22.7398 mo
490.72 22.7398 li
485.599 20.6188 mo
489.841 24.8608 li
485.599 24.8608 mo
489.841 20.6188 li
@
487.958 19.7398 mo
487.958 25.7398 li
484.958 22.7398 mo
490.958 22.7398 li
485.837 20.6188 mo
490.079 24.8608 li
485.837 24.8608 mo
490.079 20.6188 li
@
488.182 19.7398 mo
488.182 25.7398 li
485.182 22.7398 mo
491.182 22.7398 li
486.061 20.6188 mo
490.303 24.8608 li
486.061 24.8608 mo
490.303 20.6188 li
@
488.39 19.7398 mo
488.39 25.7398 li
485.39 22.7398 mo
491.39 22.7398 li
486.269 20.6188 mo
490.512 24.8608 li
486.269 24.8608 mo
490.512 20.6188 li
@
488.586 19.7398 mo
488.586 25.7398 li
485.586 22.7398 mo
491.586 22.7398 li
486.465 20.6188 mo
490.707 24.8608 li
486.465 24.8608 mo
490.707 20.6188 li
@
488.769 19.7398 mo
488.769 25.7398 li
485.769 22.7398 mo
491.769 22.7398 li
486.648 20.6188 mo
490.89 24.8608 li
486.648 24.8608 mo
490.89 20.6188 li
@
488.944 19.7398 mo
488.944 25.7398 li
485.944 22.7398 mo
491.944 22.7398 li
486.822 20.6188 mo
491.065 24.8608 li
486.822 24.8608 mo
491.065 20.6188 li
@
489.107 19.7398 mo
489.107 25.7398 li
486.107 22.7398 mo
492.107 22.7398 li
486.986 20.6188 mo
491.228 24.8608 li
486.986 24.8608 mo
491.228 20.6188 li
@
489.267 19.7398 mo
489.267 25.7398 li
486.267 22.7398 mo
492.267 22.7398 li
487.146 20.6188 mo
491.388 24.8608 li
487.146 24.8608 mo
491.388 20.6188 li
@
489.411 19.7398 mo
489.411 25.7398 li
486.411 22.7398 mo
492.411 22.7398 li
487.29 20.6188 mo
491.532 24.8608 li
487.29 24.8608 mo
491.532 20.6188 li
@
489.551 19.7398 mo
489.551 25.7398 li
486.551 22.7398 mo
492.551 22.7398 li
487.43 20.6188 mo
491.672 24.8608 li
487.43 24.8608 mo
491.672 20.6188 li
@
489.682 19.7398 mo
489.682 25.7398 li
486.682 22.7398 mo
492.682 22.7398 li
487.561 20.6188 mo
491.803 24.8608 li
487.561 24.8608 mo
491.803 20.6188 li
@
489.812 19.7398 mo
489.812 25.7398 li
486.812 22.7398 mo
492.812 22.7398 li
487.691 20.6188 mo
491.933 24.8608 li
487.691 24.8608 mo
491.933 20.6188 li
@
489.919 19.7398 mo
489.919 25.7398 li
486.919 22.7398 mo
492.919 22.7398 li
487.798 20.6188 mo
492.04 24.8608 li
487.798 24.8608 mo
492.04 20.6188 li
@
490.015 19.7398 mo
490.015 25.7398 li
487.015 22.7398 mo
493.015 22.7398 li
487.894 20.6188 mo
492.136 24.8608 li
487.894 24.8608 mo
492.136 20.6188 li
@
490.119 19.7398 mo
490.119 25.7398 li
487.119 22.7398 mo
493.119 22.7398 li
487.998 20.6188 mo
492.24 24.8608 li
487.998 24.8608 mo
492.24 20.6188 li
@
490.212 19.7398 mo
490.212 25.7398 li
487.212 22.7398 mo
493.212 22.7398 li
488.091 20.6188 mo
492.333 24.8608 li
488.091 24.8608 mo
492.333 20.6188 li
@
490.303 19.7398 mo
490.303 25.7398 li
487.303 22.7398 mo
493.303 22.7398 li
488.182 20.6188 mo
492.424 24.8608 li
488.182 24.8608 mo
492.424 20.6188 li
@
490.388 19.7398 mo
490.388 25.7398 li
487.388 22.7398 mo
493.388 22.7398 li
488.267 20.6188 mo
492.509 24.8608 li
488.267 24.8608 mo
492.509 20.6188 li
@
490.467 19.7398 mo
490.467 25.7398 li
487.467 22.7398 mo
493.467 22.7398 li
488.346 20.6188 mo
492.588 24.8608 li
488.346 24.8608 mo
492.588 20.6188 li
@
490.546 19.7398 mo
490.546 25.7398 li
487.546 22.7398 mo
493.546 22.7398 li
488.424 20.6188 mo
492.667 24.8608 li
488.424 24.8608 mo
492.667 20.6188 li
@
490.617 19.7398 mo
490.617 25.7398 li
487.617 22.7398 mo
493.617 22.7398 li
488.496 20.6188 mo
492.738 24.8608 li
488.496 24.8608 mo
492.738 20.6188 li
@
490.682 19.7398 mo
490.682 25.7398 li
487.682 22.7398 mo
493.682 22.7398 li
488.561 20.6188 mo
492.803 24.8608 li
488.561 24.8608 mo
492.803 20.6188 li
@
490.742 19.7398 mo
490.742 25.7398 li
487.742 22.7398 mo
493.742 22.7398 li
488.621 20.6188 mo
492.863 24.8608 li
488.621 24.8608 mo
492.863 20.6188 li
@
490.797 19.7398 mo
490.797 25.7398 li
487.797 22.7398 mo
493.797 22.7398 li
488.676 20.6188 mo
492.918 24.8608 li
488.676 24.8608 mo
492.918 20.6188 li
@
490.845 19.7398 mo
490.845 25.7398 li
487.845 22.7398 mo
493.845 22.7398 li
488.724 20.6188 mo
492.966 24.8608 li
488.724 24.8608 mo
492.966 20.6188 li
@
490.89 19.7398 mo
490.89 25.7398 li
487.89 22.7398 mo
493.89 22.7398 li
488.769 20.6188 mo
493.011 24.8608 li
488.769 24.8608 mo
493.011 20.6188 li
@
490.933 19.7398 mo
490.933 25.7398 li
487.933 22.7398 mo
493.933 22.7398 li
488.812 20.6188 mo
493.054 24.8608 li
488.812 24.8608 mo
493.054 20.6188 li
@
490.978 19.7398 mo
490.978 25.7398 li
487.978 22.7398 mo
493.978 22.7398 li
488.856 20.6188 mo
493.099 24.8608 li
488.856 24.8608 mo
493.099 20.6188 li
@
491.014 19.7398 mo
491.014 25.7398 li
488.014 22.7398 mo
494.014 22.7398 li
488.893 20.6188 mo
493.135 24.8608 li
488.893 24.8608 mo
493.135 20.6188 li
@
491.052 19.7398 mo
491.052 25.7398 li
488.052 22.7398 mo
494.052 22.7398 li
488.931 20.6188 mo
493.172 24.8608 li
488.931 24.8608 mo
493.172 20.6188 li
@
491.086 19.7398 mo
491.086 25.7398 li
488.086 22.7398 mo
494.086 22.7398 li
488.965 20.6188 mo
493.207 24.8608 li
488.965 24.8608 mo
493.207 20.6188 li
@
491.113 19.7398 mo
491.113 25.7398 li
488.113 22.7398 mo
494.113 22.7398 li
488.992 20.6188 mo
493.234 24.8608 li
488.992 24.8608 mo
493.234 20.6188 li
@
491.14 19.7398 mo
491.14 25.7398 li
488.14 22.7398 mo
494.14 22.7398 li
489.019 20.6188 mo
493.26 24.8608 li
489.019 24.8608 mo
493.26 20.6188 li
@
491.168 19.7398 mo
491.168 25.7398 li
488.168 22.7398 mo
494.168 22.7398 li
489.047 20.6188 mo
493.289 24.8608 li
489.047 24.8608 mo
493.289 20.6188 li
@
491.19 19.7398 mo
491.19 25.7398 li
488.19 22.7398 mo
494.19 22.7398 li
489.069 20.6188 mo
493.312 24.8608 li
489.069 24.8608 mo
493.312 20.6188 li
@
491.214 19.7398 mo
491.214 25.7398 li
488.214 22.7398 mo
494.214 22.7398 li
489.092 20.6188 mo
493.335 24.8608 li
489.092 24.8608 mo
493.335 20.6188 li
@
491.237 19.7398 mo
491.237 25.7398 li
488.237 22.7398 mo
494.237 22.7398 li
489.115 20.6188 mo
493.358 24.8608 li
489.115 24.8608 mo
493.358 20.6188 li
@
491.254 19.7398 mo
491.254 25.7398 li
488.254 22.7398 mo
494.254 22.7398 li
489.133 20.6188 mo
493.375 24.8608 li
489.133 24.8608 mo
493.375 20.6188 li
@
491.269 19.7398 mo
491.269 25.7398 li
488.269 22.7398 mo
494.269 22.7398 li
489.148 20.6188 mo
493.39 24.8608 li
489.148 24.8608 mo
493.39 20.6188 li
@
491.288 19.7398 mo
491.288 25.7398 li
488.288 22.7398 mo
494.288 22.7398 li
489.167 20.6188 mo
493.408 24.8608 li
489.167 24.8608 mo
493.408 20.6188 li
@
491.303 19.7398 mo
491.303 25.7398 li
488.303 22.7398 mo
494.303 22.7398 li
489.182 20.6188 mo
493.424 24.8608 li
489.182 24.8608 mo
493.424 20.6188 li
@
491.316 19.7398 mo
491.316 25.7398 li
488.316 22.7398 mo
494.316 22.7398 li
489.195 20.6188 mo
493.437 24.8608 li
489.195 24.8608 mo
493.437 20.6188 li
@
491.33 19.7398 mo
491.33 25.7398 li
488.33 22.7398 mo
494.33 22.7398 li
489.209 20.6188 mo
493.451 24.8608 li
489.209 24.8608 mo
493.451 20.6188 li
@
491.342 19.7398 mo
491.342 25.7398 li
488.342 22.7398 mo
494.342 22.7398 li
489.221 20.6188 mo
493.463 24.8608 li
489.221 24.8608 mo
493.463 20.6188 li
@
491.351 19.7398 mo
491.351 25.7398 li
488.351 22.7398 mo
494.351 22.7398 li
489.23 20.6188 mo
493.472 24.8608 li
489.23 24.8608 mo
493.472 20.6188 li
@
491.36 19.7398 mo
491.36 25.7398 li
488.36 22.7398 mo
494.36 22.7398 li
489.239 20.6188 mo
493.481 24.8608 li
489.239 24.8608 mo
493.481 20.6188 li
@
491.369 19.7398 mo
491.369 25.7398 li
488.369 22.7398 mo
494.369 22.7398 li
489.247 20.6188 mo
493.49 24.8608 li
489.247 24.8608 mo
493.49 20.6188 li
@
491.377 19.7398 mo
491.377 25.7398 li
488.377 22.7398 mo
494.377 22.7398 li
489.256 20.6188 mo
493.498 24.8608 li
489.256 24.8608 mo
493.498 20.6188 li
@
491.385 19.7398 mo
491.385 25.7398 li
488.385 22.7398 mo
494.385 22.7398 li
489.264 20.6188 mo
493.506 24.8608 li
489.264 24.8608 mo
493.506 20.6188 li
@
491.391 19.7398 mo
491.391 25.7398 li
488.391 22.7398 mo
494.391 22.7398 li
489.27 20.6188 mo
493.512 24.8608 li
489.27 24.8608 mo
493.512 20.6188 li
@
491.397 19.7398 mo
491.397 25.7398 li
488.397 22.7398 mo
494.397 22.7398 li
489.276 20.6188 mo
493.518 24.8608 li
489.276 24.8608 mo
493.518 20.6188 li
@
491.401 19.7398 mo
491.401 25.7398 li
488.401 22.7398 mo
494.401 22.7398 li
489.28 20.6188 mo
493.522 24.8608 li
489.28 24.8608 mo
493.522 20.6188 li
@
491.407 19.7398 mo
491.407 25.7398 li
488.407 22.7398 mo
494.407 22.7398 li
489.286 20.6188 mo
493.528 24.8608 li
489.286 24.8608 mo
493.528 20.6188 li
@
491.411 19.7398 mo
491.411 25.7398 li
488.411 22.7398 mo
494.411 22.7398 li
489.29 20.6188 mo
493.532 24.8608 li
489.29 24.8608 mo
493.532 20.6188 li
@
491.416 19.7398 mo
491.416 25.7398 li
488.416 22.7398 mo
494.416 22.7398 li
489.295 20.6188 mo
493.537 24.8608 li
489.295 24.8608 mo
493.537 20.6188 li
@
491.419 19.7398 mo
491.419 25.7398 li
488.419 22.7398 mo
494.419 22.7398 li
489.298 20.6188 mo
493.54 24.8608 li
489.298 24.8608 mo
493.54 20.6188 li
@
491.423 19.7398 mo
491.423 25.7398 li
488.423 22.7398 mo
494.423 22.7398 li
489.302 20.6188 mo
493.544 24.8608 li
489.302 24.8608 mo
493.544 20.6188 li
@
491.425 19.7398 mo
491.425 25.7398 li
488.425 22.7398 mo
494.425 22.7398 li
489.304 20.6188 mo
493.546 24.8608 li
489.304 24.8608 mo
493.546 20.6188 li
@
491.428 19.7398 mo
491.428 25.7398 li
488.428 22.7398 mo
494.428 22.7398 li
489.306 20.6188 mo
493.549 24.8608 li
489.306 24.8608 mo
493.549 20.6188 li
@
491.43 19.7398 mo
491.43 25.7398 li
488.43 22.7398 mo
494.43 22.7398 li
489.309 20.6188 mo
493.551 24.8608 li
489.309 24.8608 mo
493.551 20.6188 li
@
491.432 19.7398 mo
491.432 25.7398 li
488.432 22.7398 mo
494.432 22.7398 li
489.311 20.6188 mo
493.553 24.8608 li
489.311 24.8608 mo
493.553 20.6188 li
@
491.435 19.7398 mo
491.435 25.7398 li
488.435 22.7398 mo
494.435 22.7398 li
489.314 20.6188 mo
493.556 24.8608 li
489.314 24.8608 mo
493.556 20.6188 li
@
491.437 19.7398 mo
491.437 25.7398 li
488.437 22.7398 mo
494.437 22.7398 li
489.316 20.6188 mo
493.558 24.8608 li
489.316 24.8608 mo
493.558 20.6188 li
@
491.438 19.7398 mo
491.438 25.7398 li
488.438 22.7398 mo
494.438 22.7398 li
489.317 20.6188 mo
493.559 24.8608 li
489.317 24.8608 mo
493.559 20.6188 li
@
491.44 19.7398 mo
491.44 25.7398 li
488.44 22.7398 mo
494.44 22.7398 li
489.319 20.6188 mo
493.561 24.8608 li
489.319 24.8608 mo
493.561 20.6188 li
@
491.441 19.7398 mo
491.441 25.7398 li
488.441 22.7398 mo
494.441 22.7398 li
489.32 20.6188 mo
493.562 24.8608 li
489.32 24.8608 mo
493.562 20.6188 li
@
491.442 19.7398 mo
491.442 25.7398 li
488.442 22.7398 mo
494.442 22.7398 li
489.321 20.6188 mo
493.563 24.8608 li
489.321 24.8608 mo
493.563 20.6188 li
@
491.444 19.7398 mo
491.444 25.7398 li
488.444 22.7398 mo
494.444 22.7398 li
489.322 20.6188 mo
493.565 24.8608 li
489.322 24.8608 mo
493.565 20.6188 li
@
491.445 19.7398 mo
491.445 25.7398 li
488.445 22.7398 mo
494.445 22.7398 li
489.324 20.6188 mo
493.566 24.8608 li
489.324 24.8608 mo
493.566 20.6188 li
@
491.446 19.7398 mo
491.446 25.7398 li
488.446 22.7398 mo
494.446 22.7398 li
489.324 20.6188 mo
493.567 24.8608 li
489.324 24.8608 mo
493.567 20.6188 li
@
491.446 19.7398 mo
491.446 25.7398 li
488.446 22.7398 mo
494.446 22.7398 li
489.325 20.6188 mo
493.567 24.8608 li
489.325 24.8608 mo
493.567 20.6188 li
@
491.447 19.7398 mo
491.447 25.7398 li
488.447 22.7398 mo
494.447 22.7398 li
489.326 20.6188 mo
493.568 24.8608 li
489.326 24.8608 mo
493.568 20.6188 li
@
491.448 19.7398 mo
491.448 25.7398 li
488.448 22.7398 mo
494.448 22.7398 li
489.327 20.6188 mo
493.569 24.8608 li
489.327 24.8608 mo
493.569 20.6188 li
@
491.449 19.7398 mo
491.449 25.7398 li
488.449 22.7398 mo
494.449 22.7398 li
489.328 20.6188 mo
493.569 24.8608 li
489.328 24.8608 mo
493.569 20.6188 li
@
491.449 19.7398 mo
491.449 25.7398 li
488.449 22.7398 mo
494.449 22.7398 li
489.328 20.6188 mo
493.57 24.8608 li
489.328 24.8608 mo
493.57 20.6188 li
@
491.449 19.7398 mo
491.449 25.7398 li
488.449 22.7398 mo
494.449 22.7398 li
489.328 20.6188 mo
493.57 24.8608 li
489.328 24.8608 mo
493.57 20.6188 li
@
491.449 19.7398 mo
491.449 25.7398 li
488.449 22.7398 mo
494.449 22.7398 li
489.328 20.6188 mo
493.57 24.8608 li
489.328 24.8608 mo
493.57 20.6188 li
@
491.449 19.7398 mo
491.449 25.7398 li
488.449 22.7398 mo
494.449 22.7398 li
489.328 20.6188 mo
493.57 24.8608 li
489.328 24.8608 mo
493.57 20.6188 li
@
491.449 19.7398 mo
491.449 25.7398 li
488.449 22.7398 mo
494.449 22.7398 li
489.329 20.6188 mo
493.571 24.8608 li
489.329 24.8608 mo
493.571 20.6188 li
@
491.45 19.7398 mo
491.45 25.7398 li
488.45 22.7398 mo
494.45 22.7398 li
489.329 20.6188 mo
493.571 24.8608 li
489.329 24.8608 mo
493.571 20.6188 li
@
491.45 19.7398 mo
491.45 25.7398 li
488.45 22.7398 mo
494.45 22.7398 li
489.329 20.6188 mo
493.571 24.8608 li
489.329 24.8608 mo
493.571 20.6188 li
@
491.45 19.7398 mo
491.45 25.7398 li
488.45 22.7398 mo
494.45 22.7398 li
489.329 20.6188 mo
493.571 24.8608 li
489.329 24.8608 mo
493.571 20.6188 li
@
491.45 19.7398 mo
491.45 25.7398 li
488.45 22.7398 mo
494.45 22.7398 li
489.329 20.6188 mo
493.571 24.8608 li
489.329 24.8608 mo
493.571 20.6188 li
@
491.45 19.7398 mo
491.45 25.7398 li
488.45 22.7398 mo
494.45 22.7398 li
489.329 20.6188 mo
493.571 24.8608 li
489.329 24.8608 mo
493.571 20.6188 li
@
491.45 19.7398 mo
491.45 25.7398 li
488.45 22.7398 mo
494.45 22.7398 li
489.329 20.6188 mo
493.571 24.8608 li
489.329 24.8608 mo
493.571 20.6188 li
@
491.45 19.7398 mo
491.45 25.7398 li
488.45 22.7398 mo
494.45 22.7398 li
489.329 20.6188 mo
493.571 24.8608 li
489.329 24.8608 mo
493.571 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.571 24.8608 li
489.33 24.8608 mo
493.571 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
491.451 19.7398 mo
491.451 25.7398 li
488.451 22.7398 mo
494.451 22.7398 li
489.33 20.6188 mo
493.572 24.8608 li
489.33 24.8608 mo
493.572 20.6188 li
@
58.7014 361.74 mo
479.451 361.74 li
479.451 222.24 li
58.7014 222.24 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
NXCGNZ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/C <1C60D8A8C9B6079FE1CE316282F0E84E7EAE56817E527B1A2FBA7D6E6E3E
84761CC128BB54A99A2A93B5D172E1531D29A45A5EC52E28A860DB78AEF5044D
D841ADA187A0971E5C6028FECC99F95A89CDEF60FF9739318C6CDCFD940AFB97
77EC1EB041B6AC82C7B827BCFC6CB4C10A94B6280806B13F83> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/T <1C60D8A8C9B7D8BE6A40C97BBF661CB0B8222F950E511FEAA4C1C13E5F94
78F30E1367384EBB0E379956ACFD> |-
/V <1C60D8A8C9B64EDF88209F74DE48C31924050FF0040AA5A034E0BA481252
B18875F38C0C76ED1A659C37AD61> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NXCGNZ+Helvetica /Encoding get
dup 37 /percent put
dup 58 /colon put
dup 59 /semicolon put
dup 67 /C put
dup 69 /E put
dup 84 /T put
dup 86 /V put
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/NXCGNZ+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/.notdef /E /F /G 10{/.notdef}rp /R /.notdef /T 
/.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 
/.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t /u 
138{/.notdef}rp]
NXCGNZ+Helvetica nf
NXCGNZ+Helvetica*1 [22.5105 0 0 -22.5105 0 0 ]msf
93.9514 244.74 mo
(TCCV [18]; EER: 17.79%)
[13.7537 16.2526 16.2526 15.0147 6.2579 6.25792 12.5158 12.5158 6.25792 6.25792 6.25792 15.0147 
15.0147 16.2526 6.2579 6.2579 12.5158 12.5158 6.25793 12.5158 12.5158 0 ]xsh
1 lj
61.7014 237.24 mo
91.7014 237.24 li
.519531 0 .126221 0 cmyk
@
76.7014 234.74 mo
78.0824 234.74 79.2014 235.859 79.2014 237.24 cv
79.2014 238.621 78.0824 239.74 76.7014 239.74 cv
75.3204 239.74 74.2014 238.621 74.2014 237.24 cv
74.2014 235.859 75.3204 234.74 76.7014 234.74 cv
cp
76.7014 233.74 mo
74.7684 233.74 73.2014 235.307 73.2014 237.24 cv
73.2014 239.173 74.7684 240.74 76.7014 240.74 cv
78.6344 240.74 80.2014 239.173 80.2014 237.24 cv
80.2014 235.307 78.6344 233.74 76.7014 233.74 cv
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
NXCGNZ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/N <1C60D8A8C9B6079F1E49523970A7CE614BC1CB2AC135B49A6B33564AFCCA
E69F17C685A8629597666C835EDDD27239AEF884B91696774A2A> |-
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B
61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1
E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36
DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B
7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-
/f <1C60D8A8C9B854D08882A1CDE4CC8CF82C721397EF3C1B7F275F9E0F93B7
3057EE87F13D1A76347F24278F0AAB6C40024DD0CC30E14D035B17B8421125C0
8D6E5ECF0FD989FD11DB950870FC66> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NXCGNZ+Helvetica /Encoding get
dup 78 /N put
dup 83 /S put
dup 102 /f put
pop
%ADOEndSubsetFont
/NXCGNZ+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/.notdef /E /F /G 6{/.notdef}rp /N 3{/.notdef}rp /R 
/S /T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 
3{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n /.notdef /p 2{/.notdef}rp 
/s /t /u 138{/.notdef}rp]
NXCGNZ+Helvetica nf
NXCGNZ+Helvetica*1 [22.5105 0 0 -22.5105 0 0 ]msf
93.9514 272.115 mo
(EfficientNetV2-S [17]; EER: 4.06%)
[15.0147 6.2579 6.25792 4.99733 11.2552 4.99734 12.5158 12.5158 6.25792 16.2526 12.5158 6.25793 
15.0147 12.5158 7.49585 15.0146 6.25793 6.2579 12.5158 12.5158 6.25793 6.25793 6.2579 15.0147 
15.0146 16.2526 6.2579 6.25793 12.5158 6.2579 12.5158 12.5158 0 ]xsh
61.7014 264.615 mo
91.7014 264.615 li
.265137 .808594 0 0 cmyk
@
0 lj
74.4514 266.865 mo
78.9514 266.865 li
78.9514 262.365 li
74.4514 262.365 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
NXCGNZ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/K <1C60D8A8C9B64EDF88209F74DE48C33B4B0B93D0D9C0FD0B4C3ED394623E
3A80B45D329FC06BB55248F78872AA55981B9FC8E5ADA631A9747A6CEB10FCCD
65D75EFC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NXCGNZ+Helvetica /Encoding get
dup 75 /K put
pop
%ADOEndSubsetFont
/NXCGNZ+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/.notdef /E /F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 
3{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e 
/f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /.notdef 
/p 2{/.notdef}rp /s /t /u 138{/.notdef}rp]
NXCGNZ+Helvetica nf
NXCGNZ+Helvetica*1 [22.5105 0 0 -22.5105 0 0 ]msf
93.9514 299.49 mo
(FKNet [8]; EER: 6.46%)
[13.7537 15.0147 16.2526 12.5158 6.25792 6.25792 6.2579 12.5158 6.2579 6.25793 6.2579 15.0147 
15.0147 16.2526 6.25793 6.2579 12.5158 6.25793 12.5158 12.5158 0 ]xsh
1 lj
61.7014 291.99 mo
91.7014 291.99 li
@
0 lj
76.7014 288.99 mo
76.7014 294.99 li
@
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
NXCGNZ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E2
2FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D216
1CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361
A4431D76AF6F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NXCGNZ+Helvetica /Encoding get
dup 79 /O put
dup 114 /r put
pop
%ADOEndSubsetFont
/NXCGNZ+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/.notdef /E /F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 
/O 2{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp 
/bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef 
/e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/.notdef /p /.notdef /r /s /t /u 138{/.notdef}rp]
NXCGNZ+Helvetica nf
NXCGNZ+Helvetica*1 [22.5105 0 0 -22.5105 0 0 ]msf
93.9514 326.865 mo
(Ours; E)sh
170.262 326.865 mo
(ER: 2.21%)
[15.0147 16.2526 6.25792 6.2579 12.5158 6.25793 12.5158 12.5158 0 ]xsh
1 lj
61.7014 319.365 mo
91.7014 319.365 li
0 .990234 1 .000396729 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: LAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
NXCGNZ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/v <1C60D8A8C9B7A73DC54C6E6FD58E3FF02EC0039EA78A08B0B838392D2447
0C9B580A1092E3692A4C20563FB5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NXCGNZ+Helvetica /Encoding get
dup 68 /D put
dup 111 /o put
dup 118 /v put
pop
%ADOEndSubsetFont
/NXCGNZ+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/D /E /F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 
/O 2{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp 
/bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef 
/e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /s /t /u /v 
137{/.notdef}rp]
NXCGNZ+Helvetica nf
NXCGNZ+Helvetica*1 [22.5105 0 0 -22.5105 0 0 ]msf
93.9514 354.24 mo
(DefConvNet [45]; EER: 5.41%)
[16.2526 12.5158 6.25792 16.2526 12.5158 12.5158 11.2552 16.2526 12.5158 6.25792 6.25792 6.25792 
12.5158 12.5158 6.25793 6.2579 6.2579 15.0147 15.0146 16.2526 6.2579 6.25793 12.5158 6.25793 
12.5158 12.5158 0 ]xsh
61.7014 346.74 mo
91.7014 346.74 li
.896484 .767578 0 0 cmyk
@
0 lj
76.7014 343.74 mo
76.7014 349.74 li
73.7014 346.74 mo
79.7014 346.74 li
74.5804 344.619 mo
78.8224 348.861 li
74.5804 348.861 mo
78.8224 344.619 li
@
58.7014 361.74 mo
479.451 361.74 li
479.451 222.24 li
58.7014 222.24 li
cp
1 /0 /CSD get_res sepcs
.851563 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/NXCGOA+Helvetica-Bold*1 uf
/NXCGOA+Helvetica-Bold uf
/NAAAAA+Helvetica-Bold uf
/NXCGNZ+Helvetica*1 uf
/NXCGNZ+Helvetica uf
/LAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
