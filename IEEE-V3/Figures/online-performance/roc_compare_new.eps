%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: roc_compare_new.eps-15487.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/14/2022, 5:46:19 PM
%%BoundingBox: 0 0 404 301
%%HiResBoundingBox: 0 0 403.6418 300.2175
%%CropBox: 0 0 403.6418 300.2175
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1017 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-14T17:45:47+08:00"
   xmp:CreateDate="2022-08-14T17:45:47+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.9.0.1467703 \(R2020b\). Operating System: Linux)"
   xmpMM:DocumentID="uuid:5f79d01f-1e11-11ed-0000-fef5ccd368dc"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/zhenyuzhou/Desktop/finger-knuckle/deep-learning/codekevin/fknet/test/online-performance/roc_compare_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -300.217 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 300.217 li
403.642 300.217 li
403.642 0 li
cp
clp
-3.35172 300.691 mo
431.648 300.691 li
431.648 -3.80936 li
-3.35172 -3.80936 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
-3.35172 300.691 mo
431.648 300.691 li
431.648 -3.80936 li
-3.35172 -3.80936 li
cp
f
52.8983 260.941 mo
390.398 260.941 li
390.398 18.6906 li
52.8983 18.6906 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
54.9608 260.941 mo
54.9608 18.6906 li
1 /0 /CSD get_res sepcs
.224609 sep
@
58.003 260.941 mo
58.003 18.6906 li
@
78.0151 260.941 mo
78.0151 18.6906 li
@
89.7217 260.941 mo
89.7217 18.6906 li
@
98.0273 260.941 mo
98.0273 18.6906 li
@
104.469 260.941 mo
104.469 18.6906 li
@
109.734 260.941 mo
109.734 18.6906 li
@
114.184 260.941 mo
114.184 18.6906 li
@
118.039 260.941 mo
118.039 18.6906 li
@
121.44 260.941 mo
121.44 18.6906 li
@
124.482 260.941 mo
124.482 18.6906 li
@
144.494 260.941 mo
144.494 18.6906 li
@
156.2 260.941 mo
156.2 18.6906 li
@
164.506 260.941 mo
164.506 18.6906 li
@
170.949 260.941 mo
170.949 18.6906 li
@
176.212 260.941 mo
176.212 18.6906 li
@
180.663 260.941 mo
180.663 18.6906 li
@
184.519 260.941 mo
184.519 18.6906 li
@
187.919 260.941 mo
187.919 18.6906 li
@
190.961 260.941 mo
190.961 18.6906 li
@
210.973 260.941 mo
210.973 18.6906 li
@
222.679 260.941 mo
222.679 18.6906 li
@
230.986 260.941 mo
230.986 18.6906 li
@
237.428 260.941 mo
237.428 18.6906 li
@
242.691 260.941 mo
242.691 18.6906 li
@
247.142 260.941 mo
247.142 18.6906 li
@
250.998 260.941 mo
250.998 18.6906 li
@
254.398 260.941 mo
254.398 18.6906 li
@
277.452 260.941 mo
277.452 18.6906 li
@
289.159 260.941 mo
289.159 18.6906 li
@
297.464 260.941 mo
297.464 18.6906 li
@
303.907 260.941 mo
303.907 18.6906 li
@
309.171 260.941 mo
309.171 18.6906 li
@
313.621 260.941 mo
313.621 18.6906 li
@
317.476 260.941 mo
317.476 18.6906 li
@
320.877 260.941 mo
320.877 18.6906 li
@
323.919 260.941 mo
323.919 18.6906 li
@
343.931 260.941 mo
343.931 18.6906 li
@
355.638 260.941 mo
355.638 18.6906 li
@
363.943 260.941 mo
363.943 18.6906 li
@
370.386 260.941 mo
370.386 18.6906 li
@
375.65 260.941 mo
375.65 18.6906 li
@
380.1 260.941 mo
380.1 18.6906 li
@
383.955 260.941 mo
383.955 18.6906 li
@
387.356 260.941 mo
387.356 18.6906 li
@
1 lj
[] 0 dsh
124.482 260.941 mo
124.482 18.6906 li
1 /0 /CSD get_res sepcs
.126953 sep
@
257.439 260.941 mo
257.439 18.6906 li
@
390.398 260.941 mo
390.398 18.6906 li
@
390.398 260.941 mo
52.8983 260.941 li
@
390.398 220.566 mo
52.8983 220.566 li
@
390.398 180.191 mo
52.8983 180.191 li
@
390.398 139.816 mo
52.8983 139.816 li
@
390.398 99.4406 mo
52.8983 99.4406 li
@
390.398 59.0656 mo
52.8983 59.0656 li
@
390.398 18.6906 mo
52.8983 18.6906 li
@
2 lc
52.8983 260.941 mo
390.398 260.941 li
1 /0 /CSD get_res sepcs
.851074 sep
@
52.8983 18.6906 mo
390.398 18.6906 li
@
124.482 260.941 mo
124.482 257.566 li
@
257.439 260.941 mo
257.439 257.566 li
@
390.398 260.941 mo
390.398 257.566 li
@
124.482 18.6906 mo
124.482 22.0656 li
@
257.439 18.6906 mo
257.439 22.0656 li
@
390.398 18.6906 mo
390.398 22.0656 li
@
54.9608 260.941 mo
54.9608 259.253 li
@
58.003 260.941 mo
58.003 259.253 li
@
78.0151 260.941 mo
78.0151 259.253 li
@
89.7217 260.941 mo
89.7217 259.253 li
@
98.0273 260.941 mo
98.0273 259.253 li
@
104.469 260.941 mo
104.469 259.253 li
@
109.734 260.941 mo
109.734 259.253 li
@
114.184 260.941 mo
114.184 259.253 li
@
118.039 260.941 mo
118.039 259.253 li
@
121.44 260.941 mo
121.44 259.253 li
@
124.482 260.941 mo
124.482 259.253 li
@
124.482 260.941 mo
124.482 259.253 li
@
144.494 260.941 mo
144.494 259.253 li
@
156.2 260.941 mo
156.2 259.253 li
@
164.506 260.941 mo
164.506 259.253 li
@
170.949 260.941 mo
170.949 259.253 li
@
176.212 260.941 mo
176.212 259.253 li
@
180.663 260.941 mo
180.663 259.253 li
@
184.519 260.941 mo
184.519 259.253 li
@
187.919 260.941 mo
187.919 259.253 li
@
190.961 260.941 mo
190.961 259.253 li
@
210.973 260.941 mo
210.973 259.253 li
@
222.679 260.941 mo
222.679 259.253 li
@
230.986 260.941 mo
230.986 259.253 li
@
237.428 260.941 mo
237.428 259.253 li
@
242.691 260.941 mo
242.691 259.253 li
@
247.142 260.941 mo
247.142 259.253 li
@
250.998 260.941 mo
250.998 259.253 li
@
254.398 260.941 mo
254.398 259.253 li
@
257.439 260.941 mo
257.439 259.253 li
@
277.452 260.941 mo
277.452 259.253 li
@
289.159 260.941 mo
289.159 259.253 li
@
297.464 260.941 mo
297.464 259.253 li
@
303.907 260.941 mo
303.907 259.253 li
@
309.171 260.941 mo
309.171 259.253 li
@
313.621 260.941 mo
313.621 259.253 li
@
317.476 260.941 mo
317.476 259.253 li
@
320.877 260.941 mo
320.877 259.253 li
@
323.919 260.941 mo
323.919 259.253 li
@
343.931 260.941 mo
343.931 259.253 li
@
355.638 260.941 mo
355.638 259.253 li
@
363.943 260.941 mo
363.943 259.253 li
@
370.386 260.941 mo
370.386 259.253 li
@
375.65 260.941 mo
375.65 259.253 li
@
380.1 260.941 mo
380.1 259.253 li
@
383.955 260.941 mo
383.955 259.253 li
@
387.356 260.941 mo
387.356 259.253 li
@
390.398 260.941 mo
390.398 259.253 li
@
54.9608 18.6906 mo
54.9608 20.3777 li
@
58.003 18.6906 mo
58.003 20.3777 li
@
78.0151 18.6906 mo
78.0151 20.3777 li
@
89.7217 18.6906 mo
89.7217 20.3777 li
@
98.0273 18.6906 mo
98.0273 20.3777 li
@
104.469 18.6906 mo
104.469 20.3777 li
@
109.734 18.6906 mo
109.734 20.3777 li
@
114.184 18.6906 mo
114.184 20.3777 li
@
118.039 18.6906 mo
118.039 20.3777 li
@
121.44 18.6906 mo
121.44 20.3777 li
@
124.482 18.6906 mo
124.482 20.3777 li
@
124.482 18.6906 mo
124.482 20.3777 li
@
144.494 18.6906 mo
144.494 20.3777 li
@
156.2 18.6906 mo
156.2 20.3777 li
@
164.506 18.6906 mo
164.506 20.3777 li
@
170.949 18.6906 mo
170.949 20.3777 li
@
176.212 18.6906 mo
176.212 20.3777 li
@
180.663 18.6906 mo
180.663 20.3777 li
@
184.519 18.6906 mo
184.519 20.3777 li
@
187.919 18.6906 mo
187.919 20.3777 li
@
190.961 18.6906 mo
190.961 20.3777 li
@
210.973 18.6906 mo
210.973 20.3777 li
@
222.679 18.6906 mo
222.679 20.3777 li
@
230.986 18.6906 mo
230.986 20.3777 li
@
237.428 18.6906 mo
237.428 20.3777 li
@
242.691 18.6906 mo
242.691 20.3777 li
@
247.142 18.6906 mo
247.142 20.3777 li
@
250.998 18.6906 mo
250.998 20.3777 li
@
254.398 18.6906 mo
254.398 20.3777 li
@
257.439 18.6906 mo
257.439 20.3777 li
@
277.452 18.6906 mo
277.452 20.3777 li
@
289.159 18.6906 mo
289.159 20.3777 li
@
297.464 18.6906 mo
297.464 20.3777 li
@
303.907 18.6906 mo
303.907 20.3777 li
@
309.171 18.6906 mo
309.171 20.3777 li
@
313.621 18.6906 mo
313.621 20.3777 li
@
317.476 18.6906 mo
317.476 20.3777 li
@
320.877 18.6906 mo
320.877 20.3777 li
@
323.919 18.6906 mo
323.919 20.3777 li
@
343.931 18.6906 mo
343.931 20.3777 li
@
355.638 18.6906 mo
355.638 20.3777 li
@
363.943 18.6906 mo
363.943 20.3777 li
@
370.386 18.6906 mo
370.386 20.3777 li
@
375.65 18.6906 mo
375.65 20.3777 li
@
380.1 18.6906 mo
380.1 20.3777 li
@
383.955 18.6906 mo
383.955 20.3777 li
@
387.356 18.6906 mo
387.356 20.3777 li
@
390.398 18.6906 mo
390.398 20.3777 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QQWTCQ+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/QQWTCQ+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/.notdef /four 12{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t 139{/.notdef}rp]
QQWTCQ+Helvetica nf
QQWTCQ+Helvetica*1 [12 0 0 -12 0 0 ]msf
111.398 280.441 mo
(10)
[6.672 0 ]xsh
QQWTCQ+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
127.148 274.441 mo
(-4)
[3.19673 0 ]xsh
QQWTCQ+Helvetica*1 [12 0 0 -12 0 0 ]msf
244.898 280.441 mo
(10)
[6.672 0 ]xsh
QQWTCQ+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
260.648 274.441 mo
(-2)
[3.19672 0 ]xsh
QQWTCQ+Helvetica*1 [12 0 0 -12 0 0 ]msf
379.148 280.441 mo
(10)
[6.672 0 ]xsh
QQWTCQ+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
394.898 274.441 mo
(0)sh
QQWTCQ+Helvetica*1 [13.2 0 0 -13.2 0 0 ]msf
146.273 297.091 mo
(Fal)sh
164.608 297.091 mo
(se Acceptance R)sh
264.387 297.091 mo
(ate)sh
52.8983 260.941 mo
52.8983 18.6906 li
@
390.398 260.941 mo
390.398 18.6906 li
@
52.8983 260.941 mo
56.2733 260.941 li
@
52.8983 220.566 mo
56.2733 220.566 li
@
52.8983 180.191 mo
56.2733 180.191 li
@
52.8983 139.816 mo
56.2733 139.816 li
@
52.8983 99.4406 mo
56.2733 99.4406 li
@
52.8983 59.0656 mo
56.2733 59.0656 li
@
52.8983 18.6906 mo
56.2733 18.6906 li
@
390.398 260.941 mo
387.023 260.941 li
@
390.398 220.566 mo
387.023 220.566 li
@
390.398 180.191 mo
387.023 180.191 li
@
390.398 139.816 mo
387.023 139.816 li
@
390.398 99.4406 mo
387.023 99.4406 li
@
390.398 59.0656 mo
387.023 59.0656 li
@
390.398 18.6906 mo
387.023 18.6906 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QQWTCQ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QQWTCQ+Helvetica /Encoding get
dup 46 /period put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/QQWTCQ+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /.notdef /four /five /six /seven /eight /nine 
7{/.notdef}rp /A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
QQWTCQ+Helvetica nf
QQWTCQ+Helvetica*1 [12 0 0 -12 0 0 ]msf
21.4983 265.066 mo
(0.94)sh
21.4983 224.691 mo
(0.95)sh
21.4983 184.316 mo
(0.96)sh
21.4983 143.941 mo
(0.97)sh
21.4983 103.566 mo
(0.98)sh
21.4983 63.1906 mo
(0.99)sh
40.2483 22.8156 mo
(1)sh
QQWTCQ+Helvetica*1 [0 -13.2 -13.2 0 0 0 ]msf
14.7483 225.691 mo
(Genuine Acceptance Rate)
[-10.2696 -7.3392 -7.3392 -7.33919 -2.9304 -7.3392 -7.33919 -3.6696 -8.8045 -6.59999 -6.59999 -7.3392 
-7.3392 -3.66959 -7.3392 -7.3392 -6.60001 -7.33919 -3.6696 -9.5304 -7.3392 -3.6696 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QQWTCR+Helvetica-Bold /JAAAAA+Helvetica-Bold findfont ct_VMDictPut
/QQWTCR+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
QQWTCR+Helvetica-Bold nf
QQWTCR+Helvetica-Bold*1 [13.2 0 0 -13.2 0 0 ]msf
91.5237 12.4656 mo
(Receiver Operating Characteristics)
[9.5304 7.3392 7.3392 7.3392 3.6696 7.3392 7.33919 5.1349 3.6696 10.2696 8.06511 7.33919 
5.1349 7.3392 4.39549 3.6696 8.06509 8.06509 3.66962 9.5304 8.06509 7.3392 5.1349 7.33919 
7.3392 4.39548 7.33923 5.13489 3.66962 7.33917 4.39551 3.66962 7.33917 0 ]xsh
0 lc
104.628 256.8 mo
104.628 230.918 li
131.083 230.918 li
131.083 225.742 li
136.348 225.742 li
140.798 225.742 li
144.653 225.742 li
144.653 220.566 li
144.653 215.389 li
144.653 210.213 li
144.653 205.037 li
151.096 205.037 li
151.096 199.861 li
158.671 194.684 li
162.802 194.684 li
164.665 194.684 li
169.627 194.684 li
171.108 194.684 li
172.516 184.332 li
173.859 184.332 li
173.859 179.156 li
175.143 179.156 li
179.773 179.156 li
179.773 173.979 li
181.836 173.979 li
184.678 173.979 li
186.428 173.979 li
186.428 168.803 li
187.265 163.627 li
190.389 153.274 li
191.833 153.274 li
192.528 153.274 li
194.521 153.274 li
195.155 153.274 li
195.776 153.274 li
196.384 153.274 li
197.562 153.274 li
198.134 153.274 li
199.245 153.274 li
201.346 153.274 li
202.341 153.274 li
203.304 148.098 li
204.69 148.098 li
206.44 148.098 li
206.862 148.098 li
207.687 148.098 li
208.489 148.098 li
211.491 142.922 li
212.883 142.922 li
213.22 142.922 li
214.21 142.922 li
215.167 142.922 li
215.479 142.922 li
216.094 142.922 li
217.575 137.745 li
217.862 132.57 li
218.428 132.57 li
218.983 132.57 li
219.528 132.57 li
220.062 132.57 li
220.587 132.57 li
221.103 132.57 li
221.358 132.57 li
222.597 132.57 li
222.838 132.57 li
223.316 132.57 li
223.786 132.57 li
224.248 132.57 li
224.702 132.57 li
224.926 132.57 li
225.59 132.57 li
226.024 127.393 li
226.453 127.393 li
227.289 127.393 li
228.103 122.216 li
228.501 122.216 li
229.088 122.216 li
229.473 122.216 li
230.041 122.216 li
230.413 122.216 li
230.782 117.04 li
231.857 117.04 li
232.38 117.04 li
232.895 117.04 li
233.232 117.04 li
233.896 117.04 li
234.545 117.04 li
235.022 117.04 li
235.336 117.04 li
235.647 117.04 li
235.8 117.04 li
235.953 117.04 li
237.15 117.04 li
237.731 117.04 li
238.58 117.04 li
239.405 117.04 li
239.54 117.04 li
239.809 117.04 li
239.942 117.04 li
240.73 117.04 li
240.987 117.04 li
241.622 117.04 li
241.747 117.04 li
242.12 117.04 li
243.21 117.04 li
243.681 117.04 li
243.914 117.04 li
244.26 117.04 li
244.488 117.04 li
244.601 117.04 li
245.05 117.04 li
245.383 117.04 li
245.602 117.04 li
246.252 117.04 li
246.991 117.04 li
247.609 117.04 li
248.115 117.04 li
248.414 111.864 li
248.513 111.864 li
248.906 111.864 li
249.389 106.688 li
250.146 101.511 li
250.425 101.511 li
250.975 101.511 li
251.337 101.511 li
251.693 101.511 li
252.045 101.511 li
252.219 101.511 li
252.479 101.511 li
252.822 101.511 li
253.161 91.1586 li
253.412 91.1586 li
253.826 91.1586 li
254.072 91.1586 li
254.396 91.1586 li
254.637 91.1586 li
254.955 91.1586 li
255.348 91.1586 li
255.736 91.1586 li
256.269 91.1586 li
256.42 91.1586 li
256.868 91.1586 li
257.236 91.1586 li
257.743 85.9816 li
258.592 85.9816 li
258.939 85.9816 li
259.145 85.9816 li
259.35 85.9816 li
259.754 85.9816 li
260.021 85.9816 li
260.285 85.9816 li
260.871 85.9816 li
261.128 85.9816 li
261.508 85.9816 li
261.946 85.9816 li
262.317 85.9816 li
262.743 85.9816 li
262.803 85.9816 li
263.162 85.9816 li
263.341 85.9816 li
263.693 85.9816 li
264.214 85.9816 li
264.443 85.9816 li
264.895 85.9816 li
265.34 85.9816 li
265.45 85.9816 li
265.724 85.9816 li
265.833 85.9816 li
266.049 85.9816 li
266.317 85.9816 li
266.689 85.9816 li
266.898 85.9816 li
267.875 85.9816 li
268.127 85.9816 li
268.525 85.9816 li
268.918 85.9816 li
269.353 85.9816 li
269.83 85.9816 li
270.391 85.9816 li
271.124 85.9816 li
271.617 85.9816 li
271.969 85.9816 li
272.275 85.9816 li
272.919 85.9816 li
273.215 85.9816 li
273.591 85.9816 li
274.084 85.9816 li
274.609 85.9816 li
274.968 85.9816 li
275.282 85.9816 li
275.863 85.9816 li
276.32 85.9816 li
276.657 80.8066 li
277.065 80.8066 li
277.394 80.8066 li
277.899 80.8066 li
278.289 80.8066 li
278.744 75.6296 li
279.055 75.6296 li
279.396 75.6296 li
280.033 75.6296 li
280.264 75.6296 li
280.689 75.6296 li
281.108 75.6296 li
281.394 75.6296 li
282.052 75.6296 li
282.298 75.6296 li
282.603 75.6296 li
282.815 75.6296 li
282.965 75.6296 li
283.234 75.6296 li
283.588 75.6296 li
283.764 75.6296 li
284.025 70.4536 li
284.597 70.4536 li
284.907 70.4536 li
285.13 70.4536 li
285.38 70.4536 li
285.6 70.4536 li
285.899 70.4536 li
286.33 70.4536 li
286.516 70.4536 li
286.832 70.4536 li
287.093 70.4536 li
287.325 70.4536 li
287.583 70.4536 li
287.989 65.2767 li
288.388 65.2767 li
288.562 65.2767 li
288.832 65.2767 li
289.052 65.2767 li
289.486 65.2767 li
289.819 65.2767 li
290.125 65.2767 li
290.45 65.2767 li
290.818 60.1017 li
291.294 60.1017 li
291.562 60.1017 li
291.85 60.1017 li
292.026 60.1017 li
292.309 60.1017 li
292.525 60.1017 li
292.761 60.1017 li
293.121 60.1017 li
293.457 60.1017 li
293.809 60.1017 li
293.912 60.1017 li
294.157 60.1017 li
294.421 60.1017 li
294.721 60.1017 li
295.216 60.1017 li
295.567 60.1017 li
295.856 60.1017 li
296.143 60.1017 li
296.52 60.1017 li
296.744 60.1017 li
297.114 54.9247 li
297.497 54.9247 li
297.66 54.9247 li
297.946 54.9247 li
298.16 54.9247 li
298.424 54.9247 li
298.53 54.9247 li
298.755 54.9247 li
299.1 54.9247 li
299.527 54.9247 li
299.694 54.9247 li
299.946 54.9247 li
300.211 54.9247 li
300.359 54.9247 li
300.653 49.7477 li
301.152 49.7477 li
301.501 49.7477 li
301.971 49.7477 li
302.311 49.7477 li
302.478 44.5726 li
302.691 44.5726 li
302.977 44.5726 li
303.232 44.5726 li
303.556 44.5726 li
303.849 44.5726 li
304.109 44.5726 li
304.453 44.5726 li
304.68 44.5726 li
304.821 44.5726 li
305.157 44.5726 li
305.392 44.5726 li
305.598 44.5726 li
305.775 44.5726 li
305.992 44.5726 li
306.301 44.5726 li
306.607 44.5726 li
306.896 44.5726 li
307.248 44.5726 li
307.53 44.5726 li
307.773 44.5726 li
308.101 44.5726 li
308.451 44.5726 li
308.808 44.5726 li
309.1 44.5726 li
309.33 44.5726 li
309.629 44.5726 li
309.866 44.5726 li
310.113 44.5726 li
310.393 44.5726 li
310.647 44.5726 li
310.875 44.5726 li
311.046 44.5726 li
311.239 44.5726 li
311.507 44.5726 li
311.686 44.5726 li
311.873 44.5726 li
312.223 44.5726 li
312.44 44.5726 li
312.655 44.5726 li
312.88 44.5726 li
313.165 44.5726 li
313.428 44.5726 li
313.678 44.5726 li
313.996 44.5726 li
314.2 44.5726 li
314.483 44.5726 li
314.754 39.3956 li
314.923 39.3956 li
315.159 39.3956 li
315.365 39.3956 li
315.705 39.3956 li
315.964 39.3956 li
316.212 39.3956 li
316.523 39.3956 li
316.784 39.3956 li
317.089 39.3956 li
317.327 39.3956 li
317.572 39.3956 li
317.914 39.3956 li
318.172 39.3956 li
318.41 39.3956 li
318.733 39.3956 li
318.924 39.3956 li
319.198 39.3956 li
319.446 39.3956 li
319.673 39.3956 li
319.958 39.3956 li
320.248 39.3956 li
320.518 39.3956 li
320.698 39.3956 li
321.052 39.3956 li
321.3 39.3956 li
321.545 39.3956 li
321.788 39.3956 li
322.014 39.3956 li
322.323 39.3956 li
322.566 39.3956 li
322.839 34.2196 li
323.154 34.2196 li
323.428 34.2196 li
323.634 34.2196 li
323.984 34.2196 li
324.251 34.2196 li
324.537 34.2196 li
324.77 34.2196 li
325.002 34.2196 li
325.203 34.2196 li
325.473 34.2196 li
325.719 34.2196 li
325.957 34.2196 li
326.206 34.2196 li
326.494 34.2196 li
326.725 34.2196 li
326.915 34.2196 li
327.175 34.2196 li
327.369 34.2196 li
327.664 34.2196 li
327.886 34.2196 li
328.194 34.2196 li
328.481 34.2196 li
328.697 34.2196 li
328.851 34.2196 li
329.034 34.2196 li
329.312 34.2196 li
329.54 34.2196 li
329.784 34.2196 li
330.055 34.2196 li
330.37 34.2196 li
330.619 34.2196 li
330.939 34.2196 li
331.2 34.2196 li
331.374 34.2196 li
331.569 34.2196 li
331.825 34.2196 li
332.028 34.2196 li
332.268 34.2196 li
332.528 34.2196 li
332.78 34.2196 li
333.009 29.0426 li
333.289 29.0426 li
333.565 29.0426 li
333.757 29.0426 li
334.003 29.0426 li
334.283 29.0426 li
334.51 29.0426 li
334.696 29.0426 li
335.009 29.0426 li
335.26 29.0426 li
335.5 29.0426 li
335.784 29.0426 li
336.076 29.0426 li
336.337 29.0426 li
336.544 29.0426 li
336.885 29.0426 li
337.119 29.0426 li
337.321 29.0426 li
337.639 29.0426 li
337.936 23.8676 li
338.215 23.8676 li
338.444 23.8676 li
338.711 23.8676 li
338.953 23.8676 li
339.211 23.8676 li
339.496 23.8676 li
339.727 23.8676 li
340.016 23.8676 li
340.177 23.8676 li
340.449 23.8676 li
340.807 23.8676 li
341.041 23.8676 li
341.268 23.8676 li
341.506 23.8676 li
341.707 23.8676 li
341.976 23.8676 li
342.219 23.8676 li
342.415 23.8676 li
342.617 23.8676 li
342.848 23.8676 li
343.092 23.8676 li
343.352 23.8676 li
343.558 23.8676 li
343.811 23.8676 li
344.08 23.8676 li
344.385 23.8676 li
344.577 23.8676 li
344.807 23.8676 li
345.076 23.8676 li
345.278 23.8676 li
345.564 23.8676 li
345.827 23.8676 li
346.091 23.8676 li
346.319 23.8676 li
346.552 23.8676 li
346.8 23.8676 li
347.019 23.8676 li
347.307 23.8676 li
347.558 23.8676 li
347.81 23.8676 li
348.009 23.8676 li
348.223 23.8676 li
348.425 23.8676 li
348.734 23.8676 li
348.927 23.8676 li
349.14 23.8676 li
349.363 23.8676 li
349.564 23.8676 li
349.814 23.8676 li
350.023 23.8676 li
350.24 23.8676 li
350.481 23.8676 li
350.659 23.8676 li
350.911 23.8676 li
351.13 23.8676 li
351.409 23.8676 li
351.654 23.8676 li
351.898 23.8676 li
352.153 23.8676 li
352.419 18.6906 li
352.683 18.6906 li
352.928 18.6906 li
353.151 18.6906 li
353.392 18.6906 li
353.571 18.6906 li
353.823 18.6906 li
354.046 18.6906 li
354.286 18.6906 li
354.533 18.6906 li
354.758 18.6906 li
355.009 18.6906 li
355.219 18.6906 li
355.409 18.6906 li
355.594 18.6906 li
355.797 18.6906 li
355.977 18.6906 li
356.205 18.6906 li
356.411 18.6906 li
356.594 18.6906 li
356.762 18.6906 li
356.982 18.6906 li
357.178 18.6906 li
357.379 18.6906 li
357.577 18.6906 li
357.766 18.6906 li
358.017 18.6906 li
358.243 18.6906 li
358.437 18.6906 li
358.658 18.6906 li
358.855 18.6906 li
359.058 18.6906 li
359.234 18.6906 li
359.453 18.6906 li
359.596 18.6906 li
359.782 18.6906 li
360.005 18.6906 li
360.167 18.6906 li
360.363 18.6906 li
360.549 18.6906 li
360.762 18.6906 li
360.942 18.6906 li
361.127 18.6906 li
361.275 18.6906 li
361.443 18.6906 li
361.642 18.6906 li
361.846 18.6906 li
362.011 18.6906 li
362.22 18.6906 li
362.381 18.6906 li
362.548 18.6906 li
362.745 18.6906 li
362.939 18.6906 li
363.089 18.6906 li
363.251 18.6906 li
363.418 18.6906 li
363.589 18.6906 li
363.758 18.6906 li
363.942 18.6906 li
364.144 18.6906 li
364.366 18.6906 li
364.529 18.6906 li
364.681 18.6906 li
364.849 18.6906 li
364.993 18.6906 li
365.157 18.6906 li
365.302 18.6906 li
365.437 18.6906 li
365.596 18.6906 li
365.792 18.6906 li
365.958 18.6906 li
366.106 18.6906 li
366.259 18.6906 li
366.421 18.6906 li
366.568 18.6906 li
366.714 18.6906 li
366.877 18.6906 li
367.036 18.6906 li
367.198 18.6906 li
367.339 18.6906 li
367.507 18.6906 li
367.658 18.6906 li
367.795 18.6906 li
367.905 18.6906 li
368.037 18.6906 li
368.205 18.6906 li
368.364 18.6906 li
368.53 18.6906 li
368.676 18.6906 li
368.858 18.6906 li
369.002 18.6906 li
369.148 18.6906 li
369.303 18.6906 li
369.476 18.6906 li
369.621 18.6906 li
369.766 18.6906 li
369.932 18.6906 li
370.068 18.6906 li
370.219 18.6906 li
370.353 18.6906 li
370.504 18.6906 li
370.641 18.6906 li
370.781 18.6906 li
370.932 18.6906 li
371.037 18.6906 li
371.18 18.6906 li
371.316 18.6906 li
371.453 18.6906 li
371.597 18.6906 li
371.728 18.6906 li
371.875 18.6906 li
372.021 18.6906 li
372.148 18.6906 li
372.263 18.6906 li
372.391 18.6906 li
372.52 18.6906 li
372.644 18.6906 li
372.771 18.6906 li
372.886 18.6906 li
372.982 18.6906 li
373.101 18.6906 li
373.228 18.6906 li
373.347 18.6906 li
373.489 18.6906 li
373.627 18.6906 li
373.727 18.6906 li
373.834 18.6906 li
373.944 18.6906 li
374.08 18.6906 li
374.215 18.6906 li
374.311 18.6906 li
374.401 18.6906 li
374.522 18.6906 li
374.635 18.6906 li
374.755 18.6906 li
374.875 18.6906 li
374.982 18.6906 li
375.093 18.6906 li
375.219 18.6906 li
375.312 18.6906 li
375.407 18.6906 li
375.523 18.6906 li
375.635 18.6906 li
375.752 18.6906 li
375.855 18.6906 li
375.99 18.6906 li
376.095 18.6906 li
376.212 18.6906 li
376.31 18.6906 li
376.388 18.6906 li
376.498 18.6906 li
376.575 18.6906 li
376.675 18.6906 li
376.776 18.6906 li
376.873 18.6906 li
376.959 18.6906 li
377.067 18.6906 li
377.153 18.6906 li
377.233 18.6906 li
377.328 18.6906 li
377.437 18.6906 li
377.544 18.6906 li
377.659 18.6906 li
377.775 18.6906 li
377.869 18.6906 li
377.955 18.6906 li
378.052 18.6906 li
378.126 18.6906 li
378.213 18.6906 li
378.331 18.6906 li
378.416 18.6906 li
378.513 18.6906 li
378.602 18.6906 li
378.697 18.6906 li
378.78 18.6906 li
378.871 18.6906 li
378.951 18.6906 li
379.036 18.6906 li
379.122 18.6906 li
379.203 18.6906 li
379.295 18.6906 li
379.381 18.6906 li
379.469 18.6906 li
379.552 18.6906 li
379.634 18.6906 li
379.707 18.6906 li
379.798 18.6906 li
379.868 18.6906 li
379.972 18.6906 li
380.052 18.6906 li
380.118 18.6906 li
380.202 18.6906 li
380.262 18.6906 li
380.334 18.6906 li
380.422 18.6906 li
380.49 18.6906 li
380.567 18.6906 li
380.646 18.6906 li
380.712 18.6906 li
380.784 18.6906 li
380.859 18.6906 li
380.935 18.6906 li
381.006 18.6906 li
381.081 18.6906 li
381.171 18.6906 li
381.261 18.6906 li
381.339 18.6906 li
381.396 18.6906 li
381.483 18.6906 li
381.56 18.6906 li
381.643 18.6906 li
381.71 18.6906 li
381.78 18.6906 li
381.854 18.6906 li
381.912 18.6906 li
381.978 18.6906 li
382.033 18.6906 li
382.114 18.6906 li
382.194 18.6906 li
382.275 18.6906 li
382.344 18.6906 li
382.42 18.6906 li
382.475 18.6906 li
382.542 18.6906 li
382.605 18.6906 li
382.668 18.6906 li
382.725 18.6906 li
382.779 18.6906 li
382.848 18.6906 li
382.894 18.6906 li
382.941 18.6906 li
383.007 18.6906 li
383.064 18.6906 li
383.125 18.6906 li
383.186 18.6906 li
383.247 18.6906 li
383.3 18.6906 li
383.353 18.6906 li
383.4 18.6906 li
383.454 18.6906 li
383.513 18.6906 li
383.566 18.6906 li
383.626 18.6906 li
383.693 18.6906 li
383.748 18.6906 li
383.811 18.6906 li
383.857 18.6906 li
383.909 18.6906 li
383.964 18.6906 li
384.011 18.6906 li
384.069 18.6906 li
384.131 18.6906 li
384.178 18.6906 li
384.215 18.6906 li
384.259 18.6906 li
384.302 18.6906 li
384.344 18.6906 li
384.374 18.6906 li
384.414 18.6906 li
384.466 18.6906 li
384.517 18.6906 li
384.558 18.6906 li
384.611 18.6906 li
384.657 18.6906 li
384.707 18.6906 li
384.743 18.6906 li
384.784 18.6906 li
384.832 18.6906 li
384.865 18.6906 li
384.895 18.6906 li
384.94 18.6906 li
384.973 18.6906 li
385.005 18.6906 li
385.05 18.6906 li
385.104 18.6906 li
385.153 18.6906 li
385.204 18.6906 li
385.258 18.6906 li
385.291 18.6906 li
385.336 18.6906 li
385.372 18.6906 li
385.408 18.6906 li
385.455 18.6906 li
385.493 18.6906 li
385.53 18.6906 li
385.566 18.6906 li
385.61 18.6906 li
385.646 18.6906 li
385.678 18.6906 li
385.721 18.6906 li
385.758 18.6906 li
385.795 18.6906 li
385.825 18.6906 li
385.853 18.6906 li
385.887 18.6906 li
385.92 18.6906 li
385.96 18.6906 li
385.998 18.6906 li
386.024 18.6906 li
386.055 18.6906 li
386.089 18.6906 li
386.126 18.6906 li
386.156 18.6906 li
386.192 18.6906 li
386.217 18.6906 li
386.259 18.6906 li
386.292 18.6906 li
386.314 18.6906 li
386.358 18.6906 li
386.385 18.6906 li
386.418 18.6906 li
386.452 18.6906 li
386.479 18.6906 li
386.5 18.6906 li
386.523 18.6906 li
386.558 18.6906 li
386.59 18.6906 li
386.616 18.6906 li
386.644 18.6906 li
386.673 18.6906 li
386.699 18.6906 li
386.729 18.6906 li
386.746 18.6906 li
386.763 18.6906 li
386.801 18.6906 li
386.829 18.6906 li
386.856 18.6906 li
386.878 18.6906 li
386.898 18.6906 li
386.928 18.6906 li
386.959 18.6906 li
386.989 18.6906 li
387.021 18.6906 li
387.043 18.6906 li
387.063 18.6906 li
387.086 18.6906 li
387.111 18.6906 li
387.144 18.6906 li
387.168 18.6906 li
387.201 18.6906 li
387.221 18.6906 li
387.24 18.6906 li
387.258 18.6906 li
387.28 18.6906 li
387.299 18.6906 li
387.322 18.6906 li
387.341 18.6906 li
387.357 18.6906 li
387.378 18.6906 li
387.4 18.6906 li
387.423 18.6906 li
387.442 18.6906 li
387.466 18.6906 li
387.499 18.6906 li
387.518 18.6906 li
387.538 18.6906 li
387.559 18.6906 li
387.586 18.6906 li
387.621 18.6906 li
387.642 18.6906 li
387.66 18.6906 li
387.676 18.6906 li
387.692 18.6906 li
387.713 18.6906 li
387.736 18.6906 li
387.76 18.6906 li
387.785 18.6906 li
387.807 18.6906 li
387.824 18.6906 li
387.85 18.6906 li
387.867 18.6906 li
387.882 18.6906 li
387.909 18.6906 li
387.922 18.6906 li
387.936 18.6906 li
387.952 18.6906 li
387.971 18.6906 li
387.983 18.6906 li
387.997 18.6906 li
388.018 18.6906 li
388.037 18.6906 li
388.06 18.6906 li
388.075 18.6906 li
388.099 18.6906 li
388.114 18.6906 li
388.13 18.6906 li
388.149 18.6906 li
388.17 18.6906 li
388.182 18.6906 li
388.2 18.6906 li
388.215 18.6906 li
388.238 18.6906 li
388.252 18.6906 li
388.27 18.6906 li
388.289 18.6906 li
388.305 18.6906 li
388.327 18.6906 li
388.341 18.6906 li
388.354 18.6906 li
388.371 18.6906 li
388.386 18.6906 li
388.395 18.6906 li
388.409 18.6906 li
388.424 18.6906 li
388.441 18.6906 li
388.457 18.6906 li
388.471 18.6906 li
388.483 18.6906 li
388.501 18.6906 li
388.511 18.6906 li
388.526 18.6906 li
388.542 18.6906 li
388.555 18.6906 li
388.568 18.6906 li
388.582 18.6906 li
388.596 18.6906 li
388.612 18.6906 li
388.627 18.6906 li
388.639 18.6906 li
388.649 18.6906 li
388.663 18.6906 li
388.674 18.6906 li
388.689 18.6906 li
388.703 18.6906 li
388.717 18.6906 li
388.727 18.6906 li
388.734 18.6906 li
388.756 18.6906 li
388.764 18.6906 li
388.778 18.6906 li
388.79 18.6906 li
388.803 18.6906 li
388.812 18.6906 li
388.818 18.6906 li
388.831 18.6906 li
388.847 18.6906 li
388.859 18.6906 li
388.866 18.6906 li
388.878 18.6906 li
388.889 18.6906 li
388.901 18.6906 li
388.91 18.6906 li
388.932 18.6906 li
388.942 18.6906 li
388.955 18.6906 li
388.966 18.6906 li
388.975 18.6906 li
388.987 18.6906 li
388.996 18.6906 li
389.005 18.6906 li
389.016 18.6906 li
389.027 18.6906 li
389.034 18.6906 li
389.043 18.6906 li
389.059 18.6906 li
389.068 18.6906 li
389.075 18.6906 li
389.082 18.6906 li
389.095 18.6906 li
389.105 18.6906 li
389.117 18.6906 li
389.122 18.6906 li
389.128 18.6906 li
389.139 18.6906 li
389.149 18.6906 li
389.163 18.6906 li
389.174 18.6906 li
389.182 18.6906 li
389.192 18.6906 li
389.203 18.6906 li
389.209 18.6906 li
389.215 18.6906 li
389.223 18.6906 li
389.234 18.6906 li
389.243 18.6906 li
389.258 18.6906 li
389.266 18.6906 li
389.272 18.6906 li
389.281 18.6906 li
389.29 18.6906 li
389.305 18.6906 li
389.314 18.6906 li
389.32 18.6906 li
389.328 18.6906 li
389.337 18.6906 li
389.348 18.6906 li
389.355 18.6906 li
389.364 18.6906 li
389.375 18.6906 li
389.381 18.6906 li
389.386 18.6906 li
389.392 18.6906 li
389.398 18.6906 li
389.405 18.6906 li
389.416 18.6906 li
389.425 18.6906 li
389.435 18.6906 li
389.447 18.6906 li
389.457 18.6906 li
389.464 18.6906 li
389.471 18.6906 li
389.481 18.6906 li
389.489 18.6906 li
389.494 18.6906 li
389.502 18.6906 li
389.512 18.6906 li
389.521 18.6906 li
389.531 18.6906 li
389.539 18.6906 li
389.548 18.6906 li
389.556 18.6906 li
389.563 18.6906 li
389.575 18.6906 li
389.585 18.6906 li
389.589 18.6906 li
389.596 18.6906 li
389.598 18.6906 li
389.602 18.6906 li
389.611 18.6906 li
389.615 18.6906 li
389.62 18.6906 li
389.628 18.6906 li
389.633 18.6906 li
389.641 18.6906 li
389.649 18.6906 li
389.657 18.6906 li
389.661 18.6906 li
389.666 18.6906 li
389.672 18.6906 li
389.683 18.6906 li
389.695 18.6906 li
389.699 18.6906 li
389.707 18.6906 li
389.711 18.6906 li
389.721 18.6906 li
389.731 18.6906 li
389.737 18.6906 li
389.742 18.6906 li
389.748 18.6906 li
389.75 18.6906 li
389.755 18.6906 li
389.76 18.6906 li
389.767 18.6906 li
389.77 18.6906 li
389.777 18.6906 li
389.78 18.6906 li
389.784 18.6906 li
389.788 18.6906 li
389.796 18.6906 li
389.8 18.6906 li
389.804 18.6906 li
389.809 18.6906 li
389.814 18.6906 li
389.818 18.6906 li
389.823 18.6906 li
389.83 18.6906 li
389.838 18.6906 li
389.845 18.6906 li
389.852 18.6906 li
389.857 18.6906 li
389.86 18.6906 li
389.866 18.6906 li
389.871 18.6906 li
389.873 18.6906 li
389.88 18.6906 li
389.889 18.6906 li
389.896 18.6906 li
389.901 18.6906 li
389.904 18.6906 li
389.911 18.6906 li
389.914 18.6906 li
389.917 18.6906 li
389.922 18.6906 li
389.923 18.6906 li
389.925 18.6906 li
389.93 18.6906 li
389.932 18.6906 li
389.937 18.6906 li
389.941 18.6906 li
389.946 18.6906 li
389.951 18.6906 li
389.955 18.6906 li
389.959 18.6906 li
389.97 18.6906 li
389.973 18.6906 li
389.976 18.6906 li
389.98 18.6906 li
389.982 18.6906 li
389.984 18.6906 li
389.985 18.6906 li
389.989 18.6906 li
389.994 18.6906 li
389.998 18.6906 li
390.003 18.6906 li
390.006 18.6906 li
390.01 18.6906 li
390.014 18.6906 li
390.019 18.6906 li
390.023 18.6906 li
390.025 18.6906 li
390.03 18.6906 li
390.035 18.6906 li
390.037 18.6906 li
390.04 18.6906 li
390.046 18.6906 li
390.049 18.6906 li
390.052 18.6906 li
390.057 18.6906 li
390.058 18.6906 li
390.061 18.6906 li
390.066 18.6906 li
390.068 18.6906 li
390.073 18.6906 li
390.074 18.6906 li
390.076 18.6906 li
390.078 18.6906 li
390.083 18.6906 li
390.086 18.6906 li
390.09 18.6906 li
390.091 18.6906 li
390.095 18.6906 li
390.097 18.6906 li
390.103 18.6906 li
390.104 18.6906 li
390.108 18.6906 li
390.11 18.6906 li
390.114 18.6906 li
390.116 18.6906 li
390.117 18.6906 li
390.123 18.6906 li
390.124 18.6906 li
390.126 18.6906 li
390.127 18.6906 li
390.129 18.6906 li
390.132 18.6906 li
390.137 18.6906 li
390.138 18.6906 li
390.141 18.6906 li
390.144 18.6906 li
390.145 18.6906 li
390.146 18.6906 li
390.148 18.6906 li
390.15 18.6906 li
390.154 18.6906 li
390.155 18.6906 li
390.158 18.6906 li
390.162 18.6906 li
390.166 18.6906 li
390.168 18.6906 li
390.17 18.6906 li
390.173 18.6906 li
390.175 18.6906 li
390.176 18.6906 li
390.178 18.6906 li
390.18 18.6906 li
390.183 18.6906 li
390.186 18.6906 li
390.188 18.6906 li
390.19 18.6906 li
390.193 18.6906 li
390.196 18.6906 li
390.199 18.6906 li
390.201 18.6906 li
390.204 18.6906 li
390.205 18.6906 li
390.207 18.6906 li
390.209 18.6906 li
390.211 18.6906 li
390.213 18.6906 li
390.214 18.6906 li
390.217 18.6906 li
390.219 18.6906 li
390.22 18.6906 li
390.223 18.6906 li
390.224 18.6906 li
390.227 18.6906 li
390.23 18.6906 li
390.233 18.6906 li
390.234 18.6906 li
390.237 18.6906 li
390.241 18.6906 li
390.244 18.6906 li
390.245 18.6906 li
390.247 18.6906 li
390.249 18.6906 li
390.252 18.6906 li
390.254 18.6906 li
390.257 18.6906 li
390.258 18.6906 li
390.261 18.6906 li
390.264 18.6906 li
390.266 18.6906 li
390.268 18.6906 li
390.27 18.6906 li
390.271 18.6906 li
390.272 18.6906 li
390.273 18.6906 li
390.276 18.6906 li
390.277 18.6906 li
390.28 18.6906 li
390.282 18.6906 li
390.283 18.6906 li
390.284 18.6906 li
390.286 18.6906 li
390.287 18.6906 li
390.288 18.6906 li
390.289 18.6906 li
390.291 18.6906 li
390.294 18.6906 li
390.295 18.6906 li
390.298 18.6906 li
390.299 18.6906 li
390.3 18.6906 li
390.301 18.6906 li
390.303 18.6906 li
390.304 18.6906 li
390.306 18.6906 li
390.307 18.6906 li
390.309 18.6906 li
390.31 18.6906 li
390.311 18.6906 li
390.312 18.6906 li
390.313 18.6906 li
390.314 18.6906 li
390.316 18.6906 li
390.318 18.6906 li
390.319 18.6906 li
390.321 18.6906 li
390.325 18.6906 li
390.326 18.6906 li
390.327 18.6906 li
390.328 18.6906 li
390.329 18.6906 li
390.33 18.6906 li
390.331 18.6906 li
390.332 18.6906 li
390.333 18.6906 li
390.334 18.6906 li
390.335 18.6906 li
390.337 18.6906 li
390.338 18.6906 li
390.339 18.6906 li
390.341 18.6906 li
390.342 18.6906 li
390.343 18.6906 li
390.346 18.6906 li
390.347 18.6906 li
390.348 18.6906 li
390.35 18.6906 li
390.352 18.6906 li
390.353 18.6906 li
390.354 18.6906 li
390.355 18.6906 li
390.356 18.6906 li
390.357 18.6906 li
390.358 18.6906 li
390.359 18.6906 li
390.36 18.6906 li
390.361 18.6906 li
390.363 18.6906 li
390.364 18.6906 li
390.365 18.6906 li
390.366 18.6906 li
390.368 18.6906 li
390.369 18.6906 li
390.37 18.6906 li
390.371 18.6906 li
390.373 18.6906 li
390.374 18.6906 li
390.375 18.6906 li
390.376 18.6906 li
390.377 18.6906 li
390.378 18.6906 li
390.38 18.6906 li
390.381 18.6906 li
390.382 18.6906 li
390.384 18.6906 li
390.385 18.6906 li
390.386 18.6906 li
390.387 18.6906 li
390.388 18.6906 li
390.389 18.6906 li
390.39 18.6906 li
390.391 18.6906 li
390.392 18.6906 li
390.393 18.6906 li
390.394 18.6906 li
390.395 18.6906 li
390.396 18.6906 li
390.397 18.6906 li
390.398 18.6906 li
/1 
[/DeviceCMYK] /CSA add_res
.895628 .7673 0 0 cmyk
@
0 lj
104.629 227.918 mo
104.629 233.918 li
101.629 230.918 mo
107.629 230.918 li
102.508 228.797 mo
106.75 233.039 li
102.508 233.039 mo
106.75 228.797 li
@
144.653 222.742 mo
144.653 228.742 li
141.653 225.742 mo
147.653 225.742 li
142.532 223.621 mo
146.774 227.863 li
142.532 227.863 mo
146.774 223.621 li
@
151.096 202.037 mo
151.096 208.037 li
148.096 205.037 mo
154.096 205.037 li
148.975 202.916 mo
153.217 207.158 li
148.975 207.158 mo
153.217 202.916 li
@
162.802 191.685 mo
162.802 197.685 li
159.802 194.685 mo
165.802 194.685 li
160.681 192.564 mo
164.923 196.805 li
160.681 196.805 mo
164.923 192.564 li
@
173.86 176.156 mo
173.86 182.156 li
170.86 179.156 mo
176.86 179.156 li
171.739 177.035 mo
175.98 181.277 li
171.739 181.277 mo
175.98 177.035 li
@
187.265 160.627 mo
187.265 166.627 li
184.265 163.627 mo
190.265 163.627 li
185.144 161.506 mo
189.386 165.748 li
185.144 165.748 mo
189.386 161.506 li
@
195.155 150.274 mo
195.155 156.274 li
192.155 153.274 mo
198.155 153.274 li
193.034 151.153 mo
197.276 155.395 li
193.034 155.395 mo
197.276 151.153 li
@
201.346 150.274 mo
201.346 156.274 li
198.346 153.274 mo
204.346 153.274 li
199.225 151.153 mo
203.466 155.395 li
199.225 155.395 mo
203.466 151.153 li
@
211.491 139.922 mo
211.491 145.922 li
208.491 142.922 mo
214.491 142.922 li
209.37 140.801 mo
213.612 145.043 li
209.37 145.043 mo
213.612 140.801 li
@
217.575 134.745 mo
217.575 140.745 li
214.575 137.745 mo
220.575 137.745 li
215.454 135.625 mo
219.696 139.866 li
215.454 139.866 mo
219.696 135.625 li
@
221.358 129.569 mo
221.358 135.569 li
218.358 132.569 mo
224.358 132.569 li
219.237 130.448 mo
223.479 134.69 li
219.237 134.69 mo
223.479 130.448 li
@
226.452 124.393 mo
226.452 130.393 li
223.452 127.393 mo
229.452 127.393 li
224.331 125.272 mo
228.573 129.514 li
224.331 129.514 mo
228.573 125.272 li
@
231.857 114.04 mo
231.857 120.04 li
228.857 117.04 mo
234.857 117.04 li
229.736 114.92 mo
233.978 119.161 li
229.736 119.161 mo
233.978 114.92 li
@
235.8 114.04 mo
235.8 120.04 li
232.8 117.04 mo
238.8 117.04 li
233.68 114.92 mo
237.921 119.161 li
233.68 119.161 mo
237.921 114.92 li
@
240.987 114.04 mo
240.987 120.04 li
237.987 117.04 mo
243.987 117.04 li
238.866 114.92 mo
243.109 119.161 li
238.866 119.161 mo
243.109 114.92 li
@
244.601 114.04 mo
244.601 120.04 li
241.601 117.04 mo
247.601 117.04 li
242.48 114.92 mo
246.722 119.161 li
242.48 119.161 mo
246.722 114.92 li
@
248.906 108.864 mo
248.906 114.864 li
245.906 111.864 mo
251.906 111.864 li
246.785 109.743 mo
251.027 113.985 li
246.785 113.985 mo
251.027 109.743 li
@
252.822 98.5106 mo
252.822 104.511 li
249.822 101.511 mo
255.822 101.511 li
250.701 99.3906 mo
254.943 103.632 li
250.701 103.632 mo
254.943 99.3906 li
@
256.27 88.1586 mo
256.27 94.1586 li
253.27 91.1586 mo
259.27 91.1586 li
254.149 89.0376 mo
258.391 93.2796 li
254.149 93.2796 mo
258.391 89.0376 li
@
260.021 82.9826 mo
260.021 88.9826 li
257.021 85.9826 mo
263.021 85.9826 li
257.9 83.8616 mo
262.142 88.1026 li
257.9 88.1026 mo
262.142 83.8616 li
@
263.34 82.9826 mo
263.34 88.9826 li
260.34 85.9826 mo
266.34 85.9826 li
261.219 83.8616 mo
265.461 88.1026 li
261.219 88.1026 mo
265.461 83.8616 li
@
266.317 82.9826 mo
266.317 88.9826 li
263.317 85.9826 mo
269.317 85.9826 li
264.196 83.8616 mo
268.438 88.1026 li
264.196 88.1026 mo
268.438 83.8616 li
@
271.124 82.9826 mo
271.124 88.9826 li
268.124 85.9826 mo
274.124 85.9826 li
269.003 83.8616 mo
273.244 88.1026 li
269.003 88.1026 mo
273.244 83.8616 li
@
275.282 82.9826 mo
275.282 88.9826 li
272.282 85.9826 mo
278.282 85.9826 li
273.161 83.8616 mo
277.403 88.1026 li
273.161 88.1026 mo
277.403 83.8616 li
@
279.396 72.6296 mo
279.396 78.6296 li
276.396 75.6296 mo
282.396 75.6296 li
277.275 73.5086 mo
281.517 77.7507 li
277.275 77.7507 mo
281.517 73.5086 li
@
282.965 72.6296 mo
282.965 78.6296 li
279.965 75.6296 mo
285.965 75.6296 li
280.844 73.5086 mo
285.086 77.7507 li
280.844 77.7507 mo
285.086 73.5086 li
@
285.899 67.4536 mo
285.899 73.4536 li
282.899 70.4536 mo
288.899 70.4536 li
283.778 68.3326 mo
288.02 72.5746 li
283.778 72.5746 mo
288.02 68.3326 li
@
288.832 62.2776 mo
288.832 68.2776 li
285.832 65.2776 mo
291.832 65.2776 li
286.711 63.1566 mo
290.953 67.3976 li
286.711 67.3976 mo
290.953 63.1566 li
@
292.026 57.1006 mo
292.026 63.1006 li
289.026 60.1006 mo
295.026 60.1006 li
289.905 57.9796 mo
294.147 62.2216 li
289.905 62.2216 mo
294.147 57.9796 li
@
294.721 57.1006 mo
294.721 63.1006 li
291.721 60.1006 mo
297.721 60.1006 li
292.601 57.9796 mo
296.843 62.2216 li
292.601 62.2216 mo
296.843 57.9796 li
@
297.946 51.9247 mo
297.946 57.9247 li
294.946 54.9247 mo
300.946 54.9247 li
295.825 52.8036 mo
300.068 57.0456 li
295.825 57.0456 mo
300.068 52.8036 li
@
300.359 51.9247 mo
300.359 57.9247 li
297.359 54.9247 mo
303.359 54.9247 li
298.238 52.8036 mo
302.48 57.0456 li
298.238 57.0456 mo
302.48 52.8036 li
@
303.556 41.5717 mo
303.556 47.5716 li
300.556 44.5717 mo
306.556 44.5717 li
301.435 42.4517 mo
305.677 46.6926 li
301.435 46.6926 mo
305.677 42.4517 li
@
305.993 41.5717 mo
305.993 47.5716 li
302.993 44.5717 mo
308.993 44.5717 li
303.871 42.4517 mo
308.113 46.6926 li
303.871 46.6926 mo
308.113 42.4517 li
@
309.1 41.5717 mo
309.1 47.5716 li
306.1 44.5717 mo
312.1 44.5717 li
306.979 42.4517 mo
311.221 46.6926 li
306.979 46.6926 mo
311.221 42.4517 li
@
311.507 41.5717 mo
311.507 47.5716 li
308.507 44.5717 mo
314.507 44.5717 li
309.386 42.4517 mo
313.628 46.6926 li
309.386 46.6926 mo
313.628 42.4517 li
@
313.996 41.5717 mo
313.996 47.5716 li
310.996 44.5717 mo
316.996 44.5717 li
311.875 42.4517 mo
316.117 46.6926 li
311.875 46.6926 mo
316.117 42.4517 li
@
316.523 36.3956 mo
316.523 42.3956 li
313.523 39.3956 mo
319.523 39.3956 li
314.402 37.2747 mo
318.644 41.5166 li
314.402 41.5166 mo
318.644 37.2747 li
@
319.198 36.3956 mo
319.198 42.3956 li
316.198 39.3956 mo
322.198 39.3956 li
317.078 37.2747 mo
321.319 41.5166 li
317.078 41.5166 mo
321.319 37.2747 li
@
321.788 36.3956 mo
321.788 42.3956 li
318.788 39.3956 mo
324.788 39.3956 li
319.667 37.2747 mo
323.909 41.5166 li
319.667 41.5166 mo
323.909 37.2747 li
@
324.536 31.2196 mo
324.536 37.2196 li
321.536 34.2196 mo
327.536 34.2196 li
322.416 32.0986 mo
326.657 36.3406 li
322.416 36.3406 mo
326.657 32.0986 li
@
326.915 31.2196 mo
326.915 37.2196 li
323.915 34.2196 mo
329.915 34.2196 li
324.794 32.0986 mo
329.036 36.3406 li
324.794 36.3406 mo
329.036 32.0986 li
@
329.312 31.2196 mo
329.312 37.2196 li
326.312 34.2196 mo
332.312 34.2196 li
327.191 32.0986 mo
331.433 36.3406 li
327.191 36.3406 mo
331.433 32.0986 li
@
331.825 31.2196 mo
331.825 37.2196 li
328.825 34.2196 mo
334.825 34.2196 li
329.703 32.0986 mo
333.946 36.3406 li
329.703 36.3406 mo
333.946 32.0986 li
@
334.284 26.0436 mo
334.284 32.0436 li
331.284 29.0436 mo
337.284 29.0436 li
332.162 26.9226 mo
336.404 31.1636 li
332.162 31.1636 mo
336.404 26.9226 li
@
336.885 26.0436 mo
336.885 32.0436 li
333.885 29.0436 mo
339.885 29.0436 li
334.764 26.9226 mo
339.005 31.1636 li
334.764 31.1636 mo
339.005 26.9226 li
@
339.496 20.8666 mo
339.496 26.8666 li
336.496 23.8666 mo
342.496 23.8666 li
337.375 21.7456 mo
341.617 25.9876 li
337.375 25.9876 mo
341.617 21.7456 li
@
341.976 20.8666 mo
341.976 26.8666 li
338.976 23.8666 mo
344.976 23.8666 li
339.855 21.7456 mo
344.097 25.9876 li
339.855 25.9876 mo
344.097 21.7456 li
@
344.385 20.8666 mo
344.385 26.8666 li
341.385 23.8666 mo
347.385 23.8666 li
342.264 21.7456 mo
346.506 25.9876 li
342.264 25.9876 mo
346.506 21.7456 li
@
346.8 20.8666 mo
346.8 26.8666 li
343.8 23.8666 mo
349.8 23.8666 li
344.678 21.7456 mo
348.92 25.9876 li
344.678 25.9876 mo
348.92 21.7456 li
@
349.14 20.8666 mo
349.14 26.8666 li
346.14 23.8666 mo
352.14 23.8666 li
347.019 21.7456 mo
351.261 25.9876 li
347.019 25.9876 mo
351.261 21.7456 li
@
351.409 20.8666 mo
351.409 26.8666 li
348.409 23.8666 mo
354.409 23.8666 li
349.288 21.7456 mo
353.53 25.9876 li
349.288 25.9876 mo
353.53 21.7456 li
@
353.823 15.6906 mo
353.823 21.6906 li
350.823 18.6906 mo
356.823 18.6906 li
351.702 16.5696 mo
355.944 20.8116 li
351.702 20.8116 mo
355.944 16.5696 li
@
355.977 15.6906 mo
355.977 21.6906 li
352.977 18.6906 mo
358.977 18.6906 li
353.855 16.5696 mo
358.098 20.8116 li
353.855 20.8116 mo
358.098 16.5696 li
@
358.016 15.6906 mo
358.016 21.6906 li
355.016 18.6906 mo
361.016 18.6906 li
355.896 16.5696 mo
360.137 20.8116 li
355.896 20.8116 mo
360.137 16.5696 li
@
360.005 15.6906 mo
360.005 21.6906 li
357.005 18.6906 mo
363.005 18.6906 li
357.884 16.5696 mo
362.126 20.8116 li
357.884 20.8116 mo
362.126 16.5696 li
@
361.846 15.6906 mo
361.846 21.6906 li
358.846 18.6906 mo
364.846 18.6906 li
359.725 16.5696 mo
363.967 20.8116 li
359.725 20.8116 mo
363.967 16.5696 li
@
363.589 15.6906 mo
363.589 21.6906 li
360.589 18.6906 mo
366.589 18.6906 li
361.468 16.5696 mo
365.71 20.8116 li
361.468 20.8116 mo
365.71 16.5696 li
@
365.303 15.6906 mo
365.303 21.6906 li
362.303 18.6906 mo
368.303 18.6906 li
363.182 16.5696 mo
367.423 20.8116 li
363.182 20.8116 mo
367.423 16.5696 li
@
366.877 15.6906 mo
366.877 21.6906 li
363.877 18.6906 mo
369.877 18.6906 li
364.756 16.5696 mo
368.998 20.8116 li
364.756 20.8116 mo
368.998 16.5696 li
@
368.364 15.6906 mo
368.364 21.6906 li
365.364 18.6906 mo
371.364 18.6906 li
366.243 16.5696 mo
370.486 20.8116 li
366.243 20.8116 mo
370.486 16.5696 li
@
369.932 15.6906 mo
369.932 21.6906 li
366.932 18.6906 mo
372.932 18.6906 li
367.811 16.5696 mo
372.053 20.8116 li
367.811 20.8116 mo
372.053 16.5696 li
@
371.316 15.6906 mo
371.316 21.6906 li
368.316 18.6906 mo
374.316 18.6906 li
369.194 16.5696 mo
373.437 20.8116 li
369.194 20.8116 mo
373.437 16.5696 li
@
372.644 15.6906 mo
372.644 21.6906 li
369.644 18.6906 mo
375.644 18.6906 li
370.523 16.5696 mo
374.765 20.8116 li
370.523 20.8116 mo
374.765 16.5696 li
@
373.834 15.6906 mo
373.834 21.6906 li
370.834 18.6906 mo
376.834 18.6906 li
371.713 16.5696 mo
375.955 20.8116 li
371.713 20.8116 mo
375.955 16.5696 li
@
374.982 15.6906 mo
374.982 21.6906 li
371.982 18.6906 mo
377.982 18.6906 li
372.861 16.5696 mo
377.103 20.8116 li
372.861 20.8116 mo
377.103 16.5696 li
@
376.095 15.6906 mo
376.095 21.6906 li
373.095 18.6906 mo
379.095 18.6906 li
373.974 16.5696 mo
378.216 20.8116 li
373.974 20.8116 mo
378.216 16.5696 li
@
377.067 15.6906 mo
377.067 21.6906 li
374.067 18.6906 mo
380.067 18.6906 li
374.946 16.5696 mo
379.188 20.8116 li
374.946 20.8116 mo
379.188 16.5696 li
@
378.052 15.6906 mo
378.052 21.6906 li
375.052 18.6906 mo
381.052 18.6906 li
375.931 16.5696 mo
380.173 20.8116 li
375.931 20.8116 mo
380.173 16.5696 li
@
378.951 15.6906 mo
378.951 21.6906 li
375.951 18.6906 mo
381.951 18.6906 li
376.83 16.5696 mo
381.072 20.8116 li
376.83 20.8116 mo
381.072 16.5696 li
@
379.798 15.6906 mo
379.798 21.6906 li
376.798 18.6906 mo
382.798 18.6906 li
377.677 16.5696 mo
381.919 20.8116 li
377.677 20.8116 mo
381.919 16.5696 li
@
380.567 15.6906 mo
380.567 21.6906 li
377.567 18.6906 mo
383.567 18.6906 li
378.446 16.5696 mo
382.688 20.8116 li
378.446 20.8116 mo
382.688 16.5696 li
@
381.339 15.6906 mo
381.339 21.6906 li
378.339 18.6906 mo
384.339 18.6906 li
379.218 16.5696 mo
383.46 20.8116 li
379.218 20.8116 mo
383.46 16.5696 li
@
382.033 15.6906 mo
382.033 21.6906 li
379.033 18.6906 mo
385.033 18.6906 li
379.912 16.5696 mo
384.154 20.8116 li
379.912 20.8116 mo
384.154 16.5696 li
@
382.726 15.6906 mo
382.726 21.6906 li
379.726 18.6906 mo
385.726 18.6906 li
380.605 16.5696 mo
384.847 20.8116 li
380.605 20.8116 mo
384.847 16.5696 li
@
383.3 15.6906 mo
383.3 21.6906 li
380.3 18.6906 mo
386.3 18.6906 li
381.179 16.5696 mo
385.421 20.8116 li
381.179 20.8116 mo
385.421 16.5696 li
@
383.857 15.6906 mo
383.857 21.6906 li
380.857 18.6906 mo
386.857 18.6906 li
381.736 16.5696 mo
385.977 20.8116 li
381.736 20.8116 mo
385.977 16.5696 li
@
384.344 15.6906 mo
384.344 21.6906 li
381.344 18.6906 mo
387.344 18.6906 li
382.223 16.5696 mo
386.465 20.8116 li
382.223 20.8116 mo
386.465 16.5696 li
@
384.784 15.6906 mo
384.784 21.6906 li
381.784 18.6906 mo
387.784 18.6906 li
382.664 16.5696 mo
386.905 20.8116 li
382.664 20.8116 mo
386.905 16.5696 li
@
385.205 15.6906 mo
385.205 21.6906 li
382.205 18.6906 mo
388.205 18.6906 li
383.084 16.5696 mo
387.326 20.8116 li
383.084 20.8116 mo
387.326 16.5696 li
@
385.61 15.6906 mo
385.61 21.6906 li
382.61 18.6906 mo
388.61 18.6906 li
383.489 16.5696 mo
387.731 20.8116 li
383.489 20.8116 mo
387.731 16.5696 li
@
385.96 15.6906 mo
385.96 21.6906 li
382.96 18.6906 mo
388.96 18.6906 li
383.839 16.5696 mo
388.081 20.8116 li
383.839 20.8116 mo
388.081 16.5696 li
@
386.292 15.6906 mo
386.292 21.6906 li
383.292 18.6906 mo
389.292 18.6906 li
384.171 16.5696 mo
388.412 20.8116 li
384.171 20.8116 mo
388.412 16.5696 li
@
386.591 15.6906 mo
386.591 21.6906 li
383.591 18.6906 mo
389.591 18.6906 li
384.469 16.5696 mo
388.711 20.8116 li
384.469 20.8116 mo
388.711 16.5696 li
@
386.856 15.6906 mo
386.856 21.6906 li
383.856 18.6906 mo
389.856 18.6906 li
384.735 16.5696 mo
388.977 20.8116 li
384.735 20.8116 mo
388.977 16.5696 li
@
387.111 15.6906 mo
387.111 21.6906 li
384.111 18.6906 mo
390.111 18.6906 li
384.99 16.5696 mo
389.232 20.8116 li
384.99 20.8116 mo
389.232 16.5696 li
@
387.341 15.6906 mo
387.341 21.6906 li
384.341 18.6906 mo
390.341 18.6906 li
385.22 16.5696 mo
389.462 20.8116 li
385.22 20.8116 mo
389.462 16.5696 li
@
387.559 15.6906 mo
387.559 21.6906 li
384.559 18.6906 mo
390.559 18.6906 li
385.438 16.5696 mo
389.68 20.8116 li
385.438 20.8116 mo
389.68 16.5696 li
@
387.785 15.6906 mo
387.785 21.6906 li
384.785 18.6906 mo
390.785 18.6906 li
385.664 16.5696 mo
389.906 20.8116 li
385.664 20.8116 mo
389.906 16.5696 li
@
387.971 15.6906 mo
387.971 21.6906 li
384.971 18.6906 mo
390.971 18.6906 li
385.85 16.5696 mo
390.092 20.8116 li
385.85 20.8116 mo
390.092 16.5696 li
@
388.149 15.6906 mo
388.149 21.6906 li
385.149 18.6906 mo
391.149 18.6906 li
386.028 16.5696 mo
390.27 20.8116 li
386.028 20.8116 mo
390.27 16.5696 li
@
388.327 15.6906 mo
388.327 21.6906 li
385.327 18.6906 mo
391.327 18.6906 li
386.205 16.5696 mo
390.448 20.8116 li
386.205 20.8116 mo
390.448 16.5696 li
@
388.471 15.6906 mo
388.471 21.6906 li
385.471 18.6906 mo
391.471 18.6906 li
386.35 16.5696 mo
390.593 20.8116 li
386.35 20.8116 mo
390.593 16.5696 li
@
388.612 15.6906 mo
388.612 21.6906 li
385.612 18.6906 mo
391.612 18.6906 li
386.491 16.5696 mo
390.733 20.8116 li
386.491 20.8116 mo
390.733 16.5696 li
@
388.735 15.6906 mo
388.735 21.6906 li
385.735 18.6906 mo
391.735 18.6906 li
386.614 16.5696 mo
390.856 20.8116 li
386.614 20.8116 mo
390.856 16.5696 li
@
388.859 15.6906 mo
388.859 21.6906 li
385.859 18.6906 mo
391.859 18.6906 li
386.738 16.5696 mo
390.98 20.8116 li
386.738 20.8116 mo
390.98 16.5696 li
@
388.974 15.6906 mo
388.974 21.6906 li
385.974 18.6906 mo
391.974 18.6906 li
386.853 16.5696 mo
391.095 20.8116 li
386.853 20.8116 mo
391.095 16.5696 li
@
389.075 15.6906 mo
389.075 21.6906 li
386.075 18.6906 mo
392.075 18.6906 li
386.954 16.5696 mo
391.196 20.8116 li
386.954 20.8116 mo
391.196 16.5696 li
@
389.174 15.6906 mo
389.174 21.6906 li
386.174 18.6906 mo
392.174 18.6906 li
387.053 16.5696 mo
391.295 20.8116 li
387.053 20.8116 mo
391.295 16.5696 li
@
389.266 15.6906 mo
389.266 21.6906 li
386.266 18.6906 mo
392.266 18.6906 li
387.144 16.5696 mo
391.387 20.8116 li
387.144 20.8116 mo
391.387 16.5696 li
@
389.355 15.6906 mo
389.355 21.6906 li
386.355 18.6906 mo
392.355 18.6906 li
387.234 16.5696 mo
391.476 20.8116 li
387.234 20.8116 mo
391.476 16.5696 li
@
389.435 15.6906 mo
389.435 21.6906 li
386.435 18.6906 mo
392.435 18.6906 li
387.314 16.5696 mo
391.556 20.8116 li
387.314 20.8116 mo
391.556 16.5696 li
@
389.52 15.6906 mo
389.52 21.6906 li
386.52 18.6906 mo
392.52 18.6906 li
387.399 16.5696 mo
391.641 20.8116 li
387.399 20.8116 mo
391.641 16.5696 li
@
389.598 15.6906 mo
389.598 21.6906 li
386.598 18.6906 mo
392.598 18.6906 li
387.477 16.5696 mo
391.719 20.8116 li
387.477 20.8116 mo
391.719 16.5696 li
@
389.661 15.6906 mo
389.661 21.6906 li
386.661 18.6906 mo
392.661 18.6906 li
387.54 16.5696 mo
391.782 20.8116 li
387.54 20.8116 mo
391.782 16.5696 li
@
389.737 15.6906 mo
389.737 21.6906 li
386.737 18.6906 mo
392.737 18.6906 li
387.616 16.5696 mo
391.857 20.8116 li
387.616 20.8116 mo
391.857 16.5696 li
@
389.784 15.6906 mo
389.784 21.6906 li
386.784 18.6906 mo
392.784 18.6906 li
387.663 16.5696 mo
391.905 20.8116 li
387.663 20.8116 mo
391.905 16.5696 li
@
389.837 15.6906 mo
389.837 21.6906 li
386.837 18.6906 mo
392.837 18.6906 li
387.716 16.5696 mo
391.959 20.8116 li
387.716 20.8116 mo
391.959 16.5696 li
@
389.896 15.6906 mo
389.896 21.6906 li
386.896 18.6906 mo
392.896 18.6906 li
387.775 16.5696 mo
392.018 20.8116 li
387.775 20.8116 mo
392.018 16.5696 li
@
389.931 15.6906 mo
389.931 21.6906 li
386.931 18.6906 mo
392.931 18.6906 li
387.81 16.5696 mo
392.052 20.8116 li
387.81 20.8116 mo
392.052 16.5696 li
@
389.98 15.6906 mo
389.98 21.6906 li
386.98 18.6906 mo
392.98 18.6906 li
387.859 16.5696 mo
392.101 20.8116 li
387.859 20.8116 mo
392.101 16.5696 li
@
390.01 15.6906 mo
390.01 21.6906 li
387.01 18.6906 mo
393.01 18.6906 li
387.889 16.5696 mo
392.131 20.8116 li
387.889 20.8116 mo
392.131 16.5696 li
@
390.049 15.6906 mo
390.049 21.6906 li
387.049 18.6906 mo
393.049 18.6906 li
387.928 16.5696 mo
392.17 20.8116 li
387.928 20.8116 mo
392.17 16.5696 li
@
390.078 15.6906 mo
390.078 21.6906 li
387.078 18.6906 mo
393.078 18.6906 li
387.957 16.5696 mo
392.199 20.8116 li
387.957 20.8116 mo
392.199 16.5696 li
@
390.11 15.6906 mo
390.11 21.6906 li
387.11 18.6906 mo
393.11 18.6906 li
387.989 16.5696 mo
392.231 20.8116 li
387.989 20.8116 mo
392.231 16.5696 li
@
390.133 15.6906 mo
390.133 21.6906 li
387.133 18.6906 mo
393.133 18.6906 li
388.012 16.5696 mo
392.253 20.8116 li
388.012 20.8116 mo
392.253 16.5696 li
@
390.155 15.6906 mo
390.155 21.6906 li
387.155 18.6906 mo
393.155 18.6906 li
388.034 16.5696 mo
392.276 20.8116 li
388.034 20.8116 mo
392.276 16.5696 li
@
390.176 15.6906 mo
390.176 21.6906 li
387.176 18.6906 mo
393.176 18.6906 li
388.055 16.5696 mo
392.297 20.8116 li
388.055 20.8116 mo
392.297 16.5696 li
@
390.199 15.6906 mo
390.199 21.6906 li
387.199 18.6906 mo
393.199 18.6906 li
388.078 16.5696 mo
392.32 20.8116 li
388.078 20.8116 mo
392.32 16.5696 li
@
390.214 15.6906 mo
390.214 21.6906 li
387.214 18.6906 mo
393.214 18.6906 li
388.093 16.5696 mo
392.335 20.8116 li
388.093 20.8116 mo
392.335 16.5696 li
@
390.233 15.6906 mo
390.233 21.6906 li
387.233 18.6906 mo
393.233 18.6906 li
388.112 16.5696 mo
392.354 20.8116 li
388.112 20.8116 mo
392.354 16.5696 li
@
390.254 15.6906 mo
390.254 21.6906 li
387.254 18.6906 mo
393.254 18.6906 li
388.133 16.5696 mo
392.375 20.8116 li
388.133 20.8116 mo
392.375 16.5696 li
@
390.273 15.6906 mo
390.273 21.6906 li
387.273 18.6906 mo
393.273 18.6906 li
388.152 16.5696 mo
392.394 20.8116 li
388.152 20.8116 mo
392.394 16.5696 li
@
390.286 15.6906 mo
390.286 21.6906 li
387.286 18.6906 mo
393.286 18.6906 li
388.165 16.5696 mo
392.407 20.8116 li
388.165 20.8116 mo
392.407 16.5696 li
@
390.298 15.6906 mo
390.298 21.6906 li
387.298 18.6906 mo
393.298 18.6906 li
388.177 16.5696 mo
392.419 20.8116 li
388.177 20.8116 mo
392.419 16.5696 li
@
390.309 15.6906 mo
390.309 21.6906 li
387.309 18.6906 mo
393.309 18.6906 li
388.187 16.5696 mo
392.43 20.8116 li
388.187 20.8116 mo
392.43 16.5696 li
@
390.315 15.6906 mo
390.315 21.6906 li
387.315 18.6906 mo
393.315 18.6906 li
388.194 16.5696 mo
392.436 20.8116 li
388.194 20.8116 mo
392.436 16.5696 li
@
390.326 15.6906 mo
390.326 21.6906 li
387.326 18.6906 mo
393.326 18.6906 li
388.205 16.5696 mo
392.447 20.8116 li
388.205 20.8116 mo
392.447 16.5696 li
@
390.33 15.6906 mo
390.33 21.6906 li
387.33 18.6906 mo
393.33 18.6906 li
388.209 16.5696 mo
392.452 20.8116 li
388.209 20.8116 mo
392.452 16.5696 li
@
390.335 15.6906 mo
390.335 21.6906 li
387.335 18.6906 mo
393.335 18.6906 li
388.214 16.5696 mo
392.456 20.8116 li
388.214 20.8116 mo
392.456 16.5696 li
@
390.343 15.6906 mo
390.343 21.6906 li
387.343 18.6906 mo
393.343 18.6906 li
388.222 16.5696 mo
392.464 20.8116 li
388.222 20.8116 mo
392.464 16.5696 li
@
390.349 15.6906 mo
390.349 21.6906 li
387.349 18.6906 mo
393.349 18.6906 li
388.228 16.5696 mo
392.469 20.8116 li
388.228 20.8116 mo
392.469 16.5696 li
@
390.355 15.6906 mo
390.355 21.6906 li
387.355 18.6906 mo
393.355 18.6906 li
388.234 16.5696 mo
392.476 20.8116 li
388.234 20.8116 mo
392.476 16.5696 li
@
390.359 15.6906 mo
390.359 21.6906 li
387.359 18.6906 mo
393.359 18.6906 li
388.239 16.5696 mo
392.48 20.8116 li
388.239 20.8116 mo
392.48 16.5696 li
@
390.362 15.6906 mo
390.362 21.6906 li
387.362 18.6906 mo
393.362 18.6906 li
388.241 16.5696 mo
392.484 20.8116 li
388.241 20.8116 mo
392.484 16.5696 li
@
390.369 15.6906 mo
390.369 21.6906 li
387.369 18.6906 mo
393.369 18.6906 li
388.248 16.5696 mo
392.49 20.8116 li
388.248 20.8116 mo
392.49 16.5696 li
@
390.373 15.6906 mo
390.373 21.6906 li
387.373 18.6906 mo
393.373 18.6906 li
388.252 16.5696 mo
392.494 20.8116 li
388.252 20.8116 mo
392.494 16.5696 li
@
390.373 15.6906 mo
390.373 21.6906 li
387.373 18.6906 mo
393.373 18.6906 li
388.252 16.5696 mo
392.494 20.8116 li
388.252 20.8116 mo
392.494 16.5696 li
@
390.377 15.6906 mo
390.377 21.6906 li
387.377 18.6906 mo
393.377 18.6906 li
388.256 16.5696 mo
392.498 20.8116 li
388.256 20.8116 mo
392.498 16.5696 li
@
390.378 15.6906 mo
390.378 21.6906 li
387.378 18.6906 mo
393.378 18.6906 li
388.257 16.5696 mo
392.5 20.8116 li
388.257 20.8116 mo
392.5 16.5696 li
@
390.382 15.6906 mo
390.382 21.6906 li
387.382 18.6906 mo
393.382 18.6906 li
388.261 16.5696 mo
392.503 20.8116 li
388.261 20.8116 mo
392.503 16.5696 li
@
390.386 15.6906 mo
390.386 21.6906 li
387.386 18.6906 mo
393.386 18.6906 li
388.265 16.5696 mo
392.507 20.8116 li
388.265 20.8116 mo
392.507 16.5696 li
@
390.389 15.6906 mo
390.389 21.6906 li
387.389 18.6906 mo
393.389 18.6906 li
388.268 16.5696 mo
392.51 20.8116 li
388.268 20.8116 mo
392.51 16.5696 li
@
390.389 15.6906 mo
390.389 21.6906 li
387.389 18.6906 mo
393.389 18.6906 li
388.268 16.5696 mo
392.511 20.8116 li
388.268 20.8116 mo
392.511 16.5696 li
@
390.39 15.6906 mo
390.39 21.6906 li
387.39 18.6906 mo
393.39 18.6906 li
388.269 16.5696 mo
392.511 20.8116 li
388.269 20.8116 mo
392.511 16.5696 li
@
390.392 15.6906 mo
390.392 21.6906 li
387.392 18.6906 mo
393.392 18.6906 li
388.271 16.5696 mo
392.513 20.8116 li
388.271 20.8116 mo
392.513 16.5696 li
@
390.393 15.6906 mo
390.393 21.6906 li
387.393 18.6906 mo
393.393 18.6906 li
388.272 16.5696 mo
392.514 20.8116 li
388.272 20.8116 mo
392.514 16.5696 li
@
390.394 15.6906 mo
390.394 21.6906 li
387.394 18.6906 mo
393.394 18.6906 li
388.273 16.5696 mo
392.515 20.8116 li
388.273 20.8116 mo
392.515 16.5696 li
@
390.394 15.6906 mo
390.394 21.6906 li
387.394 18.6906 mo
393.394 18.6906 li
388.273 16.5696 mo
392.515 20.8116 li
388.273 20.8116 mo
392.515 16.5696 li
@
390.394 15.6906 mo
390.394 21.6906 li
387.394 18.6906 mo
393.394 18.6906 li
388.273 16.5696 mo
392.515 20.8116 li
388.273 20.8116 mo
392.515 16.5696 li
@
390.396 15.6906 mo
390.396 21.6906 li
387.396 18.6906 mo
393.396 18.6906 li
388.275 16.5696 mo
392.517 20.8116 li
388.275 20.8116 mo
392.517 16.5696 li
@
390.396 15.6906 mo
390.396 21.6906 li
387.396 18.6906 mo
393.396 18.6906 li
388.275 16.5696 mo
392.517 20.8116 li
388.275 20.8116 mo
392.517 16.5696 li
@
390.396 15.6906 mo
390.396 21.6906 li
387.396 18.6906 mo
393.396 18.6906 li
388.275 16.5696 mo
392.518 20.8116 li
388.275 20.8116 mo
392.518 16.5696 li
@
390.396 15.6906 mo
390.396 21.6906 li
387.396 18.6906 mo
393.396 18.6906 li
388.275 16.5696 mo
392.518 20.8116 li
388.275 20.8116 mo
392.518 16.5696 li
@
390.396 15.6906 mo
390.396 21.6906 li
387.396 18.6906 mo
393.396 18.6906 li
388.275 16.5696 mo
392.518 20.8116 li
388.275 20.8116 mo
392.518 16.5696 li
@
390.397 15.6906 mo
390.397 21.6906 li
387.397 18.6906 mo
393.397 18.6906 li
388.276 16.5696 mo
392.518 20.8116 li
388.276 20.8116 mo
392.518 16.5696 li
@
390.397 15.6906 mo
390.397 21.6906 li
387.397 18.6906 mo
393.397 18.6906 li
388.276 16.5696 mo
392.518 20.8116 li
388.276 20.8116 mo
392.518 16.5696 li
@
390.397 15.6906 mo
390.397 21.6906 li
387.397 18.6906 mo
393.397 18.6906 li
388.276 16.5696 mo
392.518 20.8116 li
388.276 20.8116 mo
392.518 16.5696 li
@
390.397 15.6906 mo
390.397 21.6906 li
387.397 18.6906 mo
393.397 18.6906 li
388.276 16.5696 mo
392.518 20.8116 li
388.276 20.8116 mo
392.518 16.5696 li
@
390.397 15.6906 mo
390.397 21.6906 li
387.397 18.6906 mo
393.397 18.6906 li
388.276 16.5696 mo
392.518 20.8116 li
388.276 20.8116 mo
392.518 16.5696 li
@
390.398 15.6906 mo
390.398 21.6906 li
387.398 18.6906 mo
393.398 18.6906 li
388.277 16.5696 mo
392.519 20.8116 li
388.277 20.8116 mo
392.519 16.5696 li
@
1 lj
52.8983 42.8466 mo
72.9104 42.8466 li
84.6167 41.9836 li
92.9229 41.9836 li
96.3233 41.9836 li
99.3653 41.9836 li
102.117 41.9836 li
102.117 41.1206 li
104.628 41.1206 li
109.079 41.1206 li
116.335 41.1206 li
117.896 41.1206 li
124.641 41.1206 li
125.82 41.1206 li
128.041 40.2586 li
129.091 40.2586 li
131.083 40.2586 li
132.03 40.2586 li
133.835 40.2586 li
135.534 39.3956 li
138.658 39.3956 li
141.478 39.3956 li
142.141 39.3956 li
143.425 39.3956 li
144.046 39.3956 li
145.248 39.3956 li
146.964 39.3956 li
148.053 39.3956 li
149.103 38.5336 li
151.096 38.5336 li
151.573 37.6707 li
152.959 36.8076 li
153.406 36.8076 li
154.709 36.8076 li
155.546 36.8076 li
157.538 36.8076 li
158.671 36.8076 li
159.76 36.8076 li
161.152 36.8076 li
161.49 36.8076 li
163.437 36.8076 li
164.363 36.8076 li
165.554 36.8076 li
166.416 36.8076 li
168.066 36.8076 li
168.596 35.9456 li
169.372 35.9456 li
170.377 35.9456 li
172.287 35.9456 li
173.418 34.2196 li
174.933 34.2196 li
175.764 33.3566 li
176.571 33.3566 li
177.357 33.3566 li
178.31 33.3566 li
179.232 33.3566 li
180.477 33.3566 li
182.001 33.3566 li
183.449 33.3566 li
184.223 33.3566 li
184.828 33.3566 li
185.42 33.3566 li
186.286 33.3566 li
187.265 33.3566 li
188.078 33.3566 li
188.999 33.3566 li
189.512 33.3566 li
190.389 33.3566 li
191.24 33.3566 li
192.066 33.3566 li
192.183 33.3566 li
192.757 33.3566 li
193.32 32.4946 li
193.981 32.4946 li
194.306 32.4946 li
194.734 32.4946 li
195.467 32.4946 li
195.878 31.6316 li
197.077 31.6316 li
198.039 31.6316 li
198.787 31.6316 li
199.785 31.6316 li
200.314 31.6316 li
201.006 31.6316 li
201.682 31.6316 li
202.987 31.6316 li
203.773 31.6316 li
204.84 31.6316 li
205.796 31.6316 li
206.298 31.6316 li
207.139 31.6316 li
207.619 31.6316 li
208.224 31.6316 li
208.686 31.6316 li
209.269 31.6316 li
210.153 31.6316 li
210.769 31.6316 li
211.609 31.6316 li
212.253 30.7686 li
213.052 30.7686 li
213.829 30.7686 li
214.318 30.7686 li
215.22 30.7686 li
216.195 30.7686 li
216.893 30.7686 li
217.333 30.7686 li
218.521 30.7686 li
219.528 30.7686 li
220.062 30.7686 li
220.803 30.7686 li
221.694 30.7686 li
222.312 30.7686 li
222.718 30.7686 li
223.316 30.7686 li
223.707 30.7686 li
224.437 30.7686 li
224.889 30.7686 li
225.736 30.7686 li
226.06 30.7686 li
226.416 29.9066 li
227.255 29.9066 li
227.868 29.9066 li
228.468 29.9066 li
228.828 29.9066 li
229.313 29.9066 li
229.727 29.9066 li
230.228 29.9066 li
230.933 29.9066 li
231.503 29.0426 li
232.323 29.0426 li
232.923 29.0426 li
233.566 29.0426 li
233.978 29.0426 li
234.625 29.0426 li
234.943 29.0426 li
235.284 29.0426 li
235.903 29.0426 li
236.383 29.0426 li
236.757 29.0426 li
237.273 29.0426 li
237.921 29.0426 li
238.603 29.0426 li
238.996 29.0426 li
239.45 29.0426 li
240.03 29.0426 li
240.339 29.0426 li
240.945 29.0426 li
241.221 29.0426 li
241.705 29.0426 li
242.243 29.0426 li
242.71 29.0426 li
243.13 29.0426 li
243.681 29.0426 li
243.991 29.0426 li
244.545 29.0426 li
245.107 29.0426 li
245.548 29.0426 li
246 29.0426 li
246.269 29.0426 li
246.694 29.0426 li
247.181 29.0426 li
247.609 29.0426 li
248.064 29.0426 li
248.596 29.0426 li
248.987 29.0426 li
249.373 29.0426 li
249.834 29.0426 li
250.302 29.0426 li
250.794 29.0426 li
251.247 29.0426 li
251.649 29.0426 li
252.118 29.0426 li
252.407 29.0426 li
252.779 29.0426 li
253.245 29.0426 li
253.716 29.0426 li
254.154 29.0426 li
254.677 28.1806 li
255.231 28.1806 li
255.736 28.1806 li
256.055 28.1806 li
256.483 28.1806 li
256.991 28.1806 li
257.37 28.1806 li
257.767 28.1806 li
258.183 28.1806 li
258.662 28.1806 li
259.191 28.1806 li
259.653 28.1806 li
260.131 28.1806 li
260.514 28.1806 li
260.935 28.1806 li
261.361 28.1806 li
261.666 28.1806 li
262.039 28.1806 li
262.48 28.1806 li
262.823 28.1806 li
263.232 28.1806 li
263.791 28.1806 li
264.118 28.1806 li
264.537 28.1806 li
264.923 28.1806 li
265.239 28.1806 li
265.633 28.1806 li
266.022 28.1806 li
266.583 28.1806 li
266.95 28.1806 li
267.425 28.1806 li
267.816 28.1806 li
268.127 28.1806 li
268.492 28.1806 li
268.82 28.1806 li
269.298 28.1806 li
269.648 28.1806 li
270.073 28.1806 li
270.423 28.1806 li
270.783 28.1806 li
271.162 28.1806 li
271.572 28.1806 li
271.948 28.1806 li
272.297 28.1806 li
272.728 27.3176 li
273.096 27.3176 li
273.445 27.3176 li
273.805 27.3176 li
274.138 27.3176 li
274.469 27.3176 li
274.895 27.3176 li
275.197 27.3176 li
275.542 27.3176 li
275.883 27.3176 li
276.289 27.3176 li
276.657 27.3176 li
277.059 27.3176 li
277.436 27.3176 li
277.815 27.3176 li
278.236 27.3176 li
278.738 27.3176 li
279.129 27.3176 li
279.463 27.3176 li
279.878 27.3176 li
280.341 27.3176 li
280.668 27.3176 li
281.129 27.3176 li
281.494 27.3176 li
281.876 27.3176 li
282.303 27.3176 li
282.679 27.3176 li
283.03 26.4556 li
283.426 26.4556 li
283.739 26.4556 li
284.121 26.4556 li
284.574 26.4556 li
284.968 26.4556 li
285.348 26.4556 li
285.691 26.4556 li
286.048 26.4556 li
286.36 26.4556 li
286.692 26.4556 li
287.054 25.5927 li
287.437 25.5927 li
287.824 25.5927 li
288.198 25.5927 li
288.644 25.5927 li
288.991 25.5927 li
289.43 25.5927 li
289.834 25.5927 li
290.214 25.5927 li
290.593 25.5927 li
290.962 25.5927 li
291.268 25.5927 li
291.607 25.5927 li
291.975 24.7296 li
292.349 24.7296 li
292.689 24.7296 li
293.1 24.7296 li
293.478 24.7296 li
293.871 24.7296 li
294.208 24.7296 li
294.562 24.7296 li
294.97 24.7296 li
295.353 24.7296 li
295.732 24.7296 li
296.098 24.7296 li
296.457 23.8676 li
296.865 23.8676 li
297.211 23.8676 li
297.575 23.8676 li
297.934 23.8676 li
298.316 23.8676 li
298.64 23.8676 li
298.975 23.8676 li
299.306 23.8676 li
299.602 23.8676 li
299.984 23.8676 li
300.373 23.8676 li
300.707 23.8676 li
301.019 23.8676 li
301.393 23.8676 li
301.719 23.8676 li
302.01 22.1416 li
302.364 22.1416 li
302.656 22.1416 li
302.928 22.1416 li
303.268 22.1416 li
303.608 22.1416 li
303.907 22.1416 li
304.234 22.1416 li
304.557 22.1416 li
304.858 22.1416 li
305.226 22.1416 li
305.566 22.1416 li
305.864 22.1416 li
306.201 22.1416 li
306.507 22.1416 li
306.822 22.1416 li
307.148 22.1416 li
307.509 22.1416 li
307.857 22.1416 li
308.184 22.1416 li
308.518 22.1416 li
308.878 22.1416 li
309.199 22.1416 li
309.512 22.1416 li
309.831 22.1416 li
310.141 22.1416 li
310.486 22.1416 li
310.838 22.1416 li
311.17 22.1416 li
311.449 22.1416 li
311.774 22.1416 li
312.087 22.1416 li
312.382 22.1416 li
312.704 22.1416 li
312.981 22.1416 li
313.257 22.1416 li
313.591 22.1416 li
313.943 22.1416 li
314.229 22.1416 li
314.527 22.1416 li
314.795 22.1416 li
315.069 22.1416 li
315.365 22.1416 li
315.713 22.1416 li
315.985 22.1416 li
316.276 22.1416 li
316.614 22.1416 li
316.877 22.1416 li
317.148 22.1416 li
317.397 22.1416 li
317.66 22.1416 li
317.969 22.1416 li
318.259 22.1416 li
318.539 22.1416 li
318.811 22.1416 li
319.1 22.1416 li
319.398 22.1416 li
319.723 22.1416 li
320.006 22.1416 li
320.342 22.1416 li
320.596 22.1416 li
320.871 22.1416 li
321.191 22.1416 li
321.452 22.1416 li
321.709 22.1416 li
321.98 22.1416 li
322.246 22.1416 li
322.528 22.1416 li
322.782 22.1416 li
323.053 22.1416 li
323.324 22.1416 li
323.629 22.1416 li
323.899 22.1416 li
324.196 22.1416 li
324.484 22.1416 li
324.766 22.1416 li
325.027 22.1416 li
325.3 22.1416 li
325.591 22.1416 li
325.869 22.1416 li
326.144 22.1416 li
326.431 22.1416 li
326.696 22.1416 li
326.978 22.1416 li
327.225 22.1416 li
327.478 22.1416 li
327.757 22.1416 li
328.014 22.1416 li
328.3 22.1416 li
328.576 22.1416 li
328.882 22.1416 li
329.154 22.1416 li
329.405 22.1416 li
329.683 22.1416 li
329.977 22.1416 li
330.238 22.1416 li
330.507 22.1416 li
330.807 22.1416 li
331.107 22.1416 li
331.383 22.1416 li
331.696 22.1416 li
331.969 22.1416 li
332.26 22.1416 li
332.512 22.1416 li
332.765 22.1416 li
333.055 22.1416 li
333.314 22.1416 li
333.596 22.1416 li
333.861 22.1416 li
334.115 22.1416 li
334.396 22.1416 li
334.663 22.1416 li
334.941 22.1416 li
335.214 22.1416 li
335.47 22.1416 li
335.76 22.1416 li
336.034 22.1416 li
336.318 21.2786 li
336.573 21.2786 li
336.825 21.2786 li
337.084 21.2786 li
337.342 21.2786 li
337.618 21.2786 li
337.856 21.2786 li
338.143 21.2786 li
338.433 21.2786 li
338.69 21.2786 li
338.948 21.2786 li
339.223 21.2786 li
339.484 21.2786 li
339.73 21.2786 li
339.997 21.2786 li
340.271 21.2786 li
340.538 21.2786 li
340.824 21.2786 li
341.062 21.2786 li
341.325 21.2786 li
341.606 21.2786 li
341.876 21.2786 li
342.164 21.2786 li
342.415 21.2786 li
342.712 21.2786 li
342.969 21.2786 li
343.237 21.2786 li
343.509 21.2786 li
343.781 21.2786 li
344.073 21.2786 li
344.325 21.2786 li
344.573 21.2786 li
344.855 21.2786 li
345.132 21.2786 li
345.402 21.2786 li
345.657 21.2786 li
345.919 21.2786 li
346.185 21.2786 li
346.457 21.2786 li
346.75 21.2786 li
347.022 21.2786 li
347.286 21.2786 li
347.547 21.2786 li
347.805 21.2786 li
348.065 21.2786 li
348.336 21.2786 li
348.587 21.2786 li
348.85 21.2786 li
349.128 21.2786 li
349.393 21.2786 li
349.668 21.2786 li
349.903 21.2786 li
350.164 21.2786 li
350.429 21.2786 li
350.675 21.2786 li
350.922 21.2786 li
351.184 21.2786 li
351.42 21.2786 li
351.696 21.2786 li
351.937 21.2786 li
352.193 21.2786 li
352.46 21.2786 li
352.702 21.2786 li
352.945 21.2786 li
353.178 21.2786 li
353.433 21.2786 li
353.672 21.2786 li
353.905 21.2786 li
354.128 21.2786 li
354.382 21.2786 li
354.622 21.2786 li
354.864 21.2786 li
355.102 21.2786 li
355.35 20.4166 li
355.591 20.4166 li
355.818 20.4166 li
356.064 20.4166 li
356.296 20.4166 li
356.52 20.4166 li
356.748 20.4166 li
356.98 20.4166 li
357.207 20.4166 li
357.441 20.4166 li
357.675 20.4166 li
357.903 20.4166 li
358.107 20.4166 li
358.328 20.4166 li
358.557 20.4166 li
358.769 20.4166 li
358.995 20.4166 li
359.229 20.4166 li
359.459 20.4166 li
359.681 20.4166 li
359.903 20.4166 li
360.115 20.4166 li
360.337 20.4166 li
360.536 20.4166 li
360.74 20.4166 li
360.959 20.4166 li
361.179 20.4166 li
361.401 20.4166 li
361.617 20.4166 li
361.825 20.4166 li
362.03 20.4166 li
362.236 20.4166 li
362.434 20.4166 li
362.632 20.4166 li
362.83 20.4166 li
363.044 20.4166 li
363.257 20.4166 li
363.473 20.4166 li
363.661 20.4166 li
363.864 20.4166 li
364.066 20.4166 li
364.251 20.4166 li
364.456 20.4166 li
364.659 20.4166 li
364.852 20.4166 li
365.037 20.4166 li
365.223 20.4166 li
365.418 20.4166 li
365.598 20.4166 li
365.784 20.4166 li
365.968 20.4166 li
366.153 20.4166 li
366.339 20.4166 li
366.533 20.4166 li
366.705 20.4166 li
366.885 20.4166 li
367.06 20.4166 li
367.241 19.5526 li
367.423 19.5526 li
367.604 19.5526 li
367.791 19.5526 li
367.975 19.5526 li
368.147 19.5526 li
368.334 19.5526 li
368.513 19.5526 li
368.677 19.5526 li
368.838 19.5526 li
369.018 19.5526 li
369.189 19.5526 li
369.352 19.5526 li
369.521 19.5526 li
369.686 19.5526 li
369.865 19.5526 li
370.044 19.5526 li
370.217 19.5526 li
370.383 19.5526 li
370.548 19.5526 li
370.7 19.5526 li
370.852 19.5526 li
371.015 19.5526 li
371.176 19.5526 li
371.334 19.5526 li
371.496 19.5526 li
371.652 19.5526 li
371.805 19.5526 li
371.947 19.5526 li
372.099 19.5526 li
372.246 19.5526 li
372.394 19.5526 li
372.544 19.5526 li
372.684 19.5526 li
372.837 19.5526 li
372.985 19.5526 li
373.125 19.5526 li
373.272 19.5526 li
373.415 19.5526 li
373.559 19.5526 li
373.699 19.5526 li
373.83 19.5526 li
373.97 19.5526 li
374.108 19.5526 li
374.247 19.5526 li
374.381 19.5526 li
374.511 19.5526 li
374.646 19.5526 li
374.783 19.5526 li
374.914 19.5526 li
375.048 19.5526 li
375.174 19.5526 li
375.302 19.5526 li
375.422 19.5526 li
375.549 19.5526 li
375.692 19.5526 li
375.819 18.6906 li
375.939 18.6906 li
376.066 18.6906 li
376.188 18.6906 li
376.312 18.6906 li
376.437 18.6906 li
376.561 18.6906 li
376.684 18.6906 li
376.8 18.6906 li
376.914 18.6906 li
377.032 18.6906 li
377.153 18.6906 li
377.262 18.6906 li
377.38 18.6906 li
377.489 18.6906 li
377.607 18.6906 li
377.72 18.6906 li
377.836 18.6906 li
377.952 18.6906 li
378.062 18.6906 li
378.177 18.6906 li
378.286 18.6906 li
378.387 18.6906 li
378.496 18.6906 li
378.598 18.6906 li
378.699 18.6906 li
378.799 18.6906 li
378.9 18.6906 li
379.003 18.6906 li
379.099 18.6906 li
379.199 18.6906 li
379.295 18.6906 li
379.389 18.6906 li
379.49 18.6906 li
379.585 18.6906 li
379.678 18.6906 li
379.78 18.6906 li
379.876 18.6906 li
379.972 18.6906 li
380.062 18.6906 li
380.164 18.6906 li
380.258 18.6906 li
380.353 18.6906 li
380.438 18.6906 li
380.527 18.6906 li
380.611 18.6906 li
380.7 18.6906 li
380.784 18.6906 li
380.875 18.6906 li
380.964 18.6906 li
381.053 18.6906 li
381.136 18.6906 li
381.223 18.6906 li
381.3 18.6906 li
381.393 18.6906 li
381.48 18.6906 li
381.557 18.6906 li
381.632 18.6906 li
381.716 18.6906 li
381.793 18.6906 li
381.876 18.6906 li
381.949 18.6906 li
382.032 18.6906 li
382.115 18.6906 li
382.189 18.6906 li
382.266 18.6906 li
382.342 18.6906 li
382.418 18.6906 li
382.491 18.6906 li
382.564 18.6906 li
382.636 18.6906 li
382.711 18.6906 li
382.782 18.6906 li
382.848 18.6906 li
382.917 18.6906 li
382.988 18.6906 li
383.059 18.6906 li
383.128 18.6906 li
383.19 18.6906 li
383.253 18.6906 li
383.319 18.6906 li
383.386 18.6906 li
383.452 18.6906 li
383.516 18.6906 li
383.576 18.6906 li
383.637 18.6906 li
383.703 18.6906 li
383.766 18.6906 li
383.831 18.6906 li
383.898 18.6906 li
383.96 18.6906 li
384.02 18.6906 li
384.078 18.6906 li
384.139 18.6906 li
384.19 18.6906 li
384.246 18.6906 li
384.305 18.6906 li
384.361 18.6906 li
384.415 18.6906 li
384.469 18.6906 li
384.522 18.6906 li
384.573 18.6906 li
384.626 18.6906 li
384.678 18.6906 li
384.731 18.6906 li
384.78 18.6906 li
384.834 18.6906 li
384.887 18.6906 li
384.94 18.6906 li
384.992 18.6906 li
385.042 18.6906 li
385.089 18.6906 li
385.135 18.6906 li
385.182 18.6906 li
385.23 18.6906 li
385.278 18.6906 li
385.328 18.6906 li
385.378 18.6906 li
385.42 18.6906 li
385.462 18.6906 li
385.507 18.6906 li
385.552 18.6906 li
385.595 18.6906 li
385.639 18.6906 li
385.684 18.6906 li
385.724 18.6906 li
385.772 18.6906 li
385.815 18.6906 li
385.856 18.6906 li
385.899 18.6906 li
385.938 18.6906 li
385.978 18.6906 li
386.02 18.6906 li
386.061 18.6906 li
386.1 18.6906 li
386.139 18.6906 li
386.174 18.6906 li
386.214 18.6906 li
386.253 18.6906 li
386.291 18.6906 li
386.327 18.6906 li
386.367 18.6906 li
386.4 18.6906 li
386.436 18.6906 li
386.468 18.6906 li
386.505 18.6906 li
386.544 18.6906 li
386.578 18.6906 li
386.619 18.6906 li
386.657 18.6906 li
386.691 18.6906 li
386.721 18.6906 li
386.757 18.6906 li
386.787 18.6906 li
386.82 18.6906 li
386.854 18.6906 li
386.888 18.6906 li
386.919 18.6906 li
386.951 18.6906 li
386.982 18.6906 li
387.014 18.6906 li
387.046 18.6906 li
387.078 18.6906 li
387.107 18.6906 li
387.137 18.6906 li
387.165 18.6906 li
387.197 18.6906 li
387.23 18.6906 li
387.259 18.6906 li
387.289 18.6906 li
387.316 18.6906 li
387.344 18.6906 li
387.369 18.6906 li
387.395 18.6906 li
387.427 18.6906 li
387.453 18.6906 li
387.482 18.6906 li
387.509 18.6906 li
387.532 18.6906 li
387.558 18.6906 li
387.583 18.6906 li
387.609 18.6906 li
387.633 18.6906 li
387.661 18.6906 li
387.685 18.6906 li
387.711 18.6906 li
387.736 18.6906 li
387.76 18.6906 li
387.787 18.6906 li
387.817 18.6906 li
387.843 18.6906 li
387.864 18.6906 li
387.887 18.6906 li
387.912 18.6906 li
387.932 18.6906 li
387.955 18.6906 li
387.978 18.6906 li
388.003 18.6906 li
388.023 18.6906 li
388.044 18.6906 li
388.064 18.6906 li
388.084 18.6906 li
388.103 18.6906 li
388.122 18.6906 li
388.142 18.6906 li
388.162 18.6906 li
388.182 18.6906 li
388.2 18.6906 li
388.22 18.6906 li
388.239 18.6906 li
388.261 18.6906 li
388.282 18.6906 li
388.303 18.6906 li
388.323 18.6906 li
388.342 18.6906 li
388.359 18.6906 li
388.378 18.6906 li
388.395 18.6906 li
388.415 18.6906 li
388.434 18.6906 li
388.45 18.6906 li
388.469 18.6906 li
388.487 18.6906 li
388.504 18.6906 li
388.521 18.6906 li
388.537 18.6906 li
388.554 18.6906 li
388.571 18.6906 li
388.587 18.6906 li
388.603 18.6906 li
388.617 18.6906 li
388.632 18.6906 li
388.651 18.6906 li
388.667 18.6906 li
388.684 18.6906 li
388.699 18.6906 li
388.715 18.6906 li
388.732 18.6906 li
388.749 18.6906 li
388.765 18.6906 li
388.78 18.6906 li
388.794 18.6906 li
388.81 18.6906 li
388.826 18.6906 li
388.84 18.6906 li
388.855 18.6906 li
388.87 18.6906 li
388.884 18.6906 li
388.898 18.6906 li
388.913 18.6906 li
388.926 18.6906 li
388.941 18.6906 li
388.955 18.6906 li
388.966 18.6906 li
388.98 18.6906 li
388.993 18.6906 li
389.008 18.6906 li
389.024 18.6906 li
389.036 18.6906 li
389.049 18.6906 li
389.062 18.6906 li
389.076 18.6906 li
389.089 18.6906 li
389.101 18.6906 li
389.113 18.6906 li
389.124 18.6906 li
389.137 18.6906 li
389.148 18.6906 li
389.163 18.6906 li
389.173 18.6906 li
389.187 18.6906 li
389.2 18.6906 li
389.213 18.6906 li
389.225 18.6906 li
389.236 18.6906 li
389.247 18.6906 li
389.257 18.6906 li
389.269 18.6906 li
389.279 18.6906 li
389.291 18.6906 li
389.3 18.6906 li
389.31 18.6906 li
389.32 18.6906 li
389.329 18.6906 li
389.339 18.6906 li
389.347 18.6906 li
389.357 18.6906 li
389.369 18.6906 li
389.379 18.6906 li
389.39 18.6906 li
389.398 18.6906 li
389.409 18.6906 li
389.418 18.6906 li
389.426 18.6906 li
389.434 18.6906 li
389.443 18.6906 li
389.452 18.6906 li
389.459 18.6906 li
389.466 18.6906 li
389.475 18.6906 li
389.484 18.6906 li
389.494 18.6906 li
389.502 18.6906 li
389.509 18.6906 li
389.519 18.6906 li
389.527 18.6906 li
389.538 18.6906 li
389.545 18.6906 li
389.553 18.6906 li
389.56 18.6906 li
389.569 18.6906 li
389.576 18.6906 li
389.584 18.6906 li
389.591 18.6906 li
389.6 18.6906 li
389.607 18.6906 li
389.615 18.6906 li
389.621 18.6906 li
389.628 18.6906 li
389.635 18.6906 li
389.641 18.6906 li
389.649 18.6906 li
389.655 18.6906 li
389.662 18.6906 li
389.67 18.6906 li
389.678 18.6906 li
389.688 18.6906 li
389.693 18.6906 li
389.7 18.6906 li
389.708 18.6906 li
389.712 18.6906 li
389.719 18.6906 li
389.727 18.6906 li
389.734 18.6906 li
389.738 18.6906 li
389.745 18.6906 li
389.752 18.6906 li
389.759 18.6906 li
389.764 18.6906 li
389.77 18.6906 li
389.775 18.6906 li
389.78 18.6906 li
389.786 18.6906 li
389.792 18.6906 li
389.797 18.6906 li
389.803 18.6906 li
389.809 18.6906 li
389.814 18.6906 li
389.821 18.6906 li
389.826 18.6906 li
389.832 18.6906 li
389.836 18.6906 li
389.841 18.6906 li
389.847 18.6906 li
389.85 18.6906 li
389.855 18.6906 li
389.859 18.6906 li
389.864 18.6906 li
389.87 18.6906 li
389.875 18.6906 li
389.88 18.6906 li
389.886 18.6906 li
389.89 18.6906 li
389.895 18.6906 li
389.899 18.6906 li
389.905 18.6906 li
389.909 18.6906 li
389.914 18.6906 li
389.919 18.6906 li
389.925 18.6906 li
389.929 18.6906 li
389.935 18.6906 li
389.938 18.6906 li
389.943 18.6906 li
389.949 18.6906 li
389.954 18.6906 li
389.957 18.6906 li
389.961 18.6906 li
389.965 18.6906 li
389.968 18.6906 li
389.972 18.6906 li
389.976 18.6906 li
389.98 18.6906 li
389.983 18.6906 li
389.988 18.6906 li
389.99 18.6906 li
389.995 18.6906 li
389.999 18.6906 li
390.003 18.6906 li
390.007 18.6906 li
390.011 18.6906 li
390.016 18.6906 li
390.019 18.6906 li
390.022 18.6906 li
390.026 18.6906 li
390.029 18.6906 li
390.031 18.6906 li
390.034 18.6906 li
390.037 18.6906 li
390.04 18.6906 li
390.044 18.6906 li
390.046 18.6906 li
390.049 18.6906 li
390.052 18.6906 li
390.056 18.6906 li
390.061 18.6906 li
390.065 18.6906 li
390.067 18.6906 li
390.07 18.6906 li
390.073 18.6906 li
390.076 18.6906 li
390.081 18.6906 li
390.084 18.6906 li
390.087 18.6906 li
390.09 18.6906 li
390.094 18.6906 li
390.096 18.6906 li
390.1 18.6906 li
390.103 18.6906 li
390.106 18.6906 li
390.109 18.6906 li
390.112 18.6906 li
390.115 18.6906 li
390.118 18.6906 li
390.121 18.6906 li
390.123 18.6906 li
390.127 18.6906 li
390.129 18.6906 li
390.131 18.6906 li
390.134 18.6906 li
390.136 18.6906 li
390.139 18.6906 li
390.141 18.6906 li
390.144 18.6906 li
390.148 18.6906 li
390.15 18.6906 li
390.152 18.6906 li
390.155 18.6906 li
390.157 18.6906 li
390.159 18.6906 li
390.162 18.6906 li
390.163 18.6906 li
390.166 18.6906 li
390.168 18.6906 li
390.169 18.6906 li
390.172 18.6906 li
390.175 18.6906 li
390.176 18.6906 li
390.178 18.6906 li
390.181 18.6906 li
390.184 18.6906 li
390.187 18.6906 li
390.189 18.6906 li
390.191 18.6906 li
390.193 18.6906 li
390.195 18.6906 li
390.196 18.6906 li
390.198 18.6906 li
390.201 18.6906 li
390.202 18.6906 li
390.205 18.6906 li
390.207 18.6906 li
390.211 18.6906 li
390.212 18.6906 li
390.214 18.6906 li
390.216 18.6906 li
390.218 18.6906 li
390.22 18.6906 li
390.222 18.6906 li
390.224 18.6906 li
390.225 18.6906 li
390.226 18.6906 li
390.228 18.6906 li
390.23 18.6906 li
390.232 18.6906 li
390.233 18.6906 li
390.235 18.6906 li
390.237 18.6906 li
390.239 18.6906 li
390.241 18.6906 li
390.243 18.6906 li
390.244 18.6906 li
390.245 18.6906 li
390.246 18.6906 li
390.249 18.6906 li
390.25 18.6906 li
390.252 18.6906 li
390.253 18.6906 li
390.255 18.6906 li
390.256 18.6906 li
390.258 18.6906 li
390.259 18.6906 li
390.26 18.6906 li
390.262 18.6906 li
390.264 18.6906 li
390.265 18.6906 li
390.266 18.6906 li
390.268 18.6906 li
390.271 18.6906 li
390.273 18.6906 li
390.274 18.6906 li
390.275 18.6906 li
390.277 18.6906 li
390.278 18.6906 li
390.28 18.6906 li
390.281 18.6906 li
390.282 18.6906 li
390.283 18.6906 li
390.284 18.6906 li
390.286 18.6906 li
390.287 18.6906 li
390.289 18.6906 li
390.291 18.6906 li
390.292 18.6906 li
390.294 18.6906 li
390.296 18.6906 li
390.297 18.6906 li
390.298 18.6906 li
390.3 18.6906 li
390.301 18.6906 li
390.302 18.6906 li
390.303 18.6906 li
390.304 18.6906 li
390.305 18.6906 li
390.306 18.6906 li
390.307 18.6906 li
390.308 18.6906 li
390.309 18.6906 li
390.31 18.6906 li
390.312 18.6906 li
390.314 18.6906 li
390.315 18.6906 li
390.316 18.6906 li
390.317 18.6906 li
390.318 18.6906 li
390.319 18.6906 li
390.32 18.6906 li
390.321 18.6906 li
390.323 18.6906 li
390.324 18.6906 li
390.325 18.6906 li
390.326 18.6906 li
390.327 18.6906 li
390.328 18.6906 li
390.329 18.6906 li
390.33 18.6906 li
390.331 18.6906 li
390.332 18.6906 li
390.334 18.6906 li
390.335 18.6906 li
390.336 18.6906 li
390.337 18.6906 li
390.338 18.6906 li
390.339 18.6906 li
390.34 18.6906 li
390.342 18.6906 li
390.343 18.6906 li
390.344 18.6906 li
390.346 18.6906 li
390.347 18.6906 li
390.348 18.6906 li
390.349 18.6906 li
390.35 18.6906 li
390.351 18.6906 li
390.352 18.6906 li
390.353 18.6906 li
390.354 18.6906 li
390.355 18.6906 li
390.356 18.6906 li
390.357 18.6906 li
390.358 18.6906 li
390.359 18.6906 li
390.36 18.6906 li
390.361 18.6906 li
390.362 18.6906 li
390.363 18.6906 li
390.364 18.6906 li
390.365 18.6906 li
390.366 18.6906 li
390.367 18.6906 li
390.368 18.6906 li
390.369 18.6906 li
390.37 18.6906 li
390.371 18.6906 li
390.372 18.6906 li
390.373 18.6906 li
390.374 18.6906 li
390.375 18.6906 li
390.376 18.6906 li
390.377 18.6906 li
390.378 18.6906 li
390.379 18.6906 li
390.38 18.6906 li
390.381 18.6906 li
390.382 18.6906 li
390.383 18.6906 li
390.384 18.6906 li
390.385 18.6906 li
390.386 18.6906 li
390.387 18.6906 li
390.388 18.6906 li
390.389 18.6906 li
390.39 18.6906 li
390.391 18.6906 li
390.392 18.6906 li
390.393 18.6906 li
390.394 18.6906 li
390.395 18.6906 li
390.396 18.6906 li
390.397 18.6906 li
390.398 18.6906 li
0 .990631 1 .000396735 cmyk
@
84.6171 39.4836 mo
85.9975 39.4836 87.1167 40.6027 87.1167 41.9836 cv
87.1167 43.3646 85.9975 44.4836 84.6171 44.4836 cv
83.2362 44.4836 82.1171 43.3646 82.1171 41.9836 cv
82.1171 40.6027 83.2362 39.4836 84.6171 39.4836 cv
cp
84.6171 38.4836 mo
82.6842 38.4836 81.1167 40.0516 81.1167 41.9836 cv
81.1167 43.9166 82.6842 45.4836 84.6171 45.4836 cv
86.5495 45.4836 88.1171 43.9166 88.1171 41.9836 cv
88.1171 40.0516 86.5495 38.4836 84.6171 38.4836 cv
f
104.629 38.6216 mo
106.009 38.6216 107.128 39.7406 107.128 41.1206 cv
107.128 42.5016 106.009 43.6206 104.629 43.6206 cv
103.248 43.6206 102.129 42.5016 102.129 41.1206 cv
102.129 39.7406 103.248 38.6216 104.629 38.6216 cv
cp
104.629 37.6206 mo
102.696 37.6206 101.128 39.1886 101.128 41.1206 cv
101.128 43.0536 102.696 44.6216 104.629 44.6216 cv
106.562 44.6216 108.129 43.0536 108.129 41.1206 cv
108.129 39.1886 106.562 37.6206 104.629 37.6206 cv
f
129.091 37.7586 mo
130.472 37.7586 131.591 38.8777 131.591 40.2586 cv
131.591 41.6386 130.472 42.7586 129.091 42.7586 cv
127.711 42.7586 126.592 41.6386 126.592 40.2586 cv
126.592 38.8777 127.711 37.7586 129.091 37.7586 cv
cp
129.091 36.7586 mo
127.159 36.7586 125.591 38.3257 125.591 40.2586 cv
125.591 42.1917 127.159 43.7586 129.091 43.7586 cv
131.024 43.7586 132.592 42.1917 132.592 40.2586 cv
132.592 38.3257 131.024 36.7586 129.091 36.7586 cv
f
141.477 36.8956 mo
142.858 36.8956 143.977 38.0146 143.977 39.3956 cv
143.977 40.7766 142.858 41.8956 141.477 41.8956 cv
140.096 41.8956 138.978 40.7766 138.978 39.3956 cv
138.978 38.0146 140.096 36.8956 141.477 36.8956 cv
cp
141.477 35.8956 mo
139.544 35.8956 137.977 37.4626 137.977 39.3956 cv
137.977 41.3286 139.544 42.8956 141.477 42.8956 cv
143.41 42.8956 144.978 41.3286 144.978 39.3956 cv
144.978 37.4626 143.41 35.8956 141.477 35.8956 cv
f
152.959 34.3076 mo
154.34 34.3076 155.459 35.4266 155.459 36.8076 cv
155.459 38.1886 154.34 39.3076 152.959 39.3076 cv
151.578 39.3076 150.459 38.1886 150.459 36.8076 cv
150.459 35.4266 151.578 34.3076 152.959 34.3076 cv
cp
152.959 33.3076 mo
151.026 33.3076 149.459 34.8746 149.459 36.8076 cv
149.459 38.7406 151.026 40.3076 152.959 40.3076 cv
154.892 40.3076 156.459 38.7406 156.459 36.8076 cv
156.459 34.8746 154.892 33.3076 152.959 33.3076 cv
f
163.437 34.3076 mo
164.818 34.3076 165.936 35.4266 165.936 36.8076 cv
165.936 38.1886 164.818 39.3076 163.437 39.3076 cv
162.056 39.3076 160.937 38.1886 160.937 36.8076 cv
160.937 35.4266 162.056 34.3076 163.437 34.3076 cv
cp
163.437 33.3076 mo
161.504 33.3076 159.936 34.8746 159.936 36.8076 cv
159.936 38.7406 161.504 40.3076 163.437 40.3076 cv
165.369 40.3076 166.937 38.7406 166.937 36.8076 cv
166.937 34.8746 165.369 33.3076 163.437 33.3076 cv
f
174.933 31.7196 mo
176.314 31.7196 177.433 32.8386 177.433 34.2196 cv
177.433 35.6006 176.314 36.7196 174.933 36.7196 cv
173.552 36.7196 172.433 35.6006 172.433 34.2196 cv
172.433 32.8386 173.552 31.7196 174.933 31.7196 cv
cp
174.933 30.7196 mo
173 30.7196 171.433 32.2866 171.433 34.2196 cv
171.433 36.1526 173 37.7196 174.933 37.7196 cv
176.866 37.7196 178.433 36.1526 178.433 34.2196 cv
178.433 32.2866 176.866 30.7196 174.933 30.7196 cv
f
184.828 30.8566 mo
186.208 30.8566 187.327 31.9767 187.327 33.3566 cv
187.327 34.7376 186.208 35.8566 184.828 35.8566 cv
183.447 35.8566 182.328 34.7376 182.328 33.3566 cv
182.328 31.9767 183.447 30.8566 184.828 30.8566 cv
cp
184.828 29.8566 mo
182.895 29.8566 181.327 31.4236 181.327 33.3566 cv
181.327 35.2896 182.895 36.8566 184.828 36.8566 cv
186.76 36.8566 188.328 35.2896 188.328 33.3566 cv
188.328 31.4236 186.76 29.8566 184.828 29.8566 cv
f
192.183 30.8566 mo
193.564 30.8566 194.683 31.9767 194.683 33.3566 cv
194.683 34.7376 193.564 35.8566 192.183 35.8566 cv
190.802 35.8566 189.683 34.7376 189.683 33.3566 cv
189.683 31.9767 190.802 30.8566 192.183 30.8566 cv
cp
192.183 29.8566 mo
190.25 29.8566 188.683 31.4236 188.683 33.3566 cv
188.683 35.2896 190.25 36.8566 192.183 36.8566 cv
194.116 36.8566 195.683 35.2896 195.683 33.3566 cv
195.683 31.4236 194.116 29.8566 192.183 29.8566 cv
f
198.787 29.1316 mo
200.168 29.1316 201.287 30.2506 201.287 31.6316 cv
201.287 33.0116 200.168 34.1316 198.787 34.1316 cv
197.407 34.1316 196.287 33.0116 196.287 31.6316 cv
196.287 30.2506 197.407 29.1316 198.787 29.1316 cv
cp
198.787 28.1316 mo
196.855 28.1316 195.287 29.6986 195.287 31.6316 cv
195.287 33.5636 196.855 35.1316 198.787 35.1316 cv
200.72 35.1316 202.287 33.5636 202.287 31.6316 cv
202.287 29.6986 200.72 28.1316 198.787 28.1316 cv
f
207.139 29.1316 mo
208.52 29.1316 209.639 30.2506 209.639 31.6316 cv
209.639 33.0116 208.52 34.1316 207.139 34.1316 cv
205.759 34.1316 204.639 33.0116 204.639 31.6316 cv
204.639 30.2506 205.759 29.1316 207.139 29.1316 cv
cp
207.139 28.1316 mo
205.207 28.1316 203.639 29.6986 203.639 31.6316 cv
203.639 33.5636 205.207 35.1316 207.139 35.1316 cv
209.072 35.1316 210.639 33.5636 210.639 31.6316 cv
210.639 29.6986 209.072 28.1316 207.139 28.1316 cv
f
213.829 28.2686 mo
215.21 28.2686 216.329 29.3876 216.329 30.7686 cv
216.329 32.1497 215.21 33.2686 213.829 33.2686 cv
212.448 33.2686 211.33 32.1497 211.33 30.7686 cv
211.33 29.3876 212.448 28.2686 213.829 28.2686 cv
cp
213.829 27.2686 mo
211.896 27.2686 210.329 28.8356 210.329 30.7686 cv
210.329 32.7017 211.896 34.2686 213.829 34.2686 cv
215.762 34.2686 217.33 32.7017 217.33 30.7686 cv
217.33 28.8356 215.762 27.2686 213.829 27.2686 cv
f
221.693 28.2686 mo
223.074 28.2686 224.193 29.3876 224.193 30.7686 cv
224.193 32.1497 223.074 33.2686 221.693 33.2686 cv
220.313 33.2686 219.194 32.1497 219.194 30.7686 cv
219.194 29.3876 220.313 28.2686 221.693 28.2686 cv
cp
221.693 27.2686 mo
219.761 27.2686 218.193 28.8356 218.193 30.7686 cv
218.193 32.7017 219.761 34.2686 221.693 34.2686 cv
223.626 34.2686 225.194 32.7017 225.194 30.7686 cv
225.194 28.8356 223.626 27.2686 221.693 27.2686 cv
f
227.255 27.4066 mo
228.636 27.4066 229.755 28.5247 229.755 29.9056 cv
229.755 31.2866 228.636 32.4056 227.255 32.4056 cv
225.874 32.4056 224.755 31.2866 224.755 29.9056 cv
224.755 28.5247 225.874 27.4066 227.255 27.4066 cv
cp
227.255 26.4056 mo
225.322 26.4056 223.755 27.9727 223.755 29.9056 cv
223.755 31.8386 225.322 33.4066 227.255 33.4066 cv
229.187 33.4066 230.755 31.8386 230.755 29.9056 cv
230.755 27.9727 229.187 26.4056 227.255 26.4056 cv
f
232.923 26.5436 mo
234.304 26.5436 235.423 27.6626 235.423 29.0436 cv
235.423 30.4236 234.304 31.5426 232.923 31.5426 cv
231.542 31.5426 230.423 30.4236 230.423 29.0436 cv
230.423 27.6626 231.542 26.5436 232.923 26.5436 cv
cp
232.923 25.5426 mo
230.99 25.5426 229.423 27.1106 229.423 29.0436 cv
229.423 30.9756 230.99 32.5436 232.923 32.5436 cv
234.856 32.5436 236.423 30.9756 236.423 29.0436 cv
236.423 27.1106 234.856 25.5426 232.923 25.5426 cv
f
237.922 26.5436 mo
239.303 26.5436 240.421 27.6626 240.421 29.0436 cv
240.421 30.4236 239.303 31.5426 237.922 31.5426 cv
236.541 31.5426 235.422 30.4236 235.422 29.0436 cv
235.422 27.6626 236.541 26.5436 237.922 26.5436 cv
cp
237.922 25.5426 mo
235.989 25.5426 234.421 27.1106 234.421 29.0436 cv
234.421 30.9756 235.989 32.5436 237.922 32.5436 cv
239.855 32.5436 241.422 30.9756 241.422 29.0436 cv
241.422 27.1106 239.855 25.5426 237.922 25.5426 cv
f
242.71 26.5436 mo
244.091 26.5436 245.21 27.6626 245.21 29.0436 cv
245.21 30.4236 244.091 31.5426 242.71 31.5426 cv
241.329 31.5426 240.211 30.4236 240.211 29.0436 cv
240.211 27.6626 241.329 26.5436 242.71 26.5436 cv
cp
242.71 25.5426 mo
240.777 25.5426 239.21 27.1106 239.21 29.0436 cv
239.21 30.9756 240.777 32.5436 242.71 32.5436 cv
244.643 32.5436 246.211 30.9756 246.211 29.0436 cv
246.211 27.1106 244.643 25.5426 242.71 25.5426 cv
f
247.181 26.5436 mo
248.562 26.5436 249.68 27.6626 249.68 29.0436 cv
249.68 30.4236 248.562 31.5426 247.181 31.5426 cv
245.8 31.5426 244.681 30.4236 244.681 29.0436 cv
244.681 27.6626 245.8 26.5436 247.181 26.5436 cv
cp
247.181 25.5426 mo
245.248 25.5426 243.68 27.1106 243.68 29.0436 cv
243.68 30.9756 245.248 32.5436 247.181 32.5436 cv
249.114 32.5436 250.681 30.9756 250.681 29.0436 cv
250.681 27.1106 249.114 25.5426 247.181 25.5426 cv
f
251.649 26.5436 mo
253.029 26.5436 254.148 27.6626 254.148 29.0436 cv
254.148 30.4236 253.029 31.5426 251.649 31.5426 cv
250.268 31.5426 249.149 30.4236 249.149 29.0436 cv
249.149 27.6626 250.268 26.5436 251.649 26.5436 cv
cp
251.649 25.5426 mo
249.716 25.5426 248.148 27.1106 248.148 29.0436 cv
248.148 30.9756 249.716 32.5436 251.649 32.5436 cv
253.581 32.5436 255.149 30.9756 255.149 29.0436 cv
255.149 27.1106 253.581 25.5426 251.649 25.5426 cv
f
256.055 25.6806 mo
257.436 25.6806 258.555 26.7997 258.555 28.1806 cv
258.555 29.5616 257.436 30.6796 256.055 30.6796 cv
254.674 30.6796 253.555 29.5616 253.555 28.1806 cv
253.555 26.7997 254.674 25.6806 256.055 25.6806 cv
cp
256.055 24.6796 mo
254.122 24.6796 252.555 26.2477 252.555 28.1806 cv
252.555 30.1136 254.122 31.6806 256.055 31.6806 cv
257.987 31.6806 259.555 30.1136 259.555 28.1806 cv
259.555 26.2477 257.987 24.6796 256.055 24.6796 cv
f
260.514 25.6806 mo
261.895 25.6806 263.014 26.7997 263.014 28.1806 cv
263.014 29.5616 261.895 30.6796 260.514 30.6796 cv
259.134 30.6796 258.015 29.5616 258.015 28.1806 cv
258.015 26.7997 259.134 25.6806 260.514 25.6806 cv
cp
260.514 24.6796 mo
258.582 24.6796 257.014 26.2477 257.014 28.1806 cv
257.014 30.1136 258.582 31.6806 260.514 31.6806 cv
262.447 31.6806 264.015 30.1136 264.015 28.1806 cv
264.015 26.2477 262.447 24.6796 260.514 24.6796 cv
f
264.538 25.6806 mo
265.918 25.6806 267.037 26.7997 267.037 28.1806 cv
267.037 29.5616 265.918 30.6796 264.538 30.6796 cv
263.157 30.6796 262.038 29.5616 262.038 28.1806 cv
262.038 26.7997 263.157 25.6806 264.538 25.6806 cv
cp
264.538 24.6796 mo
262.605 24.6796 261.037 26.2477 261.037 28.1806 cv
261.037 30.1136 262.605 31.6806 264.538 31.6806 cv
266.471 31.6806 268.038 30.1136 268.038 28.1806 cv
268.038 26.2477 266.471 24.6796 264.538 24.6796 cv
f
268.492 25.6806 mo
269.873 25.6806 270.992 26.7997 270.992 28.1806 cv
270.992 29.5616 269.873 30.6796 268.492 30.6796 cv
267.111 30.6796 265.993 29.5616 265.993 28.1806 cv
265.993 26.7997 267.111 25.6806 268.492 25.6806 cv
cp
268.492 24.6796 mo
266.559 24.6796 264.992 26.2477 264.992 28.1806 cv
264.992 30.1136 266.559 31.6806 268.492 31.6806 cv
270.425 31.6806 271.993 30.1136 271.993 28.1806 cv
271.993 26.2477 270.425 24.6796 268.492 24.6796 cv
f
272.297 25.6806 mo
273.678 25.6806 274.796 26.7997 274.796 28.1806 cv
274.796 29.5616 273.678 30.6796 272.297 30.6796 cv
270.916 30.6796 269.797 29.5616 269.797 28.1806 cv
269.797 26.7997 270.916 25.6806 272.297 25.6806 cv
cp
272.297 24.6796 mo
270.364 24.6796 268.796 26.2477 268.796 28.1806 cv
268.796 30.1136 270.364 31.6806 272.297 31.6806 cv
274.23 31.6806 275.797 30.1136 275.797 28.1806 cv
275.797 26.2477 274.23 24.6796 272.297 24.6796 cv
f
275.882 24.8176 mo
277.263 24.8176 278.382 25.9366 278.382 27.3176 cv
278.382 28.6986 277.263 29.8176 275.882 29.8176 cv
274.502 29.8176 273.383 28.6986 273.383 27.3176 cv
273.383 25.9366 274.502 24.8176 275.882 24.8176 cv
cp
275.882 23.8176 mo
273.95 23.8176 272.382 25.3856 272.382 27.3176 cv
272.382 29.2506 273.95 30.8176 275.882 30.8176 cv
277.815 30.8176 279.383 29.2506 279.383 27.3176 cv
279.383 25.3856 277.815 23.8176 275.882 23.8176 cv
f
279.878 24.8176 mo
281.259 24.8176 282.378 25.9366 282.378 27.3176 cv
282.378 28.6986 281.259 29.8176 279.878 29.8176 cv
278.497 29.8176 277.378 28.6986 277.378 27.3176 cv
277.378 25.9366 278.497 24.8176 279.878 24.8176 cv
cp
279.878 23.8176 mo
277.945 23.8176 276.378 25.3856 276.378 27.3176 cv
276.378 29.2506 277.945 30.8176 279.878 30.8176 cv
281.811 30.8176 283.378 29.2506 283.378 27.3176 cv
283.378 25.3856 281.811 23.8176 279.878 23.8176 cv
f
283.739 23.9556 mo
285.12 23.9556 286.239 25.0746 286.239 26.4546 cv
286.239 27.8356 285.12 28.9546 283.739 28.9546 cv
282.359 28.9546 281.239 27.8356 281.239 26.4546 cv
281.239 25.0746 282.359 23.9556 283.739 23.9556 cv
cp
283.739 22.9546 mo
281.807 22.9546 280.239 24.5226 280.239 26.4546 cv
280.239 28.3876 281.807 29.9556 283.739 29.9556 cv
285.672 29.9556 287.239 28.3876 287.239 26.4546 cv
287.239 24.5226 285.672 22.9546 283.739 22.9546 cv
f
287.437 23.0927 mo
288.818 23.0927 289.937 24.2116 289.937 25.5927 cv
289.937 26.9727 288.818 28.0927 287.437 28.0927 cv
286.057 28.0927 284.937 26.9727 284.937 25.5927 cv
284.937 24.2116 286.057 23.0927 287.437 23.0927 cv
cp
287.437 22.0927 mo
285.505 22.0927 283.937 23.6596 283.937 25.5927 cv
283.937 27.5247 285.505 29.0927 287.437 29.0927 cv
289.37 29.0927 290.937 27.5247 290.937 25.5927 cv
290.937 23.6596 289.37 22.0927 287.437 22.0927 cv
f
291.268 23.0927 mo
292.648 23.0927 293.767 24.2116 293.767 25.5927 cv
293.767 26.9727 292.648 28.0927 291.268 28.0927 cv
289.887 28.0927 288.768 26.9727 288.768 25.5927 cv
288.768 24.2116 289.887 23.0927 291.268 23.0927 cv
cp
291.268 22.0927 mo
289.335 22.0927 287.767 23.6596 287.767 25.5927 cv
287.767 27.5247 289.335 29.0927 291.268 29.0927 cv
293.2 29.0927 294.768 27.5247 294.768 25.5927 cv
294.768 23.6596 293.2 22.0927 291.268 22.0927 cv
f
294.97 22.2296 mo
296.351 22.2296 297.469 23.3486 297.469 24.7296 cv
297.469 26.1106 296.351 27.2296 294.97 27.2296 cv
293.589 27.2296 292.47 26.1106 292.47 24.7296 cv
292.47 23.3486 293.589 22.2296 294.97 22.2296 cv
cp
294.97 21.2296 mo
293.037 21.2296 291.469 22.7966 291.469 24.7296 cv
291.469 26.6626 293.037 28.2296 294.97 28.2296 cv
296.903 28.2296 298.47 26.6626 298.47 24.7296 cv
298.47 22.7966 296.903 21.2296 294.97 21.2296 cv
f
298.64 21.3676 mo
300.021 21.3676 301.14 22.4866 301.14 23.8666 cv
301.14 25.2477 300.021 26.3666 298.64 26.3666 cv
297.259 26.3666 296.14 25.2477 296.14 23.8666 cv
296.14 22.4866 297.259 21.3676 298.64 21.3676 cv
cp
298.64 20.3666 mo
296.707 20.3666 295.14 21.9336 295.14 23.8666 cv
295.14 25.7997 296.707 27.3676 298.64 27.3676 cv
300.573 27.3676 302.14 25.7997 302.14 23.8666 cv
302.14 21.9336 300.573 20.3666 298.64 20.3666 cv
f
302.01 19.6416 mo
303.39 19.6416 304.509 20.7606 304.509 22.1416 cv
304.509 23.5226 303.39 24.6416 302.01 24.6416 cv
300.629 24.6416 299.51 23.5226 299.51 22.1416 cv
299.51 20.7606 300.629 19.6416 302.01 19.6416 cv
cp
302.01 18.6416 mo
300.077 18.6416 298.509 20.2086 298.509 22.1416 cv
298.509 24.0746 300.077 25.6416 302.01 25.6416 cv
303.942 25.6416 305.51 24.0746 305.51 22.1416 cv
305.51 20.2086 303.942 18.6416 302.01 18.6416 cv
f
305.226 19.6416 mo
306.607 19.6416 307.726 20.7606 307.726 22.1416 cv
307.726 23.5226 306.607 24.6416 305.226 24.6416 cv
303.845 24.6416 302.727 23.5226 302.727 22.1416 cv
302.727 20.7606 303.845 19.6416 305.226 19.6416 cv
cp
305.226 18.6416 mo
303.293 18.6416 301.726 20.2086 301.726 22.1416 cv
301.726 24.0746 303.293 25.6416 305.226 25.6416 cv
307.159 25.6416 308.727 24.0746 308.727 22.1416 cv
308.727 20.2086 307.159 18.6416 305.226 18.6416 cv
f
308.519 19.6416 mo
309.899 19.6416 311.018 20.7606 311.018 22.1416 cv
311.018 23.5226 309.899 24.6416 308.519 24.6416 cv
307.138 24.6416 306.019 23.5226 306.019 22.1416 cv
306.019 20.7606 307.138 19.6416 308.519 19.6416 cv
cp
308.519 18.6416 mo
306.586 18.6416 305.018 20.2086 305.018 22.1416 cv
305.018 24.0746 306.586 25.6416 308.519 25.6416 cv
310.452 25.6416 312.019 24.0746 312.019 22.1416 cv
312.019 20.2086 310.452 18.6416 308.519 18.6416 cv
f
311.774 19.6416 mo
313.155 19.6416 314.273 20.7606 314.273 22.1416 cv
314.273 23.5226 313.155 24.6416 311.774 24.6416 cv
310.393 24.6416 309.274 23.5226 309.274 22.1416 cv
309.274 20.7606 310.393 19.6416 311.774 19.6416 cv
cp
311.774 18.6416 mo
309.841 18.6416 308.273 20.2086 308.273 22.1416 cv
308.273 24.0746 309.841 25.6416 311.774 25.6416 cv
313.707 25.6416 315.274 24.0746 315.274 22.1416 cv
315.274 20.2086 313.707 18.6416 311.774 18.6416 cv
f
314.795 19.6416 mo
316.176 19.6416 317.295 20.7606 317.295 22.1416 cv
317.295 23.5226 316.176 24.6416 314.795 24.6416 cv
313.414 24.6416 312.296 23.5226 312.296 22.1416 cv
312.296 20.7606 313.414 19.6416 314.795 19.6416 cv
cp
314.795 18.6416 mo
312.862 18.6416 311.295 20.2086 311.295 22.1416 cv
311.295 24.0746 312.862 25.6416 314.795 25.6416 cv
316.728 25.6416 318.296 24.0746 318.296 22.1416 cv
318.296 20.2086 316.728 18.6416 314.795 18.6416 cv
f
317.66 19.6416 mo
319.041 19.6416 320.159 20.7606 320.159 22.1416 cv
320.159 23.5226 319.041 24.6416 317.66 24.6416 cv
316.279 24.6416 315.16 23.5226 315.16 22.1416 cv
315.16 20.7606 316.279 19.6416 317.66 19.6416 cv
cp
317.66 18.6416 mo
315.727 18.6416 314.159 20.2086 314.159 22.1416 cv
314.159 24.0746 315.727 25.6416 317.66 25.6416 cv
319.593 25.6416 321.16 24.0746 321.16 22.1416 cv
321.16 20.2086 319.593 18.6416 317.66 18.6416 cv
f
320.596 19.6416 mo
321.977 19.6416 323.096 20.7606 323.096 22.1416 cv
323.096 23.5226 321.977 24.6416 320.596 24.6416 cv
319.215 24.6416 318.096 23.5226 318.096 22.1416 cv
318.096 20.7606 319.215 19.6416 320.596 19.6416 cv
cp
320.596 18.6416 mo
318.663 18.6416 317.096 20.2086 317.096 22.1416 cv
317.096 24.0746 318.663 25.6416 320.596 25.6416 cv
322.528 25.6416 324.096 24.0746 324.096 22.1416 cv
324.096 20.2086 322.528 18.6416 320.596 18.6416 cv
f
323.324 19.6416 mo
324.705 19.6416 325.823 20.7606 325.823 22.1416 cv
325.823 23.5226 324.705 24.6416 323.324 24.6416 cv
321.943 24.6416 320.824 23.5226 320.824 22.1416 cv
320.824 20.7606 321.943 19.6416 323.324 19.6416 cv
cp
323.324 18.6416 mo
321.391 18.6416 319.823 20.2086 319.823 22.1416 cv
319.823 24.0746 321.391 25.6416 323.324 25.6416 cv
325.257 25.6416 326.824 24.0746 326.824 22.1416 cv
326.824 20.2086 325.257 18.6416 323.324 18.6416 cv
f
326.144 19.6416 mo
327.525 19.6416 328.643 20.7606 328.643 22.1416 cv
328.643 23.5226 327.525 24.6416 326.144 24.6416 cv
324.763 24.6416 323.644 23.5226 323.644 22.1416 cv
323.644 20.7606 324.763 19.6416 326.144 19.6416 cv
cp
326.144 18.6416 mo
324.211 18.6416 322.643 20.2086 322.643 22.1416 cv
322.643 24.0746 324.211 25.6416 326.144 25.6416 cv
328.077 25.6416 329.644 24.0746 329.644 22.1416 cv
329.644 20.2086 328.077 18.6416 326.144 18.6416 cv
f
328.881 19.6416 mo
330.262 19.6416 331.381 20.7606 331.381 22.1416 cv
331.381 23.5226 330.262 24.6416 328.881 24.6416 cv
327.5 24.6416 326.382 23.5226 326.382 22.1416 cv
326.382 20.7606 327.5 19.6416 328.881 19.6416 cv
cp
328.881 18.6416 mo
326.948 18.6416 325.381 20.2086 325.381 22.1416 cv
325.381 24.0746 326.948 25.6416 328.881 25.6416 cv
330.814 25.6416 332.382 24.0746 332.382 22.1416 cv
332.382 20.2086 330.814 18.6416 328.881 18.6416 cv
f
331.696 19.6416 mo
333.077 19.6416 334.196 20.7606 334.196 22.1416 cv
334.196 23.5226 333.077 24.6416 331.696 24.6416 cv
330.316 24.6416 329.197 23.5226 329.197 22.1416 cv
329.197 20.7606 330.316 19.6416 331.696 19.6416 cv
cp
331.696 18.6416 mo
329.764 18.6416 328.196 20.2086 328.196 22.1416 cv
328.196 24.0746 329.764 25.6416 331.696 25.6416 cv
333.629 25.6416 335.197 24.0746 335.197 22.1416 cv
335.197 20.2086 333.629 18.6416 331.696 18.6416 cv
f
334.396 19.6416 mo
335.776 19.6416 336.895 20.7606 336.895 22.1416 cv
336.895 23.5226 335.776 24.6416 334.396 24.6416 cv
333.015 24.6416 331.896 23.5226 331.896 22.1416 cv
331.896 20.7606 333.015 19.6416 334.396 19.6416 cv
cp
334.396 18.6416 mo
332.463 18.6416 330.895 20.2086 330.895 22.1416 cv
330.895 24.0746 332.463 25.6416 334.396 25.6416 cv
336.328 25.6416 337.896 24.0746 337.896 22.1416 cv
337.896 20.2086 336.328 18.6416 334.396 18.6416 cv
f
337.084 18.7786 mo
338.464 18.7786 339.584 19.8976 339.584 21.2786 cv
339.584 22.6596 338.464 23.7786 337.084 23.7786 cv
335.703 23.7786 334.584 22.6596 334.584 21.2786 cv
334.584 19.8976 335.703 18.7786 337.084 18.7786 cv
cp
337.084 17.7786 mo
335.151 17.7786 333.584 19.3456 333.584 21.2786 cv
333.584 23.2116 335.151 24.7786 337.084 24.7786 cv
339.016 24.7786 340.584 23.2116 340.584 21.2786 cv
340.584 19.3456 339.016 17.7786 337.084 17.7786 cv
f
339.73 18.7786 mo
341.111 18.7786 342.229 19.8976 342.229 21.2786 cv
342.229 22.6596 341.111 23.7786 339.73 23.7786 cv
338.349 23.7786 337.23 22.6596 337.23 21.2786 cv
337.23 19.8976 338.349 18.7786 339.73 18.7786 cv
cp
339.73 17.7786 mo
337.797 17.7786 336.229 19.3456 336.229 21.2786 cv
336.229 23.2116 337.797 24.7786 339.73 24.7786 cv
341.662 24.7786 343.23 23.2116 343.23 21.2786 cv
343.23 19.3456 341.662 17.7786 339.73 17.7786 cv
f
342.415 18.7786 mo
343.796 18.7786 344.915 19.8976 344.915 21.2786 cv
344.915 22.6596 343.796 23.7786 342.415 23.7786 cv
341.034 23.7786 339.915 22.6596 339.915 21.2786 cv
339.915 19.8976 341.034 18.7786 342.415 18.7786 cv
cp
342.415 17.7786 mo
340.482 17.7786 338.915 19.3456 338.915 21.2786 cv
338.915 23.2116 340.482 24.7786 342.415 24.7786 cv
344.348 24.7786 345.915 23.2116 345.915 21.2786 cv
345.915 19.3456 344.348 17.7786 342.415 17.7786 cv
f
345.132 18.7786 mo
346.512 18.7786 347.632 19.8976 347.632 21.2786 cv
347.632 22.6596 346.512 23.7786 345.132 23.7786 cv
343.751 23.7786 342.632 22.6596 342.632 21.2786 cv
342.632 19.8976 343.751 18.7786 345.132 18.7786 cv
cp
345.132 17.7786 mo
343.199 17.7786 341.632 19.3456 341.632 21.2786 cv
341.632 23.2116 343.199 24.7786 345.132 24.7786 cv
347.064 24.7786 348.632 23.2116 348.632 21.2786 cv
348.632 19.3456 347.064 17.7786 345.132 17.7786 cv
f
347.805 18.7786 mo
349.186 18.7786 350.304 19.8976 350.304 21.2786 cv
350.304 22.6596 349.186 23.7786 347.805 23.7786 cv
346.424 23.7786 345.305 22.6596 345.305 21.2786 cv
345.305 19.8976 346.424 18.7786 347.805 18.7786 cv
cp
347.805 17.7786 mo
345.872 17.7786 344.304 19.3456 344.304 21.2786 cv
344.304 23.2116 345.872 24.7786 347.805 24.7786 cv
349.737 24.7786 351.305 23.2116 351.305 21.2786 cv
351.305 19.3456 349.737 17.7786 347.805 17.7786 cv
f
350.429 18.7786 mo
351.809 18.7786 352.928 19.8976 352.928 21.2786 cv
352.928 22.6596 351.809 23.7786 350.429 23.7786 cv
349.048 23.7786 347.929 22.6596 347.929 21.2786 cv
347.929 19.8976 349.048 18.7786 350.429 18.7786 cv
cp
350.429 17.7786 mo
348.496 17.7786 346.928 19.3456 346.928 21.2786 cv
346.928 23.2116 348.496 24.7786 350.429 24.7786 cv
352.361 24.7786 353.929 23.2116 353.929 21.2786 cv
353.929 19.3456 352.361 17.7786 350.429 17.7786 cv
f
352.945 18.7786 mo
354.326 18.7786 355.445 19.8976 355.445 21.2786 cv
355.445 22.6596 354.326 23.7786 352.945 23.7786 cv
351.564 23.7786 350.446 22.6596 350.446 21.2786 cv
350.446 19.8976 351.564 18.7786 352.945 18.7786 cv
cp
352.945 17.7786 mo
351.012 17.7786 349.445 19.3456 349.445 21.2786 cv
349.445 23.2116 351.012 24.7786 352.945 24.7786 cv
354.878 24.7786 356.446 23.2116 356.446 21.2786 cv
356.446 19.3456 354.878 17.7786 352.945 17.7786 cv
f
355.35 17.9166 mo
356.73 17.9166 357.849 19.0356 357.849 20.4156 cv
357.849 21.7966 356.73 22.9156 355.35 22.9156 cv
353.969 22.9156 352.85 21.7966 352.85 20.4156 cv
352.85 19.0356 353.969 17.9166 355.35 17.9166 cv
cp
355.35 16.9156 mo
353.417 16.9156 351.849 18.4836 351.849 20.4156 cv
351.849 22.3486 353.417 23.9166 355.35 23.9166 cv
357.282 23.9166 358.85 22.3486 358.85 20.4156 cv
358.85 18.4836 357.282 16.9156 355.35 16.9156 cv
f
357.675 17.9166 mo
359.056 17.9166 360.175 19.0356 360.175 20.4156 cv
360.175 21.7966 359.056 22.9156 357.675 22.9156 cv
356.294 22.9156 355.175 21.7966 355.175 20.4156 cv
355.175 19.0356 356.294 17.9166 357.675 17.9166 cv
cp
357.675 16.9156 mo
355.743 16.9156 354.175 18.4836 354.175 20.4156 cv
354.175 22.3486 355.743 23.9166 357.675 23.9166 cv
359.608 23.9166 361.175 22.3486 361.175 20.4156 cv
361.175 18.4836 359.608 16.9156 357.675 16.9156 cv
f
359.903 17.9166 mo
361.284 17.9166 362.403 19.0356 362.403 20.4156 cv
362.403 21.7966 361.284 22.9156 359.903 22.9156 cv
358.522 22.9156 357.403 21.7966 357.403 20.4156 cv
357.403 19.0356 358.522 17.9166 359.903 17.9166 cv
cp
359.903 16.9156 mo
357.97 16.9156 356.403 18.4836 356.403 20.4156 cv
356.403 22.3486 357.97 23.9166 359.903 23.9166 cv
361.836 23.9166 363.403 22.3486 363.403 20.4156 cv
363.403 18.4836 361.836 16.9156 359.903 16.9156 cv
f
362.03 17.9166 mo
363.411 17.9166 364.53 19.0356 364.53 20.4156 cv
364.53 21.7966 363.411 22.9156 362.03 22.9156 cv
360.65 22.9156 359.53 21.7966 359.53 20.4156 cv
359.53 19.0356 360.65 17.9166 362.03 17.9166 cv
cp
362.03 16.9156 mo
360.098 16.9156 358.53 18.4836 358.53 20.4156 cv
358.53 22.3486 360.098 23.9166 362.03 23.9166 cv
363.963 23.9166 365.53 22.3486 365.53 20.4156 cv
365.53 18.4836 363.963 16.9156 362.03 16.9156 cv
f
364.066 17.9166 mo
365.447 17.9166 366.566 19.0356 366.566 20.4156 cv
366.566 21.7966 365.447 22.9156 364.066 22.9156 cv
362.686 22.9156 361.567 21.7966 361.567 20.4156 cv
361.567 19.0356 362.686 17.9166 364.066 17.9166 cv
cp
364.066 16.9156 mo
362.134 16.9156 360.566 18.4836 360.566 20.4156 cv
360.566 22.3486 362.134 23.9166 364.066 23.9166 cv
365.999 23.9166 367.567 22.3486 367.567 20.4156 cv
367.567 18.4836 365.999 16.9156 364.066 16.9156 cv
f
365.967 17.9166 mo
367.348 17.9166 368.467 19.0356 368.467 20.4156 cv
368.467 21.7966 367.348 22.9156 365.967 22.9156 cv
364.587 22.9156 363.468 21.7966 363.468 20.4156 cv
363.468 19.0356 364.587 17.9166 365.967 17.9166 cv
cp
365.967 16.9156 mo
364.035 16.9156 362.467 18.4836 362.467 20.4156 cv
362.467 22.3486 364.035 23.9166 365.967 23.9166 cv
367.9 23.9166 369.468 22.3486 369.468 20.4156 cv
369.468 18.4836 367.9 16.9156 365.967 16.9156 cv
f
367.791 17.0536 mo
369.172 17.0536 370.291 18.1726 370.291 19.5536 cv
370.291 20.9336 369.172 22.0526 367.791 22.0526 cv
366.411 22.0526 365.292 20.9336 365.292 19.5536 cv
365.292 18.1726 366.411 17.0536 367.791 17.0536 cv
cp
367.791 16.0526 mo
365.859 16.0526 364.291 17.6206 364.291 19.5536 cv
364.291 21.4856 365.859 23.0536 367.791 23.0536 cv
369.724 23.0536 371.292 21.4856 371.292 19.5536 cv
371.292 17.6206 369.724 16.0526 367.791 16.0526 cv
f
369.521 17.0536 mo
370.902 17.0536 372.021 18.1726 372.021 19.5536 cv
372.021 20.9336 370.902 22.0526 369.521 22.0526 cv
368.14 22.0526 367.021 20.9336 367.021 19.5536 cv
367.021 18.1726 368.14 17.0536 369.521 17.0536 cv
cp
369.521 16.0526 mo
367.588 16.0526 366.021 17.6206 366.021 19.5536 cv
366.021 21.4856 367.588 23.0536 369.521 23.0536 cv
371.454 23.0536 373.021 21.4856 373.021 19.5536 cv
373.021 17.6206 371.454 16.0526 369.521 16.0526 cv
f
371.176 17.0536 mo
372.557 17.0536 373.676 18.1726 373.676 19.5536 cv
373.676 20.9336 372.557 22.0526 371.176 22.0526 cv
369.795 22.0526 368.677 20.9336 368.677 19.5536 cv
368.677 18.1726 369.795 17.0536 371.176 17.0536 cv
cp
371.176 16.0526 mo
369.243 16.0526 367.676 17.6206 367.676 19.5536 cv
367.676 21.4856 369.243 23.0536 371.176 23.0536 cv
373.109 23.0536 374.677 21.4856 374.677 19.5536 cv
374.677 17.6206 373.109 16.0526 371.176 16.0526 cv
f
372.684 17.0536 mo
374.065 17.0536 375.184 18.1726 375.184 19.5536 cv
375.184 20.9336 374.065 22.0526 372.684 22.0526 cv
371.304 22.0526 370.185 20.9336 370.185 19.5536 cv
370.185 18.1726 371.304 17.0536 372.684 17.0536 cv
cp
372.684 16.0526 mo
370.752 16.0526 369.184 17.6206 369.184 19.5536 cv
369.184 21.4856 370.752 23.0536 372.684 23.0536 cv
374.617 23.0536 376.185 21.4856 376.185 19.5536 cv
376.185 17.6206 374.617 16.0526 372.684 16.0526 cv
f
374.108 17.0536 mo
375.489 17.0536 376.608 18.1726 376.608 19.5536 cv
376.608 20.9336 375.489 22.0526 374.108 22.0526 cv
372.727 22.0526 371.609 20.9336 371.609 19.5536 cv
371.609 18.1726 372.727 17.0536 374.108 17.0536 cv
cp
374.108 16.0526 mo
372.175 16.0526 370.608 17.6206 370.608 19.5536 cv
370.608 21.4856 372.175 23.0536 374.108 23.0536 cv
376.041 23.0536 377.609 21.4856 377.609 19.5536 cv
377.609 17.6206 376.041 16.0526 374.108 16.0526 cv
f
375.422 17.0536 mo
376.803 17.0536 377.921 18.1726 377.921 19.5536 cv
377.921 20.9336 376.803 22.0526 375.422 22.0526 cv
374.041 22.0526 372.922 20.9336 372.922 19.5536 cv
372.922 18.1726 374.041 17.0536 375.422 17.0536 cv
cp
375.422 16.0526 mo
373.489 16.0526 371.921 17.6206 371.921 19.5536 cv
371.921 21.4856 373.489 23.0536 375.422 23.0536 cv
377.355 23.0536 378.922 21.4856 378.922 19.5536 cv
378.922 17.6206 377.355 16.0526 375.422 16.0526 cv
f
376.684 16.1906 mo
378.065 16.1906 379.184 17.3096 379.184 18.6906 cv
379.184 20.0717 378.065 21.1906 376.684 21.1906 cv
375.303 21.1906 374.184 20.0717 374.184 18.6906 cv
374.184 17.3096 375.303 16.1906 376.684 16.1906 cv
cp
376.684 15.1906 mo
374.752 15.1906 373.184 16.7576 373.184 18.6906 cv
373.184 20.6237 374.752 22.1906 376.684 22.1906 cv
378.617 22.1906 380.184 20.6237 380.184 18.6906 cv
380.184 16.7576 378.617 15.1906 376.684 15.1906 cv
f
377.836 16.1906 mo
379.217 16.1906 380.336 17.3096 380.336 18.6906 cv
380.336 20.0717 379.217 21.1906 377.836 21.1906 cv
376.455 21.1906 375.337 20.0717 375.337 18.6906 cv
375.337 17.3096 376.455 16.1906 377.836 16.1906 cv
cp
377.836 15.1906 mo
375.903 15.1906 374.336 16.7576 374.336 18.6906 cv
374.336 20.6237 375.903 22.1906 377.836 22.1906 cv
379.769 22.1906 381.337 20.6237 381.337 18.6906 cv
381.337 16.7576 379.769 15.1906 377.836 15.1906 cv
f
378.9 16.1906 mo
380.281 16.1906 381.4 17.3096 381.4 18.6906 cv
381.4 20.0717 380.281 21.1906 378.9 21.1906 cv
377.519 21.1906 376.4 20.0717 376.4 18.6906 cv
376.4 17.3096 377.519 16.1906 378.9 16.1906 cv
cp
378.9 15.1906 mo
376.967 15.1906 375.4 16.7576 375.4 18.6906 cv
375.4 20.6237 376.967 22.1906 378.9 22.1906 cv
380.833 22.1906 382.4 20.6237 382.4 18.6906 cv
382.4 16.7576 380.833 15.1906 378.9 15.1906 cv
f
379.876 16.1906 mo
381.257 16.1906 382.376 17.3096 382.376 18.6906 cv
382.376 20.0717 381.257 21.1906 379.876 21.1906 cv
378.496 21.1906 377.377 20.0717 377.377 18.6906 cv
377.377 17.3096 378.496 16.1906 379.876 16.1906 cv
cp
379.876 15.1906 mo
377.944 15.1906 376.376 16.7576 376.376 18.6906 cv
376.376 20.6237 377.944 22.1906 379.876 22.1906 cv
381.809 22.1906 383.377 20.6237 383.377 18.6906 cv
383.377 16.7576 381.809 15.1906 379.876 15.1906 cv
f
380.784 16.1906 mo
382.165 16.1906 383.284 17.3096 383.284 18.6906 cv
383.284 20.0717 382.165 21.1906 380.784 21.1906 cv
379.403 21.1906 378.284 20.0717 378.284 18.6906 cv
378.284 17.3096 379.403 16.1906 380.784 16.1906 cv
cp
380.784 15.1906 mo
378.852 15.1906 377.284 16.7576 377.284 18.6906 cv
377.284 20.6237 378.852 22.1906 380.784 22.1906 cv
382.717 22.1906 384.284 20.6237 384.284 18.6906 cv
384.284 16.7576 382.717 15.1906 380.784 15.1906 cv
f
381.632 16.1906 mo
383.012 16.1906 384.132 17.3096 384.132 18.6906 cv
384.132 20.0717 383.012 21.1906 381.632 21.1906 cv
380.251 21.1906 379.132 20.0717 379.132 18.6906 cv
379.132 17.3096 380.251 16.1906 381.632 16.1906 cv
cp
381.632 15.1906 mo
379.699 15.1906 378.132 16.7576 378.132 18.6906 cv
378.132 20.6237 379.699 22.1906 381.632 22.1906 cv
383.564 22.1906 385.132 20.6237 385.132 18.6906 cv
385.132 16.7576 383.564 15.1906 381.632 15.1906 cv
f
382.418 16.1906 mo
383.798 16.1906 384.918 17.3096 384.918 18.6906 cv
384.918 20.0717 383.798 21.1906 382.418 21.1906 cv
381.037 21.1906 379.918 20.0717 379.918 18.6906 cv
379.918 17.3096 381.037 16.1906 382.418 16.1906 cv
cp
382.418 15.1906 mo
380.485 15.1906 378.918 16.7576 378.918 18.6906 cv
378.918 20.6237 380.485 22.1906 382.418 22.1906 cv
384.35 22.1906 385.918 20.6237 385.918 18.6906 cv
385.918 16.7576 384.35 15.1906 382.418 15.1906 cv
f
383.127 16.1906 mo
384.508 16.1906 385.627 17.3096 385.627 18.6906 cv
385.627 20.0717 384.508 21.1906 383.127 21.1906 cv
381.747 21.1906 380.628 20.0717 380.628 18.6906 cv
380.628 17.3096 381.747 16.1906 383.127 16.1906 cv
cp
383.127 15.1906 mo
381.194 15.1906 379.627 16.7576 379.627 18.6906 cv
379.627 20.6237 381.194 22.1906 383.127 22.1906 cv
385.06 22.1906 386.628 20.6237 386.628 18.6906 cv
386.628 16.7576 385.06 15.1906 383.127 15.1906 cv
f
383.766 16.1906 mo
385.146 16.1906 386.266 17.3096 386.266 18.6906 cv
386.266 20.0717 385.146 21.1906 383.766 21.1906 cv
382.385 21.1906 381.266 20.0717 381.266 18.6906 cv
381.266 17.3096 382.385 16.1906 383.766 16.1906 cv
cp
383.766 15.1906 mo
381.833 15.1906 380.266 16.7576 380.266 18.6906 cv
380.266 20.6237 381.833 22.1906 383.766 22.1906 cv
385.698 22.1906 387.266 20.6237 387.266 18.6906 cv
387.266 16.7576 385.698 15.1906 383.766 15.1906 cv
f
384.362 16.1906 mo
385.742 16.1906 386.861 17.3096 386.861 18.6906 cv
386.861 20.0717 385.742 21.1906 384.362 21.1906 cv
382.981 21.1906 381.862 20.0717 381.862 18.6906 cv
381.862 17.3096 382.981 16.1906 384.362 16.1906 cv
cp
384.362 15.1906 mo
382.429 15.1906 380.861 16.7576 380.861 18.6906 cv
380.861 20.6237 382.429 22.1906 384.362 22.1906 cv
386.294 22.1906 387.862 20.6237 387.862 18.6906 cv
387.862 16.7576 386.294 15.1906 384.362 15.1906 cv
f
384.887 16.1906 mo
386.268 16.1906 387.387 17.3096 387.387 18.6906 cv
387.387 20.0717 386.268 21.1906 384.887 21.1906 cv
383.507 21.1906 382.387 20.0717 382.387 18.6906 cv
382.387 17.3096 383.507 16.1906 384.887 16.1906 cv
cp
384.887 15.1906 mo
382.955 15.1906 381.387 16.7576 381.387 18.6906 cv
381.387 20.6237 382.955 22.1906 384.887 22.1906 cv
386.82 22.1906 388.387 20.6237 388.387 18.6906 cv
388.387 16.7576 386.82 15.1906 384.887 15.1906 cv
f
385.378 16.1906 mo
386.759 16.1906 387.877 17.3096 387.877 18.6906 cv
387.877 20.0717 386.759 21.1906 385.378 21.1906 cv
383.997 21.1906 382.878 20.0717 382.878 18.6906 cv
382.878 17.3096 383.997 16.1906 385.378 16.1906 cv
cp
385.378 15.1906 mo
383.445 15.1906 381.877 16.7576 381.877 18.6906 cv
381.877 20.6237 383.445 22.1906 385.378 22.1906 cv
387.311 22.1906 388.878 20.6237 388.878 18.6906 cv
388.878 16.7576 387.311 15.1906 385.378 15.1906 cv
f
385.814 16.1906 mo
387.195 16.1906 388.314 17.3096 388.314 18.6906 cv
388.314 20.0717 387.195 21.1906 385.814 21.1906 cv
384.434 21.1906 383.315 20.0717 383.315 18.6906 cv
383.315 17.3096 384.434 16.1906 385.814 16.1906 cv
cp
385.814 15.1906 mo
383.882 15.1906 382.314 16.7576 382.314 18.6906 cv
382.314 20.6237 383.882 22.1906 385.814 22.1906 cv
387.747 22.1906 389.315 20.6237 389.315 18.6906 cv
389.315 16.7576 387.747 15.1906 385.814 15.1906 cv
f
386.215 16.1906 mo
387.595 16.1906 388.714 17.3096 388.714 18.6906 cv
388.714 20.0717 387.595 21.1906 386.215 21.1906 cv
384.834 21.1906 383.715 20.0717 383.715 18.6906 cv
383.715 17.3096 384.834 16.1906 386.215 16.1906 cv
cp
386.215 15.1906 mo
384.282 15.1906 382.714 16.7576 382.714 18.6906 cv
382.714 20.6237 384.282 22.1906 386.215 22.1906 cv
388.147 22.1906 389.715 20.6237 389.715 18.6906 cv
389.715 16.7576 388.147 15.1906 386.215 15.1906 cv
f
386.578 16.1906 mo
387.959 16.1906 389.078 17.3096 389.078 18.6906 cv
389.078 20.0717 387.959 21.1906 386.578 21.1906 cv
385.198 21.1906 384.078 20.0717 384.078 18.6906 cv
384.078 17.3096 385.198 16.1906 386.578 16.1906 cv
cp
386.578 15.1906 mo
384.646 15.1906 383.078 16.7576 383.078 18.6906 cv
383.078 20.6237 384.646 22.1906 386.578 22.1906 cv
388.511 22.1906 390.078 20.6237 390.078 18.6906 cv
390.078 16.7576 388.511 15.1906 386.578 15.1906 cv
f
386.919 16.1906 mo
388.3 16.1906 389.419 17.3096 389.419 18.6906 cv
389.419 20.0717 388.3 21.1906 386.919 21.1906 cv
385.539 21.1906 384.42 20.0717 384.42 18.6906 cv
384.42 17.3096 385.539 16.1906 386.919 16.1906 cv
cp
386.919 15.1906 mo
384.987 15.1906 383.419 16.7576 383.419 18.6906 cv
383.419 20.6237 384.987 22.1906 386.919 22.1906 cv
388.852 22.1906 390.42 20.6237 390.42 18.6906 cv
390.42 16.7576 388.852 15.1906 386.919 15.1906 cv
f
387.23 16.1906 mo
388.611 16.1906 389.73 17.3096 389.73 18.6906 cv
389.73 20.0717 388.611 21.1906 387.23 21.1906 cv
385.849 21.1906 384.73 20.0717 384.73 18.6906 cv
384.73 17.3096 385.849 16.1906 387.23 16.1906 cv
cp
387.23 15.1906 mo
385.297 15.1906 383.73 16.7576 383.73 18.6906 cv
383.73 20.6237 385.297 22.1906 387.23 22.1906 cv
389.162 22.1906 390.73 20.6237 390.73 18.6906 cv
390.73 16.7576 389.162 15.1906 387.23 15.1906 cv
f
387.509 16.1906 mo
388.889 16.1906 390.009 17.3096 390.009 18.6906 cv
390.009 20.0717 388.889 21.1906 387.509 21.1906 cv
386.128 21.1906 385.009 20.0717 385.009 18.6906 cv
385.009 17.3096 386.128 16.1906 387.509 16.1906 cv
cp
387.509 15.1906 mo
385.576 15.1906 384.009 16.7576 384.009 18.6906 cv
384.009 20.6237 385.576 22.1906 387.509 22.1906 cv
389.441 22.1906 391.009 20.6237 391.009 18.6906 cv
391.009 16.7576 389.441 15.1906 387.509 15.1906 cv
f
387.761 16.1906 mo
389.141 16.1906 390.261 17.3096 390.261 18.6906 cv
390.261 20.0717 389.141 21.1906 387.761 21.1906 cv
386.38 21.1906 385.261 20.0717 385.261 18.6906 cv
385.261 17.3096 386.38 16.1906 387.761 16.1906 cv
cp
387.761 15.1906 mo
385.828 15.1906 384.261 16.7576 384.261 18.6906 cv
384.261 20.6237 385.828 22.1906 387.761 22.1906 cv
389.693 22.1906 391.261 20.6237 391.261 18.6906 cv
391.261 16.7576 389.693 15.1906 387.761 15.1906 cv
f
388.003 16.1906 mo
389.383 16.1906 390.502 17.3096 390.502 18.6906 cv
390.502 20.0717 389.383 21.1906 388.003 21.1906 cv
386.622 21.1906 385.503 20.0717 385.503 18.6906 cv
385.503 17.3096 386.622 16.1906 388.003 16.1906 cv
cp
388.003 15.1906 mo
386.07 15.1906 384.502 16.7576 384.502 18.6906 cv
384.502 20.6237 386.07 22.1906 388.003 22.1906 cv
389.935 22.1906 391.503 20.6237 391.503 18.6906 cv
391.503 16.7576 389.935 15.1906 388.003 15.1906 cv
f
388.201 16.1906 mo
389.582 16.1906 390.701 17.3096 390.701 18.6906 cv
390.701 20.0717 389.582 21.1906 388.201 21.1906 cv
386.82 21.1906 385.701 20.0717 385.701 18.6906 cv
385.701 17.3096 386.82 16.1906 388.201 16.1906 cv
cp
388.201 15.1906 mo
386.268 15.1906 384.701 16.7576 384.701 18.6906 cv
384.701 20.6237 386.268 22.1906 388.201 22.1906 cv
390.134 22.1906 391.701 20.6237 391.701 18.6906 cv
391.701 16.7576 390.134 15.1906 388.201 15.1906 cv
f
388.395 16.1906 mo
389.776 16.1906 390.894 17.3096 390.894 18.6906 cv
390.894 20.0717 389.776 21.1906 388.395 21.1906 cv
387.014 21.1906 385.895 20.0717 385.895 18.6906 cv
385.895 17.3096 387.014 16.1906 388.395 16.1906 cv
cp
388.395 15.1906 mo
386.462 15.1906 384.894 16.7576 384.894 18.6906 cv
384.894 20.6237 386.462 22.1906 388.395 22.1906 cv
390.328 22.1906 391.895 20.6237 391.895 18.6906 cv
391.895 16.7576 390.328 15.1906 388.395 15.1906 cv
f
388.571 16.1906 mo
389.952 16.1906 391.071 17.3096 391.071 18.6906 cv
391.071 20.0717 389.952 21.1906 388.571 21.1906 cv
387.191 21.1906 386.071 20.0717 386.071 18.6906 cv
386.071 17.3096 387.191 16.1906 388.571 16.1906 cv
cp
388.571 15.1906 mo
386.639 15.1906 385.071 16.7576 385.071 18.6906 cv
385.071 20.6237 386.639 22.1906 388.571 22.1906 cv
390.504 22.1906 392.071 20.6237 392.071 18.6906 cv
392.071 16.7576 390.504 15.1906 388.571 15.1906 cv
f
388.731 16.1906 mo
390.112 16.1906 391.231 17.3096 391.231 18.6906 cv
391.231 20.0717 390.112 21.1906 388.731 21.1906 cv
387.351 21.1906 386.232 20.0717 386.232 18.6906 cv
386.232 17.3096 387.351 16.1906 388.731 16.1906 cv
cp
388.731 15.1906 mo
386.799 15.1906 385.231 16.7576 385.231 18.6906 cv
385.231 20.6237 386.799 22.1906 388.731 22.1906 cv
390.664 22.1906 392.232 20.6237 392.232 18.6906 cv
392.232 16.7576 390.664 15.1906 388.731 15.1906 cv
f
388.884 16.1906 mo
390.265 16.1906 391.384 17.3096 391.384 18.6906 cv
391.384 20.0717 390.265 21.1906 388.884 21.1906 cv
387.504 21.1906 386.385 20.0717 386.385 18.6906 cv
386.385 17.3096 387.504 16.1906 388.884 16.1906 cv
cp
388.884 15.1906 mo
386.952 15.1906 385.384 16.7576 385.384 18.6906 cv
385.384 20.6237 386.952 22.1906 388.884 22.1906 cv
390.817 22.1906 392.385 20.6237 392.385 18.6906 cv
392.385 16.7576 390.817 15.1906 388.884 15.1906 cv
f
389.024 16.1906 mo
390.405 16.1906 391.523 17.3096 391.523 18.6906 cv
391.523 20.0717 390.405 21.1906 389.024 21.1906 cv
387.643 21.1906 386.524 20.0717 386.524 18.6906 cv
386.524 17.3096 387.643 16.1906 389.024 16.1906 cv
cp
389.024 15.1906 mo
387.091 15.1906 385.523 16.7576 385.523 18.6906 cv
385.523 20.6237 387.091 22.1906 389.024 22.1906 cv
390.957 22.1906 392.524 20.6237 392.524 18.6906 cv
392.524 16.7576 390.957 15.1906 389.024 15.1906 cv
f
389.148 16.1906 mo
390.529 16.1906 391.648 17.3096 391.648 18.6906 cv
391.648 20.0717 390.529 21.1906 389.148 21.1906 cv
387.768 21.1906 386.649 20.0717 386.649 18.6906 cv
386.649 17.3096 387.768 16.1906 389.148 16.1906 cv
cp
389.148 15.1906 mo
387.216 15.1906 385.648 16.7576 385.648 18.6906 cv
385.648 20.6237 387.216 22.1906 389.148 22.1906 cv
391.081 22.1906 392.649 20.6237 392.649 18.6906 cv
392.649 16.7576 391.081 15.1906 389.148 15.1906 cv
f
389.268 16.1906 mo
390.649 16.1906 391.768 17.3096 391.768 18.6906 cv
391.768 20.0717 390.649 21.1906 389.268 21.1906 cv
387.888 21.1906 386.769 20.0717 386.769 18.6906 cv
386.769 17.3096 387.888 16.1906 389.268 16.1906 cv
cp
389.268 15.1906 mo
387.336 15.1906 385.768 16.7576 385.768 18.6906 cv
385.768 20.6237 387.336 22.1906 389.268 22.1906 cv
391.201 22.1906 392.769 20.6237 392.769 18.6906 cv
392.769 16.7576 391.201 15.1906 389.268 15.1906 cv
f
389.369 16.1906 mo
390.75 16.1906 391.868 17.3096 391.868 18.6906 cv
391.868 20.0717 390.75 21.1906 389.369 21.1906 cv
387.988 21.1906 386.869 20.0717 386.869 18.6906 cv
386.869 17.3096 387.988 16.1906 389.369 16.1906 cv
cp
389.369 15.1906 mo
387.436 15.1906 385.868 16.7576 385.868 18.6906 cv
385.868 20.6237 387.436 22.1906 389.369 22.1906 cv
391.302 22.1906 392.869 20.6237 392.869 18.6906 cv
392.869 16.7576 391.302 15.1906 389.369 15.1906 cv
f
389.459 16.1906 mo
390.84 16.1906 391.959 17.3096 391.959 18.6906 cv
391.959 20.0717 390.84 21.1906 389.459 21.1906 cv
388.078 21.1906 386.959 20.0717 386.959 18.6906 cv
386.959 17.3096 388.078 16.1906 389.459 16.1906 cv
cp
389.459 15.1906 mo
387.526 15.1906 385.959 16.7576 385.959 18.6906 cv
385.959 20.6237 387.526 22.1906 389.459 22.1906 cv
391.392 22.1906 392.959 20.6237 392.959 18.6906 cv
392.959 16.7576 391.392 15.1906 389.459 15.1906 cv
f
389.546 16.1906 mo
390.926 16.1906 392.045 17.3096 392.045 18.6906 cv
392.045 20.0717 390.926 21.1906 389.546 21.1906 cv
388.165 21.1906 387.046 20.0717 387.046 18.6906 cv
387.046 17.3096 388.165 16.1906 389.546 16.1906 cv
cp
389.546 15.1906 mo
387.613 15.1906 386.045 16.7576 386.045 18.6906 cv
386.045 20.6237 387.613 22.1906 389.546 22.1906 cv
391.478 22.1906 393.046 20.6237 393.046 18.6906 cv
393.046 16.7576 391.478 15.1906 389.546 15.1906 cv
f
389.621 16.1906 mo
391.002 16.1906 392.121 17.3096 392.121 18.6906 cv
392.121 20.0717 391.002 21.1906 389.621 21.1906 cv
388.241 21.1906 387.121 20.0717 387.121 18.6906 cv
387.121 17.3096 388.241 16.1906 389.621 16.1906 cv
cp
389.621 15.1906 mo
387.689 15.1906 386.121 16.7576 386.121 18.6906 cv
386.121 20.6237 387.689 22.1906 389.621 22.1906 cv
391.554 22.1906 393.121 20.6237 393.121 18.6906 cv
393.121 16.7576 391.554 15.1906 389.621 15.1906 cv
f
389.693 16.1906 mo
391.074 16.1906 392.193 17.3096 392.193 18.6906 cv
392.193 20.0717 391.074 21.1906 389.693 21.1906 cv
388.312 21.1906 387.194 20.0717 387.194 18.6906 cv
387.194 17.3096 388.312 16.1906 389.693 16.1906 cv
cp
389.693 15.1906 mo
387.761 15.1906 386.193 16.7576 386.193 18.6906 cv
386.193 20.6237 387.761 22.1906 389.693 22.1906 cv
391.626 22.1906 393.194 20.6237 393.194 18.6906 cv
393.194 16.7576 391.626 15.1906 389.693 15.1906 cv
f
389.759 16.1906 mo
391.139 16.1906 392.259 17.3096 392.259 18.6906 cv
392.259 20.0717 391.139 21.1906 389.759 21.1906 cv
388.378 21.1906 387.259 20.0717 387.259 18.6906 cv
387.259 17.3096 388.378 16.1906 389.759 16.1906 cv
cp
389.759 15.1906 mo
387.826 15.1906 386.259 16.7576 386.259 18.6906 cv
386.259 20.6237 387.826 22.1906 389.759 22.1906 cv
391.691 22.1906 393.259 20.6237 393.259 18.6906 cv
393.259 16.7576 391.691 15.1906 389.759 15.1906 cv
f
389.814 16.1906 mo
391.195 16.1906 392.314 17.3096 392.314 18.6906 cv
392.314 20.0717 391.195 21.1906 389.814 21.1906 cv
388.434 21.1906 387.314 20.0717 387.314 18.6906 cv
387.314 17.3096 388.434 16.1906 389.814 16.1906 cv
cp
389.814 15.1906 mo
387.882 15.1906 386.314 16.7576 386.314 18.6906 cv
386.314 20.6237 387.882 22.1906 389.814 22.1906 cv
391.747 22.1906 393.314 20.6237 393.314 18.6906 cv
393.314 16.7576 391.747 15.1906 389.814 15.1906 cv
f
389.864 16.1906 mo
391.245 16.1906 392.364 17.3096 392.364 18.6906 cv
392.364 20.0717 391.245 21.1906 389.864 21.1906 cv
388.483 21.1906 387.364 20.0717 387.364 18.6906 cv
387.364 17.3096 388.483 16.1906 389.864 16.1906 cv
cp
389.864 15.1906 mo
387.931 15.1906 386.364 16.7576 386.364 18.6906 cv
386.364 20.6237 387.931 22.1906 389.864 22.1906 cv
391.797 22.1906 393.364 20.6237 393.364 18.6906 cv
393.364 16.7576 391.797 15.1906 389.864 15.1906 cv
f
389.914 16.1906 mo
391.295 16.1906 392.414 17.3096 392.414 18.6906 cv
392.414 20.0717 391.295 21.1906 389.914 21.1906 cv
388.534 21.1906 387.414 20.0717 387.414 18.6906 cv
387.414 17.3096 388.534 16.1906 389.914 16.1906 cv
cp
389.914 15.1906 mo
387.982 15.1906 386.414 16.7576 386.414 18.6906 cv
386.414 20.6237 387.982 22.1906 389.914 22.1906 cv
391.847 22.1906 393.414 20.6237 393.414 18.6906 cv
393.414 16.7576 391.847 15.1906 389.914 15.1906 cv
f
389.961 16.1906 mo
391.342 16.1906 392.461 17.3096 392.461 18.6906 cv
392.461 20.0717 391.342 21.1906 389.961 21.1906 cv
388.58 21.1906 387.461 20.0717 387.461 18.6906 cv
387.461 17.3096 388.58 16.1906 389.961 16.1906 cv
cp
389.961 15.1906 mo
388.028 15.1906 386.461 16.7576 386.461 18.6906 cv
386.461 20.6237 388.028 22.1906 389.961 22.1906 cv
391.894 22.1906 393.461 20.6237 393.461 18.6906 cv
393.461 16.7576 391.894 15.1906 389.961 15.1906 cv
f
389.999 16.1906 mo
391.38 16.1906 392.499 17.3096 392.499 18.6906 cv
392.499 20.0717 391.38 21.1906 389.999 21.1906 cv
388.618 21.1906 387.5 20.0717 387.5 18.6906 cv
387.5 17.3096 388.618 16.1906 389.999 16.1906 cv
cp
389.999 15.1906 mo
388.066 15.1906 386.499 16.7576 386.499 18.6906 cv
386.499 20.6237 388.066 22.1906 389.999 22.1906 cv
391.932 22.1906 393.5 20.6237 393.5 18.6906 cv
393.5 16.7576 391.932 15.1906 389.999 15.1906 cv
f
390.034 16.1906 mo
391.415 16.1906 392.534 17.3096 392.534 18.6906 cv
392.534 20.0717 391.415 21.1906 390.034 21.1906 cv
388.653 21.1906 387.534 20.0717 387.534 18.6906 cv
387.534 17.3096 388.653 16.1906 390.034 16.1906 cv
cp
390.034 15.1906 mo
388.101 15.1906 386.534 16.7576 386.534 18.6906 cv
386.534 20.6237 388.101 22.1906 390.034 22.1906 cv
391.967 22.1906 393.534 20.6237 393.534 18.6906 cv
393.534 16.7576 391.967 15.1906 390.034 15.1906 cv
f
390.067 16.1906 mo
391.448 16.1906 392.567 17.3096 392.567 18.6906 cv
392.567 20.0717 391.448 21.1906 390.067 21.1906 cv
388.686 21.1906 387.567 20.0717 387.567 18.6906 cv
387.567 17.3096 388.686 16.1906 390.067 16.1906 cv
cp
390.067 15.1906 mo
388.134 15.1906 386.567 16.7576 386.567 18.6906 cv
386.567 20.6237 388.134 22.1906 390.067 22.1906 cv
392 22.1906 393.567 20.6237 393.567 18.6906 cv
393.567 16.7576 392 15.1906 390.067 15.1906 cv
f
390.1 16.1906 mo
391.48 16.1906 392.6 17.3096 392.6 18.6906 cv
392.6 20.0717 391.48 21.1906 390.1 21.1906 cv
388.719 21.1906 387.6 20.0717 387.6 18.6906 cv
387.6 17.3096 388.719 16.1906 390.1 16.1906 cv
cp
390.1 15.1906 mo
388.167 15.1906 386.6 16.7576 386.6 18.6906 cv
386.6 20.6237 388.167 22.1906 390.1 22.1906 cv
392.032 22.1906 393.6 20.6237 393.6 18.6906 cv
393.6 16.7576 392.032 15.1906 390.1 15.1906 cv
f
390.129 16.1906 mo
391.509 16.1906 392.628 17.3096 392.628 18.6906 cv
392.628 20.0717 391.509 21.1906 390.129 21.1906 cv
388.748 21.1906 387.629 20.0717 387.629 18.6906 cv
387.629 17.3096 388.748 16.1906 390.129 16.1906 cv
cp
390.129 15.1906 mo
388.196 15.1906 386.628 16.7576 386.628 18.6906 cv
386.628 20.6237 388.196 22.1906 390.129 22.1906 cv
392.061 22.1906 393.629 20.6237 393.629 18.6906 cv
393.629 16.7576 392.061 15.1906 390.129 15.1906 cv
f
390.155 16.1906 mo
391.536 16.1906 392.655 17.3096 392.655 18.6906 cv
392.655 20.0717 391.536 21.1906 390.155 21.1906 cv
388.774 21.1906 387.655 20.0717 387.655 18.6906 cv
387.655 17.3096 388.774 16.1906 390.155 16.1906 cv
cp
390.155 15.1906 mo
388.222 15.1906 386.655 16.7576 386.655 18.6906 cv
386.655 20.6237 388.222 22.1906 390.155 22.1906 cv
392.087 22.1906 393.655 20.6237 393.655 18.6906 cv
393.655 16.7576 392.087 15.1906 390.155 15.1906 cv
f
390.176 16.1906 mo
391.557 16.1906 392.676 17.3096 392.676 18.6906 cv
392.676 20.0717 391.557 21.1906 390.176 21.1906 cv
388.796 21.1906 387.677 20.0717 387.677 18.6906 cv
387.677 17.3096 388.796 16.1906 390.176 16.1906 cv
cp
390.176 15.1906 mo
388.244 15.1906 386.676 16.7576 386.676 18.6906 cv
386.676 20.6237 388.244 22.1906 390.176 22.1906 cv
392.109 22.1906 393.677 20.6237 393.677 18.6906 cv
393.677 16.7576 392.109 15.1906 390.176 15.1906 cv
f
390.198 16.1906 mo
391.579 16.1906 392.698 17.3096 392.698 18.6906 cv
392.698 20.0717 391.579 21.1906 390.198 21.1906 cv
388.818 21.1906 387.699 20.0717 387.699 18.6906 cv
387.699 17.3096 388.818 16.1906 390.198 16.1906 cv
cp
390.198 15.1906 mo
388.266 15.1906 386.698 16.7576 386.698 18.6906 cv
386.698 20.6237 388.266 22.1906 390.198 22.1906 cv
392.131 22.1906 393.699 20.6237 393.699 18.6906 cv
393.699 16.7576 392.131 15.1906 390.198 15.1906 cv
f
390.218 16.1906 mo
391.599 16.1906 392.718 17.3096 392.718 18.6906 cv
392.718 20.0717 391.599 21.1906 390.218 21.1906 cv
388.837 21.1906 387.719 20.0717 387.719 18.6906 cv
387.719 17.3096 388.837 16.1906 390.218 16.1906 cv
cp
390.218 15.1906 mo
388.286 15.1906 386.718 16.7576 386.718 18.6906 cv
386.718 20.6237 388.286 22.1906 390.218 22.1906 cv
392.151 22.1906 393.719 20.6237 393.719 18.6906 cv
393.719 16.7576 392.151 15.1906 390.218 15.1906 cv
f
390.236 16.1906 mo
391.616 16.1906 392.735 17.3096 392.735 18.6906 cv
392.735 20.0717 391.616 21.1906 390.236 21.1906 cv
388.855 21.1906 387.736 20.0717 387.736 18.6906 cv
387.736 17.3096 388.855 16.1906 390.236 16.1906 cv
cp
390.236 15.1906 mo
388.303 15.1906 386.735 16.7576 386.735 18.6906 cv
386.735 20.6237 388.303 22.1906 390.236 22.1906 cv
392.168 22.1906 393.736 20.6237 393.736 18.6906 cv
393.736 16.7576 392.168 15.1906 390.236 15.1906 cv
f
390.252 16.1906 mo
391.632 16.1906 392.752 17.3096 392.752 18.6906 cv
392.752 20.0717 391.632 21.1906 390.252 21.1906 cv
388.871 21.1906 387.752 20.0717 387.752 18.6906 cv
387.752 17.3096 388.871 16.1906 390.252 16.1906 cv
cp
390.252 15.1906 mo
388.319 15.1906 386.752 16.7576 386.752 18.6906 cv
386.752 20.6237 388.319 22.1906 390.252 22.1906 cv
392.184 22.1906 393.752 20.6237 393.752 18.6906 cv
393.752 16.7576 392.184 15.1906 390.252 15.1906 cv
f
390.266 16.1906 mo
391.646 16.1906 392.766 17.3096 392.766 18.6906 cv
392.766 20.0717 391.646 21.1906 390.266 21.1906 cv
388.885 21.1906 387.766 20.0717 387.766 18.6906 cv
387.766 17.3096 388.885 16.1906 390.266 16.1906 cv
cp
390.266 15.1906 mo
388.333 15.1906 386.766 16.7576 386.766 18.6906 cv
386.766 20.6237 388.333 22.1906 390.266 22.1906 cv
392.198 22.1906 393.766 20.6237 393.766 18.6906 cv
393.766 16.7576 392.198 15.1906 390.266 15.1906 cv
f
390.281 16.1906 mo
391.662 16.1906 392.781 17.3096 392.781 18.6906 cv
392.781 20.0717 391.662 21.1906 390.281 21.1906 cv
388.9 21.1906 387.781 20.0717 387.781 18.6906 cv
387.781 17.3096 388.9 16.1906 390.281 16.1906 cv
cp
390.281 15.1906 mo
388.348 15.1906 386.781 16.7576 386.781 18.6906 cv
386.781 20.6237 388.348 22.1906 390.281 22.1906 cv
392.214 22.1906 393.781 20.6237 393.781 18.6906 cv
393.781 16.7576 392.214 15.1906 390.281 15.1906 cv
f
390.291 16.1906 mo
391.672 16.1906 392.791 17.3096 392.791 18.6906 cv
392.791 20.0717 391.672 21.1906 390.291 21.1906 cv
388.911 21.1906 387.791 20.0717 387.791 18.6906 cv
387.791 17.3096 388.911 16.1906 390.291 16.1906 cv
cp
390.291 15.1906 mo
388.359 15.1906 386.791 16.7576 386.791 18.6906 cv
386.791 20.6237 388.359 22.1906 390.291 22.1906 cv
392.224 22.1906 393.791 20.6237 393.791 18.6906 cv
393.791 16.7576 392.224 15.1906 390.291 15.1906 cv
f
390.301 16.1906 mo
391.682 16.1906 392.801 17.3096 392.801 18.6906 cv
392.801 20.0717 391.682 21.1906 390.301 21.1906 cv
388.92 21.1906 387.801 20.0717 387.801 18.6906 cv
387.801 17.3096 388.92 16.1906 390.301 16.1906 cv
cp
390.301 15.1906 mo
388.368 15.1906 386.801 16.7576 386.801 18.6906 cv
386.801 20.6237 388.368 22.1906 390.301 22.1906 cv
392.234 22.1906 393.801 20.6237 393.801 18.6906 cv
393.801 16.7576 392.234 15.1906 390.301 15.1906 cv
f
390.309 16.1906 mo
391.689 16.1906 392.808 17.3096 392.808 18.6906 cv
392.808 20.0717 391.689 21.1906 390.309 21.1906 cv
388.928 21.1906 387.809 20.0717 387.809 18.6906 cv
387.809 17.3096 388.928 16.1906 390.309 16.1906 cv
cp
390.309 15.1906 mo
388.376 15.1906 386.808 16.7576 386.808 18.6906 cv
386.808 20.6237 388.376 22.1906 390.309 22.1906 cv
392.241 22.1906 393.809 20.6237 393.809 18.6906 cv
393.809 16.7576 392.241 15.1906 390.309 15.1906 cv
f
390.318 16.1906 mo
391.699 16.1906 392.818 17.3096 392.818 18.6906 cv
392.818 20.0717 391.699 21.1906 390.318 21.1906 cv
388.937 21.1906 387.818 20.0717 387.818 18.6906 cv
387.818 17.3096 388.937 16.1906 390.318 16.1906 cv
cp
390.318 15.1906 mo
388.386 15.1906 386.818 16.7576 386.818 18.6906 cv
386.818 20.6237 388.386 22.1906 390.318 22.1906 cv
392.251 22.1906 393.818 20.6237 393.818 18.6906 cv
393.818 16.7576 392.251 15.1906 390.318 15.1906 cv
f
390.326 16.1906 mo
391.707 16.1906 392.826 17.3096 392.826 18.6906 cv
392.826 20.0717 391.707 21.1906 390.326 21.1906 cv
388.945 21.1906 387.827 20.0717 387.827 18.6906 cv
387.827 17.3096 388.945 16.1906 390.326 16.1906 cv
cp
390.326 15.1906 mo
388.393 15.1906 386.826 16.7576 386.826 18.6906 cv
386.826 20.6237 388.393 22.1906 390.326 22.1906 cv
392.259 22.1906 393.827 20.6237 393.827 18.6906 cv
393.827 16.7576 392.259 15.1906 390.326 15.1906 cv
f
390.333 16.1906 mo
391.714 16.1906 392.833 17.3096 392.833 18.6906 cv
392.833 20.0717 391.714 21.1906 390.333 21.1906 cv
388.953 21.1906 387.834 20.0717 387.834 18.6906 cv
387.834 17.3096 388.953 16.1906 390.333 16.1906 cv
cp
390.333 15.1906 mo
388.4 15.1906 386.833 16.7576 386.833 18.6906 cv
386.833 20.6237 388.4 22.1906 390.333 22.1906 cv
392.266 22.1906 393.834 20.6237 393.834 18.6906 cv
393.834 16.7576 392.266 15.1906 390.333 15.1906 cv
f
390.339 16.1906 mo
391.72 16.1906 392.839 17.3096 392.839 18.6906 cv
392.839 20.0717 391.72 21.1906 390.339 21.1906 cv
388.959 21.1906 387.839 20.0717 387.839 18.6906 cv
387.839 17.3096 388.959 16.1906 390.339 16.1906 cv
cp
390.339 15.1906 mo
388.407 15.1906 386.839 16.7576 386.839 18.6906 cv
386.839 20.6237 388.407 22.1906 390.339 22.1906 cv
392.272 22.1906 393.839 20.6237 393.839 18.6906 cv
393.839 16.7576 392.272 15.1906 390.339 15.1906 cv
f
390.346 16.1906 mo
391.727 16.1906 392.846 17.3096 392.846 18.6906 cv
392.846 20.0717 391.727 21.1906 390.346 21.1906 cv
388.966 21.1906 387.846 20.0717 387.846 18.6906 cv
387.846 17.3096 388.966 16.1906 390.346 16.1906 cv
cp
390.346 15.1906 mo
388.414 15.1906 386.846 16.7576 386.846 18.6906 cv
386.846 20.6237 388.414 22.1906 390.346 22.1906 cv
392.279 22.1906 393.846 20.6237 393.846 18.6906 cv
393.846 16.7576 392.279 15.1906 390.346 15.1906 cv
f
390.352 16.1906 mo
391.732 16.1906 392.851 17.3096 392.851 18.6906 cv
392.851 20.0717 391.732 21.1906 390.352 21.1906 cv
388.971 21.1906 387.852 20.0717 387.852 18.6906 cv
387.852 17.3096 388.971 16.1906 390.352 16.1906 cv
cp
390.352 15.1906 mo
388.419 15.1906 386.851 16.7576 386.851 18.6906 cv
386.851 20.6237 388.419 22.1906 390.352 22.1906 cv
392.284 22.1906 393.852 20.6237 393.852 18.6906 cv
393.852 16.7576 392.284 15.1906 390.352 15.1906 cv
f
390.357 16.1906 mo
391.737 16.1906 392.857 17.3096 392.857 18.6906 cv
392.857 20.0717 391.737 21.1906 390.357 21.1906 cv
388.976 21.1906 387.857 20.0717 387.857 18.6906 cv
387.857 17.3096 388.976 16.1906 390.357 16.1906 cv
cp
390.357 15.1906 mo
388.424 15.1906 386.857 16.7576 386.857 18.6906 cv
386.857 20.6237 388.424 22.1906 390.357 22.1906 cv
392.289 22.1906 393.857 20.6237 393.857 18.6906 cv
393.857 16.7576 392.289 15.1906 390.357 15.1906 cv
f
390.362 16.1906 mo
391.743 16.1906 392.862 17.3096 392.862 18.6906 cv
392.862 20.0717 391.743 21.1906 390.362 21.1906 cv
388.982 21.1906 387.862 20.0717 387.862 18.6906 cv
387.862 17.3096 388.982 16.1906 390.362 16.1906 cv
cp
390.362 15.1906 mo
388.43 15.1906 386.862 16.7576 386.862 18.6906 cv
386.862 20.6237 388.43 22.1906 390.362 22.1906 cv
392.295 22.1906 393.862 20.6237 393.862 18.6906 cv
393.862 16.7576 392.295 15.1906 390.362 15.1906 cv
f
390.367 16.1906 mo
391.748 16.1906 392.867 17.3096 392.867 18.6906 cv
392.867 20.0717 391.748 21.1906 390.367 21.1906 cv
388.986 21.1906 387.867 20.0717 387.867 18.6906 cv
387.867 17.3096 388.986 16.1906 390.367 16.1906 cv
cp
390.367 15.1906 mo
388.434 15.1906 386.867 16.7576 386.867 18.6906 cv
386.867 20.6237 388.434 22.1906 390.367 22.1906 cv
392.3 22.1906 393.867 20.6237 393.867 18.6906 cv
393.867 16.7576 392.3 15.1906 390.367 15.1906 cv
f
390.371 16.1906 mo
391.752 16.1906 392.871 17.3096 392.871 18.6906 cv
392.871 20.0717 391.752 21.1906 390.371 21.1906 cv
388.99 21.1906 387.871 20.0717 387.871 18.6906 cv
387.871 17.3096 388.99 16.1906 390.371 16.1906 cv
cp
390.371 15.1906 mo
388.438 15.1906 386.871 16.7576 386.871 18.6906 cv
386.871 20.6237 388.438 22.1906 390.371 22.1906 cv
392.303 22.1906 393.871 20.6237 393.871 18.6906 cv
393.871 16.7576 392.303 15.1906 390.371 15.1906 cv
f
390.375 16.1906 mo
391.755 16.1906 392.874 17.3096 392.874 18.6906 cv
392.874 20.0717 391.755 21.1906 390.375 21.1906 cv
388.994 21.1906 387.875 20.0717 387.875 18.6906 cv
387.875 17.3096 388.994 16.1906 390.375 16.1906 cv
cp
390.375 15.1906 mo
388.442 15.1906 386.874 16.7576 386.874 18.6906 cv
386.874 20.6237 388.442 22.1906 390.375 22.1906 cv
392.307 22.1906 393.875 20.6237 393.875 18.6906 cv
393.875 16.7576 392.307 15.1906 390.375 15.1906 cv
f
390.377 16.1906 mo
391.758 16.1906 392.877 17.3096 392.877 18.6906 cv
392.877 20.0717 391.758 21.1906 390.377 21.1906 cv
388.996 21.1906 387.877 20.0717 387.877 18.6906 cv
387.877 17.3096 388.996 16.1906 390.377 16.1906 cv
cp
390.377 15.1906 mo
388.444 15.1906 386.877 16.7576 386.877 18.6906 cv
386.877 20.6237 388.444 22.1906 390.377 22.1906 cv
392.31 22.1906 393.877 20.6237 393.877 18.6906 cv
393.877 16.7576 392.31 15.1906 390.377 15.1906 cv
f
390.379 16.1906 mo
391.76 16.1906 392.879 17.3096 392.879 18.6906 cv
392.879 20.0717 391.76 21.1906 390.379 21.1906 cv
388.999 21.1906 387.88 20.0717 387.88 18.6906 cv
387.88 17.3096 388.999 16.1906 390.379 16.1906 cv
cp
390.379 15.1906 mo
388.447 15.1906 386.879 16.7576 386.879 18.6906 cv
386.879 20.6237 388.447 22.1906 390.379 22.1906 cv
392.312 22.1906 393.88 20.6237 393.88 18.6906 cv
393.88 16.7576 392.312 15.1906 390.379 15.1906 cv
f
390.381 16.1906 mo
391.762 16.1906 392.881 17.3096 392.881 18.6906 cv
392.881 20.0717 391.762 21.1906 390.381 21.1906 cv
389 21.1906 387.881 20.0717 387.881 18.6906 cv
387.881 17.3096 389 16.1906 390.381 16.1906 cv
cp
390.381 15.1906 mo
388.448 15.1906 386.881 16.7576 386.881 18.6906 cv
386.881 20.6237 388.448 22.1906 390.381 22.1906 cv
392.314 22.1906 393.881 20.6237 393.881 18.6906 cv
393.881 16.7576 392.314 15.1906 390.381 15.1906 cv
f
390.383 16.1906 mo
391.764 16.1906 392.883 17.3096 392.883 18.6906 cv
392.883 20.0717 391.764 21.1906 390.383 21.1906 cv
389.002 21.1906 387.883 20.0717 387.883 18.6906 cv
387.883 17.3096 389.002 16.1906 390.383 16.1906 cv
cp
390.383 15.1906 mo
388.45 15.1906 386.883 16.7576 386.883 18.6906 cv
386.883 20.6237 388.45 22.1906 390.383 22.1906 cv
392.316 22.1906 393.883 20.6237 393.883 18.6906 cv
393.883 16.7576 392.316 15.1906 390.383 15.1906 cv
f
390.385 16.1906 mo
391.766 16.1906 392.885 17.3096 392.885 18.6906 cv
392.885 20.0717 391.766 21.1906 390.385 21.1906 cv
389.004 21.1906 387.886 20.0717 387.886 18.6906 cv
387.886 17.3096 389.004 16.1906 390.385 16.1906 cv
cp
390.385 15.1906 mo
388.452 15.1906 386.885 16.7576 386.885 18.6906 cv
386.885 20.6237 388.452 22.1906 390.385 22.1906 cv
392.318 22.1906 393.886 20.6237 393.886 18.6906 cv
393.886 16.7576 392.318 15.1906 390.385 15.1906 cv
f
390.386 16.1906 mo
391.767 16.1906 392.886 17.3096 392.886 18.6906 cv
392.886 20.0717 391.767 21.1906 390.386 21.1906 cv
389.006 21.1906 387.887 20.0717 387.887 18.6906 cv
387.887 17.3096 389.006 16.1906 390.386 16.1906 cv
cp
390.386 15.1906 mo
388.453 15.1906 386.886 16.7576 386.886 18.6906 cv
386.886 20.6237 388.453 22.1906 390.386 22.1906 cv
392.319 22.1906 393.887 20.6237 393.887 18.6906 cv
393.887 16.7576 392.319 15.1906 390.386 15.1906 cv
f
390.388 16.1906 mo
391.769 16.1906 392.887 17.3096 392.887 18.6906 cv
392.887 20.0717 391.769 21.1906 390.388 21.1906 cv
389.007 21.1906 387.888 20.0717 387.888 18.6906 cv
387.888 17.3096 389.007 16.1906 390.388 16.1906 cv
cp
390.388 15.1906 mo
388.455 15.1906 386.887 16.7576 386.887 18.6906 cv
386.887 20.6237 388.455 22.1906 390.388 22.1906 cv
392.321 22.1906 393.888 20.6237 393.888 18.6906 cv
393.888 16.7576 392.321 15.1906 390.388 15.1906 cv
f
390.389 16.1906 mo
391.77 16.1906 392.889 17.3096 392.889 18.6906 cv
392.889 20.0717 391.77 21.1906 390.389 21.1906 cv
389.009 21.1906 387.889 20.0717 387.889 18.6906 cv
387.889 17.3096 389.009 16.1906 390.389 16.1906 cv
cp
390.389 15.1906 mo
388.457 15.1906 386.889 16.7576 386.889 18.6906 cv
386.889 20.6237 388.457 22.1906 390.389 22.1906 cv
392.322 22.1906 393.889 20.6237 393.889 18.6906 cv
393.889 16.7576 392.322 15.1906 390.389 15.1906 cv
f
390.391 16.1906 mo
391.771 16.1906 392.891 17.3096 392.891 18.6906 cv
392.891 20.0717 391.771 21.1906 390.391 21.1906 cv
389.01 21.1906 387.891 20.0717 387.891 18.6906 cv
387.891 17.3096 389.01 16.1906 390.391 16.1906 cv
cp
390.391 15.1906 mo
388.458 15.1906 386.891 16.7576 386.891 18.6906 cv
386.891 20.6237 388.458 22.1906 390.391 22.1906 cv
392.324 22.1906 393.891 20.6237 393.891 18.6906 cv
393.891 16.7576 392.324 15.1906 390.391 15.1906 cv
f
390.392 16.1906 mo
391.773 16.1906 392.892 17.3096 392.892 18.6906 cv
392.892 20.0717 391.773 21.1906 390.392 21.1906 cv
389.011 21.1906 387.892 20.0717 387.892 18.6906 cv
387.892 17.3096 389.011 16.1906 390.392 16.1906 cv
cp
390.392 15.1906 mo
388.459 15.1906 386.892 16.7576 386.892 18.6906 cv
386.892 20.6237 388.459 22.1906 390.392 22.1906 cv
392.325 22.1906 393.892 20.6237 393.892 18.6906 cv
393.892 16.7576 392.325 15.1906 390.392 15.1906 cv
f
390.393 16.1906 mo
391.773 16.1906 392.892 17.3096 392.892 18.6906 cv
392.892 20.0717 391.773 21.1906 390.393 21.1906 cv
389.012 21.1906 387.893 20.0717 387.893 18.6906 cv
387.893 17.3096 389.012 16.1906 390.393 16.1906 cv
cp
390.393 15.1906 mo
388.46 15.1906 386.892 16.7576 386.892 18.6906 cv
386.892 20.6237 388.46 22.1906 390.393 22.1906 cv
392.325 22.1906 393.893 20.6237 393.893 18.6906 cv
393.893 16.7576 392.325 15.1906 390.393 15.1906 cv
f
390.393 16.1906 mo
391.774 16.1906 392.893 17.3096 392.893 18.6906 cv
392.893 20.0717 391.774 21.1906 390.393 21.1906 cv
389.012 21.1906 387.894 20.0717 387.894 18.6906 cv
387.894 17.3096 389.012 16.1906 390.393 16.1906 cv
cp
390.393 15.1906 mo
388.461 15.1906 386.893 16.7576 386.893 18.6906 cv
386.893 20.6237 388.461 22.1906 390.393 22.1906 cv
392.326 22.1906 393.894 20.6237 393.894 18.6906 cv
393.894 16.7576 392.326 15.1906 390.393 15.1906 cv
f
390.394 16.1906 mo
391.775 16.1906 392.894 17.3096 392.894 18.6906 cv
392.894 20.0717 391.775 21.1906 390.394 21.1906 cv
389.013 21.1906 387.894 20.0717 387.894 18.6906 cv
387.894 17.3096 389.013 16.1906 390.394 16.1906 cv
cp
390.394 15.1906 mo
388.461 15.1906 386.894 16.7576 386.894 18.6906 cv
386.894 20.6237 388.461 22.1906 390.394 22.1906 cv
392.327 22.1906 393.894 20.6237 393.894 18.6906 cv
393.894 16.7576 392.327 15.1906 390.394 15.1906 cv
f
390.394 16.1906 mo
391.775 16.1906 392.894 17.3096 392.894 18.6906 cv
392.894 20.0717 391.775 21.1906 390.394 21.1906 cv
389.013 21.1906 387.894 20.0717 387.894 18.6906 cv
387.894 17.3096 389.013 16.1906 390.394 16.1906 cv
cp
390.394 15.1906 mo
388.461 15.1906 386.894 16.7576 386.894 18.6906 cv
386.894 20.6237 388.461 22.1906 390.394 22.1906 cv
392.327 22.1906 393.894 20.6237 393.894 18.6906 cv
393.894 16.7576 392.327 15.1906 390.394 15.1906 cv
f
390.394 16.1906 mo
391.775 16.1906 392.894 17.3096 392.894 18.6906 cv
392.894 20.0717 391.775 21.1906 390.394 21.1906 cv
389.014 21.1906 387.895 20.0717 387.895 18.6906 cv
387.895 17.3096 389.014 16.1906 390.394 16.1906 cv
cp
390.394 15.1906 mo
388.462 15.1906 386.894 16.7576 386.894 18.6906 cv
386.894 20.6237 388.462 22.1906 390.394 22.1906 cv
392.327 22.1906 393.895 20.6237 393.895 18.6906 cv
393.895 16.7576 392.327 15.1906 390.394 15.1906 cv
f
390.396 16.1906 mo
391.777 16.1906 392.896 17.3096 392.896 18.6906 cv
392.896 20.0717 391.777 21.1906 390.396 21.1906 cv
389.015 21.1906 387.896 20.0717 387.896 18.6906 cv
387.896 17.3096 389.015 16.1906 390.396 16.1906 cv
cp
390.396 15.1906 mo
388.463 15.1906 386.896 16.7576 386.896 18.6906 cv
386.896 20.6237 388.463 22.1906 390.396 22.1906 cv
392.328 22.1906 393.896 20.6237 393.896 18.6906 cv
393.896 16.7576 392.328 15.1906 390.396 15.1906 cv
f
390.396 16.1906 mo
391.777 16.1906 392.896 17.3096 392.896 18.6906 cv
392.896 20.0717 391.777 21.1906 390.396 21.1906 cv
389.016 21.1906 387.896 20.0717 387.896 18.6906 cv
387.896 17.3096 389.016 16.1906 390.396 16.1906 cv
cp
390.396 15.1906 mo
388.463 15.1906 386.896 16.7576 386.896 18.6906 cv
386.896 20.6237 388.463 22.1906 390.396 22.1906 cv
392.329 22.1906 393.896 20.6237 393.896 18.6906 cv
393.896 16.7576 392.329 15.1906 390.396 15.1906 cv
f
390.397 16.1906 mo
391.777 16.1906 392.896 17.3096 392.896 18.6906 cv
392.896 20.0717 391.777 21.1906 390.397 21.1906 cv
389.016 21.1906 387.897 20.0717 387.897 18.6906 cv
387.897 17.3096 389.016 16.1906 390.397 16.1906 cv
cp
390.397 15.1906 mo
388.464 15.1906 386.896 16.7576 386.896 18.6906 cv
386.896 20.6237 388.464 22.1906 390.397 22.1906 cv
392.329 22.1906 393.897 20.6237 393.897 18.6906 cv
393.897 16.7576 392.329 15.1906 390.397 15.1906 cv
f
390.397 16.1906 mo
391.778 16.1906 392.897 17.3096 392.897 18.6906 cv
392.897 20.0717 391.778 21.1906 390.397 21.1906 cv
389.016 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.016 16.1906 390.397 16.1906 cv
cp
390.397 15.1906 mo
388.464 15.1906 386.897 16.7576 386.897 18.6906 cv
386.897 20.6237 388.464 22.1906 390.397 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.397 15.1906 cv
f
390.397 16.1906 mo
391.778 16.1906 392.897 17.3096 392.897 18.6906 cv
392.897 20.0717 391.778 21.1906 390.397 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.397 16.1906 cv
cp
390.397 15.1906 mo
388.465 15.1906 386.897 16.7576 386.897 18.6906 cv
386.897 20.6237 388.465 22.1906 390.397 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.397 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.897 17.3096 392.897 18.6906 cv
392.897 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.897 16.7576 386.897 18.6906 cv
386.897 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.778 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.778 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.33 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.33 15.1906 390.398 15.1906 cv
f
390.398 16.1906 mo
391.779 16.1906 392.898 17.3096 392.898 18.6906 cv
392.898 20.0717 391.779 21.1906 390.398 21.1906 cv
389.017 21.1906 387.898 20.0717 387.898 18.6906 cv
387.898 17.3096 389.017 16.1906 390.398 16.1906 cv
cp
390.398 15.1906 mo
388.465 15.1906 386.898 16.7576 386.898 18.6906 cv
386.898 20.6237 388.465 22.1906 390.398 22.1906 cv
392.331 22.1906 393.898 20.6237 393.898 18.6906 cv
393.898 16.7576 392.331 15.1906 390.398 15.1906 cv
f
183.398 252.691 mo
382.148 252.691 li
382.148 206.191 li
183.398 206.191 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QQWTCQ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/P <1C60D8A8C9B64EDF88209F7A97EBCA021BD485E107F2B7F48F28A615216A
BC23146CC805D621E6F303BD17890284CBC7F6C7066E0A59D376428DF23A5E8B
4FE40F7ADC431E558DFFC35223DE8FA0FB4FCFFB4B5195> |-
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B
61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1
E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36
DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B
7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QQWTCQ+Helvetica /Encoding get
dup 37 /percent put
dup 58 /colon put
dup 59 /semicolon put
dup 69 /E put
dup 80 /P put
dup 83 /S put
pop
%ADOEndSubsetFont
/QQWTCQ+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /.notdef /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 8{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
QQWTCQ+Helvetica nf
QQWTCQ+Helvetica*1 [18 0 0 -18 0 0 ]msf
218.648 224.842 mo
(1FP)sh
251.66 224.842 mo
(S; EER: 1.67%)
[12.0061 5.004 5.004 12.0061 12.0061 12.996 5.004 5.004 10.008 5.004 10.008 10.008 
0 ]xsh
186.398 218.467 mo
216.398 218.467 li
.895628 .7673 0 0 cmyk
@
0 lj
201.398 215.467 mo
201.398 221.467 li
198.398 218.467 mo
204.398 218.467 li
199.277 216.346 mo
203.519 220.588 li
199.277 220.588 mo
203.519 216.346 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QQWTCQ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3
518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE7
19F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E5897699
5550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77
D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFF
C73DA426D2C4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QQWTCQ+Helvetica /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/QQWTCQ+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 8{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
QQWTCQ+Helvetica nf
QQWTCQ+Helvetica*1 [18 0 0 -18 0 0 ]msf
218.648 246.789 mo
(6FP)sh
251.66 246.789 mo
(S; EER: 0.30%)
[12.0061 5.004 5.004 12.0061 12.0061 12.996 5.004 5.004 10.008 5.004 10.008 10.008 
0 ]xsh
1 lj
186.398 240.414 mo
216.398 240.414 li
0 .990631 1 .000396735 cmyk
@
201.398 237.915 mo
202.779 237.915 203.898 239.034 203.898 240.414 cv
203.898 241.795 202.779 242.914 201.398 242.914 cv
200.017 242.914 198.898 241.795 198.898 240.414 cv
198.898 239.034 200.017 237.915 201.398 237.915 cv
cp
201.398 236.914 mo
199.465 236.914 197.898 238.482 197.898 240.414 cv
197.898 242.347 199.465 243.915 201.398 243.915 cv
203.331 243.915 204.898 242.347 204.898 240.414 cv
204.898 238.482 203.331 236.914 201.398 236.914 cv
f
0 lj
183.398 252.691 mo
382.148 252.691 li
382.148 206.191 li
183.398 206.191 li
cp
1 /0 /CSD get_res sepcs
.851074 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/QQWTCR+Helvetica-Bold*1 uf
/QQWTCR+Helvetica-Bold uf
/JAAAAA+Helvetica-Bold uf
/QQWTCQ+Helvetica*1 uf
/QQWTCQ+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
