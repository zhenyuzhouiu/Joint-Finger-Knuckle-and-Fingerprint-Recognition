%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fkv3-roc_compare_new.eps-98106.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/16/2022, 11:03:03 AM
%%BoundingBox: 0 0 407 296
%%HiResBoundingBox: 0 0 406.1837 295.0074
%%CropBox: 0 0 406.1837 295.0074
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1016 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-16T11:02:24+08:00"
   xmp:CreateDate="2022-08-16T11:02:24+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.9.0.1467703 \(R2020b\). Operating System: Linux)"
   xmpMM:DocumentID="uuid:5a309e6d-1f6b-11ed-0000-faa80851f166"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/zhenyuzhou/Desktop/finger-knuckle/deep-learning/codekevin/fknet/test/tl-sttl-rsil/fkv3-roc_compare_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -295.007 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 295.007 li
406.184 295.007 li
406.184 0 li
cp
clp
gsave
-7.31421 296.074 mo
435.686 296.074 li
435.686 -2.92566 li
-7.31421 -2.92566 li
cp
clp
-7.31421 296.074 mo
435.186 296.074 li
435.186 -3.17566 li
-7.31421 -3.17566 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
grestore
-7.31421 296.074 mo
435.186 296.074 li
435.186 -3.17566 li
-7.31421 -3.17566 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
50.4358 256.324 mo
393.186 256.324 li
393.186 19.3243 li
50.4358 19.3243 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
50.9112 256.324 mo
50.9112 19.3243 li
1 /0 /CSD get_res sepcs
.224609 sep
@
54.0155 256.324 mo
54.0155 19.3243 li
@
74.435 256.324 mo
74.435 19.3243 li
@
86.3803 256.324 mo
86.3803 19.3243 li
@
94.8558 256.324 mo
94.8558 19.3243 li
@
101.429 256.324 mo
101.429 19.3243 li
@
106.801 256.324 mo
106.801 19.3243 li
@
111.342 256.324 mo
111.342 19.3243 li
@
115.276 256.324 mo
115.276 19.3243 li
@
118.746 256.324 mo
118.746 19.3243 li
@
121.85 256.324 mo
121.85 19.3243 li
@
142.27 256.324 mo
142.27 19.3243 li
@
154.215 256.324 mo
154.215 19.3243 li
@
162.69 256.324 mo
162.69 19.3243 li
@
169.264 256.324 mo
169.264 19.3243 li
@
174.634 256.324 mo
174.634 19.3243 li
@
179.176 256.324 mo
179.176 19.3243 li
@
183.109 256.324 mo
183.109 19.3243 li
@
186.58 256.324 mo
186.58 19.3243 li
@
189.684 256.324 mo
189.684 19.3243 li
@
210.104 256.324 mo
210.104 19.3243 li
@
222.049 256.324 mo
222.049 19.3243 li
@
230.524 256.324 mo
230.524 19.3243 li
@
237.097 256.324 mo
237.097 19.3243 li
@
242.469 256.324 mo
242.469 19.3243 li
@
247.01 256.324 mo
247.01 19.3243 li
@
250.944 256.324 mo
250.944 19.3243 li
@
254.413 256.324 mo
254.413 19.3243 li
@
277.938 256.324 mo
277.938 19.3243 li
@
289.883 256.324 mo
289.883 19.3243 li
@
298.358 256.324 mo
298.358 19.3243 li
@
304.932 256.324 mo
304.932 19.3243 li
@
310.303 256.324 mo
310.303 19.3243 li
@
314.844 256.324 mo
314.844 19.3243 li
@
318.778 256.324 mo
318.778 19.3243 li
@
322.248 256.324 mo
322.248 19.3243 li
@
325.352 256.324 mo
325.352 19.3243 li
@
345.772 256.324 mo
345.772 19.3243 li
@
357.717 256.324 mo
357.717 19.3243 li
@
366.192 256.324 mo
366.192 19.3243 li
@
372.766 256.324 mo
372.766 19.3243 li
@
378.137 256.324 mo
378.137 19.3243 li
@
382.679 256.324 mo
382.679 19.3243 li
@
386.612 256.324 mo
386.612 19.3243 li
@
390.082 256.324 mo
390.082 19.3243 li
@
1 lj
[] 0 dsh
121.85 256.324 mo
121.85 19.3243 li
1 /0 /CSD get_res sepcs
.126953 sep
@
257.518 256.324 mo
257.518 19.3243 li
@
393.186 256.324 mo
393.186 19.3243 li
@
393.186 256.324 mo
50.4358 256.324 li
@
393.186 216.824 mo
50.4358 216.824 li
@
393.186 177.324 mo
50.4358 177.324 li
@
393.186 137.824 mo
50.4358 137.824 li
@
393.186 98.3243 mo
50.4358 98.3243 li
@
393.186 58.8243 mo
50.4358 58.8243 li
@
393.186 19.3243 mo
50.4358 19.3243 li
@
2 lc
50.4358 256.324 mo
393.186 256.324 li
1 /0 /CSD get_res sepcs
.851074 sep
@
50.4358 19.3243 mo
393.186 19.3243 li
@
121.85 256.324 mo
121.85 252.897 li
@
257.518 256.324 mo
257.518 252.897 li
@
393.186 256.324 mo
393.186 252.897 li
@
121.85 19.3243 mo
121.85 22.7513 li
@
257.518 19.3243 mo
257.518 22.7513 li
@
393.186 19.3243 mo
393.186 22.7513 li
@
50.9112 256.324 mo
50.9112 254.611 li
@
54.0155 256.324 mo
54.0155 254.611 li
@
74.435 256.324 mo
74.435 254.611 li
@
86.3803 256.324 mo
86.3803 254.611 li
@
94.8558 256.324 mo
94.8558 254.611 li
@
101.429 256.324 mo
101.429 254.611 li
@
106.801 256.324 mo
106.801 254.611 li
@
111.342 256.324 mo
111.342 254.611 li
@
115.276 256.324 mo
115.276 254.611 li
@
118.746 256.324 mo
118.746 254.611 li
@
121.85 256.324 mo
121.85 254.611 li
@
121.85 256.324 mo
121.85 254.611 li
@
142.27 256.324 mo
142.27 254.611 li
@
154.215 256.324 mo
154.215 254.611 li
@
162.69 256.324 mo
162.69 254.611 li
@
169.264 256.324 mo
169.264 254.611 li
@
174.634 256.324 mo
174.634 254.611 li
@
179.176 256.324 mo
179.176 254.611 li
@
183.109 256.324 mo
183.109 254.611 li
@
186.58 256.324 mo
186.58 254.611 li
@
189.684 256.324 mo
189.684 254.611 li
@
210.104 256.324 mo
210.104 254.611 li
@
222.049 256.324 mo
222.049 254.611 li
@
230.524 256.324 mo
230.524 254.611 li
@
237.097 256.324 mo
237.097 254.611 li
@
242.469 256.324 mo
242.469 254.611 li
@
247.01 256.324 mo
247.01 254.611 li
@
250.944 256.324 mo
250.944 254.611 li
@
254.413 256.324 mo
254.413 254.611 li
@
257.518 256.324 mo
257.518 254.611 li
@
277.938 256.324 mo
277.938 254.611 li
@
289.883 256.324 mo
289.883 254.611 li
@
298.358 256.324 mo
298.358 254.611 li
@
304.932 256.324 mo
304.932 254.611 li
@
310.303 256.324 mo
310.303 254.611 li
@
314.844 256.324 mo
314.844 254.611 li
@
318.778 256.324 mo
318.778 254.611 li
@
322.248 256.324 mo
322.248 254.611 li
@
325.352 256.324 mo
325.352 254.611 li
@
345.772 256.324 mo
345.772 254.611 li
@
357.717 256.324 mo
357.717 254.611 li
@
366.192 256.324 mo
366.192 254.611 li
@
372.766 256.324 mo
372.766 254.611 li
@
378.137 256.324 mo
378.137 254.611 li
@
382.679 256.324 mo
382.679 254.611 li
@
386.612 256.324 mo
386.612 254.611 li
@
390.082 256.324 mo
390.082 254.611 li
@
393.186 256.324 mo
393.186 254.611 li
@
50.9112 19.3243 mo
50.9112 21.0383 li
@
54.0155 19.3243 mo
54.0155 21.0383 li
@
74.435 19.3243 mo
74.435 21.0383 li
@
86.3803 19.3243 mo
86.3803 21.0383 li
@
94.8558 19.3243 mo
94.8558 21.0383 li
@
101.429 19.3243 mo
101.429 21.0383 li
@
106.801 19.3243 mo
106.801 21.0383 li
@
111.342 19.3243 mo
111.342 21.0383 li
@
115.276 19.3243 mo
115.276 21.0383 li
@
118.746 19.3243 mo
118.746 21.0383 li
@
121.85 19.3243 mo
121.85 21.0383 li
@
121.85 19.3243 mo
121.85 21.0383 li
@
142.27 19.3243 mo
142.27 21.0383 li
@
154.215 19.3243 mo
154.215 21.0383 li
@
162.69 19.3243 mo
162.69 21.0383 li
@
169.264 19.3243 mo
169.264 21.0383 li
@
174.634 19.3243 mo
174.634 21.0383 li
@
179.176 19.3243 mo
179.176 21.0383 li
@
183.109 19.3243 mo
183.109 21.0383 li
@
186.58 19.3243 mo
186.58 21.0383 li
@
189.684 19.3243 mo
189.684 21.0383 li
@
210.104 19.3243 mo
210.104 21.0383 li
@
222.049 19.3243 mo
222.049 21.0383 li
@
230.524 19.3243 mo
230.524 21.0383 li
@
237.097 19.3243 mo
237.097 21.0383 li
@
242.469 19.3243 mo
242.469 21.0383 li
@
247.01 19.3243 mo
247.01 21.0383 li
@
250.944 19.3243 mo
250.944 21.0383 li
@
254.413 19.3243 mo
254.413 21.0383 li
@
257.518 19.3243 mo
257.518 21.0383 li
@
277.938 19.3243 mo
277.938 21.0383 li
@
289.883 19.3243 mo
289.883 21.0383 li
@
298.358 19.3243 mo
298.358 21.0383 li
@
304.932 19.3243 mo
304.932 21.0383 li
@
310.303 19.3243 mo
310.303 21.0383 li
@
314.844 19.3243 mo
314.844 21.0383 li
@
318.778 19.3243 mo
318.778 21.0383 li
@
322.248 19.3243 mo
322.248 21.0383 li
@
325.352 19.3243 mo
325.352 21.0383 li
@
345.772 19.3243 mo
345.772 21.0383 li
@
357.717 19.3243 mo
357.717 21.0383 li
@
366.192 19.3243 mo
366.192 21.0383 li
@
372.766 19.3243 mo
372.766 21.0383 li
@
378.137 19.3243 mo
378.137 21.0383 li
@
382.679 19.3243 mo
382.679 21.0383 li
@
386.612 19.3243 mo
386.612 21.0383 li
@
390.082 19.3243 mo
390.082 21.0383 li
@
393.186 19.3243 mo
393.186 21.0383 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LQUXUC+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/LQUXUC+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/.notdef /four 12{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t 139{/.notdef}rp]
LQUXUC+Helvetica nf
LQUXUC+Helvetica*1 [12 0 0 -12 0 0 ]msf
108.936 275.824 mo
(10)
[6.672 0 ]xsh
LQUXUC+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
124.686 269.824 mo
(-4)
[3.19673 0 ]xsh
LQUXUC+Helvetica*1 [12 0 0 -12 0 0 ]msf
244.686 275.824 mo
(10)
[6.672 0 ]xsh
LQUXUC+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
260.436 269.824 mo
(-2)
[3.19672 0 ]xsh
LQUXUC+Helvetica*1 [12 0 0 -12 0 0 ]msf
381.936 275.824 mo
(10)
[6.672 0 ]xsh
LQUXUC+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
397.686 269.824 mo
(0)sh
LQUXUC+Helvetica*1 [13.2 0 0 -13.2 0 0 ]msf
146.436 292.474 mo
(Fal)sh
164.77 292.474 mo
(se Acceptance R)sh
264.549 292.474 mo
(ate)sh
50.4358 256.324 mo
50.4358 19.3243 li
@
393.186 256.324 mo
393.186 19.3243 li
@
50.4358 256.324 mo
53.8631 256.324 li
@
50.4358 216.824 mo
53.8631 216.824 li
@
50.4358 177.324 mo
53.8631 177.324 li
@
50.4358 137.824 mo
53.8631 137.824 li
@
50.4358 98.3243 mo
53.8631 98.3243 li
@
50.4358 58.8243 mo
53.8631 58.8243 li
@
50.4358 19.3243 mo
53.8631 19.3243 li
@
393.186 256.324 mo
389.759 256.324 li
@
393.186 216.824 mo
389.759 216.824 li
@
393.186 177.324 mo
389.759 177.324 li
@
393.186 137.824 mo
389.759 137.824 li
@
393.186 98.3243 mo
389.759 98.3243 li
@
393.186 58.8243 mo
389.759 58.8243 li
@
393.186 19.3243 mo
389.759 19.3243 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
LQUXUC+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LQUXUC+Helvetica /Encoding get
dup 46 /period put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/LQUXUC+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /.notdef /four /five /.notdef /seven /eight /nine 
7{/.notdef}rp /A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
LQUXUC+Helvetica nf
LQUXUC+Helvetica*1 [12 0 0 -12 0 0 ]msf
26.5358 260.449 mo
(0.7)sh
19.0358 220.949 mo
(0.75)sh
26.5358 181.449 mo
(0.8)sh
19.0358 141.949 mo
(0.85)sh
26.5358 102.449 mo
(0.9)sh
19.0358 62.9493 mo
(0.95)sh
37.7858 23.4493 mo
(1)sh
LQUXUC+Helvetica*1 [0 -13.2 -13.2 0 0 0 ]msf
12.2858 223.699 mo
(Genuine Acceptance Rate)
[-10.2696 -7.3392 -7.3392 -7.33919 -2.9304 -7.3392 -7.33919 -3.6696 -8.8045 -6.59999 -6.59999 -7.3392 
-7.3392 -3.66959 -7.3392 -7.3392 -6.60001 -7.33919 -3.6696 -9.5304 -7.3392 -3.6696 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LQUXUD+Helvetica-Bold /JAAAAA+Helvetica-Bold findfont ct_VMDictPut
/LQUXUD+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
LQUXUD+Helvetica-Bold nf
LQUXUD+Helvetica-Bold*1 [13.2 0 0 -13.2 0 0 ]msf
91.6862 13.0993 mo
(Receiver Operating Characteristics)
[9.5304 7.3392 7.3392 7.3392 3.6696 7.3392 7.33919 5.1349 3.6696 10.2696 8.06511 7.33919 
5.1349 7.3392 4.39549 3.6696 8.06509 8.06509 3.66962 9.5304 8.06509 7.3392 5.1349 7.33919 
7.3392 4.39548 7.33923 5.13489 3.66962 7.33917 4.39551 3.66962 7.33917 0 ]xsh
0 lc
50.3952 230.011 mo
63.3147 229.633 li
75.26 229.633 li
75.26 212.952 li
79.8014 209.973 li
79.8014 208.781 li
79.8014 205.207 li
87.2046 203.419 li
93.1168 202.227 li
98.0378 201.036 li
102.254 198.653 li
102.254 196.866 li
105.941 195.674 li
112.166 193.886 li
116.1 189.12 li
116.1 185.546 li
118.458 183.758 li
118.458 183.162 li
118.458 181.971 li
119.57 181.375 li
119.57 178.397 li
119.57 177.205 li
119.57 176.609 li
119.57 174.226 li
122.674 173.034 li
129.638 171.247 li
131.15 168.864 li
132.586 166.481 li
132.586 165.289 li
133.957 164.694 li
135.266 164.694 li
135.266 163.502 li
135.266 162.311 li
136.52 162.311 li
137.128 161.119 li
138.307 160.523 li
139.991 159.332 li
140.531 158.735 li
141.583 156.353 li
141.583 154.565 li
142.599 152.778 li
143.581 150.395 li
143.581 149.799 li
146.782 147.416 li
147.635 146.225 li
147.635 144.437 li
150.059 142.054 li
150.824 140.267 li
151.569 140.267 li
153.356 138.479 li
156.941 136.692 li
159.581 136.692 li
160.411 135.501 li
161.218 134.309 li
161.482 131.926 li
163.019 131.926 li
164.952 131.33 li
166.098 130.734 li
166.766 130.734 li
168.056 130.139 li
170.672 128.947 li
171.805 127.755 li
171.989 127.755 li
173.251 126.563 li
173.948 125.372 li
175.622 124.181 li
176.266 123.585 li
177.052 123.585 li
178.118 122.989 li
178.71 121.797 li
180.001 121.202 li
181.504 120.01 li
182.293 116.435 li
184.542 116.435 li
186.743 115.84 li
188.893 115.244 li
189.712 113.456 li
190.311 111.074 li
191.379 109.882 li
192.039 107.499 li
193.227 106.308 li
194.109 105.712 li
194.966 105.712 li
196.043 104.52 li
196.925 102.733 li
197.395 102.733 li
198.313 102.733 li
199.277 102.733 li
200.769 101.541 li
201.25 100.946 li
202.19 100.946 li
203.036 100.349 li
204.108 99.1583 li
205.082 98.5623 li
206.485 97.3703 li
207.66 96.7753 li
208.525 95.5833 li
209.521 94.9883 li
210.333 93.7963 li
211.56 92.6043 li
212.131 92.6043 li
212.83 92.0093 li
214.136 90.8173 li
215.385 90.2223 li
216.584 89.6263 li
217.659 89.6263 li
218.62 89.0303 li
219.404 88.4343 li
220.665 87.2423 li
221.671 86.0513 li
222.577 86.0513 li
223.232 84.8604 li
223.934 84.8604 li
224.774 84.8604 li
226.154 83.6683 li
227.133 83.6683 li
227.998 83.6683 li
229.343 83.0723 li
230.146 82.4763 li
230.729 81.2854 li
231.495 80.0943 li
232.124 80.0943 li
232.879 79.4973 li
233.661 78.9023 li
234.134 78.3064 li
234.84 78.3064 li
235.805 77.7103 li
236.618 77.1153 li
237.247 76.5183 li
237.942 74.1353 li
238.544 73.5403 li
239.228 72.3483 li
240.043 71.7523 li
240.713 71.7523 li
241.331 71.1563 li
241.713 70.5614 li
242.699 70.5614 li
243.489 69.3693 li
244.259 68.1783 li
244.762 67.5824 li
245.682 67.5824 li
246.265 66.9863 li
246.807 66.9863 li
247.496 66.3903 li
248.252 65.7953 li
249.044 65.7953 li
249.736 65.7953 li
250.643 65.7953 li
251.361 65.7953 li
251.793 64.0083 li
252.34 63.4113 li
253.089 62.8163 li
253.785 61.6243 li
254.453 61.0293 li
255.063 61.0293 li
255.747 60.4323 li
256.446 59.8373 li
257.089 59.2413 li
257.768 59.2413 li
258.499 59.2413 li
259.204 59.2413 li
259.994 58.6453 li
260.899 57.4543 li
261.69 56.2623 li
262.159 55.0703 li
262.833 55.0703 li
263.697 54.4753 li
264.472 53.8793 li
264.979 53.8793 li
265.561 53.8793 li
266.297 53.8793 li
266.935 53.2833 li
267.638 52.6883 li
268.374 52.6883 li
269.05 52.6883 li
269.645 52.0923 li
270.149 51.4963 li
270.903 51.4963 li
271.575 50.9013 li
272.268 50.9013 li
272.874 50.9013 li
273.485 50.9013 li
274.216 49.7094 li
274.733 49.7094 li
275.285 49.7094 li
275.838 48.5173 li
276.508 48.5173 li
277.147 48.5173 li
277.672 48.5173 li
278.267 48.5173 li
278.905 48.5173 li
279.36 47.3253 li
279.861 47.3253 li
280.46 47.3253 li
280.93 46.7303 li
281.382 46.7303 li
281.833 46.1344 li
282.432 46.1344 li
283.02 44.9423 li
283.556 44.9423 li
284.109 44.3463 li
284.713 44.3463 li
285.281 43.7513 li
285.8 43.7513 li
286.265 42.5593 li
286.763 42.5593 li
287.326 42.5593 li
287.814 42.5593 li
288.354 41.9633 li
288.961 41.3683 li
289.44 40.7723 li
289.972 40.7723 li
290.395 40.7723 li
290.965 40.1763 li
291.496 40.1763 li
291.997 40.1763 li
292.409 40.1763 li
292.923 40.1763 li
293.429 40.1763 li
293.911 39.5813 li
294.435 38.3893 li
294.902 38.3893 li
295.419 38.3893 li
295.904 38.3893 li
296.391 38.3893 li
296.91 38.3893 li
297.378 38.3893 li
297.888 38.3893 li
298.331 38.3893 li
298.74 38.3893 li
299.182 38.3893 li
299.669 38.3893 li
300.181 38.3893 li
300.704 38.3893 li
301.211 37.7933 li
301.67 37.1973 li
302.106 37.1973 li
302.554 37.1973 li
303.083 36.6023 li
303.515 36.6023 li
303.982 36.6023 li
304.488 36.6023 li
304.952 36.6023 li
305.363 36.6023 li
305.87 36.6023 li
306.34 36.6023 li
306.783 36.6023 li
307.274 36.6023 li
307.718 36.6023 li
308.104 36.6023 li
308.478 36.6023 li
308.928 36.6023 li
309.327 36.6023 li
309.776 35.4103 li
310.144 35.4103 li
310.516 35.4103 li
310.96 34.8153 li
311.384 34.8153 li
311.796 34.8153 li
312.187 34.8153 li
312.604 34.8153 li
312.979 34.8153 li
313.37 34.8153 li
313.781 34.2183 li
314.199 34.2183 li
314.625 33.6233 li
315.037 33.6233 li
315.47 33.6233 li
315.877 33.0263 li
316.3 33.0263 li
316.721 32.4313 li
317.132 32.4313 li
317.47 32.4313 li
317.816 32.4313 li
318.199 31.8354 li
318.545 31.2393 li
318.921 31.2393 li
319.316 31.2393 li
319.688 31.2393 li
320.098 30.6443 li
320.476 30.6443 li
320.8 30.6443 li
321.172 30.6443 li
321.556 30.6443 li
321.859 30.6443 li
322.252 30.6443 li
322.594 30.6443 li
322.919 30.6443 li
323.241 30.6443 li
323.625 30.6443 li
324.002 30.6443 li
324.366 30.6443 li
324.708 30.6443 li
325.094 30.6443 li
325.42 30.6443 li
325.771 30.6443 li
326.108 30.6443 li
326.468 30.6443 li
326.799 30.6443 li
327.131 30.6443 li
327.456 30.6443 li
327.812 30.6443 li
328.126 30.6443 li
328.452 30.6443 li
328.768 30.6443 li
329.09 30.6443 li
329.425 30.6443 li
329.754 30.6443 li
330.096 30.6443 li
330.445 30.6443 li
330.767 30.6443 li
331.109 30.6443 li
331.457 30.6443 li
331.771 30.0483 li
332.079 30.0483 li
332.387 30.0483 li
332.717 30.0483 li
333.023 29.4523 li
333.329 29.4523 li
333.646 29.4523 li
333.97 29.4523 li
334.299 29.4523 li
334.586 29.4523 li
334.864 28.8564 li
335.136 28.8564 li
335.399 28.8564 li
335.696 28.8564 li
336.029 28.8564 li
336.318 28.2614 li
336.604 28.2614 li
336.904 28.2614 li
337.231 27.6653 li
337.538 27.6653 li
337.833 27.6653 li
338.132 27.6653 li
338.425 27.6653 li
338.742 27.6653 li
339.009 27.0693 li
339.316 27.0693 li
339.597 27.0693 li
339.87 26.4733 li
340.149 26.4733 li
340.427 26.4733 li
340.732 26.4733 li
341.013 26.4733 li
341.291 25.8783 li
341.569 25.8783 li
341.807 25.8783 li
342.065 25.8783 li
342.313 25.8783 li
342.553 25.8783 li
342.818 25.8783 li
343.082 25.8783 li
343.37 25.8783 li
343.646 25.8783 li
343.916 25.8783 li
344.167 25.8783 li
344.426 25.8783 li
344.681 25.8783 li
344.938 25.2823 li
345.203 25.2823 li
345.439 25.2823 li
345.686 25.2823 li
345.946 25.2823 li
346.196 25.2823 li
346.43 25.2823 li
346.663 25.2823 li
346.886 25.2823 li
347.135 25.2823 li
347.375 25.2823 li
347.622 25.2823 li
347.862 25.2823 li
348.097 25.2823 li
348.33 25.2823 li
348.551 25.2823 li
348.772 25.2823 li
349.009 25.2823 li
349.241 25.2823 li
349.483 25.2823 li
349.708 25.2823 li
349.915 25.2823 li
350.144 25.2823 li
350.378 25.2823 li
350.588 25.2823 li
350.808 24.6863 li
351.054 24.6863 li
351.283 24.6863 li
351.502 24.6863 li
351.733 24.6863 li
351.956 24.6863 li
352.159 24.0903 li
352.384 24.0903 li
352.588 24.0903 li
352.798 24.0903 li
353.011 24.0903 li
353.231 24.0903 li
353.461 23.4953 li
353.7 23.4953 li
353.927 23.4953 li
354.113 23.4953 li
354.308 23.4953 li
354.518 23.4953 li
354.736 23.4953 li
354.953 23.4953 li
355.163 23.4953 li
355.388 23.4953 li
355.58 23.4953 li
355.779 23.4953 li
355.972 23.4953 li
356.161 23.4953 li
356.36 23.4953 li
356.566 23.4953 li
356.756 23.4953 li
356.949 23.4953 li
357.131 23.4953 li
357.313 23.4953 li
357.497 23.4953 li
357.685 23.4953 li
357.871 23.4953 li
358.053 23.4953 li
358.238 23.4953 li
358.429 23.4953 li
358.612 23.4953 li
358.811 23.4953 li
359.004 23.4953 li
359.191 23.4953 li
359.399 23.4953 li
359.572 23.4953 li
359.745 23.4953 li
359.931 22.8993 li
360.124 22.8993 li
360.28 22.8993 li
360.463 22.8993 li
360.655 22.3033 li
360.824 22.3033 li
360.988 22.3033 li
361.15 22.3033 li
361.325 22.3033 li
361.491 22.3033 li
361.657 22.3033 li
361.82 22.3033 li
362 22.3033 li
362.166 22.3033 li
362.33 22.3033 li
362.494 22.3033 li
362.638 22.3033 li
362.81 22.3033 li
362.984 22.3033 li
363.132 22.3033 li
363.293 22.3033 li
363.458 22.3033 li
363.619 22.3033 li
363.771 22.3033 li
363.941 22.3033 li
364.106 22.3033 li
364.261 22.3033 li
364.424 22.3033 li
364.586 22.3033 li
364.747 22.3033 li
364.902 22.3033 li
365.051 22.3033 li
365.201 22.3033 li
365.357 22.3033 li
365.508 22.3033 li
365.657 22.3033 li
365.801 22.3033 li
365.963 22.3033 li
366.11 22.3033 li
366.268 22.3033 li
366.409 22.3033 li
366.556 22.3033 li
366.698 22.3033 li
366.841 22.3033 li
366.993 22.3033 li
367.136 22.3033 li
367.287 22.3033 li
367.426 22.3033 li
367.558 22.3033 li
367.702 22.3033 li
367.85 22.3033 li
367.988 22.3033 li
368.127 22.3033 li
368.261 22.3033 li
368.392 22.3033 li
368.516 22.3033 li
368.654 22.3033 li
368.782 22.3033 li
368.912 22.3033 li
369.056 21.7073 li
369.197 21.7073 li
369.33 21.7073 li
369.467 21.7073 li
369.607 21.7073 li
369.732 21.7073 li
369.865 21.7073 li
369.997 21.7073 li
370.125 21.7073 li
370.256 21.7073 li
370.393 21.7073 li
370.511 21.7073 li
370.636 21.7073 li
370.768 21.7073 li
370.904 21.7073 li
371.044 21.7073 li
371.166 21.7073 li
371.295 21.7073 li
371.414 21.7073 li
371.545 21.7073 li
371.659 21.7073 li
371.769 21.7073 li
371.881 21.7073 li
371.998 21.7073 li
372.107 21.7073 li
372.219 20.5163 li
372.338 20.5163 li
372.46 20.5163 li
372.572 20.5163 li
372.687 20.5163 li
372.806 20.5163 li
372.914 20.5163 li
373.038 20.5163 li
373.151 20.5163 li
373.261 20.5163 li
373.38 20.5163 li
373.481 20.5163 li
373.588 20.5163 li
373.709 20.5163 li
373.82 20.5163 li
373.928 20.5163 li
374.041 20.5163 li
374.147 20.5163 li
374.255 20.5163 li
374.369 20.5163 li
374.479 20.5163 li
374.575 20.5163 li
374.68 20.5163 li
374.777 20.5163 li
374.879 20.5163 li
374.984 20.5163 li
375.081 20.5163 li
375.179 20.5163 li
375.286 20.5163 li
375.399 20.5163 li
375.511 20.5163 li
375.612 20.5163 li
375.712 20.5163 li
375.807 20.5163 li
375.909 20.5163 li
376.006 20.5163 li
376.1 20.5163 li
376.202 20.5163 li
376.296 20.5163 li
376.396 20.5163 li
376.491 20.5163 li
376.583 20.5163 li
376.678 20.5163 li
376.773 20.5163 li
376.864 20.5163 li
376.957 20.5163 li
377.041 20.5163 li
377.129 20.5163 li
377.22 20.5163 li
377.32 20.5163 li
377.407 20.5163 li
377.491 20.5163 li
377.575 20.5163 li
377.672 20.5163 li
377.767 20.5163 li
377.861 20.5163 li
377.95 20.5163 li
378.035 20.5163 li
378.122 20.5163 li
378.213 20.5163 li
378.3 20.5163 li
378.379 20.5163 li
378.469 20.5163 li
378.552 20.5163 li
378.637 20.5163 li
378.725 19.9193 li
378.808 19.9193 li
378.899 19.9193 li
378.979 19.9193 li
379.064 19.9193 li
379.145 19.9193 li
379.225 19.9193 li
379.309 19.9193 li
379.396 19.9193 li
379.475 19.9193 li
379.556 19.9193 li
379.641 19.9193 li
379.718 19.9193 li
379.794 19.9193 li
379.874 19.9193 li
379.952 19.9193 li
380.025 19.9193 li
380.099 19.9193 li
380.179 19.9193 li
380.261 19.9193 li
380.336 19.9193 li
380.406 19.9193 li
380.482 19.9193 li
380.559 19.9193 li
380.632 19.9193 li
380.704 19.9193 li
380.774 19.9193 li
380.843 19.9193 li
380.917 19.9193 li
380.992 19.9193 li
381.068 19.9193 li
381.145 19.9193 li
381.21 19.9193 li
381.281 19.9193 li
381.352 19.9193 li
381.415 19.9193 li
381.482 19.9193 li
381.546 19.9193 li
381.615 19.9193 li
381.686 19.9193 li
381.757 19.9193 li
381.823 19.9193 li
381.888 19.9193 li
381.953 19.9193 li
382.022 19.9193 li
382.087 19.9193 li
382.15 19.9193 li
382.214 19.9193 li
382.277 19.9193 li
382.339 19.9193 li
382.404 19.9193 li
382.468 19.9193 li
382.529 19.9193 li
382.593 19.9193 li
382.661 19.9193 li
382.724 19.9193 li
382.795 19.9193 li
382.86 19.9193 li
382.918 19.9193 li
382.984 19.9193 li
383.044 19.9193 li
383.109 19.9193 li
383.171 19.9193 li
383.236 19.9193 li
383.293 19.9193 li
383.353 19.9193 li
383.408 19.9193 li
383.469 19.9193 li
383.527 19.9193 li
383.583 19.9193 li
383.637 19.9193 li
383.689 19.9193 li
383.748 19.9193 li
383.809 19.9193 li
383.868 19.9193 li
383.928 19.9193 li
383.983 19.9193 li
384.038 19.9193 li
384.091 19.9193 li
384.153 19.9193 li
384.211 19.9193 li
384.268 19.9193 li
384.32 19.9193 li
384.375 19.9193 li
384.428 19.9193 li
384.481 19.9193 li
384.536 19.9193 li
384.586 19.9193 li
384.643 19.9193 li
384.699 19.9193 li
384.753 19.9193 li
384.81 19.9193 li
384.855 19.9193 li
384.904 19.9193 li
384.961 19.9193 li
385.012 19.9193 li
385.063 19.9193 li
385.113 19.9193 li
385.164 19.9193 li
385.213 19.9193 li
385.264 19.9193 li
385.309 19.9193 li
385.357 19.9193 li
385.409 19.9193 li
385.462 19.9193 li
385.513 19.9193 li
385.56 19.9193 li
385.609 19.9193 li
385.654 19.9193 li
385.703 19.9193 li
385.755 19.9193 li
385.804 19.9193 li
385.855 19.9193 li
385.905 19.9193 li
385.949 19.9193 li
385.993 19.9193 li
386.035 19.9193 li
386.084 19.9193 li
386.132 19.9193 li
386.182 19.9193 li
386.222 19.9193 li
386.267 19.9193 li
386.311 19.9193 li
386.356 19.9193 li
386.402 19.9193 li
386.445 19.9193 li
386.488 19.9193 li
386.53 19.9193 li
386.576 19.9193 li
386.623 19.9193 li
386.665 19.9193 li
386.71 19.9193 li
386.75 19.9193 li
386.79 19.9193 li
386.827 19.9193 li
386.872 19.9193 li
386.914 19.9193 li
386.957 19.9193 li
386.999 19.9193 li
387.041 19.9193 li
387.08 19.9193 li
387.122 19.9193 li
387.163 19.9193 li
387.204 19.3243 li
387.24 19.3243 li
387.281 19.3243 li
387.318 19.3243 li
387.358 19.3243 li
387.397 19.3243 li
387.435 19.3243 li
387.472 19.3243 li
387.507 19.3243 li
387.545 19.3243 li
387.583 19.3243 li
387.623 19.3243 li
387.659 19.3243 li
387.7 19.3243 li
387.736 19.3243 li
387.771 19.3243 li
387.805 19.3243 li
387.841 19.3243 li
387.875 19.3243 li
387.91 19.3243 li
387.942 19.3243 li
387.979 19.3243 li
388.015 19.3243 li
388.051 19.3243 li
388.084 19.3243 li
388.114 19.3243 li
388.148 19.3243 li
388.181 19.3243 li
388.212 19.3243 li
388.243 19.3243 li
388.279 19.3243 li
388.313 19.3243 li
388.345 19.3243 li
388.378 19.3243 li
388.41 19.3243 li
388.445 19.3243 li
388.475 19.3243 li
388.505 19.3243 li
388.536 19.3243 li
388.572 19.3243 li
388.602 19.3243 li
388.634 19.3243 li
388.662 19.3243 li
388.69 19.3243 li
388.72 19.3243 li
388.752 19.3243 li
388.786 19.3243 li
388.814 19.3243 li
388.845 19.3243 li
388.872 19.3243 li
388.899 19.3243 li
388.927 19.3243 li
388.957 19.3243 li
388.984 19.3243 li
389.014 19.3243 li
389.045 19.3243 li
389.074 19.3243 li
389.102 19.3243 li
389.131 19.3243 li
389.159 19.3243 li
389.188 19.3243 li
389.215 19.3243 li
389.241 19.3243 li
389.266 19.3243 li
389.293 19.3243 li
389.317 19.3243 li
389.338 19.3243 li
389.366 19.3243 li
389.39 19.3243 li
389.418 19.3243 li
389.441 19.3243 li
389.469 19.3243 li
389.492 19.3243 li
389.519 19.3243 li
389.541 19.3243 li
389.565 19.3243 li
389.59 19.3243 li
389.614 19.3243 li
389.639 19.3243 li
389.665 19.3243 li
389.688 19.3243 li
389.714 19.3243 li
389.737 19.3243 li
389.761 19.3243 li
389.782 19.3243 li
389.804 19.3243 li
389.826 19.3243 li
389.848 19.3243 li
389.869 19.3243 li
389.893 19.3243 li
389.917 19.3243 li
389.942 19.3243 li
389.966 19.3243 li
389.989 19.3243 li
390.01 19.3243 li
390.03 19.3243 li
390.05 19.3243 li
390.07 19.3243 li
390.091 19.3243 li
390.116 19.3243 li
390.139 19.3243 li
390.163 19.3243 li
390.183 19.3243 li
390.204 19.3243 li
390.224 19.3243 li
390.245 19.3243 li
390.266 19.3243 li
390.287 19.3243 li
390.309 19.3243 li
390.329 19.3243 li
390.351 19.3243 li
390.371 19.3243 li
390.391 19.3243 li
390.409 19.3243 li
390.429 19.3243 li
390.447 19.3243 li
390.465 19.3243 li
390.481 19.3243 li
390.5 19.3243 li
390.518 19.3243 li
390.534 19.3243 li
390.554 19.3243 li
390.572 19.3243 li
390.591 19.3243 li
390.611 19.3243 li
390.629 19.3243 li
390.647 19.3243 li
390.667 19.3243 li
390.685 19.3243 li
390.702 19.3243 li
390.718 19.3243 li
390.738 19.3243 li
390.755 19.3243 li
390.771 19.3243 li
390.79 19.3243 li
390.806 19.3243 li
390.824 19.3243 li
390.838 19.3243 li
390.856 19.3243 li
390.873 19.3243 li
390.891 19.3243 li
390.907 19.3243 li
390.925 19.3243 li
390.941 19.3243 li
390.957 19.3243 li
390.972 19.3243 li
390.988 19.3243 li
391.006 19.3243 li
391.023 19.3243 li
391.036 19.3243 li
391.053 19.3243 li
391.066 19.3243 li
391.084 19.3243 li
391.098 19.3243 li
391.115 19.3243 li
391.129 19.3243 li
391.145 19.3243 li
391.16 19.3243 li
391.174 19.3243 li
391.189 19.3243 li
391.202 19.3243 li
391.216 19.3243 li
391.232 19.3243 li
391.25 19.3243 li
391.264 19.3243 li
391.279 19.3243 li
391.294 19.3243 li
391.309 19.3243 li
391.325 19.3243 li
391.338 19.3243 li
391.351 19.3243 li
391.365 19.3243 li
391.379 19.3243 li
391.393 19.3243 li
391.407 19.3243 li
391.419 19.3243 li
391.432 19.3243 li
391.445 19.3243 li
391.457 19.3243 li
391.473 19.3243 li
391.489 19.3243 li
391.502 19.3243 li
391.513 19.3243 li
391.525 19.3243 li
391.536 19.3243 li
391.549 19.3243 li
391.561 19.3243 li
391.575 19.3243 li
391.586 19.3243 li
391.599 19.3243 li
391.611 19.3243 li
391.625 19.3243 li
391.636 19.3243 li
391.647 19.3243 li
391.657 19.3243 li
391.67 19.3243 li
391.682 19.3243 li
391.692 19.3243 li
391.705 19.3243 li
391.716 19.3243 li
391.726 19.3243 li
391.738 19.3243 li
391.748 19.3243 li
391.759 19.3243 li
391.77 19.3243 li
391.781 19.3243 li
391.791 19.3243 li
391.801 19.3243 li
391.811 19.3243 li
391.821 19.3243 li
391.83 19.3243 li
391.84 19.3243 li
391.849 19.3243 li
391.86 19.3243 li
391.871 19.3243 li
391.882 19.3243 li
391.891 19.3243 li
391.9 19.3243 li
391.911 19.3243 li
391.922 19.3243 li
391.931 19.3243 li
391.942 19.3243 li
391.951 19.3243 li
391.961 19.3243 li
391.97 19.3243 li
391.978 19.3243 li
391.987 19.3243 li
391.994 19.3243 li
392.002 19.3243 li
392.009 19.3243 li
392.017 19.3243 li
392.027 19.3243 li
392.038 19.3243 li
392.047 19.3243 li
392.055 19.3243 li
392.064 19.3243 li
392.072 19.3243 li
392.083 19.3243 li
392.09 19.3243 li
392.099 19.3243 li
392.107 19.3243 li
392.114 19.3243 li
392.124 19.3243 li
392.133 19.3243 li
392.141 19.3243 li
392.148 19.3243 li
392.156 19.3243 li
392.163 19.3243 li
392.171 19.3243 li
392.179 19.3243 li
392.187 19.3243 li
392.195 19.3243 li
392.202 19.3243 li
392.212 19.3243 li
392.219 19.3243 li
392.228 19.3243 li
392.234 19.3243 li
392.243 19.3243 li
392.249 19.3243 li
392.253 19.3243 li
392.261 19.3243 li
392.268 19.3243 li
392.275 19.3243 li
392.282 19.3243 li
392.289 19.3243 li
392.297 19.3243 li
392.304 19.3243 li
392.311 19.3243 li
392.319 19.3243 li
392.324 19.3243 li
392.332 19.3243 li
392.339 19.3243 li
392.345 19.3243 li
392.352 19.3243 li
392.359 19.3243 li
392.365 19.3243 li
392.373 19.3243 li
392.38 19.3243 li
392.387 19.3243 li
392.394 19.3243 li
392.402 19.3243 li
392.407 19.3243 li
392.414 19.3243 li
392.422 19.3243 li
392.429 19.3243 li
392.436 19.3243 li
392.443 19.3243 li
392.449 19.3243 li
392.456 19.3243 li
392.464 19.3243 li
392.469 19.3243 li
392.477 19.3243 li
392.481 19.3243 li
392.487 19.3243 li
392.493 19.3243 li
392.498 19.3243 li
392.504 19.3243 li
392.509 19.3243 li
392.516 19.3243 li
392.522 19.3243 li
392.527 19.3243 li
392.532 19.3243 li
392.537 19.3243 li
392.545 19.3243 li
392.549 19.3243 li
392.555 19.3243 li
392.561 19.3243 li
392.566 19.3243 li
392.57 19.3243 li
392.575 19.3243 li
392.581 19.3243 li
392.587 19.3243 li
392.591 19.3243 li
392.596 19.3243 li
392.6 19.3243 li
392.606 19.3243 li
392.611 19.3243 li
392.617 19.3243 li
392.623 19.3243 li
392.628 19.3243 li
392.632 19.3243 li
392.636 19.3243 li
392.641 19.3243 li
392.645 19.3243 li
392.65 19.3243 li
392.654 19.3243 li
392.658 19.3243 li
392.663 19.3243 li
392.668 19.3243 li
392.672 19.3243 li
392.677 19.3243 li
392.682 19.3243 li
392.686 19.3243 li
392.691 19.3243 li
392.695 19.3243 li
392.699 19.3243 li
392.703 19.3243 li
392.707 19.3243 li
392.711 19.3243 li
392.714 19.3243 li
392.718 19.3243 li
392.721 19.3243 li
392.725 19.3243 li
392.73 19.3243 li
392.734 19.3243 li
392.738 19.3243 li
392.743 19.3243 li
392.747 19.3243 li
392.75 19.3243 li
392.754 19.3243 li
392.758 19.3243 li
392.761 19.3243 li
392.765 19.3243 li
392.77 19.3243 li
392.773 19.3243 li
392.777 19.3243 li
392.779 19.3243 li
392.783 19.3243 li
392.787 19.3243 li
392.792 19.3243 li
392.795 19.3243 li
392.798 19.3243 li
392.803 19.3243 li
392.807 19.3243 li
392.809 19.3243 li
392.813 19.3243 li
392.816 19.3243 li
392.82 19.3243 li
392.822 19.3243 li
392.825 19.3243 li
392.827 19.3243 li
392.831 19.3243 li
392.834 19.3243 li
392.836 19.3243 li
392.84 19.3243 li
392.843 19.3243 li
392.845 19.3243 li
392.849 19.3243 li
392.852 19.3243 li
392.856 19.3243 li
392.86 19.3243 li
392.863 19.3243 li
392.866 19.3243 li
392.87 19.3243 li
392.873 19.3243 li
392.876 19.3243 li
392.879 19.3243 li
392.882 19.3243 li
392.885 19.3243 li
392.888 19.3243 li
392.891 19.3243 li
392.893 19.3243 li
392.896 19.3243 li
392.9 19.3243 li
392.902 19.3243 li
392.905 19.3243 li
392.908 19.3243 li
392.91 19.3243 li
392.913 19.3243 li
392.916 19.3243 li
392.918 19.3243 li
392.92 19.3243 li
392.924 19.3243 li
392.926 19.3243 li
392.927 19.3243 li
392.929 19.3243 li
392.931 19.3243 li
392.933 19.3243 li
392.936 19.3243 li
392.938 19.3243 li
392.94 19.3243 li
392.942 19.3243 li
392.944 19.3243 li
392.946 19.3243 li
392.948 19.3243 li
392.95 19.3243 li
392.953 19.3243 li
392.955 19.3243 li
392.957 19.3243 li
392.959 19.3243 li
392.961 19.3243 li
392.963 19.3243 li
392.964 19.3243 li
392.966 19.3243 li
392.969 19.3243 li
392.972 19.3243 li
392.974 19.3243 li
392.975 19.3243 li
392.976 19.3243 li
392.979 19.3243 li
392.981 19.3243 li
392.983 19.3243 li
392.985 19.3243 li
392.986 19.3243 li
392.987 19.3243 li
392.99 19.3243 li
392.992 19.3243 li
392.994 19.3243 li
392.996 19.3243 li
392.999 19.3243 li
393 19.3243 li
393.001 19.3243 li
393.003 19.3243 li
393.004 19.3243 li
393.005 19.3243 li
393.007 19.3243 li
393.009 19.3243 li
393.011 19.3243 li
393.013 19.3243 li
393.015 19.3243 li
393.016 19.3243 li
393.019 19.3243 li
393.02 19.3243 li
393.022 19.3243 li
393.023 19.3243 li
393.024 19.3243 li
393.025 19.3243 li
393.027 19.3243 li
393.029 19.3243 li
393.031 19.3243 li
393.032 19.3243 li
393.034 19.3243 li
393.036 19.3243 li
393.038 19.3243 li
393.039 19.3243 li
393.04 19.3243 li
393.041 19.3243 li
393.042 19.3243 li
393.043 19.3243 li
393.045 19.3243 li
393.047 19.3243 li
393.049 19.3243 li
393.05 19.3243 li
393.052 19.3243 li
393.054 19.3243 li
393.056 19.3243 li
393.057 19.3243 li
393.059 19.3243 li
393.06 19.3243 li
393.061 19.3243 li
393.062 19.3243 li
393.064 19.3243 li
393.065 19.3243 li
393.066 19.3243 li
393.068 19.3243 li
393.07 19.3243 li
393.071 19.3243 li
393.073 19.3243 li
393.074 19.3243 li
393.075 19.3243 li
393.076 19.3243 li
393.077 19.3243 li
393.078 19.3243 li
393.079 19.3243 li
393.08 19.3243 li
393.081 19.3243 li
393.082 19.3243 li
393.083 19.3243 li
393.084 19.3243 li
393.085 19.3243 li
393.086 19.3243 li
393.087 19.3243 li
393.088 19.3243 li
393.089 19.3243 li
393.09 19.3243 li
393.091 19.3243 li
393.092 19.3243 li
393.093 19.3243 li
393.095 19.3243 li
393.096 19.3243 li
393.098 19.3243 li
393.099 19.3243 li
393.1 19.3243 li
393.102 19.3243 li
393.103 19.3243 li
393.104 19.3243 li
393.105 19.3243 li
393.106 19.3243 li
393.107 19.3243 li
393.108 19.3243 li
393.109 19.3243 li
393.11 19.3243 li
393.111 19.3243 li
393.113 19.3243 li
393.114 19.3243 li
393.115 19.3243 li
393.116 19.3243 li
393.117 19.3243 li
393.118 19.3243 li
393.119 19.3243 li
393.12 19.3243 li
393.121 19.3243 li
393.122 19.3243 li
393.123 19.3243 li
393.124 19.3243 li
393.125 19.3243 li
393.126 19.3243 li
393.127 19.3243 li
393.128 19.3243 li
393.129 19.3243 li
393.13 19.3243 li
393.131 19.3243 li
393.132 19.3243 li
393.133 19.3243 li
393.134 19.3243 li
393.135 19.3243 li
393.136 19.3243 li
393.137 19.3243 li
393.138 19.3243 li
393.139 19.3243 li
393.14 19.3243 li
393.141 19.3243 li
393.142 19.3243 li
393.143 19.3243 li
393.144 19.3243 li
393.145 19.3243 li
393.147 19.3243 li
393.148 19.3243 li
393.149 19.3243 li
393.15 19.3243 li
393.151 19.3243 li
393.152 19.3243 li
393.153 19.3243 li
393.154 19.3243 li
393.155 19.3243 li
393.156 19.3243 li
393.157 19.3243 li
393.158 19.3243 li
393.159 19.3243 li
393.16 19.3243 li
393.161 19.3243 li
393.162 19.3243 li
393.163 19.3243 li
393.164 19.3243 li
393.165 19.3243 li
393.166 19.3243 li
393.167 19.3243 li
393.168 19.3243 li
393.169 19.3243 li
393.17 19.3243 li
393.171 19.3243 li
393.172 19.3243 li
393.173 19.3243 li
393.174 19.3243 li
393.175 19.3243 li
393.176 19.3243 li
393.177 19.3243 li
393.178 19.3243 li
393.179 19.3243 li
393.18 19.3243 li
393.181 19.3243 li
393.182 19.3243 li
393.183 19.3243 li
393.184 19.3243 li
393.185 19.3243 li
393.186 19.3243 li
@
0 lj
73.01 222.351 mo
77.51 222.351 li
77.51 217.851 li
73.01 217.851 li
cp
@
100.004 200.903 mo
104.504 200.903 li
104.504 196.403 li
100.004 196.403 li
cp
@
117.32 183.625 mo
121.82 183.625 li
121.82 179.125 li
117.32 179.125 li
cp
@
130.336 168.731 mo
134.836 168.731 li
134.836 164.231 li
130.336 164.231 li
cp
@
138.281 160.986 mo
142.781 160.986 li
142.781 156.486 li
138.281 156.486 li
cp
@
147.808 144.304 mo
152.308 144.304 li
152.308 139.804 li
147.808 139.804 li
cp
@
162.702 133.58 mo
167.202 133.58 li
167.202 129.08 li
162.702 129.08 li
cp
@
174.016 125.835 mo
178.516 125.835 li
178.516 121.335 li
174.016 121.335 li
cp
@
186.643 117.494 mo
191.143 117.494 li
191.143 112.994 li
186.643 112.994 li
cp
@
195.145 104.983 mo
199.645 104.983 li
199.645 100.483 li
195.145 100.483 li
cp
@
205.41 99.0253 mo
209.91 99.0253 li
209.91 94.5253 li
205.41 94.5253 li
cp
@
215.409 91.8763 mo
219.909 91.8763 li
219.909 87.3763 li
215.409 87.3763 li
cp
@
224.882 85.9183 mo
229.382 85.9183 li
229.382 81.4183 li
224.882 81.4183 li
cp
@
232.59 80.5564 mo
237.09 80.5564 li
237.09 76.0564 li
232.59 76.0564 li
cp
@
239.463 72.8114 mo
243.963 72.8114 li
243.963 68.3114 li
239.463 68.3114 li
cp
@
246.794 68.0453 mo
251.294 68.0453 li
251.294 63.5453 li
246.794 63.5453 li
cp
@
253.497 62.6833 mo
257.997 62.6833 li
257.997 58.1833 li
253.497 58.1833 li
cp
@
260.583 57.3203 mo
265.083 57.3203 li
265.083 52.8203 li
260.583 52.8203 li
cp
@
267.395 54.3423 mo
271.895 54.3423 li
271.895 49.8423 li
267.395 49.8423 li
cp
@
273.588 50.7673 mo
278.088 50.7673 li
278.088 46.2673 li
273.588 46.2673 li
cp
@
279.132 48.9803 mo
283.632 48.9803 li
283.632 44.4803 li
279.132 44.4803 li
cp
@
284.512 44.8093 mo
289.012 44.8093 li
289.012 40.3093 li
284.512 40.3093 li
cp
@
289.748 42.4263 mo
294.248 42.4263 li
294.248 37.9263 li
289.748 37.9263 li
cp
@
294.66 40.6393 mo
299.16 40.6393 li
299.16 36.1393 li
294.66 36.1393 li
cp
@
299.42 39.4473 mo
303.92 39.4473 li
303.92 34.9473 li
299.42 34.9473 li
cp
@
304.09 38.8513 mo
308.59 38.8513 li
308.59 34.3513 li
304.09 34.3513 li
cp
@
308.266 37.6603 mo
312.766 37.6603 li
312.766 33.1603 li
308.266 33.1603 li
cp
@
312.375 35.8723 mo
316.875 35.8723 li
316.875 31.3723 li
312.375 31.3723 li
cp
@
316.295 33.4903 mo
320.795 33.4903 li
320.795 28.9903 li
316.295 28.9903 li
cp
@
320.003 32.8943 mo
324.503 32.8943 li
324.503 28.3943 li
320.003 28.3943 li
cp
@
323.521 32.8943 mo
328.021 32.8943 li
328.021 28.3943 li
323.521 28.3943 li
cp
@
326.84 32.8943 mo
331.34 32.8943 li
331.34 28.3943 li
326.84 28.3943 li
cp
@
330.138 32.2983 mo
334.638 32.2983 li
334.638 27.7983 li
330.138 27.7983 li
cp
@
333.149 31.1064 mo
337.649 31.1064 li
337.649 26.6064 li
333.149 26.6064 li
cp
@
336.175 29.9153 mo
340.675 29.9153 li
340.675 25.4153 li
336.175 25.4153 li
cp
@
339.041 28.1283 mo
343.541 28.1283 li
343.541 23.6283 li
339.041 23.6283 li
cp
@
341.666 28.1283 mo
346.166 28.1283 li
346.166 23.6283 li
341.666 23.6283 li
cp
@
344.18 27.5323 mo
348.68 27.5323 li
348.68 23.0323 li
344.18 23.0323 li
cp
@
346.522 27.5323 mo
351.022 27.5323 li
351.022 23.0323 li
346.522 23.0323 li
cp
@
348.804 26.9363 mo
353.304 26.9363 li
353.304 22.4363 li
348.804 22.4363 li
cp
@
350.981 26.3403 mo
355.481 26.3403 li
355.481 21.8403 li
350.981 21.8403 li
cp
@
353.138 25.7443 mo
357.638 25.7443 li
357.638 21.2443 li
353.138 21.2443 li
cp
@
355.063 25.7443 mo
359.563 25.7443 li
359.563 21.2443 li
355.063 21.2443 li
cp
@
356.941 25.7443 mo
361.441 25.7443 li
361.441 21.2443 li
356.941 21.2443 li
cp
@
358.738 24.5533 mo
363.238 24.5533 li
363.238 20.0533 li
358.738 20.0533 li
cp
@
360.388 24.5533 mo
364.888 24.5533 li
364.888 20.0533 li
360.388 20.0533 li
cp
@
362.011 24.5533 mo
366.511 24.5533 li
366.511 20.0533 li
362.011 20.0533 li
cp
@
363.552 24.5533 mo
368.052 24.5533 li
368.052 20.0533 li
363.552 20.0533 li
cp
@
365.037 24.5533 mo
369.537 24.5533 li
369.537 20.0533 li
365.037 20.0533 li
cp
@
366.403 24.5533 mo
370.903 24.5533 li
370.903 20.0533 li
366.403 20.0533 li
cp
@
367.747 23.9573 mo
372.247 23.9573 li
372.247 19.4573 li
367.747 19.4573 li
cp
@
369.045 23.9573 mo
373.545 23.9573 li
373.545 19.4573 li
369.045 19.4573 li
cp
@
370.21 22.7653 mo
374.71 22.7653 li
374.71 18.2653 li
370.21 18.2653 li
cp
@
371.339 22.7653 mo
375.839 22.7653 li
375.839 18.2653 li
371.339 18.2653 li
cp
@
372.429 22.7653 mo
376.929 22.7653 li
376.929 18.2653 li
372.429 18.2653 li
cp
@
373.462 22.7653 mo
377.962 22.7653 li
377.962 18.2653 li
373.462 18.2653 li
cp
@
374.428 22.7653 mo
378.928 22.7653 li
378.928 18.2653 li
374.428 18.2653 li
cp
@
375.325 22.7653 mo
379.825 22.7653 li
379.825 18.2653 li
375.325 18.2653 li
cp
@
376.219 22.7653 mo
380.719 22.7653 li
380.719 18.2653 li
376.219 18.2653 li
cp
@
377.059 22.1703 mo
381.559 22.1703 li
381.559 17.6703 li
377.059 17.6703 li
cp
@
377.849 22.1703 mo
382.349 22.1703 li
382.349 17.6703 li
377.849 17.6703 li
cp
@
378.593 22.1703 mo
383.093 22.1703 li
383.093 17.6703 li
378.593 17.6703 li
cp
@
379.296 22.1703 mo
383.796 22.1703 li
383.796 17.6703 li
379.296 17.6703 li
cp
@
379.964 22.1703 mo
384.464 22.1703 li
384.464 17.6703 li
379.964 17.6703 li
cp
@
380.61 22.1703 mo
385.11 22.1703 li
385.11 17.6703 li
380.61 17.6703 li
cp
@
381.219 22.1703 mo
385.719 22.1703 li
385.719 17.6703 li
381.219 17.6703 li
cp
@
381.787 22.1703 mo
386.287 22.1703 li
386.287 17.6703 li
381.787 17.6703 li
cp
@
382.337 22.1703 mo
386.837 22.1703 li
386.837 17.6703 li
382.337 17.6703 li
cp
@
382.863 22.1703 mo
387.363 22.1703 li
387.363 17.6703 li
382.863 17.6703 li
cp
@
383.358 22.1703 mo
387.858 22.1703 li
387.858 17.6703 li
383.358 17.6703 li
cp
@
383.834 22.1703 mo
388.334 22.1703 li
388.334 17.6703 li
383.834 17.6703 li
cp
@
384.279 22.1703 mo
388.779 22.1703 li
388.779 17.6703 li
384.279 17.6703 li
cp
@
384.707 22.1703 mo
389.207 22.1703 li
389.207 17.6703 li
384.707 17.6703 li
cp
@
385.108 21.5743 mo
389.608 21.5743 li
389.608 17.0743 li
385.108 17.0743 li
cp
@
385.486 21.5743 mo
389.986 21.5743 li
389.986 17.0743 li
385.486 17.0743 li
cp
@
385.834 21.5743 mo
390.334 21.5743 li
390.334 17.0743 li
385.834 17.0743 li
cp
@
386.16 21.5743 mo
390.66 21.5743 li
390.66 17.0743 li
386.16 17.0743 li
cp
@
386.47 21.5743 mo
390.97 21.5743 li
390.97 17.0743 li
386.47 17.0743 li
cp
@
386.764 21.5743 mo
391.264 21.5743 li
391.264 17.0743 li
386.764 17.0743 li
cp
@
387.043 21.5743 mo
391.543 21.5743 li
391.543 17.0743 li
387.043 17.0743 li
cp
@
387.291 21.5743 mo
391.791 21.5743 li
391.791 17.0743 li
387.291 17.0743 li
cp
@
387.532 21.5743 mo
392.032 21.5743 li
392.032 17.0743 li
387.532 17.0743 li
cp
@
387.759 21.5743 mo
392.259 21.5743 li
392.259 17.0743 li
387.759 17.0743 li
cp
@
387.973 21.5743 mo
392.473 21.5743 li
392.473 17.0743 li
387.973 17.0743 li
cp
@
388.179 21.5743 mo
392.679 21.5743 li
392.679 17.0743 li
388.179 17.0743 li
cp
@
388.361 21.5743 mo
392.861 21.5743 li
392.861 17.0743 li
388.361 17.0743 li
cp
@
388.54 21.5743 mo
393.04 21.5743 li
393.04 17.0743 li
388.54 17.0743 li
cp
@
388.707 21.5743 mo
393.207 21.5743 li
393.207 17.0743 li
388.707 17.0743 li
cp
@
388.865 21.5743 mo
393.365 21.5743 li
393.365 17.0743 li
388.865 17.0743 li
cp
@
389.014 21.5743 mo
393.514 21.5743 li
393.514 17.0743 li
389.014 17.0743 li
cp
@
389.157 21.5743 mo
393.657 21.5743 li
393.657 17.0743 li
389.157 17.0743 li
cp
@
389.286 21.5743 mo
393.786 21.5743 li
393.786 17.0743 li
389.286 17.0743 li
cp
@
389.407 21.5743 mo
393.907 21.5743 li
393.907 17.0743 li
389.407 17.0743 li
cp
@
389.52 21.5743 mo
394.02 21.5743 li
394.02 17.0743 li
389.52 17.0743 li
cp
@
389.621 21.5743 mo
394.121 21.5743 li
394.121 17.0743 li
389.621 17.0743 li
cp
@
389.72 21.5743 mo
394.22 21.5743 li
394.22 17.0743 li
389.72 17.0743 li
cp
@
389.805 21.5743 mo
394.305 21.5743 li
394.305 17.0743 li
389.805 17.0743 li
cp
@
389.89 21.5743 mo
394.39 21.5743 li
394.39 17.0743 li
389.89 17.0743 li
cp
@
389.969 21.5743 mo
394.469 21.5743 li
394.469 17.0743 li
389.969 17.0743 li
cp
@
390.04 21.5743 mo
394.54 21.5743 li
394.54 17.0743 li
390.04 17.0743 li
cp
@
390.109 21.5743 mo
394.609 21.5743 li
394.609 17.0743 li
390.109 17.0743 li
cp
@
390.178 21.5743 mo
394.678 21.5743 li
394.678 17.0743 li
390.178 17.0743 li
cp
@
390.243 21.5743 mo
394.743 21.5743 li
394.743 17.0743 li
390.243 17.0743 li
cp
@
390.299 21.5743 mo
394.799 21.5743 li
394.799 17.0743 li
390.299 17.0743 li
cp
@
390.35 21.5743 mo
394.85 21.5743 li
394.85 17.0743 li
390.35 17.0743 li
cp
@
390.4 21.5743 mo
394.9 21.5743 li
394.9 17.0743 li
390.4 17.0743 li
cp
@
390.445 21.5743 mo
394.945 21.5743 li
394.945 17.0743 li
390.445 17.0743 li
cp
@
390.485 21.5743 mo
394.985 21.5743 li
394.985 17.0743 li
390.485 17.0743 li
cp
@
390.523 21.5743 mo
395.023 21.5743 li
395.023 17.0743 li
390.523 17.0743 li
cp
@
390.559 21.5743 mo
395.059 21.5743 li
395.059 17.0743 li
390.559 17.0743 li
cp
@
390.59 21.5743 mo
395.09 21.5743 li
395.09 17.0743 li
390.59 17.0743 li
cp
@
390.623 21.5743 mo
395.123 21.5743 li
395.123 17.0743 li
390.623 17.0743 li
cp
@
390.652 21.5743 mo
395.152 21.5743 li
395.152 17.0743 li
390.652 17.0743 li
cp
@
390.677 21.5743 mo
395.177 21.5743 li
395.177 17.0743 li
390.677 17.0743 li
cp
@
390.698 21.5743 mo
395.198 21.5743 li
395.198 17.0743 li
390.698 17.0743 li
cp
@
390.719 21.5743 mo
395.219 21.5743 li
395.219 17.0743 li
390.719 17.0743 li
cp
@
390.738 21.5743 mo
395.238 21.5743 li
395.238 17.0743 li
390.738 17.0743 li
cp
@
390.755 21.5743 mo
395.255 21.5743 li
395.255 17.0743 li
390.755 17.0743 li
cp
@
390.773 21.5743 mo
395.273 21.5743 li
395.273 17.0743 li
390.773 17.0743 li
cp
@
390.787 21.5743 mo
395.287 21.5743 li
395.287 17.0743 li
390.787 17.0743 li
cp
@
390.802 21.5743 mo
395.302 21.5743 li
395.302 17.0743 li
390.802 17.0743 li
cp
@
390.815 21.5743 mo
395.315 21.5743 li
395.315 17.0743 li
390.815 17.0743 li
cp
@
390.826 21.5743 mo
395.326 21.5743 li
395.326 17.0743 li
390.826 17.0743 li
cp
@
390.835 21.5743 mo
395.335 21.5743 li
395.335 17.0743 li
390.835 17.0743 li
cp
@
390.845 21.5743 mo
395.345 21.5743 li
395.345 17.0743 li
390.845 17.0743 li
cp
@
390.855 21.5743 mo
395.355 21.5743 li
395.355 17.0743 li
390.855 17.0743 li
cp
@
390.863 21.5743 mo
395.363 21.5743 li
395.363 17.0743 li
390.863 17.0743 li
cp
@
390.87 21.5743 mo
395.37 21.5743 li
395.37 17.0743 li
390.87 17.0743 li
cp
@
390.879 21.5743 mo
395.379 21.5743 li
395.379 17.0743 li
390.879 17.0743 li
cp
@
390.885 21.5743 mo
395.385 21.5743 li
395.385 17.0743 li
390.885 17.0743 li
cp
@
390.89 21.5743 mo
395.39 21.5743 li
395.39 17.0743 li
390.89 17.0743 li
cp
@
390.896 21.5743 mo
395.396 21.5743 li
395.396 17.0743 li
390.896 17.0743 li
cp
@
390.9 21.5743 mo
395.4 21.5743 li
395.4 17.0743 li
390.9 17.0743 li
cp
@
390.904 21.5743 mo
395.404 21.5743 li
395.404 17.0743 li
390.904 17.0743 li
cp
@
390.909 21.5743 mo
395.409 21.5743 li
395.409 17.0743 li
390.909 17.0743 li
cp
@
390.913 21.5743 mo
395.413 21.5743 li
395.413 17.0743 li
390.913 17.0743 li
cp
@
390.916 21.5743 mo
395.416 21.5743 li
395.416 17.0743 li
390.916 17.0743 li
cp
@
390.918 21.5743 mo
395.418 21.5743 li
395.418 17.0743 li
390.918 17.0743 li
cp
@
390.921 21.5743 mo
395.421 21.5743 li
395.421 17.0743 li
390.921 17.0743 li
cp
@
390.922 21.5743 mo
395.422 21.5743 li
395.422 17.0743 li
390.922 17.0743 li
cp
@
390.924 21.5743 mo
395.424 21.5743 li
395.424 17.0743 li
390.924 17.0743 li
cp
@
390.925 21.5743 mo
395.425 21.5743 li
395.425 17.0743 li
390.925 17.0743 li
cp
@
390.927 21.5743 mo
395.427 21.5743 li
395.427 17.0743 li
390.927 17.0743 li
cp
@
390.929 21.5743 mo
395.429 21.5743 li
395.429 17.0743 li
390.929 17.0743 li
cp
@
390.93 21.5743 mo
395.43 21.5743 li
395.43 17.0743 li
390.93 17.0743 li
cp
@
390.931 21.5743 mo
395.431 21.5743 li
395.431 17.0743 li
390.931 17.0743 li
cp
@
390.931 21.5743 mo
395.431 21.5743 li
395.431 17.0743 li
390.931 17.0743 li
cp
@
390.932 21.5743 mo
395.432 21.5743 li
395.432 17.0743 li
390.932 17.0743 li
cp
@
390.932 21.5743 mo
395.432 21.5743 li
395.432 17.0743 li
390.932 17.0743 li
cp
@
390.933 21.5743 mo
395.433 21.5743 li
395.433 17.0743 li
390.933 17.0743 li
cp
@
390.934 21.5743 mo
395.434 21.5743 li
395.434 17.0743 li
390.934 17.0743 li
cp
@
390.934 21.5743 mo
395.434 21.5743 li
395.434 17.0743 li
390.934 17.0743 li
cp
@
390.934 21.5743 mo
395.434 21.5743 li
395.434 17.0743 li
390.934 17.0743 li
cp
@
390.934 21.5743 mo
395.434 21.5743 li
395.434 17.0743 li
390.934 17.0743 li
cp
@
390.934 21.5743 mo
395.434 21.5743 li
395.434 17.0743 li
390.934 17.0743 li
cp
@
390.935 21.5743 mo
395.435 21.5743 li
395.435 17.0743 li
390.935 17.0743 li
cp
@
390.935 21.5743 mo
395.435 21.5743 li
395.435 17.0743 li
390.935 17.0743 li
cp
@
390.935 21.5743 mo
395.435 21.5743 li
395.435 17.0743 li
390.935 17.0743 li
cp
@
390.935 21.5743 mo
395.435 21.5743 li
395.435 17.0743 li
390.935 17.0743 li
cp
@
390.935 21.5743 mo
395.435 21.5743 li
395.435 17.0743 li
390.935 17.0743 li
cp
@
390.935 21.5743 mo
395.435 21.5743 li
395.435 17.0743 li
390.935 17.0743 li
cp
@
390.935 21.5743 mo
395.435 21.5743 li
395.435 17.0743 li
390.935 17.0743 li
cp
@
390.935 21.5743 mo
395.435 21.5743 li
395.435 17.0743 li
390.935 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
390.936 21.5743 mo
395.436 21.5743 li
395.436 17.0743 li
390.936 17.0743 li
cp
@
1 lj
50.3952 189.06 mo
63.3147 187.929 li
63.3147 180.779 li
79.8014 180.779 li
79.8014 180.184 li
79.8014 178.992 li
79.8014 177.801 li
79.8014 176.609 li
79.8014 175.418 li
79.8014 174.226 li
79.8014 173.631 li
79.8014 171.842 li
79.8014 171.247 li
79.8014 170.651 li
79.8014 169.46 li
83.735 168.864 li
90.3088 168.268 li
90.3088 167.077 li
90.3088 166.481 li
90.3088 165.885 li
90.3088 165.289 li
90.3088 163.502 li
90.3088 162.311 li
95.6808 161.715 li
98.0378 159.927 li
98.0378 158.735 li
98.0378 157.544 li
100.222 156.948 li
100.222 156.353 li
100.222 155.161 li
100.222 153.969 li
100.222 151.586 li
104.156 150.395 li
104.156 149.203 li
104.156 148.608 li
104.156 148.012 li
104.156 147.416 li
104.156 146.225 li
104.156 145.033 li
107.625 143.841 li
113.537 142.054 li
113.537 139.671 li
116.1 139.075 li
116.1 138.479 li
120.641 137.288 li
120.641 135.501 li
122.674 135.501 li
124.576 134.905 li
126.361 134.309 li
127.215 134.309 li
127.215 133.713 li
127.215 133.117 li
127.215 132.522 li
127.215 131.926 li
128.045 129.542 li
128.045 128.351 li
128.045 127.16 li
129.638 126.563 li
131.15 125.968 li
131.15 125.372 li
131.877 125.372 li
135.9 124.776 li
138.307 124.776 li
138.307 124.181 li
141.583 124.181 li
141.583 122.989 li
141.583 121.797 li
142.599 120.606 li
143.581 120.01 li
144.532 118.223 li
146.782 118.223 li
147.635 118.223 li
148.466 117.627 li
148.872 117.032 li
150.059 116.435 li
150.059 115.84 li
151.569 115.84 li
153.007 115.84 li
154.71 115.84 li
155.686 115.84 li
159.014 115.84 li
159.581 115.244 li
159.581 114.648 li
160.411 114.648 li
162.515 114.648 li
163.019 114.053 li
164.001 113.456 li
165.416 113.456 li
166.544 112.861 li
168.473 112.265 li
169.089 112.265 li
171.054 111.669 li
171.054 111.074 li
172.355 111.074 li
172.896 110.478 li
173.776 110.478 li
174.12 110.478 li
174.965 109.882 li
175.13 109.286 li
175.459 108.69 li
177.052 108.095 li
177.361 108.095 li
177.818 107.499 li
178.415 106.308 li
179.002 106.308 li
180.694 105.712 li
181.638 105.712 li
182.164 104.52 li
182.809 104.52 li
183.062 103.924 li
183.688 103.924 li
184.662 103.924 li
185.95 103.924 li
186.179 102.733 li
186.965 102.137 li
188.159 102.137 li
188.159 101.541 li
188.37 100.946 li
189.1 100.349 li
189.509 100.349 li
190.607 100.349 li
191.569 99.7543 li
192.409 99.7543 li
192.957 99.7543 li
193.582 99.7543 li
194.454 99.1583 li
194.711 97.9673 li
196.124 97.3703 li
197.239 96.1793 li
198.01 95.5833 li
198.463 95.5833 li
198.91 94.9883 li
199.567 94.3923 li
200.561 94.3923 li
201.454 93.7963 li
202.057 93.2013 li
202.714 92.0093 li
203.42 92.0093 li
203.859 91.4133 li
203.984 90.8173 li
204.477 90.2223 li
204.962 89.6263 li
205.557 89.0303 li
206.083 88.4343 li
207.218 88.4343 li
207.605 87.8383 li
208.258 87.8383 li
208.631 86.0513 li
209.001 86.0513 li
210.182 84.8604 li
211.075 84.2633 li
211.751 83.6683 li
212.645 83.6683 li
213.013 83.0723 li
213.377 82.4763 li
214.091 82.4763 li
214.354 80.6893 li
215.131 80.6893 li
216.012 78.3064 li
216.787 78.3064 li
217.502 78.3064 li
218.086 78.3064 li
218.657 76.5183 li
219.514 75.9233 li
219.878 74.7313 li
220.595 74.7313 li
221.259 73.5403 li
221.636 71.7523 li
221.909 71.1563 li
222.709 71.1563 li
223.393 69.3693 li
224.123 69.3693 li
224.683 68.7743 li
225.352 68.1783 li
226.007 68.1783 li
226.733 68.1783 li
227.33 68.1783 li
228.108 68.1783 li
228.704 67.5824 li
229.316 66.3903 li
229.915 65.7953 li
230.401 65.7953 li
230.903 65.7953 li
231.884 64.6033 li
232.291 64.6033 li
232.879 64.6033 li
233.18 64.6033 li
233.91 64.6033 li
234.134 64.0083 li
234.797 64.0083 li
235.615 64.0083 li
236.308 63.4113 li
236.883 63.4113 li
237.387 63.4113 li
237.844 62.2203 li
238.717 62.2203 li
239.341 62.2203 li
240.098 62.2203 li
240.784 62.2203 li
241.243 62.2203 li
241.644 61.6243 li
242.125 61.6243 li
242.648 58.6453 li
243.31 58.0493 li
243.877 58.0493 li
244.418 58.0493 li
244.84 58.0493 li
245.318 58.0493 li
245.907 58.0493 li
246.529 57.4543 li
246.908 57.4543 li
247.496 57.4543 li
247.961 56.2623 li
248.597 56.2623 li
249.192 55.6673 li
249.802 55.0703 li
250.296 55.0703 li
250.922 55.0703 li
251.348 55.0703 li
252.134 55.0703 li
252.699 55.0703 li
253.404 55.0703 li
253.877 55.0703 li
254.397 55.0703 li
254.92 55.0703 li
255.445 55.0703 li
255.918 55.0703 li
256.393 54.4753 li
256.975 53.8793 li
257.434 53.2833 li
258.145 52.6883 li
258.848 51.4963 li
259.564 51.4963 li
260.216 51.4963 li
260.536 49.7094 li
261.106 49.1133 li
261.629 49.1133 li
262.202 49.1133 li
262.783 49.1133 li
263.26 49.1133 li
263.812 49.1133 li
264.265 49.1133 li
264.782 49.1133 li
265.275 47.9223 li
265.89 47.9223 li
266.425 46.7303 li
266.935 46.7303 li
267.394 46.7303 li
267.994 46.7303 li
268.52 45.5383 li
269.064 44.9423 li
269.705 44.9423 li
270.294 44.9423 li
270.832 44.9423 li
271.38 44.3463 li
271.899 43.7513 li
272.421 43.1553 li
273 43.1553 li
273.361 43.1553 li
273.905 42.5593 li
274.245 41.9633 li
274.761 41.9633 li
275.174 41.9633 li
275.599 41.9633 li
276.07 41.3683 li
276.519 41.3683 li
276.893 41.3683 li
277.236 41.3683 li
277.794 40.7723 li
278.342 40.7723 li
278.845 40.7723 li
279.332 40.7723 li
279.762 40.7723 li
280.256 40.7723 li
280.627 40.7723 li
281.098 40.7723 li
281.579 40.7723 li
282.106 40.7723 li
282.554 40.1763 li
283.012 40.1763 li
283.459 40.1763 li
283.936 39.5813 li
284.414 39.5813 li
284.861 39.5813 li
285.348 39.5813 li
285.854 39.5813 li
286.276 39.5813 li
286.676 38.9854 li
287.149 38.9854 li
287.534 38.3893 li
288.087 38.3893 li
288.463 37.7933 li
288.909 37.7933 li
289.402 37.7933 li
289.843 37.1973 li
290.329 37.1973 li
290.707 37.1973 li
291.127 37.1973 li
291.607 37.1973 li
292.151 37.1973 li
292.603 37.1973 li
293.041 36.6023 li
293.45 36.6023 li
293.915 36.6023 li
294.404 36.6023 li
294.836 36.6023 li
295.257 36.6023 li
295.727 36.6023 li
296.22 36.6023 li
296.737 36.6023 li
297.229 36.0063 li
297.646 36.0063 li
298.13 36.0063 li
298.53 36.0063 li
299.023 36.0063 li
299.48 36.0063 li
299.893 36.0063 li
300.26 35.4103 li
300.65 35.4103 li
301.047 35.4103 li
301.477 35.4103 li
301.91 35.4103 li
302.336 35.4103 li
302.789 35.4103 li
303.204 35.4103 li
303.597 35.4103 li
304.015 35.4103 li
304.418 35.4103 li
304.822 34.8153 li
305.222 34.8153 li
305.642 34.8153 li
306.022 34.8153 li
306.404 34.8153 li
306.834 34.8153 li
307.242 34.8153 li
307.626 34.2183 li
308.053 34.2183 li
308.421 34.2183 li
308.822 34.2183 li
309.296 34.2183 li
309.699 34.2183 li
310.11 34.2183 li
310.519 33.6233 li
310.888 33.6233 li
311.336 33.6233 li
311.704 33.0263 li
312.158 33.0263 li
312.524 33.0263 li
312.913 32.4313 li
313.261 32.4313 li
313.695 31.8354 li
314.053 31.8354 li
314.452 31.8354 li
314.841 31.8354 li
315.217 31.8354 li
315.592 31.8354 li
315.931 31.8354 li
316.266 31.8354 li
316.651 31.8354 li
317.045 31.8354 li
317.402 31.8354 li
317.742 31.8354 li
318.084 31.8354 li
318.46 31.8354 li
318.813 31.8354 li
319.166 31.8354 li
319.497 31.8354 li
319.873 31.8354 li
320.238 31.8354 li
320.565 31.8354 li
320.917 31.2393 li
321.235 31.2393 li
321.595 31.2393 li
321.914 31.2393 li
322.284 31.2393 li
322.634 31.2393 li
322.97 31.2393 li
323.316 31.2393 li
323.701 31.2393 li
324.03 31.2393 li
324.334 31.2393 li
324.716 31.2393 li
325.057 31.2393 li
325.404 31.2393 li
325.758 31.2393 li
326.078 31.2393 li
326.393 31.2393 li
326.716 31.2393 li
327.034 31.2393 li
327.334 31.2393 li
327.626 30.6443 li
327.953 30.6443 li
328.262 30.6443 li
328.527 30.6443 li
328.834 30.6443 li
329.181 30.6443 li
329.519 30.6443 li
329.835 30.6443 li
330.196 30.6443 li
330.524 30.6443 li
330.844 30.6443 li
331.192 30.6443 li
331.52 30.6443 li
331.86 30.6443 li
332.147 30.6443 li
332.474 30.6443 li
332.799 30.6443 li
333.113 30.6443 li
333.435 30.6443 li
333.754 30.6443 li
334.057 30.6443 li
334.367 30.6443 li
334.676 30.6443 li
334.966 30.6443 li
335.274 30.6443 li
335.591 30.6443 li
335.881 30.6443 li
336.182 30.6443 li
336.465 30.6443 li
336.763 30.6443 li
337.054 30.6443 li
337.351 30.6443 li
337.652 30.6443 li
337.951 30.6443 li
338.256 30.6443 li
338.538 30.6443 li
338.818 30.0483 li
339.122 30.0483 li
339.43 30.0483 li
339.717 30.0483 li
339.988 30.0483 li
340.29 30.0483 li
340.567 30.0483 li
340.886 30.0483 li
341.166 29.4523 li
341.434 29.4523 li
341.713 29.4523 li
342.013 29.4523 li
342.295 29.4523 li
342.596 29.4523 li
342.89 29.4523 li
343.195 29.4523 li
343.48 29.4523 li
343.745 29.4523 li
344.025 29.4523 li
344.314 29.4523 li
344.598 29.4523 li
344.849 29.4523 li
345.125 28.8564 li
345.401 28.8564 li
345.674 28.8564 li
345.937 28.8564 li
346.219 28.8564 li
346.505 28.8564 li
346.787 28.8564 li
347.04 28.8564 li
347.31 28.8564 li
347.543 28.2614 li
347.812 28.2614 li
348.052 28.2614 li
348.275 28.2614 li
348.522 28.2614 li
348.785 28.2614 li
349.024 28.2614 li
349.273 28.2614 li
349.525 28.2614 li
349.767 28.2614 li
350.024 28.2614 li
350.274 28.2614 li
350.55 28.2614 li
350.784 28.2614 li
351.039 28.2614 li
351.27 28.2614 li
351.521 28.2614 li
351.752 28.2614 li
351.99 28.2614 li
352.237 27.6653 li
352.488 27.6653 li
352.732 27.6653 li
352.971 27.0693 li
353.198 25.8783 li
353.429 25.8783 li
353.663 25.8783 li
353.908 25.8783 li
354.149 25.8783 li
354.376 25.8783 li
354.605 25.8783 li
354.845 25.8783 li
355.084 25.8783 li
355.303 25.8783 li
355.519 25.8783 li
355.751 25.8783 li
355.962 25.8783 li
356.174 25.8783 li
356.394 25.8783 li
356.613 25.8783 li
356.811 25.8783 li
357.056 25.8783 li
357.271 25.8783 li
357.49 25.8783 li
357.712 25.8783 li
357.922 25.8783 li
358.13 25.8783 li
358.347 25.8783 li
358.568 25.8783 li
358.779 25.8783 li
358.995 25.8783 li
359.2 25.8783 li
359.413 25.8783 li
359.611 25.2823 li
359.818 25.2823 li
360.012 25.2823 li
360.215 25.2823 li
360.427 25.2823 li
360.645 24.6863 li
360.831 24.6863 li
361.029 24.6863 li
361.227 24.0903 li
361.421 24.0903 li
361.628 24.0903 li
361.811 24.0903 li
362.001 24.0903 li
362.204 24.0903 li
362.403 24.0903 li
362.603 24.0903 li
362.788 24.0903 li
362.994 24.0903 li
363.186 24.0903 li
363.365 24.0903 li
363.572 24.0903 li
363.759 24.0903 li
363.95 24.0903 li
364.125 24.0903 li
364.326 24.0903 li
364.499 24.0903 li
364.674 24.0903 li
364.866 24.0903 li
365.041 24.0903 li
365.219 24.0903 li
365.406 24.0903 li
365.588 24.0903 li
365.779 24.0903 li
365.95 24.0903 li
366.131 24.0903 li
366.305 24.0903 li
366.471 24.0903 li
366.634 24.0903 li
366.809 24.0903 li
366.982 24.0903 li
367.158 24.0903 li
367.326 24.0903 li
367.49 24.0903 li
367.651 24.0903 li
367.822 24.0903 li
367.997 24.0903 li
368.162 24.0903 li
368.339 24.0903 li
368.504 24.0903 li
368.666 24.0903 li
368.826 24.0903 li
368.986 24.0903 li
369.152 24.0903 li
369.323 24.0903 li
369.484 24.0903 li
369.639 23.4953 li
369.795 23.4953 li
369.947 23.4953 li
370.104 23.4953 li
370.265 23.4953 li
370.424 23.4953 li
370.583 23.4953 li
370.734 23.4953 li
370.888 23.4953 li
371.054 23.4953 li
371.205 23.4953 li
371.361 23.4953 li
371.51 23.4953 li
371.654 23.4953 li
371.791 23.4953 li
371.931 23.4953 li
372.072 23.4953 li
372.22 23.4953 li
372.366 23.4953 li
372.51 23.4953 li
372.655 23.4953 li
372.801 23.4953 li
372.936 23.4953 li
373.08 23.4953 li
373.216 23.4953 li
373.354 23.4953 li
373.492 23.4953 li
373.625 23.4953 li
373.764 23.4953 li
373.892 23.4953 li
374.036 23.4953 li
374.172 23.4953 li
374.311 23.4953 li
374.46 23.4953 li
374.591 23.4953 li
374.727 23.4953 li
374.853 23.4953 li
374.984 23.4953 li
375.113 23.4953 li
375.243 23.4953 li
375.371 23.4953 li
375.497 23.4953 li
375.616 23.4953 li
375.734 23.4953 li
375.859 23.4953 li
375.985 23.4953 li
376.099 23.4953 li
376.219 23.4953 li
376.35 23.4953 li
376.472 23.4953 li
376.579 23.4953 li
376.699 23.4953 li
376.814 23.4953 li
376.933 23.4953 li
377.053 23.4953 li
377.168 23.4953 li
377.282 23.4953 li
377.398 23.4953 li
377.508 23.4953 li
377.623 23.4953 li
377.729 22.8993 li
377.84 22.8993 li
377.956 22.8993 li
378.067 22.8993 li
378.178 22.8993 li
378.286 22.8993 li
378.389 22.8993 li
378.497 22.8993 li
378.606 22.8993 li
378.722 22.8993 li
378.823 22.8993 li
378.932 22.8993 li
379.034 22.8993 li
379.14 22.8993 li
379.246 22.8993 li
379.343 22.8993 li
379.452 22.8993 li
379.557 22.8993 li
379.655 22.8993 li
379.753 22.8993 li
379.847 22.8993 li
379.949 22.8993 li
380.052 22.8993 li
380.147 22.8993 li
380.243 22.8993 li
380.34 22.8993 li
380.434 22.8993 li
380.537 22.8993 li
380.635 22.8993 li
380.725 22.8993 li
380.819 22.8993 li
380.911 22.8993 li
381.002 22.8993 li
381.098 22.8993 li
381.19 22.8993 li
381.278 22.8993 li
381.366 22.8993 li
381.462 22.8993 li
381.546 22.8993 li
381.629 22.8993 li
381.716 22.8993 li
381.807 22.8993 li
381.898 22.8993 li
381.986 22.8993 li
382.072 22.8993 li
382.15 22.8993 li
382.232 22.8993 li
382.312 22.8993 li
382.39 22.8993 li
382.478 22.8993 li
382.559 22.8993 li
382.64 22.8993 li
382.72 22.8993 li
382.796 22.8993 li
382.88 22.8993 li
382.959 22.8993 li
383.037 22.8993 li
383.121 22.3033 li
383.201 21.7073 li
383.284 21.7073 li
383.359 21.7073 li
383.443 21.7073 li
383.52 21.7073 li
383.591 21.7073 li
383.667 21.7073 li
383.731 21.7073 li
383.807 21.7073 li
383.875 21.7073 li
383.953 21.7073 li
384.022 21.7073 li
384.091 21.7073 li
384.161 21.7073 li
384.229 21.1114 li
384.293 21.1114 li
384.361 21.1114 li
384.431 21.1114 li
384.5 21.1114 li
384.566 21.1114 li
384.634 21.1114 li
384.702 21.1114 li
384.769 21.1114 li
384.84 21.1114 li
384.906 21.1114 li
384.968 21.1114 li
385.031 21.1114 li
385.097 21.1114 li
385.16 21.1114 li
385.219 21.1114 li
385.286 21.1114 li
385.352 21.1114 li
385.413 21.1114 li
385.477 21.1114 li
385.54 21.1114 li
385.609 21.1114 li
385.672 21.1114 li
385.735 21.1114 li
385.794 20.5163 li
385.856 20.5163 li
385.918 20.5163 li
385.979 20.5163 li
386.037 20.5163 li
386.096 20.5163 li
386.158 20.5163 li
386.216 20.5163 li
386.275 20.5163 li
386.327 19.3243 li
386.385 19.3243 li
386.438 19.3243 li
386.498 19.3243 li
386.553 19.3243 li
386.607 19.3243 li
386.66 19.3243 li
386.711 19.3243 li
386.766 19.3243 li
386.819 19.3243 li
386.872 19.3243 li
386.924 19.3243 li
386.977 19.3243 li
387.032 19.3243 li
387.087 19.3243 li
387.139 19.3243 li
387.188 19.3243 li
387.24 19.3243 li
387.292 19.3243 li
387.344 19.3243 li
387.391 19.3243 li
387.442 19.3243 li
387.487 19.3243 li
387.534 19.3243 li
387.581 19.3243 li
387.629 19.3243 li
387.671 19.3243 li
387.718 19.3243 li
387.769 19.3243 li
387.816 19.3243 li
387.861 19.3243 li
387.907 19.3243 li
387.954 19.3243 li
388 19.3243 li
388.045 19.3243 li
388.083 19.3243 li
388.127 19.3243 li
388.174 19.3243 li
388.215 19.3243 li
388.261 19.3243 li
388.308 19.3243 li
388.352 19.3243 li
388.389 19.3243 li
388.431 19.3243 li
388.472 19.3243 li
388.513 19.3243 li
388.55 19.3243 li
388.594 19.3243 li
388.632 19.3243 li
388.675 19.3243 li
388.715 19.3243 li
388.753 19.3243 li
388.79 19.3243 li
388.829 19.3243 li
388.867 19.3243 li
388.907 19.3243 li
388.943 19.3243 li
388.982 19.3243 li
389.019 19.3243 li
389.054 19.3243 li
389.095 19.3243 li
389.133 19.3243 li
389.17 19.3243 li
389.203 19.3243 li
389.236 19.3243 li
389.27 19.3243 li
389.302 19.3243 li
389.338 19.3243 li
389.369 19.3243 li
389.404 19.3243 li
389.441 19.3243 li
389.473 19.3243 li
389.503 19.3243 li
389.53 19.3243 li
389.563 19.3243 li
389.593 19.3243 li
389.625 19.3243 li
389.661 19.3243 li
389.693 19.3243 li
389.722 19.3243 li
389.753 19.3243 li
389.786 19.3243 li
389.816 19.3243 li
389.847 19.3243 li
389.875 19.3243 li
389.906 19.3243 li
389.938 19.3243 li
389.966 19.3243 li
389.995 19.3243 li
390.025 19.3243 li
390.058 19.3243 li
390.086 19.3243 li
390.113 19.3243 li
390.14 19.3243 li
390.171 19.3243 li
390.197 19.3243 li
390.227 19.3243 li
390.253 19.3243 li
390.28 19.3243 li
390.307 19.3243 li
390.331 19.3243 li
390.356 19.3243 li
390.385 19.3243 li
390.409 19.3243 li
390.433 19.3243 li
390.46 19.3243 li
390.485 19.3243 li
390.507 19.3243 li
390.533 19.3243 li
390.558 19.3243 li
390.584 19.3243 li
390.607 19.3243 li
390.632 19.3243 li
390.656 19.3243 li
390.679 19.3243 li
390.704 19.3243 li
390.726 19.3243 li
390.747 19.3243 li
390.766 19.3243 li
390.789 19.3243 li
390.809 19.3243 li
390.831 19.3243 li
390.854 19.3243 li
390.875 19.3243 li
390.895 19.3243 li
390.916 19.3243 li
390.937 19.3243 li
390.956 19.3243 li
390.977 19.3243 li
390.996 19.3243 li
391.016 19.3243 li
391.04 19.3243 li
391.06 19.3243 li
391.081 19.3243 li
391.101 19.3243 li
391.123 19.3243 li
391.141 19.3243 li
391.159 19.3243 li
391.176 19.3243 li
391.195 19.3243 li
391.216 19.3243 li
391.234 19.3243 li
391.256 19.3243 li
391.275 19.3243 li
391.292 19.3243 li
391.312 19.3243 li
391.331 19.3243 li
391.347 19.3243 li
391.364 19.3243 li
391.382 19.3243 li
391.399 19.3243 li
391.417 19.3243 li
391.43 19.3243 li
391.447 19.3243 li
391.465 19.3243 li
391.481 19.3243 li
391.499 19.3243 li
391.513 19.3243 li
391.53 19.3243 li
391.545 19.3243 li
391.562 19.3243 li
391.582 19.3243 li
391.598 19.3243 li
391.612 19.3243 li
391.625 19.3243 li
391.64 19.3243 li
391.657 19.3243 li
391.671 19.3243 li
391.689 19.3243 li
391.706 19.3243 li
391.721 19.3243 li
391.734 19.3243 li
391.749 19.3243 li
391.766 19.3243 li
391.78 19.3243 li
391.793 19.3243 li
391.806 19.3243 li
391.818 19.3243 li
391.83 19.3243 li
391.843 19.3243 li
391.858 19.3243 li
391.871 19.3243 li
391.885 19.3243 li
391.896 19.3243 li
391.909 19.3243 li
391.922 19.3243 li
391.935 19.3243 li
391.944 19.3243 li
391.957 19.3243 li
391.971 19.3243 li
391.983 19.3243 li
391.993 19.3243 li
392.007 19.3243 li
392.018 19.3243 li
392.029 19.3243 li
392.039 19.3243 li
392.05 19.3243 li
392.059 19.3243 li
392.071 19.3243 li
392.08 19.3243 li
392.091 19.3243 li
392.103 19.3243 li
392.113 19.3243 li
392.125 19.3243 li
392.136 19.3243 li
392.146 19.3243 li
392.158 19.3243 li
392.17 19.3243 li
392.179 19.3243 li
392.188 19.3243 li
392.196 19.3243 li
392.206 19.3243 li
392.216 19.3243 li
392.226 19.3243 li
392.237 19.3243 li
392.245 19.3243 li
392.255 19.3243 li
392.264 19.3243 li
392.274 19.3243 li
392.283 19.3243 li
392.292 19.3243 li
392.301 19.3243 li
392.311 19.3243 li
392.319 19.3243 li
392.327 19.3243 li
392.336 19.3243 li
392.345 19.3243 li
392.353 19.3243 li
392.362 19.3243 li
392.37 19.3243 li
392.379 19.3243 li
392.388 19.3243 li
392.395 19.3243 li
392.403 19.3243 li
392.412 19.3243 li
392.419 19.3243 li
392.428 19.3243 li
392.434 19.3243 li
392.443 19.3243 li
392.45 19.3243 li
392.459 19.3243 li
392.467 19.3243 li
392.474 19.3243 li
392.482 19.3243 li
392.49 19.3243 li
392.498 19.3243 li
392.505 19.3243 li
392.513 19.3243 li
392.519 19.3243 li
392.526 19.3243 li
392.533 19.3243 li
392.54 19.3243 li
392.548 19.3243 li
392.555 19.3243 li
392.562 19.3243 li
392.568 19.3243 li
392.574 19.3243 li
392.58 19.3243 li
392.585 19.3243 li
392.591 19.3243 li
392.597 19.3243 li
392.603 19.3243 li
392.611 19.3243 li
392.617 19.3243 li
392.623 19.3243 li
392.629 19.3243 li
392.634 19.3243 li
392.641 19.3243 li
392.645 19.3243 li
392.65 19.3243 li
392.656 19.3243 li
392.661 19.3243 li
392.667 19.3243 li
392.673 19.3243 li
392.678 19.3243 li
392.683 19.3243 li
392.687 19.3243 li
392.692 19.3243 li
392.696 19.3243 li
392.702 19.3243 li
392.706 19.3243 li
392.711 19.3243 li
392.716 19.3243 li
392.72 19.3243 li
392.726 19.3243 li
392.73 19.3243 li
392.735 19.3243 li
392.74 19.3243 li
392.743 19.3243 li
392.747 19.3243 li
392.752 19.3243 li
392.757 19.3243 li
392.761 19.3243 li
392.766 19.3243 li
392.77 19.3243 li
392.775 19.3243 li
392.779 19.3243 li
392.784 19.3243 li
392.788 19.3243 li
392.791 19.3243 li
392.796 19.3243 li
392.801 19.3243 li
392.804 19.3243 li
392.809 19.3243 li
392.812 19.3243 li
392.816 19.3243 li
392.82 19.3243 li
392.824 19.3243 li
392.83 19.3243 li
392.833 19.3243 li
392.837 19.3243 li
392.842 19.3243 li
392.846 19.3243 li
392.849 19.3243 li
392.854 19.3243 li
392.857 19.3243 li
392.86 19.3243 li
392.864 19.3243 li
392.867 19.3243 li
392.871 19.3243 li
392.874 19.3243 li
392.878 19.3243 li
392.882 19.3243 li
392.884 19.3243 li
392.888 19.3243 li
392.891 19.3243 li
392.894 19.3243 li
392.897 19.3243 li
392.9 19.3243 li
392.902 19.3243 li
392.905 19.3243 li
392.909 19.3243 li
392.911 19.3243 li
392.915 19.3243 li
392.918 19.3243 li
392.92 19.3243 li
392.924 19.3243 li
392.927 19.3243 li
392.929 19.3243 li
392.932 19.3243 li
392.935 19.3243 li
392.938 19.3243 li
392.941 19.3243 li
392.945 19.3243 li
392.947 19.3243 li
392.949 19.3243 li
392.951 19.3243 li
392.954 19.3243 li
392.956 19.3243 li
392.959 19.3243 li
392.962 19.3243 li
392.963 19.3243 li
392.966 19.3243 li
392.97 19.3243 li
392.972 19.3243 li
392.975 19.3243 li
392.977 19.3243 li
392.978 19.3243 li
392.981 19.3243 li
392.983 19.3243 li
392.984 19.3243 li
392.986 19.3243 li
392.99 19.3243 li
392.993 19.3243 li
392.994 19.3243 li
392.996 19.3243 li
392.999 19.3243 li
393.001 19.3243 li
393.004 19.3243 li
393.005 19.3243 li
393.006 19.3243 li
393.007 19.3243 li
393.01 19.3243 li
393.012 19.3243 li
393.013 19.3243 li
393.015 19.3243 li
393.018 19.3243 li
393.02 19.3243 li
393.022 19.3243 li
393.025 19.3243 li
393.026 19.3243 li
393.028 19.3243 li
393.029 19.3243 li
393.031 19.3243 li
393.032 19.3243 li
393.034 19.3243 li
393.036 19.3243 li
393.038 19.3243 li
393.04 19.3243 li
393.041 19.3243 li
393.043 19.3243 li
393.045 19.3243 li
393.047 19.3243 li
393.048 19.3243 li
393.05 19.3243 li
393.052 19.3243 li
393.053 19.3243 li
393.055 19.3243 li
393.056 19.3243 li
393.057 19.3243 li
393.058 19.3243 li
393.059 19.3243 li
393.061 19.3243 li
393.062 19.3243 li
393.064 19.3243 li
393.065 19.3243 li
393.067 19.3243 li
393.068 19.3243 li
393.069 19.3243 li
393.07 19.3243 li
393.071 19.3243 li
393.073 19.3243 li
393.074 19.3243 li
393.076 19.3243 li
393.077 19.3243 li
393.079 19.3243 li
393.081 19.3243 li
393.082 19.3243 li
393.083 19.3243 li
393.085 19.3243 li
393.086 19.3243 li
393.087 19.3243 li
393.088 19.3243 li
393.089 19.3243 li
393.09 19.3243 li
393.091 19.3243 li
393.092 19.3243 li
393.093 19.3243 li
393.095 19.3243 li
393.096 19.3243 li
393.097 19.3243 li
393.098 19.3243 li
393.099 19.3243 li
393.1 19.3243 li
393.101 19.3243 li
393.102 19.3243 li
393.103 19.3243 li
393.104 19.3243 li
393.105 19.3243 li
393.106 19.3243 li
393.107 19.3243 li
393.109 19.3243 li
393.11 19.3243 li
393.111 19.3243 li
393.112 19.3243 li
393.113 19.3243 li
393.115 19.3243 li
393.116 19.3243 li
393.117 19.3243 li
393.118 19.3243 li
393.119 19.3243 li
393.121 19.3243 li
393.122 19.3243 li
393.123 19.3243 li
393.124 19.3243 li
393.125 19.3243 li
393.126 19.3243 li
393.127 19.3243 li
393.128 19.3243 li
393.129 19.3243 li
393.131 19.3243 li
393.132 19.3243 li
393.133 19.3243 li
393.134 19.3243 li
393.135 19.3243 li
393.136 19.3243 li
393.137 19.3243 li
393.139 19.3243 li
393.14 19.3243 li
393.141 19.3243 li
393.142 19.3243 li
393.143 19.3243 li
393.144 19.3243 li
393.145 19.3243 li
393.146 19.3243 li
393.147 19.3243 li
393.148 19.3243 li
393.149 19.3243 li
393.15 19.3243 li
393.151 19.3243 li
393.152 19.3243 li
393.153 19.3243 li
393.154 19.3243 li
393.155 19.3243 li
393.156 19.3243 li
393.157 19.3243 li
393.158 19.3243 li
393.159 19.3243 li
393.16 19.3243 li
393.161 19.3243 li
393.162 19.3243 li
393.163 19.3243 li
393.164 19.3243 li
393.165 19.3243 li
393.166 19.3243 li
393.167 19.3243 li
393.168 19.3243 li
393.169 19.3243 li
393.17 19.3243 li
393.171 19.3243 li
393.172 19.3243 li
393.173 19.3243 li
393.174 19.3243 li
393.175 19.3243 li
393.176 19.3243 li
393.177 19.3243 li
393.178 19.3243 li
393.179 19.3243 li
393.18 19.3243 li
393.181 19.3243 li
393.182 19.3243 li
393.183 19.3243 li
393.184 19.3243 li
393.185 19.3243 li
393.186 19.3243 li
/1 
[/DeviceCMYK] /CSA add_res
.895628 .7673 0 0 cmyk
@
0 lj
63.3147 184.333 mo
63.3147 190.333 li
60.3147 187.333 mo
66.3147 187.333 li
61.194 185.212 mo
65.4358 189.454 li
61.194 189.454 mo
65.4358 185.212 li
@
79.801 177.184 mo
79.801 183.184 li
76.801 180.184 mo
82.801 180.184 li
77.6803 178.063 mo
81.9221 182.305 li
77.6803 182.305 mo
81.9221 178.063 li
@
79.801 166.46 mo
79.801 172.46 li
76.801 169.46 mo
82.801 169.46 li
77.6803 167.339 mo
81.9221 171.581 li
77.6803 171.581 mo
81.9221 167.339 li
@
90.3088 162.289 mo
90.3088 168.289 li
87.3088 165.289 mo
93.3088 165.289 li
88.1878 163.168 mo
92.4299 167.41 li
88.1878 167.41 mo
92.4299 163.168 li
@
98.0378 155.736 mo
98.0378 161.736 li
95.0378 158.736 mo
101.038 158.736 li
95.9168 156.615 mo
100.159 160.857 li
95.9168 160.857 mo
100.159 156.615 li
@
104.155 146.203 mo
104.155 152.203 li
101.155 149.203 mo
107.155 149.203 li
102.034 147.082 mo
106.276 151.324 li
102.034 151.324 mo
106.276 147.082 li
@
107.625 140.841 mo
107.625 146.841 li
104.625 143.841 mo
110.625 143.841 li
105.504 141.72 mo
109.746 145.962 li
105.504 145.962 mo
109.746 141.72 li
@
120.641 132.501 mo
120.641 138.501 li
117.641 135.501 mo
123.641 135.501 li
118.52 133.379 mo
122.763 137.621 li
118.52 137.621 mo
122.763 133.379 li
@
127.215 130.713 mo
127.215 136.713 li
124.215 133.713 mo
130.215 133.713 li
125.094 131.592 mo
129.336 135.834 li
125.094 135.834 mo
129.336 131.592 li
@
131.149 122.372 mo
131.149 128.372 li
128.149 125.372 mo
134.149 125.372 li
129.028 123.251 mo
133.27 127.493 li
129.028 127.493 mo
133.27 123.251 li
@
141.583 119.989 mo
141.583 125.989 li
138.583 122.989 mo
144.583 122.989 li
139.462 120.868 mo
143.704 125.11 li
139.462 125.11 mo
143.704 120.868 li
@
148.465 114.627 mo
148.465 120.627 li
145.465 117.627 mo
151.465 117.627 li
146.344 115.506 mo
150.586 119.748 li
146.344 119.748 mo
150.586 115.506 li
@
159.581 112.244 mo
159.581 118.244 li
156.581 115.244 mo
162.581 115.244 li
157.459 113.123 mo
161.702 117.365 li
157.459 117.365 mo
161.702 113.123 li
@
171.054 108.669 mo
171.054 114.669 li
168.054 111.669 mo
174.054 111.669 li
168.933 109.548 mo
173.175 113.79 li
168.933 113.79 mo
173.175 109.548 li
@
177.361 105.095 mo
177.361 111.095 li
174.361 108.095 mo
180.361 108.095 li
175.24 105.974 mo
179.482 110.216 li
175.24 110.216 mo
179.482 105.974 li
@
183.688 100.924 mo
183.688 106.924 li
180.688 103.924 mo
186.688 103.924 li
181.567 101.803 mo
185.809 106.045 li
181.567 106.045 mo
185.809 101.803 li
@
190.606 97.3503 mo
190.606 103.35 li
187.606 100.35 mo
193.606 100.35 li
188.485 98.2293 mo
192.727 102.47 li
188.485 102.47 mo
192.727 98.2293 li
@
198.463 92.5833 mo
198.463 98.5833 li
195.463 95.5833 mo
201.463 95.5833 li
196.342 93.4623 mo
200.584 97.7043 li
196.342 97.7043 mo
200.584 93.4623 li
@
204.477 87.2213 mo
204.477 93.2213 li
201.477 90.2213 mo
207.477 90.2213 li
202.356 88.1013 mo
206.598 92.3423 li
202.356 92.3423 mo
206.598 88.1013 li
@
211.075 81.2633 mo
211.075 87.2633 li
208.075 84.2633 mo
214.075 84.2633 li
208.954 82.1433 mo
213.196 86.3853 li
208.954 86.3853 mo
213.196 82.1433 li
@
217.502 75.3064 mo
217.502 81.3064 li
214.502 78.3064 mo
220.502 78.3064 li
215.381 76.1853 mo
219.623 80.4273 li
215.381 80.4273 mo
219.623 76.1853 li
@
223.393 66.3693 mo
223.393 72.3693 li
220.393 69.3693 mo
226.393 69.3693 li
221.272 67.2483 mo
225.513 71.4903 li
221.272 71.4903 mo
225.513 67.2483 li
@
229.915 62.7953 mo
229.915 68.7953 li
226.915 65.7953 mo
232.915 65.7953 li
227.794 63.6743 mo
232.036 67.9153 li
227.794 67.9153 mo
232.036 63.6743 li
@
235.615 61.0073 mo
235.615 67.0073 li
232.615 64.0073 mo
238.615 64.0073 li
233.494 61.8864 mo
237.736 66.1283 li
233.494 66.1283 mo
237.736 61.8864 li
@
241.644 58.6243 mo
241.644 64.6243 li
238.644 61.6243 mo
244.644 61.6243 li
239.523 59.5033 mo
243.765 63.7453 li
239.523 63.7453 mo
243.765 59.5033 li
@
246.908 54.4543 mo
246.908 60.4543 li
243.908 57.4543 mo
249.908 57.4543 li
244.788 55.3333 mo
249.029 59.5753 li
244.788 59.5753 mo
249.029 55.3333 li
@
252.699 52.0703 mo
252.699 58.0703 li
249.699 55.0703 mo
255.699 55.0703 li
250.578 52.9503 mo
254.82 57.1923 li
250.578 57.1923 mo
254.82 52.9503 li
@
258.145 49.6883 mo
258.145 55.6883 li
255.145 52.6883 mo
261.145 52.6883 li
256.024 50.5673 mo
260.266 54.8083 li
256.024 54.8083 mo
260.266 50.5673 li
@
263.811 46.1133 mo
263.811 52.1133 li
260.811 49.1133 mo
266.811 49.1133 li
261.691 46.9923 mo
265.932 51.2343 li
261.691 51.2343 mo
265.932 46.9923 li
@
269.064 41.9423 mo
269.064 47.9423 li
266.064 44.9423 mo
272.064 44.9423 li
266.943 42.8213 mo
271.185 47.0633 li
266.943 47.0633 mo
271.185 42.8213 li
@
274.245 38.9633 mo
274.245 44.9633 li
271.245 41.9633 mo
277.245 41.9633 li
272.124 39.8423 mo
276.366 44.0853 li
272.124 44.0853 mo
276.366 39.8423 li
@
278.846 37.7723 mo
278.846 43.7723 li
275.846 40.7723 mo
281.846 40.7723 li
276.725 38.6513 mo
280.967 42.8933 li
276.725 42.8933 mo
280.967 38.6513 li
@
283.459 37.1763 mo
283.459 43.1763 li
280.459 40.1763 mo
286.459 40.1763 li
281.338 38.0553 mo
285.58 42.2973 li
281.338 42.2973 mo
285.58 38.0553 li
@
288.087 35.3893 mo
288.087 41.3893 li
285.087 38.3893 mo
291.087 38.3893 li
285.966 36.2683 mo
290.208 40.5103 li
285.966 40.5103 mo
290.208 36.2683 li
@
292.602 34.1973 mo
292.602 40.1973 li
289.602 37.1973 mo
295.602 37.1973 li
290.482 35.0763 mo
294.724 39.3183 li
290.482 39.3183 mo
294.724 35.0763 li
@
297.229 33.0063 mo
297.229 39.0063 li
294.229 36.0063 mo
300.229 36.0063 li
295.108 33.8853 mo
299.35 38.1273 li
295.108 38.1273 mo
299.35 33.8853 li
@
301.477 32.4103 mo
301.477 38.4103 li
298.477 35.4103 mo
304.477 35.4103 li
299.356 33.2893 mo
303.598 37.5313 li
299.356 37.5313 mo
303.598 33.2893 li
@
305.642 31.8143 mo
305.642 37.8143 li
302.642 34.8143 mo
308.642 34.8143 li
303.521 32.6933 mo
307.763 36.9353 li
303.521 36.9353 mo
307.763 32.6933 li
@
309.699 31.2193 mo
309.699 37.2193 li
306.699 34.2193 mo
312.699 34.2193 li
307.578 32.0973 mo
311.82 36.3393 li
307.578 36.3393 mo
311.82 32.0973 li
@
313.695 28.8354 mo
313.695 34.8354 li
310.695 31.8354 mo
316.695 31.8354 li
311.574 29.7143 mo
315.816 33.9563 li
311.574 33.9563 mo
315.816 29.7143 li
@
317.401 28.8354 mo
317.401 34.8354 li
314.401 31.8354 mo
320.401 31.8354 li
315.28 29.7143 mo
319.522 33.9563 li
315.28 33.9563 mo
319.522 29.7143 li
@
320.917 28.2403 mo
320.917 34.2403 li
317.917 31.2403 mo
323.917 31.2403 li
318.796 29.1193 mo
323.038 33.3614 li
318.796 33.3614 mo
323.038 29.1193 li
@
324.334 28.2403 mo
324.334 34.2403 li
321.334 31.2403 mo
327.334 31.2403 li
322.213 29.1193 mo
326.455 33.3614 li
322.213 33.3614 mo
326.455 29.1193 li
@
327.626 27.6443 mo
327.626 33.6443 li
324.626 30.6443 mo
330.626 30.6443 li
325.505 28.5233 mo
329.747 32.7653 li
325.505 32.7653 mo
329.747 28.5233 li
@
330.844 27.6443 mo
330.844 33.6443 li
327.844 30.6443 mo
333.844 30.6443 li
328.723 28.5233 mo
332.965 32.7653 li
328.723 32.7653 mo
332.965 28.5233 li
@
334.057 27.6443 mo
334.057 33.6443 li
331.057 30.6443 mo
337.057 30.6443 li
331.936 28.5233 mo
336.178 32.7653 li
331.936 32.7653 mo
336.178 28.5233 li
@
337.055 27.6443 mo
337.055 33.6443 li
334.055 30.6443 mo
340.055 30.6443 li
334.934 28.5233 mo
339.176 32.7653 li
334.934 32.7653 mo
339.176 28.5233 li
@
339.988 27.0483 mo
339.988 33.0483 li
336.988 30.0483 mo
342.988 30.0483 li
337.867 27.9273 mo
342.109 32.1693 li
337.867 32.1693 mo
342.109 27.9273 li
@
342.89 26.4523 mo
342.89 32.4523 li
339.89 29.4523 mo
345.89 29.4523 li
340.769 27.3313 mo
345.011 31.5733 li
340.769 31.5733 mo
345.011 27.3313 li
@
345.674 25.8564 mo
345.674 31.8564 li
342.674 28.8564 mo
348.674 28.8564 li
343.554 26.7354 mo
347.795 30.9783 li
343.554 30.9783 mo
347.795 26.7354 li
@
348.275 25.2614 mo
348.275 31.2614 li
345.275 28.2614 mo
351.275 28.2614 li
346.154 26.1403 mo
350.396 30.3824 li
346.154 30.3824 mo
350.396 26.1403 li
@
350.784 25.2614 mo
350.784 31.2614 li
347.784 28.2614 mo
353.784 28.2614 li
348.663 26.1403 mo
352.905 30.3824 li
348.663 30.3824 mo
352.905 26.1403 li
@
353.199 22.8783 mo
353.199 28.8783 li
350.199 25.8783 mo
356.199 25.8783 li
351.077 23.7563 mo
355.32 27.9993 li
351.077 27.9993 mo
355.32 23.7563 li
@
355.519 22.8783 mo
355.519 28.8783 li
352.519 25.8783 mo
358.519 25.8783 li
353.398 23.7563 mo
357.64 27.9993 li
353.398 27.9993 mo
357.64 23.7563 li
@
357.712 22.8783 mo
357.712 28.8783 li
354.712 25.8783 mo
360.712 25.8783 li
355.591 23.7563 mo
359.832 27.9993 li
355.591 27.9993 mo
359.832 23.7563 li
@
359.818 22.2823 mo
359.818 28.2823 li
356.818 25.2823 mo
362.818 25.2823 li
357.697 23.1613 mo
361.94 27.4034 li
357.697 27.4034 mo
361.94 23.1613 li
@
361.811 21.0903 mo
361.811 27.0903 li
358.811 24.0903 mo
364.811 24.0903 li
359.69 21.9693 mo
363.932 26.2113 li
359.69 26.2113 mo
363.932 21.9693 li
@
363.759 21.0903 mo
363.759 27.0903 li
360.759 24.0903 mo
366.759 24.0903 li
361.638 21.9693 mo
365.88 26.2113 li
361.638 26.2113 mo
365.88 21.9693 li
@
365.588 21.0903 mo
365.588 27.0903 li
362.588 24.0903 mo
368.588 24.0903 li
363.466 21.9693 mo
367.709 26.2113 li
363.466 26.2113 mo
367.709 21.9693 li
@
367.326 21.0903 mo
367.326 27.0903 li
364.326 24.0903 mo
370.326 24.0903 li
365.205 21.9693 mo
369.447 26.2113 li
365.205 26.2113 mo
369.447 21.9693 li
@
368.986 21.0903 mo
368.986 27.0903 li
365.986 24.0903 mo
371.986 24.0903 li
366.865 21.9693 mo
371.107 26.2113 li
366.865 26.2113 mo
371.107 21.9693 li
@
370.583 20.4943 mo
370.583 26.4943 li
367.583 23.4943 mo
373.583 23.4943 li
368.462 21.3743 mo
372.704 25.6153 li
368.462 25.6153 mo
372.704 21.3743 li
@
372.072 20.4943 mo
372.072 26.4943 li
369.072 23.4943 mo
375.072 23.4943 li
369.951 21.3743 mo
374.193 25.6153 li
369.951 25.6153 mo
374.193 21.3743 li
@
373.491 20.4943 mo
373.491 26.4943 li
370.491 23.4943 mo
376.491 23.4943 li
371.37 21.3743 mo
375.613 25.6153 li
371.37 25.6153 mo
375.613 21.3743 li
@
374.853 20.4943 mo
374.853 26.4943 li
371.853 23.4943 mo
377.853 23.4943 li
372.732 21.3743 mo
376.974 25.6153 li
372.732 25.6153 mo
376.974 21.3743 li
@
376.099 20.4943 mo
376.099 26.4943 li
373.099 23.4943 mo
379.099 23.4943 li
373.978 21.3743 mo
378.22 25.6153 li
373.978 25.6153 mo
378.22 21.3743 li
@
377.282 20.4943 mo
377.282 26.4943 li
374.282 23.4943 mo
380.282 23.4943 li
375.161 21.3743 mo
379.404 25.6153 li
375.161 25.6153 mo
379.404 21.3743 li
@
378.389 19.8993 mo
378.389 25.8993 li
375.389 22.8993 mo
381.389 22.8993 li
376.268 20.7784 mo
380.51 25.0203 li
376.268 25.0203 mo
380.51 20.7784 li
@
379.452 19.8993 mo
379.452 25.8993 li
376.452 22.8993 mo
382.452 22.8993 li
377.331 20.7784 mo
381.573 25.0203 li
377.331 25.0203 mo
381.573 20.7784 li
@
380.434 19.8993 mo
380.434 25.8993 li
377.434 22.8993 mo
383.434 22.8993 li
378.313 20.7784 mo
382.556 25.0203 li
378.313 25.0203 mo
382.556 20.7784 li
@
381.366 19.8993 mo
381.366 25.8993 li
378.366 22.8993 mo
384.366 22.8993 li
379.245 20.7784 mo
383.487 25.0203 li
379.245 25.0203 mo
383.487 20.7784 li
@
382.232 19.8993 mo
382.232 25.8993 li
379.232 22.8993 mo
385.232 22.8993 li
380.111 20.7784 mo
384.353 25.0203 li
380.111 25.0203 mo
384.353 20.7784 li
@
383.037 19.8993 mo
383.037 25.8993 li
380.037 22.8993 mo
386.037 22.8993 li
380.916 20.7784 mo
385.158 25.0203 li
380.916 25.0203 mo
385.158 20.7784 li
@
383.807 18.7073 mo
383.807 24.7073 li
380.807 21.7073 mo
386.807 21.7073 li
381.686 19.5863 mo
385.928 23.8283 li
381.686 23.8283 mo
385.928 19.5863 li
@
384.5 18.1114 mo
384.5 24.1114 li
381.5 21.1114 mo
387.5 21.1114 li
382.379 18.9903 mo
386.621 23.2323 li
382.379 23.2323 mo
386.621 18.9903 li
@
385.16 18.1114 mo
385.16 24.1114 li
382.16 21.1114 mo
388.16 21.1114 li
383.039 18.9903 mo
387.281 23.2323 li
383.039 23.2323 mo
387.281 18.9903 li
@
385.794 17.5153 mo
385.794 23.5153 li
382.794 20.5153 mo
388.794 20.5153 li
383.673 18.3953 mo
387.915 22.6364 li
383.673 22.6364 mo
387.915 18.3953 li
@
386.385 16.3243 mo
386.385 22.3243 li
383.385 19.3243 mo
389.385 19.3243 li
384.264 17.2033 mo
388.506 21.4453 li
384.264 21.4453 mo
388.506 17.2033 li
@
386.924 16.3243 mo
386.924 22.3243 li
383.924 19.3243 mo
389.924 19.3243 li
384.803 17.2033 mo
389.045 21.4453 li
384.803 21.4453 mo
389.045 17.2033 li
@
387.441 16.3243 mo
387.441 22.3243 li
384.441 19.3243 mo
390.441 19.3243 li
385.32 17.2033 mo
389.563 21.4453 li
385.32 21.4453 mo
389.563 17.2033 li
@
387.907 16.3243 mo
387.907 22.3243 li
384.907 19.3243 mo
390.907 19.3243 li
385.786 17.2033 mo
390.029 21.4453 li
385.786 21.4453 mo
390.029 17.2033 li
@
388.352 16.3243 mo
388.352 22.3243 li
385.352 19.3243 mo
391.352 19.3243 li
386.231 17.2033 mo
390.473 21.4453 li
386.231 21.4453 mo
390.473 17.2033 li
@
388.752 16.3243 mo
388.752 22.3243 li
385.752 19.3243 mo
391.752 19.3243 li
386.631 17.2033 mo
390.874 21.4453 li
386.631 21.4453 mo
390.874 17.2033 li
@
389.133 16.3243 mo
389.133 22.3243 li
386.133 19.3243 mo
392.133 19.3243 li
387.012 17.2033 mo
391.254 21.4453 li
387.012 21.4453 mo
391.254 17.2033 li
@
389.473 16.3243 mo
389.473 22.3243 li
386.473 19.3243 mo
392.473 19.3243 li
387.352 17.2033 mo
391.594 21.4453 li
387.352 21.4453 mo
391.594 17.2033 li
@
389.785 16.3243 mo
389.785 22.3243 li
386.785 19.3243 mo
392.785 19.3243 li
387.664 17.2033 mo
391.906 21.4453 li
387.664 21.4453 mo
391.906 17.2033 li
@
390.086 16.3243 mo
390.086 22.3243 li
387.086 19.3243 mo
393.086 19.3243 li
387.965 17.2033 mo
392.207 21.4453 li
387.965 21.4453 mo
392.207 17.2033 li
@
390.357 16.3243 mo
390.357 22.3243 li
387.357 19.3243 mo
393.357 19.3243 li
388.236 17.2033 mo
392.477 21.4453 li
388.236 21.4453 mo
392.477 17.2033 li
@
390.607 16.3243 mo
390.607 22.3243 li
387.607 19.3243 mo
393.607 19.3243 li
388.486 17.2033 mo
392.728 21.4453 li
388.486 21.4453 mo
392.728 17.2033 li
@
390.831 16.3243 mo
390.831 22.3243 li
387.831 19.3243 mo
393.831 19.3243 li
388.71 17.2033 mo
392.952 21.4453 li
388.71 21.4453 mo
392.952 17.2033 li
@
391.04 16.3243 mo
391.04 22.3243 li
388.04 19.3243 mo
394.04 19.3243 li
388.919 17.2033 mo
393.161 21.4453 li
388.919 21.4453 mo
393.161 17.2033 li
@
391.235 16.3243 mo
391.235 22.3243 li
388.235 19.3243 mo
394.235 19.3243 li
389.114 17.2033 mo
393.356 21.4453 li
389.114 21.4453 mo
393.356 17.2033 li
@
391.416 16.3243 mo
391.416 22.3243 li
388.416 19.3243 mo
394.416 19.3243 li
389.295 17.2033 mo
393.538 21.4453 li
389.295 21.4453 mo
393.538 17.2033 li
@
391.582 16.3243 mo
391.582 22.3243 li
388.582 19.3243 mo
394.582 19.3243 li
389.461 17.2033 mo
393.703 21.4453 li
389.461 21.4453 mo
393.703 17.2033 li
@
391.734 16.3243 mo
391.734 22.3243 li
388.734 19.3243 mo
394.734 19.3243 li
389.613 17.2033 mo
393.855 21.4453 li
389.613 21.4453 mo
393.855 17.2033 li
@
391.872 16.3243 mo
391.872 22.3243 li
388.872 19.3243 mo
394.872 19.3243 li
389.75 17.2033 mo
393.992 21.4453 li
389.75 21.4453 mo
393.992 17.2033 li
@
391.993 16.3243 mo
391.993 22.3243 li
388.993 19.3243 mo
394.993 19.3243 li
389.872 17.2033 mo
394.115 21.4453 li
389.872 21.4453 mo
394.115 17.2033 li
@
392.103 16.3243 mo
392.103 22.3243 li
389.103 19.3243 mo
395.103 19.3243 li
389.982 17.2033 mo
394.224 21.4453 li
389.982 21.4453 mo
394.224 17.2033 li
@
392.206 16.3243 mo
392.206 22.3243 li
389.206 19.3243 mo
395.206 19.3243 li
390.085 17.2033 mo
394.327 21.4453 li
390.085 21.4453 mo
394.327 17.2033 li
@
392.301 16.3243 mo
392.301 22.3243 li
389.301 19.3243 mo
395.301 19.3243 li
390.18 17.2033 mo
394.422 21.4453 li
390.18 21.4453 mo
394.422 17.2033 li
@
392.388 16.3243 mo
392.388 22.3243 li
389.388 19.3243 mo
395.388 19.3243 li
390.267 17.2033 mo
394.509 21.4453 li
390.267 21.4453 mo
394.509 17.2033 li
@
392.466 16.3243 mo
392.466 22.3243 li
389.466 19.3243 mo
395.466 19.3243 li
390.345 17.2033 mo
394.588 21.4453 li
390.345 21.4453 mo
394.588 17.2033 li
@
392.54 16.3243 mo
392.54 22.3243 li
389.54 19.3243 mo
395.54 19.3243 li
390.419 17.2033 mo
394.661 21.4453 li
390.419 21.4453 mo
394.661 17.2033 li
@
392.603 16.3243 mo
392.603 22.3243 li
389.603 19.3243 mo
395.603 19.3243 li
390.482 17.2033 mo
394.724 21.4453 li
390.482 21.4453 mo
394.724 17.2033 li
@
392.661 16.3243 mo
392.661 22.3243 li
389.661 19.3243 mo
395.661 19.3243 li
390.54 17.2033 mo
394.782 21.4453 li
390.54 21.4453 mo
394.782 17.2033 li
@
392.711 16.3243 mo
392.711 22.3243 li
389.711 19.3243 mo
395.711 19.3243 li
390.59 17.2033 mo
394.832 21.4453 li
390.59 21.4453 mo
394.832 17.2033 li
@
392.757 16.3243 mo
392.757 22.3243 li
389.757 19.3243 mo
395.757 19.3243 li
390.636 17.2033 mo
394.878 21.4453 li
390.636 21.4453 mo
394.878 17.2033 li
@
392.802 16.3243 mo
392.802 22.3243 li
389.802 19.3243 mo
395.802 19.3243 li
390.681 17.2033 mo
394.923 21.4453 li
390.681 21.4453 mo
394.923 17.2033 li
@
392.841 16.3243 mo
392.841 22.3243 li
389.841 19.3243 mo
395.841 19.3243 li
390.72 17.2033 mo
394.963 21.4453 li
390.72 21.4453 mo
394.963 17.2033 li
@
392.877 16.3243 mo
392.877 22.3243 li
389.877 19.3243 mo
395.877 19.3243 li
390.756 17.2033 mo
394.999 21.4453 li
390.756 21.4453 mo
394.999 17.2033 li
@
392.909 16.3243 mo
392.909 22.3243 li
389.909 19.3243 mo
395.909 19.3243 li
390.788 17.2033 mo
395.03 21.4453 li
390.788 21.4453 mo
395.03 17.2033 li
@
392.938 16.3243 mo
392.938 22.3243 li
389.938 19.3243 mo
395.938 19.3243 li
390.816 17.2033 mo
395.059 21.4453 li
390.816 21.4453 mo
395.059 17.2033 li
@
392.964 16.3243 mo
392.964 22.3243 li
389.964 19.3243 mo
395.964 19.3243 li
390.843 17.2033 mo
395.084 21.4453 li
390.843 21.4453 mo
395.084 17.2033 li
@
392.987 16.3243 mo
392.987 22.3243 li
389.987 19.3243 mo
395.987 19.3243 li
390.866 17.2033 mo
395.108 21.4453 li
390.866 21.4453 mo
395.108 17.2033 li
@
393.008 16.3243 mo
393.008 22.3243 li
390.008 19.3243 mo
396.008 19.3243 li
390.887 17.2033 mo
395.129 21.4453 li
390.887 21.4453 mo
395.129 17.2033 li
@
393.027 16.3243 mo
393.027 22.3243 li
390.027 19.3243 mo
396.027 19.3243 li
390.906 17.2033 mo
395.148 21.4453 li
390.906 21.4453 mo
395.148 17.2033 li
@
393.043 16.3243 mo
393.043 22.3243 li
390.043 19.3243 mo
396.043 19.3243 li
390.922 17.2033 mo
395.164 21.4453 li
390.922 21.4453 mo
395.164 17.2033 li
@
393.058 16.3243 mo
393.058 22.3243 li
390.058 19.3243 mo
396.058 19.3243 li
390.937 17.2033 mo
395.179 21.4453 li
390.937 21.4453 mo
395.179 17.2033 li
@
393.072 16.3243 mo
393.072 22.3243 li
390.072 19.3243 mo
396.072 19.3243 li
390.95 17.2033 mo
395.193 21.4453 li
390.95 21.4453 mo
395.193 17.2033 li
@
393.085 16.3243 mo
393.085 22.3243 li
390.085 19.3243 mo
396.085 19.3243 li
390.964 17.2033 mo
395.206 21.4453 li
390.964 21.4453 mo
395.206 17.2033 li
@
393.096 16.3243 mo
393.096 22.3243 li
390.096 19.3243 mo
396.096 19.3243 li
390.975 17.2033 mo
395.217 21.4453 li
390.975 21.4453 mo
395.217 17.2033 li
@
393.105 16.3243 mo
393.105 22.3243 li
390.105 19.3243 mo
396.105 19.3243 li
390.984 17.2033 mo
395.226 21.4453 li
390.984 21.4453 mo
395.226 17.2033 li
@
393.115 16.3243 mo
393.115 22.3243 li
390.115 19.3243 mo
396.115 19.3243 li
390.994 17.2033 mo
395.236 21.4453 li
390.994 21.4453 mo
395.236 17.2033 li
@
393.124 16.3243 mo
393.124 22.3243 li
390.124 19.3243 mo
396.124 19.3243 li
391.002 17.2033 mo
395.245 21.4453 li
391.002 21.4453 mo
395.245 17.2033 li
@
393.131 16.3243 mo
393.131 22.3243 li
390.131 19.3243 mo
396.131 19.3243 li
391.01 17.2033 mo
395.252 21.4453 li
391.01 21.4453 mo
395.252 17.2033 li
@
393.138 16.3243 mo
393.138 22.3243 li
390.138 19.3243 mo
396.138 19.3243 li
391.016 17.2033 mo
395.259 21.4453 li
391.016 21.4453 mo
395.259 17.2033 li
@
393.143 16.3243 mo
393.143 22.3243 li
390.143 19.3243 mo
396.143 19.3243 li
391.022 17.2033 mo
395.264 21.4453 li
391.022 21.4453 mo
395.264 17.2033 li
@
393.148 16.3243 mo
393.148 22.3243 li
390.148 19.3243 mo
396.148 19.3243 li
391.027 17.2033 mo
395.269 21.4453 li
391.027 21.4453 mo
395.269 17.2033 li
@
393.152 16.3243 mo
393.152 22.3243 li
390.152 19.3243 mo
396.152 19.3243 li
391.031 17.2033 mo
395.273 21.4453 li
391.031 21.4453 mo
395.273 17.2033 li
@
393.157 16.3243 mo
393.157 22.3243 li
390.157 19.3243 mo
396.157 19.3243 li
391.036 17.2033 mo
395.278 21.4453 li
391.036 21.4453 mo
395.278 17.2033 li
@
393.16 16.3243 mo
393.16 22.3243 li
390.16 19.3243 mo
396.16 19.3243 li
391.04 17.2033 mo
395.281 21.4453 li
391.04 21.4453 mo
395.281 17.2033 li
@
393.163 16.3243 mo
393.163 22.3243 li
390.163 19.3243 mo
396.163 19.3243 li
391.042 17.2033 mo
395.284 21.4453 li
391.042 21.4453 mo
395.284 17.2033 li
@
393.165 16.3243 mo
393.165 22.3243 li
390.165 19.3243 mo
396.165 19.3243 li
391.044 17.2033 mo
395.286 21.4453 li
391.044 21.4453 mo
395.286 17.2033 li
@
393.168 16.3243 mo
393.168 22.3243 li
390.168 19.3243 mo
396.168 19.3243 li
391.047 17.2033 mo
395.29 21.4453 li
391.047 21.4453 mo
395.29 17.2033 li
@
393.171 16.3243 mo
393.171 22.3243 li
390.171 19.3243 mo
396.171 19.3243 li
391.05 17.2033 mo
395.292 21.4453 li
391.05 21.4453 mo
395.292 17.2033 li
@
393.174 16.3243 mo
393.174 22.3243 li
390.174 19.3243 mo
396.174 19.3243 li
391.052 17.2033 mo
395.295 21.4453 li
391.052 21.4453 mo
395.295 17.2033 li
@
393.176 16.3243 mo
393.176 22.3243 li
390.176 19.3243 mo
396.176 19.3243 li
391.055 17.2033 mo
395.297 21.4453 li
391.055 21.4453 mo
395.297 17.2033 li
@
393.177 16.3243 mo
393.177 22.3243 li
390.177 19.3243 mo
396.177 19.3243 li
391.056 17.2033 mo
395.298 21.4453 li
391.056 21.4453 mo
395.298 17.2033 li
@
393.178 16.3243 mo
393.178 22.3243 li
390.178 19.3243 mo
396.178 19.3243 li
391.057 17.2033 mo
395.299 21.4453 li
391.057 21.4453 mo
395.299 17.2033 li
@
393.179 16.3243 mo
393.179 22.3243 li
390.179 19.3243 mo
396.179 19.3243 li
391.058 17.2033 mo
395.3 21.4453 li
391.058 21.4453 mo
395.3 17.2033 li
@
393.18 16.3243 mo
393.18 22.3243 li
390.18 19.3243 mo
396.18 19.3243 li
391.059 17.2033 mo
395.301 21.4453 li
391.059 21.4453 mo
395.301 17.2033 li
@
393.181 16.3243 mo
393.181 22.3243 li
390.181 19.3243 mo
396.181 19.3243 li
391.06 17.2033 mo
395.302 21.4453 li
391.06 21.4453 mo
395.302 17.2033 li
@
393.182 16.3243 mo
393.182 22.3243 li
390.182 19.3243 mo
396.182 19.3243 li
391.061 17.2033 mo
395.303 21.4453 li
391.061 21.4453 mo
395.303 17.2033 li
@
393.182 16.3243 mo
393.182 22.3243 li
390.182 19.3243 mo
396.182 19.3243 li
391.061 17.2033 mo
395.304 21.4453 li
391.061 21.4453 mo
395.304 17.2033 li
@
393.183 16.3243 mo
393.183 22.3243 li
390.183 19.3243 mo
396.183 19.3243 li
391.062 17.2033 mo
395.304 21.4453 li
391.062 21.4453 mo
395.304 17.2033 li
@
393.184 16.3243 mo
393.184 22.3243 li
390.184 19.3243 mo
396.184 19.3243 li
391.063 17.2033 mo
395.304 21.4453 li
391.063 21.4453 mo
395.304 17.2033 li
@
393.184 16.3243 mo
393.184 22.3243 li
390.184 19.3243 mo
396.184 19.3243 li
391.063 17.2033 mo
395.305 21.4453 li
391.063 21.4453 mo
395.305 17.2033 li
@
393.184 16.3243 mo
393.184 22.3243 li
390.184 19.3243 mo
396.184 19.3243 li
391.063 17.2033 mo
395.305 21.4453 li
391.063 21.4453 mo
395.305 17.2033 li
@
393.184 16.3243 mo
393.184 22.3243 li
390.184 19.3243 mo
396.184 19.3243 li
391.063 17.2033 mo
395.306 21.4453 li
391.063 21.4453 mo
395.306 17.2033 li
@
393.185 16.3243 mo
393.185 22.3243 li
390.185 19.3243 mo
396.185 19.3243 li
391.064 17.2033 mo
395.306 21.4453 li
391.064 21.4453 mo
395.306 17.2033 li
@
393.185 16.3243 mo
393.185 22.3243 li
390.185 19.3243 mo
396.185 19.3243 li
391.064 17.2033 mo
395.306 21.4453 li
391.064 21.4453 mo
395.306 17.2033 li
@
393.185 16.3243 mo
393.185 22.3243 li
390.185 19.3243 mo
396.185 19.3243 li
391.064 17.2033 mo
395.306 21.4453 li
391.064 21.4453 mo
395.306 17.2033 li
@
393.185 16.3243 mo
393.185 22.3243 li
390.185 19.3243 mo
396.185 19.3243 li
391.064 17.2033 mo
395.306 21.4453 li
391.064 21.4453 mo
395.306 17.2033 li
@
393.185 16.3243 mo
393.185 22.3243 li
390.185 19.3243 mo
396.185 19.3243 li
391.065 17.2033 mo
395.306 21.4453 li
391.065 21.4453 mo
395.306 17.2033 li
@
393.186 16.3243 mo
393.186 22.3243 li
390.186 19.3243 mo
396.186 19.3243 li
391.065 17.2033 mo
395.307 21.4453 li
391.065 21.4453 mo
395.307 17.2033 li
@
393.186 16.3243 mo
393.186 22.3243 li
390.186 19.3243 mo
396.186 19.3243 li
391.065 17.2033 mo
395.307 21.4453 li
391.065 21.4453 mo
395.307 17.2033 li
@
393.186 16.3243 mo
393.186 22.3243 li
390.186 19.3243 mo
396.186 19.3243 li
391.065 17.2033 mo
395.307 21.4453 li
391.065 21.4453 mo
395.307 17.2033 li
@
393.186 16.3243 mo
393.186 22.3243 li
390.186 19.3243 mo
396.186 19.3243 li
391.065 17.2033 mo
395.307 21.4453 li
391.065 21.4453 mo
395.307 17.2033 li
@
393.186 16.3243 mo
393.186 22.3243 li
390.186 19.3243 mo
396.186 19.3243 li
391.065 17.2033 mo
395.307 21.4453 li
391.065 21.4453 mo
395.307 17.2033 li
@
393.186 16.3243 mo
393.186 22.3243 li
390.186 19.3243 mo
396.186 19.3243 li
391.065 17.2033 mo
395.307 21.4453 li
391.065 21.4453 mo
395.307 17.2033 li
@
393.186 16.3243 mo
393.186 22.3243 li
390.186 19.3243 mo
396.186 19.3243 li
391.065 17.2033 mo
395.307 21.4453 li
391.065 21.4453 mo
395.307 17.2033 li
@
393.186 16.3243 mo
393.186 22.3243 li
390.186 19.3243 mo
396.186 19.3243 li
391.065 17.2033 mo
395.307 21.4453 li
391.065 21.4453 mo
395.307 17.2033 li
@
393.186 16.3243 mo
393.186 22.3243 li
390.186 19.3243 mo
396.186 19.3243 li
391.065 17.2033 mo
395.307 21.4453 li
391.065 21.4453 mo
395.307 17.2033 li
@
393.186 16.3243 mo
393.186 22.3243 li
390.186 19.3243 mo
396.186 19.3243 li
391.065 17.2033 mo
395.307 21.4453 li
391.065 21.4453 mo
395.307 17.2033 li
@
393.186 16.3243 mo
393.186 22.3243 li
390.186 19.3243 mo
396.186 19.3243 li
391.065 17.2033 mo
395.307 21.4453 li
391.065 21.4453 mo
395.307 17.2033 li
@
1 lj
50.3952 107.061 mo
63.3147 106.308 li
63.3147 105.712 li
63.3147 105.116 li
75.26 104.52 li
75.26 102.733 li
75.26 101.541 li
75.26 99.7543 li
75.26 99.1583 li
75.26 98.5623 li
75.26 97.9673 li
83.735 97.9673 li
90.3088 96.7753 li
90.3088 96.1793 li
95.6808 96.1793 li
95.6808 95.5833 li
95.6808 94.9883 li
100.222 94.3923 li
102.254 94.3923 li
105.941 94.3923 li
105.941 93.2013 li
105.941 92.6043 li
105.941 92.0093 li
105.941 91.4133 li
105.941 90.2223 li
114.847 89.0303 li
114.847 88.4343 li
117.303 87.8383 li
119.57 87.2423 li
119.57 86.6473 li
121.675 86.6473 li
123.64 85.4553 li
125.482 85.4553 li
126.361 85.4553 li
126.361 84.8604 li
129.638 84.2633 li
132.586 83.6683 li
132.586 83.0723 li
133.957 83.0723 li
135.266 83.0723 li
136.52 82.4763 li
138.307 81.8813 li
138.307 81.2854 li
138.307 80.6893 li
138.307 78.9023 li
139.439 78.9023 li
140.531 75.9233 li
143.581 74.7313 li
144.532 74.7313 li
147.635 74.7313 li
148.466 74.7313 li
149.272 74.7313 li
151.199 74.1353 li
151.935 73.5403 li
152.654 73.5403 li
154.04 73.5403 li
155.365 73.5403 li
155.686 72.9443 li
156.32 72.3483 li
156.941 72.3483 li
157.847 72.3483 li
159.014 71.7523 li
159.581 71.7523 li
160.136 70.5614 li
161.218 70.5614 li
162.769 70.5614 li
163.759 70.5614 li
164.242 70.5614 li
164.952 70.5614 li
165.416 69.3693 li
165.872 68.7743 li
166.322 67.5824 li
167.201 67.5824 li
168.886 66.9863 li
169.693 66.9863 li
170.284 66.9863 li
171.432 66.9863 li
172.717 66.9863 li
174.461 65.7953 li
176.107 65.7953 li
176.425 65.7953 li
177.666 64.0083 li
178.71 64.0083 li
179.719 64.0083 li
180.557 64.0083 li
182.293 63.4113 li
183.44 63.4113 li
183.934 62.8163 li
185.254 62.2203 li
186.854 62.2203 li
187.295 62.2203 li
188.264 62.2203 li
188.893 62.2203 li
189.509 61.0293 li
190.995 61.0293 li
191.474 61.0293 li
192.132 61.0293 li
192.593 59.8373 li
193.494 59.2413 li
194.282 59.2413 li
195.05 59.2413 li
195.88 58.0493 li
196.447 58.0493 li
197.082 57.4543 li
197.55 57.4543 li
198.538 56.2623 li
199.13 56.2623 li
200.28 56.2623 li
201.045 56.2623 li
202.124 55.0703 li
202.714 55.0703 li
203.859 55.0703 li
205.202 55.0703 li
206.083 55.0703 li
207.05 55.0703 li
207.77 55.0703 li
208.684 55.0703 li
209.981 54.4753 li
210.879 54.4753 li
211.56 54.4753 li
212.272 54.4753 li
213.467 54.4753 li
213.781 53.8793 li
214.659 53.8793 li
215.888 53.8793 li
216.665 53.8793 li
217.305 53.2833 li
218.278 52.6883 li
218.958 52.0923 li
219.55 51.4963 li
220.63 51.4963 li
221.259 50.9013 li
222.077 50.3043 li
222.971 49.1133 li
223.903 49.1133 li
224.744 49.1133 li
225.412 49.1133 li
226.241 49.1133 li
227.47 49.1133 li
227.943 49.1133 li
228.945 49.1133 li
230.12 49.1133 li
230.804 49.1133 li
231.739 49.1133 li
232.481 49.1133 li
233.433 48.5173 li
234.379 48.5173 li
235.252 48.5173 li
236.036 48.5173 li
236.555 48.5173 li
237.367 47.9223 li
238.409 47.9223 li
239.303 47.3253 li
239.952 47.3253 li
240.622 46.1344 li
241.279 46.1344 li
241.954 46.1344 li
242.581 46.1344 li
243.554 46.1344 li
244.606 46.1344 li
245.378 46.1344 li
245.982 46.1344 li
246.836 46.1344 li
247.624 45.5383 li
248.377 45.5383 li
249.432 44.9423 li
250.102 44.9423 li
250.745 44.9423 li
251.373 44.3463 li
251.977 44.3463 li
252.722 44.3463 li
253.311 44.3463 li
253.945 44.3463 li
254.621 43.7513 li
255.162 43.7513 li
255.961 43.7513 li
256.582 43.7513 li
257.374 43.1553 li
258.184 43.1553 li
258.858 43.1553 li
259.432 43.1553 li
260.068 43.1553 li
260.673 43.1553 li
261.381 43.1553 li
262.108 43.1553 li
262.639 43.1553 li
263.343 42.5593 li
264.161 42.5593 li
264.711 42.5593 li
265.4 41.9633 li
266.185 41.9633 li
266.861 41.3683 li
267.717 40.7723 li
268.423 40.7723 li
269.03 40.1763 li
269.765 39.5813 li
270.463 39.5813 li
271.101 39.5813 li
271.831 38.9854 li
272.518 38.9854 li
273.226 38.9854 li
273.94 38.9854 li
274.738 38.9854 li
275.511 38.9854 li
276.199 38.3893 li
276.924 38.3893 li
277.657 38.3893 li
278.247 38.3893 li
278.944 38.3893 li
279.514 38.3893 li
280.195 37.7933 li
280.673 37.1973 li
281.238 36.6023 li
281.96 36.6023 li
282.622 36.6023 li
283.334 36.6023 li
283.891 36.6023 li
284.488 36.6023 li
285.076 36.6023 li
285.711 36.6023 li
286.287 36.6023 li
286.837 36.6023 li
287.37 36.0063 li
287.994 36.0063 li
288.598 36.0063 li
289.292 36.0063 li
289.948 36.0063 li
290.418 36.0063 li
290.987 36.0063 li
291.553 36.0063 li
292.148 36.0063 li
292.777 36.0063 li
293.429 36.0063 li
293.987 36.0063 li
294.464 36.0063 li
295.057 36.0063 li
295.689 35.4103 li
296.247 35.4103 li
296.777 34.8153 li
297.37 34.8153 li
297.919 34.8153 li
298.432 34.8153 li
299.072 34.8153 li
299.592 34.8153 li
300.106 34.8153 li
300.622 34.8153 li
301.155 34.8153 li
301.656 34.8153 li
302.204 34.8153 li
302.788 34.2183 li
303.332 34.2183 li
303.868 34.2183 li
304.441 34.2183 li
305.03 34.2183 li
305.482 34.2183 li
305.989 34.2183 li
306.522 34.2183 li
307.033 34.2183 li
307.54 34.2183 li
308.084 34.2183 li
308.545 34.2183 li
309.095 33.6233 li
309.586 33.6233 li
310.061 33.6233 li
310.564 33.6233 li
311.09 33.6233 li
311.558 33.6233 li
312.124 33.0263 li
312.624 32.4313 li
313.107 32.4313 li
313.614 32.4313 li
314.106 32.4313 li
314.583 32.4313 li
315.107 32.4313 li
315.631 32.4313 li
316.106 32.4313 li
316.586 32.4313 li
317.081 31.8354 li
317.562 31.8354 li
318.034 31.8354 li
318.496 31.8354 li
319.005 31.8354 li
319.492 31.8354 li
319.948 30.6443 li
320.383 30.6443 li
320.827 30.6443 li
321.296 30.6443 li
321.766 30.6443 li
322.177 30.6443 li
322.619 30.6443 li
323.05 30.6443 li
323.465 30.6443 li
323.898 30.6443 li
324.325 30.0483 li
324.763 30.0483 li
325.217 29.4523 li
325.67 29.4523 li
326.091 29.4523 li
326.513 29.4523 li
326.957 29.4523 li
327.37 29.4523 li
327.83 29.4523 li
328.239 29.4523 li
328.654 29.4523 li
329.079 29.4523 li
329.468 29.4523 li
329.941 29.4523 li
330.334 29.4523 li
330.752 29.4523 li
331.157 28.8564 li
331.549 28.8564 li
331.952 28.2614 li
332.344 28.2614 li
332.749 28.2614 li
333.166 27.6653 li
333.557 27.6653 li
333.979 27.6653 li
334.369 27.6653 li
334.744 27.6653 li
335.099 27.6653 li
335.502 27.6653 li
335.889 27.6653 li
336.265 27.6653 li
336.634 27.0693 li
336.974 27.0693 li
337.364 27.0693 li
337.724 27.0693 li
338.092 27.0693 li
338.462 27.0693 li
338.879 27.0693 li
339.24 27.0693 li
339.606 27.0693 li
339.977 27.0693 li
340.336 27.0693 li
340.702 27.0693 li
341.068 27.0693 li
341.449 27.0693 li
341.816 27.0693 li
342.186 27.0693 li
342.524 27.0693 li
342.85 27.0693 li
343.202 27.0693 li
343.548 27.0693 li
343.91 27.0693 li
344.272 27.0693 li
344.632 27.0693 li
344.983 27.0693 li
345.333 27.0693 li
345.688 27.0693 li
346.01 27.0693 li
346.363 27.0693 li
346.688 27.0693 li
347.02 27.0693 li
347.355 27.0693 li
347.665 27.0693 li
347.989 27.0693 li
348.318 27.0693 li
348.634 26.4733 li
348.973 26.4733 li
349.289 26.4733 li
349.635 25.8783 li
349.971 25.8783 li
350.277 25.8783 li
350.599 25.8783 li
350.904 25.8783 li
351.237 25.8783 li
351.529 25.8783 li
351.867 25.8783 li
352.178 25.2823 li
352.472 25.2823 li
352.791 25.2823 li
353.105 25.2823 li
353.382 25.2823 li
353.693 25.2823 li
353.979 25.2823 li
354.247 25.2823 li
354.564 25.2823 li
354.837 25.2823 li
355.112 24.6863 li
355.396 24.6863 li
355.68 24.6863 li
355.957 24.6863 li
356.218 24.6863 li
356.492 24.6863 li
356.765 24.6863 li
357.061 24.6863 li
357.342 24.6863 li
357.614 24.6863 li
357.872 24.0903 li
358.141 24.0903 li
358.409 24.0903 li
358.68 24.0903 li
358.938 24.0903 li
359.193 24.0903 li
359.448 24.0903 li
359.686 24.0903 li
359.934 24.0903 li
360.19 24.0903 li
360.454 24.0903 li
360.711 24.0903 li
360.955 24.0903 li
361.205 24.0903 li
361.472 23.4953 li
361.725 23.4953 li
361.986 23.4953 li
362.225 22.8993 li
362.465 22.8993 li
362.726 22.8993 li
362.967 22.8993 li
363.197 22.8993 li
363.44 22.8993 li
363.678 22.8993 li
363.908 22.8993 li
364.13 22.8993 li
364.355 22.8993 li
364.574 22.8993 li
364.803 22.8993 li
365.023 22.8993 li
365.231 22.8993 li
365.45 22.8993 li
365.657 22.8993 li
365.878 22.8993 li
366.104 22.8993 li
366.321 22.8993 li
366.524 22.8993 li
366.737 22.8993 li
366.95 22.8993 li
367.164 22.8993 li
367.367 21.7073 li
367.583 21.7073 li
367.781 21.7073 li
367.99 21.1114 li
368.196 21.1114 li
368.395 21.1114 li
368.579 21.1114 li
368.777 21.1114 li
368.972 21.1114 li
369.173 21.1114 li
369.365 21.1114 li
369.568 21.1114 li
369.768 21.1114 li
369.967 21.1114 li
370.154 21.1114 li
370.347 21.1114 li
370.529 21.1114 li
370.711 21.1114 li
370.895 21.1114 li
371.084 21.1114 li
371.274 21.1114 li
371.445 21.1114 li
371.635 21.1114 li
371.816 21.1114 li
371.991 21.1114 li
372.163 21.1114 li
372.33 20.5163 li
372.498 20.5163 li
372.675 20.5163 li
372.845 20.5163 li
373.016 20.5163 li
373.195 20.5163 li
373.367 20.5163 li
373.537 20.5163 li
373.709 20.5163 li
373.871 20.5163 li
374.036 20.5163 li
374.194 20.5163 li
374.342 20.5163 li
374.507 20.5163 li
374.661 20.5163 li
374.818 20.5163 li
374.976 20.5163 li
375.133 20.5163 li
375.285 20.5163 li
375.439 20.5163 li
375.603 20.5163 li
375.749 20.5163 li
375.89 20.5163 li
376.033 20.5163 li
376.183 20.5163 li
376.323 20.5163 li
376.472 20.5163 li
376.612 20.5163 li
376.754 20.5163 li
376.894 20.5163 li
377.036 20.5163 li
377.177 20.5163 li
377.318 20.5163 li
377.458 20.5163 li
377.579 20.5163 li
377.72 20.5163 li
377.852 20.5163 li
377.981 20.5163 li
378.116 20.5163 li
378.248 20.5163 li
378.374 20.5163 li
378.499 20.5163 li
378.619 20.5163 li
378.743 20.5163 li
378.866 20.5163 li
378.988 20.5163 li
379.106 20.5163 li
379.225 20.5163 li
379.346 20.5163 li
379.477 20.5163 li
379.592 20.5163 li
379.713 20.5163 li
379.822 20.5163 li
379.948 20.5163 li
380.063 20.5163 li
380.174 20.5163 li
380.285 20.5163 li
380.4 20.5163 li
380.51 20.5163 li
380.616 20.5163 li
380.724 20.5163 li
380.828 20.5163 li
380.941 20.5163 li
381.049 20.5163 li
381.154 20.5163 li
381.258 20.5163 li
381.366 20.5163 li
381.481 20.5163 li
381.584 20.5163 li
381.687 20.5163 li
381.788 20.5163 li
381.884 20.5163 li
381.983 20.5163 li
382.079 20.5163 li
382.172 20.5163 li
382.276 20.5163 li
382.382 20.5163 li
382.478 20.5163 li
382.581 20.5163 li
382.671 20.5163 li
382.756 20.5163 li
382.852 20.5163 li
382.946 20.5163 li
383.035 20.5163 li
383.122 20.5163 li
383.214 20.5163 li
383.297 20.5163 li
383.387 20.5163 li
383.476 20.5163 li
383.561 20.5163 li
383.645 20.5163 li
383.738 20.5163 li
383.823 20.5163 li
383.906 20.5163 li
383.986 20.5163 li
384.066 20.5163 li
384.149 20.5163 li
384.228 20.5163 li
384.302 20.5163 li
384.38 20.5163 li
384.461 20.5163 li
384.54 20.5163 li
384.616 20.5163 li
384.697 20.5163 li
384.775 20.5163 li
384.853 20.5163 li
384.926 20.5163 li
385.002 20.5163 li
385.077 20.5163 li
385.151 20.5163 li
385.228 20.5163 li
385.296 20.5163 li
385.362 20.5163 li
385.432 20.5163 li
385.507 20.5163 li
385.578 20.5163 li
385.644 20.5163 li
385.706 20.5163 li
385.772 20.5163 li
385.841 20.5163 li
385.905 20.5163 li
385.973 20.5163 li
386.032 20.5163 li
386.097 20.5163 li
386.165 20.5163 li
386.228 20.5163 li
386.291 20.5163 li
386.355 20.5163 li
386.415 20.5163 li
386.475 20.5163 li
386.531 20.5163 li
386.596 20.5163 li
386.652 20.5163 li
386.713 20.5163 li
386.77 20.5163 li
386.826 20.5163 li
386.881 20.5163 li
386.939 20.5163 li
386.999 20.5163 li
387.055 20.5163 li
387.114 20.5163 li
387.166 20.5163 li
387.218 20.5163 li
387.273 20.5163 li
387.331 20.5163 li
387.384 20.5163 li
387.439 20.5163 li
387.488 20.5163 li
387.541 20.5163 li
387.593 20.5163 li
387.649 20.5163 li
387.698 20.5163 li
387.754 20.5163 li
387.806 20.5163 li
387.859 19.9193 li
387.904 19.9193 li
387.952 19.9193 li
387.995 19.9193 li
388.042 19.9193 li
388.088 19.9193 li
388.136 19.9193 li
388.184 19.9193 li
388.231 19.9193 li
388.277 19.9193 li
388.318 19.9193 li
388.36 19.9193 li
388.405 19.9193 li
388.452 19.9193 li
388.493 19.9193 li
388.534 19.9193 li
388.577 19.9193 li
388.62 19.9193 li
388.661 19.9193 li
388.697 19.9193 li
388.736 19.9193 li
388.775 19.9193 li
388.816 19.9193 li
388.856 19.9193 li
388.895 19.9193 li
388.931 19.9193 li
388.968 19.9193 li
389.009 19.9193 li
389.045 19.9193 li
389.079 19.9193 li
389.116 19.9193 li
389.154 19.9193 li
389.192 19.9193 li
389.227 19.9193 li
389.264 19.9193 li
389.304 19.9193 li
389.34 19.9193 li
389.377 19.9193 li
389.411 19.9193 li
389.448 19.9193 li
389.482 19.9193 li
389.515 19.9193 li
389.548 19.9193 li
389.581 19.9193 li
389.614 19.9193 li
389.645 19.9193 li
389.678 19.9193 li
389.711 19.9193 li
389.742 19.9193 li
389.774 19.9193 li
389.807 19.9193 li
389.837 19.9193 li
389.866 19.9193 li
389.897 19.9193 li
389.929 19.9193 li
389.959 19.9193 li
389.984 19.9193 li
390.013 19.9193 li
390.041 19.9193 li
390.068 19.9193 li
390.095 19.9193 li
390.122 19.9193 li
390.149 19.9193 li
390.177 19.9193 li
390.206 19.9193 li
390.233 19.9193 li
390.261 19.9193 li
390.285 19.9193 li
390.31 19.9193 li
390.337 19.9193 li
390.361 19.9193 li
390.388 19.9193 li
390.416 19.9193 li
390.439 19.9193 li
390.463 19.9193 li
390.486 19.9193 li
390.507 19.9193 li
390.534 19.9193 li
390.558 19.9193 li
390.584 19.9193 li
390.607 19.9193 li
390.629 19.9193 li
390.654 19.9193 li
390.674 19.9193 li
390.697 19.9193 li
390.722 19.9193 li
390.744 19.9193 li
390.763 19.9193 li
390.783 19.9193 li
390.805 19.9193 li
390.824 19.9193 li
390.845 19.9193 li
390.864 19.9193 li
390.886 19.9193 li
390.908 19.9193 li
390.928 19.9193 li
390.949 19.9193 li
390.97 19.3243 li
390.993 19.3243 li
391.013 19.3243 li
391.034 19.3243 li
391.053 19.3243 li
391.075 19.3243 li
391.096 19.3243 li
391.115 19.3243 li
391.133 19.3243 li
391.154 19.3243 li
391.174 19.3243 li
391.193 19.3243 li
391.211 19.3243 li
391.228 19.3243 li
391.248 19.3243 li
391.268 19.3243 li
391.286 19.3243 li
391.304 19.3243 li
391.319 19.3243 li
391.336 19.3243 li
391.354 19.3243 li
391.37 19.3243 li
391.386 19.3243 li
391.403 19.3243 li
391.42 19.3243 li
391.437 19.3243 li
391.454 19.3243 li
391.472 19.3243 li
391.487 19.3243 li
391.502 19.3243 li
391.519 19.3243 li
391.534 19.3243 li
391.549 19.3243 li
391.563 19.3243 li
391.577 19.3243 li
391.593 19.3243 li
391.609 19.3243 li
391.625 19.3243 li
391.64 19.3243 li
391.653 19.3243 li
391.668 19.3243 li
391.682 19.3243 li
391.694 19.3243 li
391.708 19.3243 li
391.722 19.3243 li
391.734 19.3243 li
391.746 19.3243 li
391.759 19.3243 li
391.774 19.3243 li
391.79 19.3243 li
391.802 19.3243 li
391.815 19.3243 li
391.827 19.3243 li
391.839 19.3243 li
391.852 19.3243 li
391.864 19.3243 li
391.877 19.3243 li
391.887 19.3243 li
391.9 19.3243 li
391.913 19.3243 li
391.925 19.3243 li
391.936 19.3243 li
391.948 19.3243 li
391.958 19.3243 li
391.97 19.3243 li
391.981 19.3243 li
391.993 19.3243 li
392.004 19.3243 li
392.014 19.3243 li
392.023 19.3243 li
392.034 19.3243 li
392.042 19.3243 li
392.052 19.3243 li
392.062 19.3243 li
392.073 19.3243 li
392.084 19.3243 li
392.094 19.3243 li
392.104 19.3243 li
392.113 19.3243 li
392.123 19.3243 li
392.133 19.3243 li
392.143 19.3243 li
392.152 19.3243 li
392.163 19.3243 li
392.173 19.3243 li
392.182 19.3243 li
392.191 19.3243 li
392.202 19.3243 li
392.212 19.3243 li
392.221 19.3243 li
392.228 19.3243 li
392.237 19.3243 li
392.245 19.3243 li
392.254 19.3243 li
392.263 19.3243 li
392.27 19.3243 li
392.28 19.3243 li
392.288 19.3243 li
392.297 19.3243 li
392.304 19.3243 li
392.311 19.3243 li
392.32 19.3243 li
392.329 19.3243 li
392.336 19.3243 li
392.345 19.3243 li
392.351 19.3243 li
392.359 19.3243 li
392.367 19.3243 li
392.375 19.3243 li
392.382 19.3243 li
392.39 19.3243 li
392.396 19.3243 li
392.404 19.3243 li
392.413 19.3243 li
392.42 19.3243 li
392.428 19.3243 li
392.436 19.3243 li
392.441 19.3243 li
392.448 19.3243 li
392.456 19.3243 li
392.462 19.3243 li
392.47 19.3243 li
392.477 19.3243 li
392.483 19.3243 li
392.491 19.3243 li
392.499 19.3243 li
392.505 19.3243 li
392.51 19.3243 li
392.518 19.3243 li
392.525 19.3243 li
392.531 19.3243 li
392.536 19.3243 li
392.543 19.3243 li
392.549 19.3243 li
392.555 19.3243 li
392.561 19.3243 li
392.568 19.3243 li
392.574 19.3243 li
392.579 19.3243 li
392.584 19.3243 li
392.591 19.3243 li
392.596 19.3243 li
392.602 19.3243 li
392.606 19.3243 li
392.61 19.3243 li
392.616 19.3243 li
392.622 19.3243 li
392.627 19.3243 li
392.632 19.3243 li
392.637 19.3243 li
392.642 19.3243 li
392.647 19.3243 li
392.651 19.3243 li
392.656 19.3243 li
392.662 19.3243 li
392.667 19.3243 li
392.672 19.3243 li
392.676 19.3243 li
392.681 19.3243 li
392.685 19.3243 li
392.688 19.3243 li
392.693 19.3243 li
392.698 19.3243 li
392.702 19.3243 li
392.706 19.3243 li
392.711 19.3243 li
392.716 19.3243 li
392.721 19.3243 li
392.724 19.3243 li
392.729 19.3243 li
392.734 19.3243 li
392.737 19.3243 li
392.741 19.3243 li
392.747 19.3243 li
392.751 19.3243 li
392.756 19.3243 li
392.76 19.3243 li
392.765 19.3243 li
392.769 19.3243 li
392.773 19.3243 li
392.776 19.3243 li
392.779 19.3243 li
392.783 19.3243 li
392.786 19.3243 li
392.789 19.3243 li
392.794 19.3243 li
392.797 19.3243 li
392.8 19.3243 li
392.804 19.3243 li
392.807 19.3243 li
392.809 19.3243 li
392.813 19.3243 li
392.817 19.3243 li
392.821 19.3243 li
392.825 19.3243 li
392.828 19.3243 li
392.831 19.3243 li
392.834 19.3243 li
392.838 19.3243 li
392.842 19.3243 li
392.845 19.3243 li
392.847 19.3243 li
392.851 19.3243 li
392.854 19.3243 li
392.857 19.3243 li
392.859 19.3243 li
392.862 19.3243 li
392.865 19.3243 li
392.869 19.3243 li
392.872 19.3243 li
392.875 19.3243 li
392.879 19.3243 li
392.882 19.3243 li
392.885 19.3243 li
392.888 19.3243 li
392.89 19.3243 li
392.893 19.3243 li
392.896 19.3243 li
392.899 19.3243 li
392.902 19.3243 li
392.905 19.3243 li
392.906 19.3243 li
392.91 19.3243 li
392.913 19.3243 li
392.915 19.3243 li
392.919 19.3243 li
392.922 19.3243 li
392.925 19.3243 li
392.928 19.3243 li
392.932 19.3243 li
392.934 19.3243 li
392.937 19.3243 li
392.94 19.3243 li
392.942 19.3243 li
392.945 19.3243 li
392.947 19.3243 li
392.95 19.3243 li
392.953 19.3243 li
392.955 19.3243 li
392.958 19.3243 li
392.961 19.3243 li
392.963 19.3243 li
392.965 19.3243 li
392.966 19.3243 li
392.968 19.3243 li
392.97 19.3243 li
392.973 19.3243 li
392.975 19.3243 li
392.977 19.3243 li
392.981 19.3243 li
392.982 19.3243 li
392.985 19.3243 li
392.986 19.3243 li
392.989 19.3243 li
392.99 19.3243 li
392.992 19.3243 li
392.994 19.3243 li
392.996 19.3243 li
392.999 19.3243 li
393 19.3243 li
393.002 19.3243 li
393.004 19.3243 li
393.005 19.3243 li
393.007 19.3243 li
393.009 19.3243 li
393.011 19.3243 li
393.013 19.3243 li
393.016 19.3243 li
393.017 19.3243 li
393.018 19.3243 li
393.02 19.3243 li
393.022 19.3243 li
393.024 19.3243 li
393.025 19.3243 li
393.028 19.3243 li
393.029 19.3243 li
393.03 19.3243 li
393.033 19.3243 li
393.034 19.3243 li
393.036 19.3243 li
393.038 19.3243 li
393.039 19.3243 li
393.041 19.3243 li
393.042 19.3243 li
393.043 19.3243 li
393.044 19.3243 li
393.047 19.3243 li
393.049 19.3243 li
393.05 19.3243 li
393.052 19.3243 li
393.055 19.3243 li
393.056 19.3243 li
393.057 19.3243 li
393.059 19.3243 li
393.06 19.3243 li
393.062 19.3243 li
393.063 19.3243 li
393.065 19.3243 li
393.066 19.3243 li
393.068 19.3243 li
393.07 19.3243 li
393.071 19.3243 li
393.072 19.3243 li
393.073 19.3243 li
393.074 19.3243 li
393.077 19.3243 li
393.078 19.3243 li
393.079 19.3243 li
393.081 19.3243 li
393.082 19.3243 li
393.084 19.3243 li
393.085 19.3243 li
393.086 19.3243 li
393.087 19.3243 li
393.088 19.3243 li
393.089 19.3243 li
393.091 19.3243 li
393.092 19.3243 li
393.094 19.3243 li
393.095 19.3243 li
393.096 19.3243 li
393.098 19.3243 li
393.1 19.3243 li
393.101 19.3243 li
393.102 19.3243 li
393.104 19.3243 li
393.105 19.3243 li
393.106 19.3243 li
393.107 19.3243 li
393.109 19.3243 li
393.111 19.3243 li
393.112 19.3243 li
393.113 19.3243 li
393.115 19.3243 li
393.116 19.3243 li
393.117 19.3243 li
393.118 19.3243 li
393.119 19.3243 li
393.12 19.3243 li
393.121 19.3243 li
393.122 19.3243 li
393.123 19.3243 li
393.124 19.3243 li
393.125 19.3243 li
393.126 19.3243 li
393.127 19.3243 li
393.128 19.3243 li
393.129 19.3243 li
393.131 19.3243 li
393.132 19.3243 li
393.134 19.3243 li
393.135 19.3243 li
393.136 19.3243 li
393.137 19.3243 li
393.138 19.3243 li
393.139 19.3243 li
393.14 19.3243 li
393.142 19.3243 li
393.143 19.3243 li
393.144 19.3243 li
393.145 19.3243 li
393.146 19.3243 li
393.147 19.3243 li
393.148 19.3243 li
393.149 19.3243 li
393.15 19.3243 li
393.151 19.3243 li
393.152 19.3243 li
393.153 19.3243 li
393.154 19.3243 li
393.155 19.3243 li
393.156 19.3243 li
393.157 19.3243 li
393.158 19.3243 li
393.159 19.3243 li
393.16 19.3243 li
393.161 19.3243 li
393.162 19.3243 li
393.163 19.3243 li
393.164 19.3243 li
393.165 19.3243 li
393.166 19.3243 li
393.167 19.3243 li
393.168 19.3243 li
393.169 19.3243 li
393.17 19.3243 li
393.171 19.3243 li
393.172 19.3243 li
393.173 19.3243 li
393.174 19.3243 li
393.175 19.3243 li
393.176 19.3243 li
393.177 19.3243 li
393.178 19.3243 li
393.179 19.3243 li
393.18 19.3243 li
393.181 19.3243 li
393.182 19.3243 li
393.183 19.3243 li
393.184 19.3243 li
393.185 19.3243 li
393.186 19.3243 li
0 .990631 1 .000396735 cmyk
@
63.3147 103.212 mo
64.6956 103.212 65.8147 104.331 65.8147 105.711 cv
65.8147 107.092 64.6956 108.211 63.3147 108.211 cv
61.9342 108.211 60.8151 107.092 60.8151 105.711 cv
60.8151 104.331 61.9342 103.212 63.3147 103.212 cv
cp
63.3147 102.211 mo
61.3823 102.211 59.8147 103.779 59.8147 105.711 cv
59.8147 107.644 61.3823 109.212 63.3147 109.212 cv
65.2475 109.212 66.8151 107.644 66.8151 105.711 cv
66.8151 103.779 65.2475 102.211 63.3147 102.211 cv
f
75.26 96.6583 mo
76.6405 96.6583 77.7596 97.7783 77.7596 99.1583 cv
77.7596 100.539 76.6405 101.658 75.26 101.658 cv
73.8792 101.658 72.76 100.539 72.76 99.1583 cv
72.76 97.7783 73.8792 96.6583 75.26 96.6583 cv
cp
75.26 95.6583 mo
73.3272 95.6583 71.7596 97.2253 71.7596 99.1583 cv
71.7596 101.091 73.3272 102.658 75.26 102.658 cv
77.1928 102.658 78.76 101.091 78.76 99.1583 cv
78.76 97.2253 77.1928 95.6583 75.26 95.6583 cv
f
95.6798 92.4883 mo
97.0608 92.4883 98.1798 93.6073 98.1798 94.9883 cv
98.1798 96.3693 97.0608 97.4873 95.6798 97.4873 cv
94.2988 97.4873 93.1808 96.3693 93.1808 94.9883 cv
93.1808 93.6073 94.2988 92.4883 95.6798 92.4883 cv
cp
95.6798 91.4873 mo
93.7468 91.4873 92.1796 93.0553 92.1796 94.9883 cv
92.1796 96.9203 93.7468 98.4883 95.6798 98.4883 cv
97.6128 98.4883 99.1808 96.9203 99.1808 94.9883 cv
99.1808 93.0553 97.6128 91.4873 95.6798 91.4873 cv
f
105.941 89.5094 mo
107.322 89.5094 108.441 90.6283 108.441 92.0093 cv
108.441 93.3903 107.322 94.5083 105.941 94.5083 cv
104.561 94.5083 103.441 93.3903 103.441 92.0093 cv
103.441 90.6283 104.561 89.5094 105.941 89.5094 cv
cp
105.941 88.5083 mo
104.009 88.5083 102.441 90.0763 102.441 92.0093 cv
102.441 93.9423 104.009 95.5093 105.941 95.5093 cv
107.874 95.5093 109.441 93.9423 109.441 92.0093 cv
109.441 90.0763 107.874 88.5083 105.941 88.5083 cv
f
121.675 84.1473 mo
123.056 84.1473 124.175 85.2663 124.175 86.6473 cv
124.175 88.0283 123.056 89.1473 121.675 89.1473 cv
120.295 89.1473 119.175 88.0283 119.175 86.6473 cv
119.175 85.2663 120.295 84.1473 121.675 84.1473 cv
cp
121.675 83.1473 mo
119.743 83.1473 118.175 84.7143 118.175 86.6473 cv
118.175 88.5793 119.743 90.1473 121.675 90.1473 cv
123.608 90.1473 125.175 88.5793 125.175 86.6473 cv
125.175 84.7143 123.608 83.1473 121.675 83.1473 cv
f
133.957 80.5723 mo
135.338 80.5723 136.457 81.6913 136.457 83.0723 cv
136.457 84.4533 135.338 85.5723 133.957 85.5723 cv
132.576 85.5723 131.457 84.4533 131.457 83.0723 cv
131.457 81.6913 132.576 80.5723 133.957 80.5723 cv
cp
133.957 79.5723 mo
132.024 79.5723 130.457 81.1393 130.457 83.0723 cv
130.457 85.0053 132.024 86.5723 133.957 86.5723 cv
135.89 86.5723 137.457 85.0053 137.457 83.0723 cv
137.457 81.1393 135.89 79.5723 133.957 79.5723 cv
f
143.581 72.2313 mo
144.962 72.2313 146.081 73.3513 146.081 74.7313 cv
146.081 76.1123 144.962 77.2313 143.581 77.2313 cv
142.2 77.2313 141.081 76.1123 141.081 74.7313 cv
141.081 73.3513 142.2 72.2313 143.581 72.2313 cv
cp
143.581 71.2313 mo
141.649 71.2313 140.081 72.7993 140.081 74.7313 cv
140.081 76.6643 141.649 78.2313 143.581 78.2313 cv
145.514 78.2313 147.081 76.6643 147.081 74.7313 cv
147.081 72.7993 145.514 71.2313 143.581 71.2313 cv
f
155.687 70.4443 mo
157.067 70.4443 158.186 71.5633 158.186 72.9443 cv
158.186 74.3253 157.067 75.4443 155.687 75.4443 cv
154.306 75.4443 153.187 74.3253 153.187 72.9443 cv
153.187 71.5633 154.306 70.4443 155.687 70.4443 cv
cp
155.687 69.4443 mo
153.754 69.4443 152.186 71.0114 152.186 72.9443 cv
152.186 74.8773 153.754 76.4443 155.687 76.4443 cv
157.62 76.4443 159.187 74.8773 159.187 72.9443 cv
159.187 71.0114 157.62 69.4443 155.687 69.4443 cv
f
164.242 68.0614 mo
165.622 68.0614 166.741 69.1803 166.741 70.5614 cv
166.741 71.9423 165.622 73.0614 164.242 73.0614 cv
162.861 73.0614 161.742 71.9423 161.742 70.5614 cv
161.742 69.1803 162.861 68.0614 164.242 68.0614 cv
cp
164.242 67.0614 mo
162.309 67.0614 160.741 68.6283 160.741 70.5614 cv
160.741 72.4943 162.309 74.0614 164.242 74.0614 cv
166.175 74.0614 167.742 72.4943 167.742 70.5614 cv
167.742 68.6283 166.175 67.0614 164.242 67.0614 cv
f
172.717 64.4863 mo
174.098 64.4863 175.216 65.6053 175.216 66.9863 cv
175.216 68.3673 174.098 69.4863 172.717 69.4863 cv
171.336 69.4863 170.217 68.3673 170.217 66.9863 cv
170.217 65.6053 171.336 64.4863 172.717 64.4863 cv
cp
172.717 63.4863 mo
170.784 63.4863 169.216 65.0533 169.216 66.9863 cv
169.216 68.9193 170.784 70.4863 172.717 70.4863 cv
174.65 70.4863 176.217 68.9193 176.217 66.9863 cv
176.217 65.0533 174.65 63.4863 172.717 63.4863 cv
f
183.439 60.9123 mo
184.82 60.9123 185.939 62.0313 185.939 63.4113 cv
185.939 64.7923 184.82 65.9113 183.439 65.9113 cv
182.059 65.9113 180.94 64.7923 180.94 63.4113 cv
180.94 62.0313 182.059 60.9123 183.439 60.9123 cv
cp
183.439 59.9113 mo
181.507 59.9113 179.939 61.4793 179.939 63.4113 cv
179.939 65.3443 181.507 66.9123 183.439 66.9123 cv
185.372 66.9123 186.94 65.3443 186.94 63.4113 cv
186.94 61.4793 185.372 59.9113 183.439 59.9113 cv
f
192.132 58.5293 mo
193.513 58.5293 194.632 59.6473 194.632 61.0283 cv
194.632 62.4093 193.513 63.5283 192.132 63.5283 cv
190.751 63.5283 189.632 62.4093 189.632 61.0283 cv
189.632 59.6473 190.751 58.5293 192.132 58.5293 cv
cp
192.132 57.5283 mo
190.199 57.5283 188.632 59.0953 188.632 61.0283 cv
188.632 62.9613 190.199 64.5293 192.132 64.5293 cv
194.065 64.5293 195.632 62.9613 195.632 61.0283 cv
195.632 59.0953 194.065 57.5283 192.132 57.5283 cv
f
199.13 53.7623 mo
200.511 53.7623 201.63 54.8813 201.63 56.2623 cv
201.63 57.6433 200.511 58.7623 199.13 58.7623 cv
197.75 58.7623 196.631 57.6433 196.631 56.2623 cv
196.631 54.8813 197.75 53.7623 199.13 53.7623 cv
cp
199.13 52.7623 mo
197.197 52.7623 195.63 54.3293 195.63 56.2623 cv
195.63 58.1953 197.197 59.7623 199.13 59.7623 cv
201.063 59.7623 202.631 58.1953 202.631 56.2623 cv
202.631 54.3293 201.063 52.7623 199.13 52.7623 cv
f
208.684 52.5713 mo
210.065 52.5713 211.184 53.6903 211.184 55.0703 cv
211.184 56.4513 210.065 57.5703 208.684 57.5703 cv
207.304 57.5703 206.185 56.4513 206.185 55.0703 cv
206.185 53.6903 207.304 52.5713 208.684 52.5713 cv
cp
208.684 51.5703 mo
206.752 51.5703 205.184 53.1383 205.184 55.0703 cv
205.184 57.0033 206.752 58.5713 208.684 58.5713 cv
210.617 58.5713 212.185 57.0033 212.185 55.0703 cv
212.185 53.1383 210.617 51.5703 208.684 51.5703 cv
f
217.305 50.7833 mo
218.686 50.7833 219.805 51.9033 219.805 53.2833 cv
219.805 54.6643 218.686 55.7833 217.305 55.7833 cv
215.924 55.7833 214.805 54.6643 214.805 53.2833 cv
214.805 51.9033 215.924 50.7833 217.305 50.7833 cv
cp
217.305 49.7833 mo
215.372 49.7833 213.805 51.3513 213.805 53.2833 cv
213.805 55.2163 215.372 56.7833 217.305 56.7833 cv
219.238 56.7833 220.805 55.2163 220.805 53.2833 cv
220.805 51.3513 219.238 49.7833 217.305 49.7833 cv
f
225.412 46.6133 mo
226.793 46.6133 227.912 47.7323 227.912 49.1133 cv
227.912 50.4943 226.793 51.6133 225.412 51.6133 cv
224.031 51.6133 222.912 50.4943 222.912 49.1133 cv
222.912 47.7323 224.031 46.6133 225.412 46.6133 cv
cp
225.412 45.6133 mo
223.479 45.6133 221.912 47.1803 221.912 49.1133 cv
221.912 51.0453 223.479 52.6133 225.412 52.6133 cv
227.345 52.6133 228.912 51.0453 228.912 49.1133 cv
228.912 47.1803 227.345 45.6133 225.412 45.6133 cv
f
234.379 46.0173 mo
235.759 46.0173 236.878 47.1364 236.878 48.5173 cv
236.878 49.8983 235.759 51.0173 234.379 51.0173 cv
232.998 51.0173 231.879 49.8983 231.879 48.5173 cv
231.879 47.1364 232.998 46.0173 234.379 46.0173 cv
cp
234.379 45.0173 mo
232.446 45.0173 230.878 46.5844 230.878 48.5173 cv
230.878 50.4503 232.446 52.0173 234.379 52.0173 cv
236.311 52.0173 237.879 50.4503 237.879 48.5173 cv
237.879 46.5844 236.311 45.0173 234.379 45.0173 cv
f
241.954 43.6344 mo
243.335 43.6344 244.454 44.7533 244.454 46.1344 cv
244.454 47.5153 243.335 48.6344 241.954 48.6344 cv
240.574 48.6344 239.454 47.5153 239.454 46.1344 cv
239.454 44.7533 240.574 43.6344 241.954 43.6344 cv
cp
241.954 42.6344 mo
240.021 42.6344 238.454 44.2013 238.454 46.1344 cv
238.454 48.0673 240.021 49.6344 241.954 49.6344 cv
243.887 49.6344 245.454 48.0673 245.454 46.1344 cv
245.454 44.2013 243.887 42.6344 241.954 42.6344 cv
f
250.102 42.4433 mo
251.483 42.4433 252.602 43.5614 252.602 44.9423 cv
252.602 46.3233 251.483 47.4423 250.102 47.4423 cv
248.721 47.4423 247.602 46.3233 247.602 44.9423 cv
247.602 43.5614 248.721 42.4433 250.102 42.4433 cv
cp
250.102 41.4423 mo
248.169 41.4423 246.602 43.0103 246.602 44.9423 cv
246.602 46.8753 248.169 48.4433 250.102 48.4433 cv
252.035 48.4433 253.602 46.8753 253.602 44.9423 cv
253.602 43.0103 252.035 41.4423 250.102 41.4423 cv
f
256.582 41.2513 mo
257.963 41.2513 259.082 42.3703 259.082 43.7513 cv
259.082 45.1313 257.963 46.2513 256.582 46.2513 cv
255.201 46.2513 254.082 45.1313 254.082 43.7513 cv
254.082 42.3703 255.201 41.2513 256.582 41.2513 cv
cp
256.582 40.2513 mo
254.649 40.2513 253.082 41.8183 253.082 43.7513 cv
253.082 45.6843 254.649 47.2513 256.582 47.2513 cv
258.515 47.2513 260.082 45.6843 260.082 43.7513 cv
260.082 41.8183 258.515 40.2513 256.582 40.2513 cv
f
263.343 40.0603 mo
264.724 40.0603 265.843 41.1793 265.843 42.5593 cv
265.843 43.9403 264.724 45.0593 263.343 45.0593 cv
261.962 45.0593 260.843 43.9403 260.843 42.5593 cv
260.843 41.1793 261.962 40.0603 263.343 40.0603 cv
cp
263.343 39.0594 mo
261.41 39.0594 259.843 40.6273 259.843 42.5593 cv
259.843 44.4923 261.41 46.0603 263.343 46.0603 cv
265.276 46.0603 266.843 44.4923 266.843 42.5593 cv
266.843 40.6273 265.276 39.0594 263.343 39.0594 cv
f
270.464 37.0813 mo
271.844 37.0813 272.963 38.2003 272.963 39.5804 cv
272.963 40.9613 271.844 42.0803 270.464 42.0803 cv
269.083 42.0803 267.964 40.9613 267.964 39.5804 cv
267.964 38.2003 269.083 37.0813 270.464 37.0813 cv
cp
270.464 36.0804 mo
268.531 36.0804 266.963 37.6483 266.963 39.5804 cv
266.963 41.5133 268.531 43.0813 270.464 43.0813 cv
272.396 43.0813 273.964 41.5133 273.964 39.5804 cv
273.964 37.6483 272.396 36.0804 270.464 36.0804 cv
f
277.657 35.8893 mo
279.038 35.8893 280.157 37.0083 280.157 38.3893 cv
280.157 39.7703 279.038 40.8883 277.657 40.8883 cv
276.276 40.8883 275.157 39.7703 275.157 38.3893 cv
275.157 37.0083 276.276 35.8893 277.657 35.8893 cv
cp
277.657 34.8883 mo
275.724 34.8883 274.157 36.4563 274.157 38.3893 cv
274.157 40.3223 275.724 41.8893 277.657 41.8893 cv
279.59 41.8893 281.157 40.3223 281.157 38.3893 cv
281.157 36.4563 279.59 34.8883 277.657 34.8883 cv
f
283.891 34.1023 mo
285.272 34.1023 286.391 35.2213 286.391 36.6013 cv
286.391 37.9823 285.272 39.1013 283.891 39.1013 cv
282.511 39.1013 281.391 37.9823 281.391 36.6013 cv
281.391 35.2213 282.511 34.1023 283.891 34.1023 cv
cp
283.891 33.1013 mo
281.958 33.1013 280.391 34.6693 280.391 36.6013 cv
280.391 38.5343 281.958 40.1023 283.891 40.1023 cv
285.824 40.1023 287.391 38.5343 287.391 36.6013 cv
287.391 34.6693 285.824 33.1013 283.891 33.1013 cv
f
289.948 33.5063 mo
291.329 33.5063 292.448 34.6253 292.448 36.0063 cv
292.448 37.3864 291.329 38.5063 289.948 38.5063 cv
288.567 38.5063 287.449 37.3864 287.449 36.0063 cv
287.449 34.6253 288.567 33.5063 289.948 33.5063 cv
cp
289.948 32.5063 mo
288.015 32.5063 286.448 34.0733 286.448 36.0063 cv
286.448 37.9383 288.015 39.5063 289.948 39.5063 cv
291.881 39.5063 293.449 37.9383 293.449 36.0063 cv
293.449 34.0733 291.881 32.5063 289.948 32.5063 cv
f
295.689 32.9103 mo
297.07 32.9103 298.188 34.0293 298.188 35.4103 cv
298.188 36.7913 297.07 37.9103 295.689 37.9103 cv
294.308 37.9103 293.189 36.7913 293.189 35.4103 cv
293.189 34.0293 294.308 32.9103 295.689 32.9103 cv
cp
295.689 31.9103 mo
293.756 31.9103 292.188 33.4773 292.188 35.4103 cv
292.188 37.3433 293.756 38.9103 295.689 38.9103 cv
297.622 38.9103 299.189 37.3433 299.189 35.4103 cv
299.189 33.4773 297.622 31.9103 295.689 31.9103 cv
f
301.155 32.3153 mo
302.536 32.3153 303.655 33.4333 303.655 34.8143 cv
303.655 36.1953 302.536 37.3143 301.155 37.3143 cv
299.774 37.3143 298.656 36.1953 298.656 34.8143 cv
298.656 33.4333 299.774 32.3153 301.155 32.3153 cv
cp
301.155 31.3143 mo
299.222 31.3143 297.655 32.8813 297.655 34.8143 cv
297.655 36.7473 299.222 38.3153 301.155 38.3153 cv
303.088 38.3153 304.656 36.7473 304.656 34.8143 cv
304.656 32.8813 303.088 31.3143 301.155 31.3143 cv
f
306.522 31.7193 mo
307.903 31.7193 309.022 32.8383 309.022 34.2193 cv
309.022 35.5993 307.903 36.7183 306.522 36.7183 cv
305.141 36.7183 304.022 35.5993 304.022 34.2193 cv
304.022 32.8383 305.141 31.7193 306.522 31.7193 cv
cp
306.522 30.7183 mo
304.589 30.7183 303.022 32.2863 303.022 34.2193 cv
303.022 36.1513 304.589 37.7193 306.522 37.7193 cv
308.455 37.7193 310.022 36.1513 310.022 34.2193 cv
310.022 32.2863 308.455 30.7183 306.522 30.7183 cv
f
311.558 31.1233 mo
312.939 31.1233 314.058 32.2423 314.058 33.6223 cv
314.058 35.0033 312.939 36.1223 311.558 36.1223 cv
310.177 36.1223 309.058 35.0033 309.058 33.6223 cv
309.058 32.2423 310.177 31.1233 311.558 31.1233 cv
cp
311.558 30.1223 mo
309.625 30.1223 308.058 31.6903 308.058 33.6223 cv
308.058 35.5553 309.625 37.1233 311.558 37.1233 cv
313.491 37.1233 315.058 35.5553 315.058 33.6223 cv
315.058 31.6903 313.491 30.1223 311.558 30.1223 cv
f
316.586 29.9313 mo
317.966 29.9313 319.086 31.0503 319.086 32.4313 cv
319.086 33.8123 317.966 34.9313 316.586 34.9313 cv
315.205 34.9313 314.086 33.8123 314.086 32.4313 cv
314.086 31.0503 315.205 29.9313 316.586 29.9313 cv
cp
316.586 28.9313 mo
314.653 28.9313 313.086 30.4983 313.086 32.4313 cv
313.086 34.3643 314.653 35.9313 316.586 35.9313 cv
318.519 35.9313 320.086 34.3643 320.086 32.4313 cv
320.086 30.4983 318.519 28.9313 316.586 28.9313 cv
f
321.296 28.1443 mo
322.677 28.1443 323.796 29.2633 323.796 30.6443 cv
323.796 32.0243 322.677 33.1443 321.296 33.1443 cv
319.915 33.1443 318.796 32.0243 318.796 30.6443 cv
318.796 29.2633 319.915 28.1443 321.296 28.1443 cv
cp
321.296 27.1443 mo
319.363 27.1443 317.796 28.7113 317.796 30.6443 cv
317.796 32.5763 319.363 34.1443 321.296 34.1443 cv
323.229 34.1443 324.796 32.5763 324.796 30.6443 cv
324.796 28.7113 323.229 27.1443 321.296 27.1443 cv
f
325.67 26.9533 mo
327.051 26.9533 328.17 28.0713 328.17 29.4523 cv
328.17 30.8333 327.051 31.9523 325.67 31.9523 cv
324.29 31.9523 323.171 30.8333 323.171 29.4523 cv
323.171 28.0713 324.29 26.9533 325.67 26.9533 cv
cp
325.67 25.9523 mo
323.738 25.9523 322.17 27.5193 322.17 29.4523 cv
322.17 31.3853 323.738 32.9533 325.67 32.9533 cv
327.603 32.9533 329.171 31.3853 329.171 29.4523 cv
329.171 27.5193 327.603 25.9523 325.67 25.9523 cv
f
329.941 26.9533 mo
331.322 26.9533 332.441 28.0713 332.441 29.4523 cv
332.441 30.8333 331.322 31.9523 329.941 31.9523 cv
328.56 31.9523 327.441 30.8333 327.441 29.4523 cv
327.441 28.0713 328.56 26.9533 329.941 26.9533 cv
cp
329.941 25.9523 mo
328.008 25.9523 326.441 27.5193 326.441 29.4523 cv
326.441 31.3853 328.008 32.9533 329.941 32.9533 cv
331.874 32.9533 333.441 31.3853 333.441 29.4523 cv
333.441 27.5193 331.874 25.9523 329.941 25.9523 cv
f
333.98 25.1653 mo
335.36 25.1653 336.479 26.2843 336.479 27.6653 cv
336.479 29.0453 335.36 30.1653 333.98 30.1653 cv
332.599 30.1653 331.48 29.0453 331.48 27.6653 cv
331.48 26.2843 332.599 25.1653 333.98 25.1653 cv
cp
333.98 24.1653 mo
332.047 24.1653 330.479 25.7323 330.479 27.6653 cv
330.479 29.5973 332.047 31.1653 333.98 31.1653 cv
335.912 31.1653 337.48 29.5973 337.48 27.6653 cv
337.48 25.7323 335.912 24.1653 333.98 24.1653 cv
f
337.724 24.5693 mo
339.105 24.5693 340.224 25.6883 340.224 27.0693 cv
340.224 28.4503 339.105 29.5693 337.724 29.5693 cv
336.343 29.5693 335.224 28.4503 335.224 27.0693 cv
335.224 25.6883 336.343 24.5693 337.724 24.5693 cv
cp
337.724 23.5693 mo
335.791 23.5693 334.224 25.1364 334.224 27.0693 cv
334.224 29.0023 335.791 30.5693 337.724 30.5693 cv
339.657 30.5693 341.224 29.0023 341.224 27.0693 cv
341.224 25.1364 339.657 23.5693 337.724 23.5693 cv
f
341.449 24.5693 mo
342.829 24.5693 343.948 25.6883 343.948 27.0693 cv
343.948 28.4503 342.829 29.5693 341.449 29.5693 cv
340.068 29.5693 338.949 28.4503 338.949 27.0693 cv
338.949 25.6883 340.068 24.5693 341.449 24.5693 cv
cp
341.449 23.5693 mo
339.516 23.5693 337.948 25.1364 337.948 27.0693 cv
337.948 29.0023 339.516 30.5693 341.449 30.5693 cv
343.381 30.5693 344.949 29.0023 344.949 27.0693 cv
344.949 25.1364 343.381 23.5693 341.449 23.5693 cv
f
344.983 24.5693 mo
346.364 24.5693 347.482 25.6883 347.482 27.0693 cv
347.482 28.4503 346.364 29.5693 344.983 29.5693 cv
343.602 29.5693 342.483 28.4503 342.483 27.0693 cv
342.483 25.6883 343.602 24.5693 344.983 24.5693 cv
cp
344.983 23.5693 mo
343.05 23.5693 341.482 25.1364 341.482 27.0693 cv
341.482 29.0023 343.05 30.5693 344.983 30.5693 cv
346.916 30.5693 348.483 29.0023 348.483 27.0693 cv
348.483 25.1364 346.916 23.5693 344.983 23.5693 cv
f
348.318 24.5693 mo
349.699 24.5693 350.818 25.6883 350.818 27.0693 cv
350.818 28.4503 349.699 29.5693 348.318 29.5693 cv
346.937 29.5693 345.818 28.4503 345.818 27.0693 cv
345.818 25.6883 346.937 24.5693 348.318 24.5693 cv
cp
348.318 23.5693 mo
346.385 23.5693 344.818 25.1364 344.818 27.0693 cv
344.818 29.0023 346.385 30.5693 348.318 30.5693 cv
350.25 30.5693 351.818 29.0023 351.818 27.0693 cv
351.818 25.1364 350.25 23.5693 348.318 23.5693 cv
f
351.529 23.3783 mo
352.91 23.3783 354.029 24.4973 354.029 25.8783 cv
354.029 27.2583 352.91 28.3773 351.529 28.3773 cv
350.149 28.3773 349.03 27.2583 349.03 25.8783 cv
349.03 24.4973 350.149 23.3783 351.529 23.3783 cv
cp
351.529 22.3773 mo
349.597 22.3773 348.029 23.9453 348.029 25.8783 cv
348.029 27.8103 349.597 29.3783 351.529 29.3783 cv
353.462 29.3783 355.03 27.8103 355.03 25.8783 cv
355.03 23.9453 353.462 22.3773 351.529 22.3773 cv
f
354.564 22.7823 mo
355.945 22.7823 357.064 23.9013 357.064 25.2823 cv
357.064 26.6633 355.945 27.7813 354.564 27.7813 cv
353.183 27.7813 352.064 26.6633 352.064 25.2823 cv
352.064 23.9013 353.183 22.7823 354.564 22.7823 cv
cp
354.564 21.7813 mo
352.631 21.7813 351.064 23.3493 351.064 25.2823 cv
351.064 27.2153 352.631 28.7823 354.564 28.7823 cv
356.497 28.7823 358.064 27.2153 358.064 25.2823 cv
358.064 23.3493 356.497 21.7813 354.564 21.7813 cv
f
357.342 22.1863 mo
358.723 22.1863 359.842 23.3053 359.842 24.6863 cv
359.842 26.0673 358.723 27.1863 357.342 27.1863 cv
355.961 27.1863 354.843 26.0673 354.843 24.6863 cv
354.843 23.3053 355.961 22.1863 357.342 22.1863 cv
cp
357.342 21.1863 mo
355.409 21.1863 353.842 22.7533 353.842 24.6863 cv
353.842 26.6193 355.409 28.1863 357.342 28.1863 cv
359.275 28.1863 360.843 26.6193 360.843 24.6863 cv
360.843 22.7533 359.275 21.1863 357.342 21.1863 cv
f
359.934 21.5903 mo
361.315 21.5903 362.434 22.7104 362.434 24.0903 cv
362.434 25.4713 361.315 26.5903 359.934 26.5903 cv
358.553 26.5903 357.434 25.4713 357.434 24.0903 cv
357.434 22.7104 358.553 21.5903 359.934 21.5903 cv
cp
359.934 20.5903 mo
358.001 20.5903 356.434 22.1584 356.434 24.0903 cv
356.434 26.0233 358.001 27.5903 359.934 27.5903 cv
361.867 27.5903 363.434 26.0233 363.434 24.0903 cv
363.434 22.1584 361.867 20.5903 359.934 20.5903 cv
f
362.465 20.3993 mo
363.846 20.3993 364.965 21.5183 364.965 22.8993 cv
364.965 24.2793 363.846 25.3983 362.465 25.3983 cv
361.084 25.3983 359.966 24.2793 359.966 22.8993 cv
359.966 21.5183 361.084 20.3993 362.465 20.3993 cv
cp
362.465 19.3983 mo
360.532 19.3983 358.965 20.9663 358.965 22.8993 cv
358.965 24.8313 360.532 26.3993 362.465 26.3993 cv
364.398 26.3993 365.966 24.8313 365.966 22.8993 cv
365.966 20.9663 364.398 19.3983 362.465 19.3983 cv
f
364.803 20.3993 mo
366.184 20.3993 367.302 21.5183 367.302 22.8993 cv
367.302 24.2793 366.184 25.3983 364.803 25.3983 cv
363.422 25.3983 362.303 24.2793 362.303 22.8993 cv
362.303 21.5183 363.422 20.3993 364.803 20.3993 cv
cp
364.803 19.3983 mo
362.87 19.3983 361.302 20.9663 361.302 22.8993 cv
361.302 24.8313 362.87 26.3993 364.803 26.3993 cv
366.736 26.3993 368.303 24.8313 368.303 22.8993 cv
368.303 20.9663 366.736 19.3983 364.803 19.3983 cv
f
366.95 20.3993 mo
368.331 20.3993 369.45 21.5183 369.45 22.8993 cv
369.45 24.2793 368.331 25.3983 366.95 25.3983 cv
365.569 25.3983 364.45 24.2793 364.45 22.8993 cv
364.45 21.5183 365.569 20.3993 366.95 20.3993 cv
cp
366.95 19.3983 mo
365.017 19.3983 363.45 20.9663 363.45 22.8993 cv
363.45 24.8313 365.017 26.3993 366.95 26.3993 cv
368.882 26.3993 370.45 24.8313 370.45 22.8993 cv
370.45 20.9663 368.882 19.3983 366.95 19.3983 cv
f
368.971 18.6114 mo
370.352 18.6114 371.471 19.7314 371.471 21.1114 cv
371.471 22.4923 370.352 23.6114 368.971 23.6114 cv
367.591 23.6114 366.472 22.4923 366.472 21.1114 cv
366.472 19.7314 367.591 18.6114 368.971 18.6114 cv
cp
368.971 17.6114 mo
367.038 17.6114 365.471 19.1794 365.471 21.1114 cv
365.471 23.0443 367.038 24.6114 368.971 24.6114 cv
370.904 24.6114 372.472 23.0443 372.472 21.1114 cv
372.472 19.1794 370.904 17.6114 368.971 17.6114 cv
f
370.895 18.6114 mo
372.275 18.6114 373.395 19.7314 373.395 21.1114 cv
373.395 22.4923 372.275 23.6114 370.895 23.6114 cv
369.514 23.6114 368.395 22.4923 368.395 21.1114 cv
368.395 19.7314 369.514 18.6114 370.895 18.6114 cv
cp
370.895 17.6114 mo
368.962 17.6114 367.395 19.1794 367.395 21.1114 cv
367.395 23.0443 368.962 24.6114 370.895 24.6114 cv
372.827 24.6114 374.395 23.0443 374.395 21.1114 cv
374.395 19.1794 372.827 17.6114 370.895 17.6114 cv
f
372.675 18.0163 mo
374.056 18.0163 375.175 19.1353 375.175 20.5153 cv
375.175 21.8963 374.056 23.0153 372.675 23.0153 cv
371.295 23.0153 370.175 21.8963 370.175 20.5153 cv
370.175 19.1353 371.295 18.0163 372.675 18.0163 cv
cp
372.675 17.0153 mo
370.743 17.0153 369.175 18.5833 369.175 20.5153 cv
369.175 22.4483 370.743 24.0163 372.675 24.0163 cv
374.608 24.0163 376.175 22.4483 376.175 20.5153 cv
376.175 18.5833 374.608 17.0153 372.675 17.0153 cv
f
374.342 18.0163 mo
375.723 18.0163 376.842 19.1353 376.842 20.5153 cv
376.842 21.8963 375.723 23.0153 374.342 23.0153 cv
372.961 23.0153 371.842 21.8963 371.842 20.5153 cv
371.842 19.1353 372.961 18.0163 374.342 18.0163 cv
cp
374.342 17.0153 mo
372.409 17.0153 370.842 18.5833 370.842 20.5153 cv
370.842 22.4483 372.409 24.0163 374.342 24.0163 cv
376.275 24.0163 377.842 22.4483 377.842 20.5153 cv
377.842 18.5833 376.275 17.0153 374.342 17.0153 cv
f
375.89 18.0163 mo
377.27 18.0163 378.389 19.1353 378.389 20.5153 cv
378.389 21.8963 377.27 23.0153 375.89 23.0153 cv
374.509 23.0153 373.39 21.8963 373.39 20.5153 cv
373.39 19.1353 374.509 18.0163 375.89 18.0163 cv
cp
375.89 17.0153 mo
373.957 17.0153 372.389 18.5833 372.389 20.5153 cv
372.389 22.4483 373.957 24.0163 375.89 24.0163 cv
377.822 24.0163 379.39 22.4483 379.39 20.5153 cv
379.39 18.5833 377.822 17.0153 375.89 17.0153 cv
f
377.318 18.0163 mo
378.699 18.0163 379.818 19.1353 379.818 20.5153 cv
379.818 21.8963 378.699 23.0153 377.318 23.0153 cv
375.937 23.0153 374.818 21.8963 374.818 20.5153 cv
374.818 19.1353 375.937 18.0163 377.318 18.0163 cv
cp
377.318 17.0153 mo
375.385 17.0153 373.818 18.5833 373.818 20.5153 cv
373.818 22.4483 375.385 24.0163 377.318 24.0163 cv
379.251 24.0163 380.818 22.4483 380.818 20.5153 cv
380.818 18.5833 379.251 17.0153 377.318 17.0153 cv
f
378.618 18.0163 mo
379.999 18.0163 381.118 19.1353 381.118 20.5153 cv
381.118 21.8963 379.999 23.0153 378.618 23.0153 cv
377.238 23.0153 376.119 21.8963 376.119 20.5153 cv
376.119 19.1353 377.238 18.0163 378.618 18.0163 cv
cp
378.618 17.0153 mo
376.686 17.0153 375.118 18.5833 375.118 20.5153 cv
375.118 22.4483 376.686 24.0163 378.618 24.0163 cv
380.551 24.0163 382.119 22.4483 382.119 20.5153 cv
382.119 18.5833 380.551 17.0153 378.618 17.0153 cv
f
379.822 18.0163 mo
381.203 18.0163 382.322 19.1353 382.322 20.5153 cv
382.322 21.8963 381.203 23.0153 379.822 23.0153 cv
378.441 23.0153 377.322 21.8963 377.322 20.5153 cv
377.322 19.1353 378.441 18.0163 379.822 18.0163 cv
cp
379.822 17.0153 mo
377.89 17.0153 376.322 18.5833 376.322 20.5153 cv
376.322 22.4483 377.89 24.0163 379.822 24.0163 cv
381.755 24.0163 383.322 22.4483 383.322 20.5153 cv
383.322 18.5833 381.755 17.0153 379.822 17.0153 cv
f
380.941 18.0163 mo
382.322 18.0163 383.441 19.1353 383.441 20.5153 cv
383.441 21.8963 382.322 23.0153 380.941 23.0153 cv
379.56 23.0153 378.441 21.8963 378.441 20.5153 cv
378.441 19.1353 379.56 18.0163 380.941 18.0163 cv
cp
380.941 17.0153 mo
379.008 17.0153 377.441 18.5833 377.441 20.5153 cv
377.441 22.4483 379.008 24.0163 380.941 24.0163 cv
382.874 24.0163 384.441 22.4483 384.441 20.5153 cv
384.441 18.5833 382.874 17.0153 380.941 17.0153 cv
f
381.983 18.0163 mo
383.364 18.0163 384.482 19.1353 384.482 20.5153 cv
384.482 21.8963 383.364 23.0153 381.983 23.0153 cv
380.602 23.0153 379.483 21.8963 379.483 20.5153 cv
379.483 19.1353 380.602 18.0163 381.983 18.0163 cv
cp
381.983 17.0153 mo
380.05 17.0153 378.482 18.5833 378.482 20.5153 cv
378.482 22.4483 380.05 24.0163 381.983 24.0163 cv
383.916 24.0163 385.483 22.4483 385.483 20.5153 cv
385.483 18.5833 383.916 17.0153 381.983 17.0153 cv
f
382.946 18.0163 mo
384.327 18.0163 385.446 19.1353 385.446 20.5153 cv
385.446 21.8963 384.327 23.0153 382.946 23.0153 cv
381.566 23.0153 380.447 21.8963 380.447 20.5153 cv
380.447 19.1353 381.566 18.0163 382.946 18.0163 cv
cp
382.946 17.0153 mo
381.014 17.0153 379.446 18.5833 379.446 20.5153 cv
379.446 22.4483 381.014 24.0163 382.946 24.0163 cv
384.879 24.0163 386.447 22.4483 386.447 20.5153 cv
386.447 18.5833 384.879 17.0153 382.946 17.0153 cv
f
383.824 18.0163 mo
385.204 18.0163 386.323 19.1353 386.323 20.5153 cv
386.323 21.8963 385.204 23.0153 383.824 23.0153 cv
382.443 23.0153 381.324 21.8963 381.324 20.5153 cv
381.324 19.1353 382.443 18.0163 383.824 18.0163 cv
cp
383.824 17.0153 mo
381.891 17.0153 380.323 18.5833 380.323 20.5153 cv
380.323 22.4483 381.891 24.0163 383.824 24.0163 cv
385.756 24.0163 387.324 22.4483 387.324 20.5153 cv
387.324 18.5833 385.756 17.0153 383.824 17.0153 cv
f
384.616 18.0163 mo
385.997 18.0163 387.116 19.1353 387.116 20.5153 cv
387.116 21.8963 385.997 23.0153 384.616 23.0153 cv
383.236 23.0153 382.117 21.8963 382.117 20.5153 cv
382.117 19.1353 383.236 18.0163 384.616 18.0163 cv
cp
384.616 17.0153 mo
382.684 17.0153 381.116 18.5833 381.116 20.5153 cv
381.116 22.4483 382.684 24.0163 384.616 24.0163 cv
386.549 24.0163 388.117 22.4483 388.117 20.5153 cv
388.117 18.5833 386.549 17.0153 384.616 17.0153 cv
f
385.362 18.0163 mo
386.743 18.0163 387.861 19.1353 387.861 20.5153 cv
387.861 21.8963 386.743 23.0153 385.362 23.0153 cv
383.981 23.0153 382.862 21.8963 382.862 20.5153 cv
382.862 19.1353 383.981 18.0163 385.362 18.0163 cv
cp
385.362 17.0153 mo
383.429 17.0153 381.861 18.5833 381.861 20.5153 cv
381.861 22.4483 383.429 24.0163 385.362 24.0163 cv
387.295 24.0163 388.862 22.4483 388.862 20.5153 cv
388.862 18.5833 387.295 17.0153 385.362 17.0153 cv
f
386.033 18.0163 mo
387.414 18.0163 388.532 19.1353 388.532 20.5153 cv
388.532 21.8963 387.414 23.0153 386.033 23.0153 cv
384.652 23.0153 383.533 21.8963 383.533 20.5153 cv
383.533 19.1353 384.652 18.0163 386.033 18.0163 cv
cp
386.033 17.0153 mo
384.1 17.0153 382.532 18.5833 382.532 20.5153 cv
382.532 22.4483 384.1 24.0163 386.033 24.0163 cv
387.966 24.0163 389.533 22.4483 389.533 20.5153 cv
389.533 18.5833 387.966 17.0153 386.033 17.0153 cv
f
386.652 18.0163 mo
388.033 18.0163 389.152 19.1353 389.152 20.5153 cv
389.152 21.8963 388.033 23.0153 386.652 23.0153 cv
385.271 23.0153 384.152 21.8963 384.152 20.5153 cv
384.152 19.1353 385.271 18.0163 386.652 18.0163 cv
cp
386.652 17.0153 mo
384.719 17.0153 383.152 18.5833 383.152 20.5153 cv
383.152 22.4483 384.719 24.0163 386.652 24.0163 cv
388.585 24.0163 390.152 22.4483 390.152 20.5153 cv
390.152 18.5833 388.585 17.0153 386.652 17.0153 cv
f
387.218 18.0163 mo
388.599 18.0163 389.718 19.1353 389.718 20.5153 cv
389.718 21.8963 388.599 23.0153 387.218 23.0153 cv
385.838 23.0153 384.719 21.8963 384.719 20.5153 cv
384.719 19.1353 385.838 18.0163 387.218 18.0163 cv
cp
387.218 17.0153 mo
385.286 17.0153 383.718 18.5833 383.718 20.5153 cv
383.718 22.4483 385.286 24.0163 387.218 24.0163 cv
389.151 24.0163 390.719 22.4483 390.719 20.5153 cv
390.719 18.5833 389.151 17.0153 387.218 17.0153 cv
f
387.754 18.0163 mo
389.135 18.0163 390.254 19.1353 390.254 20.5153 cv
390.254 21.8963 389.135 23.0153 387.754 23.0153 cv
386.374 23.0153 385.254 21.8963 385.254 20.5153 cv
385.254 19.1353 386.374 18.0163 387.754 18.0163 cv
cp
387.754 17.0153 mo
385.822 17.0153 384.254 18.5833 384.254 20.5153 cv
384.254 22.4483 385.822 24.0163 387.754 24.0163 cv
389.687 24.0163 391.254 22.4483 391.254 20.5153 cv
391.254 18.5833 389.687 17.0153 387.754 17.0153 cv
f
388.232 17.4203 mo
389.613 17.4203 390.731 18.5393 390.731 19.9203 cv
390.731 21.3013 389.613 22.4203 388.232 22.4203 cv
386.851 22.4203 385.732 21.3013 385.732 19.9203 cv
385.732 18.5393 386.851 17.4203 388.232 17.4203 cv
cp
388.232 16.4203 mo
386.299 16.4203 384.731 17.9873 384.731 19.9203 cv
384.731 21.8533 386.299 23.4203 388.232 23.4203 cv
390.165 23.4203 391.732 21.8533 391.732 19.9203 cv
391.732 17.9873 390.165 16.4203 388.232 16.4203 cv
f
388.661 17.4203 mo
390.042 17.4203 391.161 18.5393 391.161 19.9203 cv
391.161 21.3013 390.042 22.4203 388.661 22.4203 cv
387.281 22.4203 386.162 21.3013 386.162 19.9203 cv
386.162 18.5393 387.281 17.4203 388.661 17.4203 cv
cp
388.661 16.4203 mo
386.729 16.4203 385.161 17.9873 385.161 19.9203 cv
385.161 21.8533 386.729 23.4203 388.661 23.4203 cv
390.594 23.4203 392.162 21.8533 392.162 19.9203 cv
392.162 17.9873 390.594 16.4203 388.661 16.4203 cv
f
389.045 17.4203 mo
390.426 17.4203 391.545 18.5393 391.545 19.9203 cv
391.545 21.3013 390.426 22.4203 389.045 22.4203 cv
387.665 22.4203 386.545 21.3013 386.545 19.9203 cv
386.545 18.5393 387.665 17.4203 389.045 17.4203 cv
cp
389.045 16.4203 mo
387.113 16.4203 385.545 17.9873 385.545 19.9203 cv
385.545 21.8533 387.113 23.4203 389.045 23.4203 cv
390.978 23.4203 392.545 21.8533 392.545 19.9203 cv
392.545 17.9873 390.978 16.4203 389.045 16.4203 cv
f
389.411 17.4203 mo
390.792 17.4203 391.911 18.5393 391.911 19.9203 cv
391.911 21.3013 390.792 22.4203 389.411 22.4203 cv
388.031 22.4203 386.911 21.3013 386.911 19.9203 cv
386.911 18.5393 388.031 17.4203 389.411 17.4203 cv
cp
389.411 16.4203 mo
387.478 16.4203 385.911 17.9873 385.911 19.9203 cv
385.911 21.8533 387.478 23.4203 389.411 23.4203 cv
391.344 23.4203 392.911 21.8533 392.911 19.9203 cv
392.911 17.9873 391.344 16.4203 389.411 16.4203 cv
f
389.742 17.4203 mo
391.123 17.4203 392.242 18.5393 392.242 19.9203 cv
392.242 21.3013 391.123 22.4203 389.742 22.4203 cv
388.361 22.4203 387.242 21.3013 387.242 19.9203 cv
387.242 18.5393 388.361 17.4203 389.742 17.4203 cv
cp
389.742 16.4203 mo
387.809 16.4203 386.242 17.9873 386.242 19.9203 cv
386.242 21.8533 387.809 23.4203 389.742 23.4203 cv
391.675 23.4203 393.242 21.8533 393.242 19.9203 cv
393.242 17.9873 391.675 16.4203 389.742 16.4203 cv
f
390.041 17.4203 mo
391.422 17.4203 392.541 18.5393 392.541 19.9203 cv
392.541 21.3013 391.422 22.4203 390.041 22.4203 cv
388.661 22.4203 387.541 21.3013 387.541 19.9203 cv
387.541 18.5393 388.661 17.4203 390.041 17.4203 cv
cp
390.041 16.4203 mo
388.109 16.4203 386.541 17.9873 386.541 19.9203 cv
386.541 21.8533 388.109 23.4203 390.041 23.4203 cv
391.974 23.4203 393.541 21.8533 393.541 19.9203 cv
393.541 17.9873 391.974 16.4203 390.041 16.4203 cv
f
390.309 17.4203 mo
391.69 17.4203 392.809 18.5393 392.809 19.9203 cv
392.809 21.3013 391.69 22.4203 390.309 22.4203 cv
388.929 22.4203 387.81 21.3013 387.81 19.9203 cv
387.81 18.5393 388.929 17.4203 390.309 17.4203 cv
cp
390.309 16.4203 mo
388.377 16.4203 386.809 17.9873 386.809 19.9203 cv
386.809 21.8533 388.377 23.4203 390.309 23.4203 cv
392.242 23.4203 393.81 21.8533 393.81 19.9203 cv
393.81 17.9873 392.242 16.4203 390.309 16.4203 cv
f
390.558 17.4203 mo
391.939 17.4203 393.057 18.5393 393.057 19.9203 cv
393.057 21.3013 391.939 22.4203 390.558 22.4203 cv
389.177 22.4203 388.058 21.3013 388.058 19.9203 cv
388.058 18.5393 389.177 17.4203 390.558 17.4203 cv
cp
390.558 16.4203 mo
388.625 16.4203 387.057 17.9873 387.057 19.9203 cv
387.057 21.8533 388.625 23.4203 390.558 23.4203 cv
392.491 23.4203 394.058 21.8533 394.058 19.9203 cv
394.058 17.9873 392.491 16.4203 390.558 16.4203 cv
f
390.783 17.4203 mo
392.163 17.4203 393.282 18.5393 393.282 19.9203 cv
393.282 21.3013 392.163 22.4203 390.783 22.4203 cv
389.402 22.4203 388.283 21.3013 388.283 19.9203 cv
388.283 18.5393 389.402 17.4203 390.783 17.4203 cv
cp
390.783 16.4203 mo
388.85 16.4203 387.282 17.9873 387.282 19.9203 cv
387.282 21.8533 388.85 23.4203 390.783 23.4203 cv
392.715 23.4203 394.283 21.8533 394.283 19.9203 cv
394.283 17.9873 392.715 16.4203 390.783 16.4203 cv
f
390.993 16.8243 mo
392.374 16.8243 393.493 17.9433 393.493 19.3243 cv
393.493 20.7054 392.374 21.8243 390.993 21.8243 cv
389.612 21.8243 388.493 20.7054 388.493 19.3243 cv
388.493 17.9433 389.612 16.8243 390.993 16.8243 cv
cp
390.993 15.8243 mo
389.06 15.8243 387.493 17.3913 387.493 19.3243 cv
387.493 21.2574 389.06 22.8243 390.993 22.8243 cv
392.925 22.8243 394.493 21.2574 394.493 19.3243 cv
394.493 17.3913 392.925 15.8243 390.993 15.8243 cv
f
391.193 16.8243 mo
392.574 16.8243 393.693 17.9433 393.693 19.3243 cv
393.693 20.7054 392.574 21.8243 391.193 21.8243 cv
389.812 21.8243 388.693 20.7054 388.693 19.3243 cv
388.693 17.9433 389.812 16.8243 391.193 16.8243 cv
cp
391.193 15.8243 mo
389.26 15.8243 387.693 17.3913 387.693 19.3243 cv
387.693 21.2574 389.26 22.8243 391.193 22.8243 cv
393.125 22.8243 394.693 21.2574 394.693 19.3243 cv
394.693 17.3913 393.125 15.8243 391.193 15.8243 cv
f
391.37 16.8243 mo
392.751 16.8243 393.87 17.9433 393.87 19.3243 cv
393.87 20.7054 392.751 21.8243 391.37 21.8243 cv
389.99 21.8243 388.87 20.7054 388.87 19.3243 cv
388.87 17.9433 389.99 16.8243 391.37 16.8243 cv
cp
391.37 15.8243 mo
389.438 15.8243 387.87 17.3913 387.87 19.3243 cv
387.87 21.2574 389.438 22.8243 391.37 22.8243 cv
393.303 22.8243 394.87 21.2574 394.87 19.3243 cv
394.87 17.3913 393.303 15.8243 391.37 15.8243 cv
f
391.534 16.8243 mo
392.915 16.8243 394.034 17.9433 394.034 19.3243 cv
394.034 20.7054 392.915 21.8243 391.534 21.8243 cv
390.154 21.8243 389.034 20.7054 389.034 19.3243 cv
389.034 17.9433 390.154 16.8243 391.534 16.8243 cv
cp
391.534 15.8243 mo
389.602 15.8243 388.034 17.3913 388.034 19.3243 cv
388.034 21.2574 389.602 22.8243 391.534 22.8243 cv
393.467 22.8243 395.034 21.2574 395.034 19.3243 cv
395.034 17.3913 393.467 15.8243 391.534 15.8243 cv
f
391.682 16.8243 mo
393.063 16.8243 394.182 17.9433 394.182 19.3243 cv
394.182 20.7054 393.063 21.8243 391.682 21.8243 cv
390.301 21.8243 389.182 20.7054 389.182 19.3243 cv
389.182 17.9433 390.301 16.8243 391.682 16.8243 cv
cp
391.682 15.8243 mo
389.749 15.8243 388.182 17.3913 388.182 19.3243 cv
388.182 21.2574 389.749 22.8243 391.682 22.8243 cv
393.615 22.8243 395.182 21.2574 395.182 19.3243 cv
395.182 17.3913 393.615 15.8243 391.682 15.8243 cv
f
391.815 16.8243 mo
393.196 16.8243 394.315 17.9433 394.315 19.3243 cv
394.315 20.7054 393.196 21.8243 391.815 21.8243 cv
390.434 21.8243 389.315 20.7054 389.315 19.3243 cv
389.315 17.9433 390.434 16.8243 391.815 16.8243 cv
cp
391.815 15.8243 mo
389.882 15.8243 388.315 17.3913 388.315 19.3243 cv
388.315 21.2574 389.882 22.8243 391.815 22.8243 cv
393.748 22.8243 395.315 21.2574 395.315 19.3243 cv
395.315 17.3913 393.748 15.8243 391.815 15.8243 cv
f
391.936 16.8243 mo
393.316 16.8243 394.435 17.9433 394.435 19.3243 cv
394.435 20.7054 393.316 21.8243 391.936 21.8243 cv
390.555 21.8243 389.436 20.7054 389.436 19.3243 cv
389.436 17.9433 390.555 16.8243 391.936 16.8243 cv
cp
391.936 15.8243 mo
390.003 15.8243 388.435 17.3913 388.435 19.3243 cv
388.435 21.2574 390.003 22.8243 391.936 22.8243 cv
393.868 22.8243 395.436 21.2574 395.436 19.3243 cv
395.436 17.3913 393.868 15.8243 391.936 15.8243 cv
f
392.042 16.8243 mo
393.423 16.8243 394.542 17.9433 394.542 19.3243 cv
394.542 20.7054 393.423 21.8243 392.042 21.8243 cv
390.662 21.8243 389.543 20.7054 389.543 19.3243 cv
389.543 17.9433 390.662 16.8243 392.042 16.8243 cv
cp
392.042 15.8243 mo
390.11 15.8243 388.542 17.3913 388.542 19.3243 cv
388.542 21.2574 390.11 22.8243 392.042 22.8243 cv
393.975 22.8243 395.543 21.2574 395.543 19.3243 cv
395.543 17.3913 393.975 15.8243 392.042 15.8243 cv
f
392.142 16.8243 mo
393.523 16.8243 394.642 17.9433 394.642 19.3243 cv
394.642 20.7054 393.523 21.8243 392.142 21.8243 cv
390.762 21.8243 389.643 20.7054 389.643 19.3243 cv
389.643 17.9433 390.762 16.8243 392.142 16.8243 cv
cp
392.142 15.8243 mo
390.21 15.8243 388.642 17.3913 388.642 19.3243 cv
388.642 21.2574 390.21 22.8243 392.142 22.8243 cv
394.075 22.8243 395.643 21.2574 395.643 19.3243 cv
395.643 17.3913 394.075 15.8243 392.142 15.8243 cv
f
392.238 16.8243 mo
393.618 16.8243 394.737 17.9433 394.737 19.3243 cv
394.737 20.7054 393.618 21.8243 392.238 21.8243 cv
390.857 21.8243 389.738 20.7054 389.738 19.3243 cv
389.738 17.9433 390.857 16.8243 392.238 16.8243 cv
cp
392.238 15.8243 mo
390.305 15.8243 388.737 17.3913 388.737 19.3243 cv
388.737 21.2574 390.305 22.8243 392.238 22.8243 cv
394.17 22.8243 395.738 21.2574 395.738 19.3243 cv
395.738 17.3913 394.17 15.8243 392.238 15.8243 cv
f
392.32 16.8243 mo
393.701 16.8243 394.82 17.9433 394.82 19.3243 cv
394.82 20.7054 393.701 21.8243 392.32 21.8243 cv
390.94 21.8243 389.821 20.7054 389.821 19.3243 cv
389.821 17.9433 390.94 16.8243 392.32 16.8243 cv
cp
392.32 15.8243 mo
390.388 15.8243 388.82 17.3913 388.82 19.3243 cv
388.82 21.2574 390.388 22.8243 392.32 22.8243 cv
394.253 22.8243 395.821 21.2574 395.821 19.3243 cv
395.821 17.3913 394.253 15.8243 392.32 15.8243 cv
f
392.397 16.8243 mo
393.777 16.8243 394.896 17.9433 394.896 19.3243 cv
394.896 20.7054 393.777 21.8243 392.397 21.8243 cv
391.016 21.8243 389.897 20.7054 389.897 19.3243 cv
389.897 17.9433 391.016 16.8243 392.397 16.8243 cv
cp
392.397 15.8243 mo
390.464 15.8243 388.896 17.3913 388.896 19.3243 cv
388.896 21.2574 390.464 22.8243 392.397 22.8243 cv
394.329 22.8243 395.897 21.2574 395.897 19.3243 cv
395.897 17.3913 394.329 15.8243 392.397 15.8243 cv
f
392.47 16.8243 mo
393.851 16.8243 394.97 17.9433 394.97 19.3243 cv
394.97 20.7054 393.851 21.8243 392.47 21.8243 cv
391.089 21.8243 389.97 20.7054 389.97 19.3243 cv
389.97 17.9433 391.089 16.8243 392.47 16.8243 cv
cp
392.47 15.8243 mo
390.537 15.8243 388.97 17.3913 388.97 19.3243 cv
388.97 21.2574 390.537 22.8243 392.47 22.8243 cv
394.403 22.8243 395.97 21.2574 395.97 19.3243 cv
395.97 17.3913 394.403 15.8243 392.47 15.8243 cv
f
392.536 16.8243 mo
393.917 16.8243 395.036 17.9433 395.036 19.3243 cv
395.036 20.7054 393.917 21.8243 392.536 21.8243 cv
391.155 21.8243 390.036 20.7054 390.036 19.3243 cv
390.036 17.9433 391.155 16.8243 392.536 16.8243 cv
cp
392.536 15.8243 mo
390.603 15.8243 389.036 17.3913 389.036 19.3243 cv
389.036 21.2574 390.603 22.8243 392.536 22.8243 cv
394.469 22.8243 396.036 21.2574 396.036 19.3243 cv
396.036 17.3913 394.469 15.8243 392.536 15.8243 cv
f
392.595 16.8243 mo
393.976 16.8243 395.095 17.9433 395.095 19.3243 cv
395.095 20.7054 393.976 21.8243 392.595 21.8243 cv
391.215 21.8243 390.096 20.7054 390.096 19.3243 cv
390.096 17.9433 391.215 16.8243 392.595 16.8243 cv
cp
392.595 15.8243 mo
390.663 15.8243 389.095 17.3913 389.095 19.3243 cv
389.095 21.2574 390.663 22.8243 392.595 22.8243 cv
394.528 22.8243 396.096 21.2574 396.096 19.3243 cv
396.096 17.3913 394.528 15.8243 392.595 15.8243 cv
f
392.647 16.8243 mo
394.027 16.8243 395.146 17.9433 395.146 19.3243 cv
395.146 20.7054 394.027 21.8243 392.647 21.8243 cv
391.266 21.8243 390.147 20.7054 390.147 19.3243 cv
390.147 17.9433 391.266 16.8243 392.647 16.8243 cv
cp
392.647 15.8243 mo
390.714 15.8243 389.146 17.3913 389.146 19.3243 cv
389.146 21.2574 390.714 22.8243 392.647 22.8243 cv
394.579 22.8243 396.147 21.2574 396.147 19.3243 cv
396.147 17.3913 394.579 15.8243 392.647 15.8243 cv
f
392.693 16.8243 mo
394.074 16.8243 395.193 17.9433 395.193 19.3243 cv
395.193 20.7054 394.074 21.8243 392.693 21.8243 cv
391.312 21.8243 390.193 20.7054 390.193 19.3243 cv
390.193 17.9433 391.312 16.8243 392.693 16.8243 cv
cp
392.693 15.8243 mo
390.76 15.8243 389.193 17.3913 389.193 19.3243 cv
389.193 21.2574 390.76 22.8243 392.693 22.8243 cv
394.625 22.8243 396.193 21.2574 396.193 19.3243 cv
396.193 17.3913 394.625 15.8243 392.693 15.8243 cv
f
392.737 16.8243 mo
394.117 16.8243 395.236 17.9433 395.236 19.3243 cv
395.236 20.7054 394.117 21.8243 392.737 21.8243 cv
391.356 21.8243 390.237 20.7054 390.237 19.3243 cv
390.237 17.9433 391.356 16.8243 392.737 16.8243 cv
cp
392.737 15.8243 mo
390.804 15.8243 389.236 17.3913 389.236 19.3243 cv
389.236 21.2574 390.804 22.8243 392.737 22.8243 cv
394.669 22.8243 396.237 21.2574 396.237 19.3243 cv
396.237 17.3913 394.669 15.8243 392.737 15.8243 cv
f
392.779 16.8243 mo
394.16 16.8243 395.279 17.9433 395.279 19.3243 cv
395.279 20.7054 394.16 21.8243 392.779 21.8243 cv
391.399 21.8243 390.28 20.7054 390.28 19.3243 cv
390.28 17.9433 391.399 16.8243 392.779 16.8243 cv
cp
392.779 15.8243 mo
390.847 15.8243 389.279 17.3913 389.279 19.3243 cv
389.279 21.2574 390.847 22.8243 392.779 22.8243 cv
394.712 22.8243 396.28 21.2574 396.28 19.3243 cv
396.28 17.3913 394.712 15.8243 392.779 15.8243 cv
f
392.812 16.8243 mo
394.193 16.8243 395.312 17.9433 395.312 19.3243 cv
395.312 20.7054 394.193 21.8243 392.812 21.8243 cv
391.432 21.8243 390.313 20.7054 390.313 19.3243 cv
390.313 17.9433 391.432 16.8243 392.812 16.8243 cv
cp
392.812 15.8243 mo
390.879 15.8243 389.312 17.3913 389.312 19.3243 cv
389.312 21.2574 390.879 22.8243 392.812 22.8243 cv
394.745 22.8243 396.313 21.2574 396.313 19.3243 cv
396.313 17.3913 394.745 15.8243 392.812 15.8243 cv
f
392.847 16.8243 mo
394.228 16.8243 395.347 17.9433 395.347 19.3243 cv
395.347 20.7054 394.228 21.8243 392.847 21.8243 cv
391.466 21.8243 390.347 20.7054 390.347 19.3243 cv
390.347 17.9433 391.466 16.8243 392.847 16.8243 cv
cp
392.847 15.8243 mo
390.914 15.8243 389.347 17.3913 389.347 19.3243 cv
389.347 21.2574 390.914 22.8243 392.847 22.8243 cv
394.78 22.8243 396.347 21.2574 396.347 19.3243 cv
396.347 17.3913 394.78 15.8243 392.847 15.8243 cv
f
392.878 16.8243 mo
394.259 16.8243 395.378 17.9433 395.378 19.3243 cv
395.378 20.7054 394.259 21.8243 392.878 21.8243 cv
391.497 21.8243 390.379 20.7054 390.379 19.3243 cv
390.379 17.9433 391.497 16.8243 392.878 16.8243 cv
cp
392.878 15.8243 mo
390.945 15.8243 389.378 17.3913 389.378 19.3243 cv
389.378 21.2574 390.945 22.8243 392.878 22.8243 cv
394.811 22.8243 396.379 21.2574 396.379 19.3243 cv
396.379 17.3913 394.811 15.8243 392.878 15.8243 cv
f
392.907 16.8243 mo
394.287 16.8243 395.406 17.9433 395.406 19.3243 cv
395.406 20.7054 394.287 21.8243 392.907 21.8243 cv
391.526 21.8243 390.407 20.7054 390.407 19.3243 cv
390.407 17.9433 391.526 16.8243 392.907 16.8243 cv
cp
392.907 15.8243 mo
390.974 15.8243 389.406 17.3913 389.406 19.3243 cv
389.406 21.2574 390.974 22.8243 392.907 22.8243 cv
394.84 22.8243 396.407 21.2574 396.407 19.3243 cv
396.407 17.3913 394.84 15.8243 392.907 15.8243 cv
f
392.937 16.8243 mo
394.318 16.8243 395.437 17.9433 395.437 19.3243 cv
395.437 20.7054 394.318 21.8243 392.937 21.8243 cv
391.556 21.8243 390.437 20.7054 390.437 19.3243 cv
390.437 17.9433 391.556 16.8243 392.937 16.8243 cv
cp
392.937 15.8243 mo
391.004 15.8243 389.437 17.3913 389.437 19.3243 cv
389.437 21.2574 391.004 22.8243 392.937 22.8243 cv
394.87 22.8243 396.437 21.2574 396.437 19.3243 cv
396.437 17.3913 394.87 15.8243 392.937 15.8243 cv
f
392.963 16.8243 mo
394.343 16.8243 395.462 17.9433 395.462 19.3243 cv
395.462 20.7054 394.343 21.8243 392.963 21.8243 cv
391.582 21.8243 390.463 20.7054 390.463 19.3243 cv
390.463 17.9433 391.582 16.8243 392.963 16.8243 cv
cp
392.963 15.8243 mo
391.03 15.8243 389.462 17.3913 389.462 19.3243 cv
389.462 21.2574 391.03 22.8243 392.963 22.8243 cv
394.895 22.8243 396.463 21.2574 396.463 19.3243 cv
396.463 17.3913 394.895 15.8243 392.963 15.8243 cv
f
392.985 16.8243 mo
394.366 16.8243 395.484 17.9433 395.484 19.3243 cv
395.484 20.7054 394.366 21.8243 392.985 21.8243 cv
391.604 21.8243 390.485 20.7054 390.485 19.3243 cv
390.485 17.9433 391.604 16.8243 392.985 16.8243 cv
cp
392.985 15.8243 mo
391.052 15.8243 389.484 17.3913 389.484 19.3243 cv
389.484 21.2574 391.052 22.8243 392.985 22.8243 cv
394.918 22.8243 396.485 21.2574 396.485 19.3243 cv
396.485 17.3913 394.918 15.8243 392.985 15.8243 cv
f
393.004 16.8243 mo
394.385 16.8243 395.504 17.9433 395.504 19.3243 cv
395.504 20.7054 394.385 21.8243 393.004 21.8243 cv
391.624 21.8243 390.505 20.7054 390.505 19.3243 cv
390.505 17.9433 391.624 16.8243 393.004 16.8243 cv
cp
393.004 15.8243 mo
391.072 15.8243 389.504 17.3913 389.504 19.3243 cv
389.504 21.2574 391.072 22.8243 393.004 22.8243 cv
394.937 22.8243 396.505 21.2574 396.505 19.3243 cv
396.505 17.3913 394.937 15.8243 393.004 15.8243 cv
f
393.022 16.8243 mo
394.403 16.8243 395.522 17.9433 395.522 19.3243 cv
395.522 20.7054 394.403 21.8243 393.022 21.8243 cv
391.641 21.8243 390.523 20.7054 390.523 19.3243 cv
390.523 17.9433 391.641 16.8243 393.022 16.8243 cv
cp
393.022 15.8243 mo
391.09 15.8243 389.522 17.3913 389.522 19.3243 cv
389.522 21.2574 391.09 22.8243 393.022 22.8243 cv
394.955 22.8243 396.523 21.2574 396.523 19.3243 cv
396.523 17.3913 394.955 15.8243 393.022 15.8243 cv
f
393.039 16.8243 mo
394.42 16.8243 395.539 17.9433 395.539 19.3243 cv
395.539 20.7054 394.42 21.8243 393.039 21.8243 cv
391.658 21.8243 390.539 20.7054 390.539 19.3243 cv
390.539 17.9433 391.658 16.8243 393.039 16.8243 cv
cp
393.039 15.8243 mo
391.106 15.8243 389.539 17.3913 389.539 19.3243 cv
389.539 21.2574 391.106 22.8243 393.039 22.8243 cv
394.972 22.8243 396.539 21.2574 396.539 19.3243 cv
396.539 17.3913 394.972 15.8243 393.039 15.8243 cv
f
393.054 16.8243 mo
394.435 16.8243 395.554 17.9433 395.554 19.3243 cv
395.554 20.7054 394.435 21.8243 393.054 21.8243 cv
391.674 21.8243 390.555 20.7054 390.555 19.3243 cv
390.555 17.9433 391.674 16.8243 393.054 16.8243 cv
cp
393.054 15.8243 mo
391.122 15.8243 389.554 17.3913 389.554 19.3243 cv
389.554 21.2574 391.122 22.8243 393.054 22.8243 cv
394.987 22.8243 396.555 21.2574 396.555 19.3243 cv
396.555 17.3913 394.987 15.8243 393.054 15.8243 cv
f
393.068 16.8243 mo
394.449 16.8243 395.568 17.9433 395.568 19.3243 cv
395.568 20.7054 394.449 21.8243 393.068 21.8243 cv
391.688 21.8243 390.568 20.7054 390.568 19.3243 cv
390.568 17.9433 391.688 16.8243 393.068 16.8243 cv
cp
393.068 15.8243 mo
391.136 15.8243 389.568 17.3913 389.568 19.3243 cv
389.568 21.2574 391.136 22.8243 393.068 22.8243 cv
395.001 22.8243 396.568 21.2574 396.568 19.3243 cv
396.568 17.3913 395.001 15.8243 393.068 15.8243 cv
f
393.081 16.8243 mo
394.461 16.8243 395.581 17.9433 395.581 19.3243 cv
395.581 20.7054 394.461 21.8243 393.081 21.8243 cv
391.7 21.8243 390.581 20.7054 390.581 19.3243 cv
390.581 17.9433 391.7 16.8243 393.081 16.8243 cv
cp
393.081 15.8243 mo
391.148 15.8243 389.581 17.3913 389.581 19.3243 cv
389.581 21.2574 391.148 22.8243 393.081 22.8243 cv
395.013 22.8243 396.581 21.2574 396.581 19.3243 cv
396.581 17.3913 395.013 15.8243 393.081 15.8243 cv
f
393.092 16.8243 mo
394.473 16.8243 395.592 17.9433 395.592 19.3243 cv
395.592 20.7054 394.473 21.8243 393.092 21.8243 cv
391.711 21.8243 390.592 20.7054 390.592 19.3243 cv
390.592 17.9433 391.711 16.8243 393.092 16.8243 cv
cp
393.092 15.8243 mo
391.159 15.8243 389.592 17.3913 389.592 19.3243 cv
389.592 21.2574 391.159 22.8243 393.092 22.8243 cv
395.025 22.8243 396.592 21.2574 396.592 19.3243 cv
396.592 17.3913 395.025 15.8243 393.092 15.8243 cv
f
393.102 16.8243 mo
394.483 16.8243 395.602 17.9433 395.602 19.3243 cv
395.602 20.7054 394.483 21.8243 393.102 21.8243 cv
391.722 21.8243 390.603 20.7054 390.603 19.3243 cv
390.603 17.9433 391.722 16.8243 393.102 16.8243 cv
cp
393.102 15.8243 mo
391.17 15.8243 389.602 17.3913 389.602 19.3243 cv
389.602 21.2574 391.17 22.8243 393.102 22.8243 cv
395.035 22.8243 396.603 21.2574 396.603 19.3243 cv
396.603 17.3913 395.035 15.8243 393.102 15.8243 cv
f
393.112 16.8243 mo
394.493 16.8243 395.611 17.9433 395.611 19.3243 cv
395.611 20.7054 394.493 21.8243 393.112 21.8243 cv
391.731 21.8243 390.612 20.7054 390.612 19.3243 cv
390.612 17.9433 391.731 16.8243 393.112 16.8243 cv
cp
393.112 15.8243 mo
391.179 15.8243 389.611 17.3913 389.611 19.3243 cv
389.611 21.2574 391.179 22.8243 393.112 22.8243 cv
395.045 22.8243 396.612 21.2574 396.612 19.3243 cv
396.612 17.3913 395.045 15.8243 393.112 15.8243 cv
f
393.12 16.8243 mo
394.5 16.8243 395.619 17.9433 395.619 19.3243 cv
395.619 20.7054 394.5 21.8243 393.12 21.8243 cv
391.739 21.8243 390.62 20.7054 390.62 19.3243 cv
390.62 17.9433 391.739 16.8243 393.12 16.8243 cv
cp
393.12 15.8243 mo
391.187 15.8243 389.619 17.3913 389.619 19.3243 cv
389.619 21.2574 391.187 22.8243 393.12 22.8243 cv
395.052 22.8243 396.62 21.2574 396.62 19.3243 cv
396.62 17.3913 395.052 15.8243 393.12 15.8243 cv
f
393.126 16.8243 mo
394.507 16.8243 395.626 17.9433 395.626 19.3243 cv
395.626 20.7054 394.507 21.8243 393.126 21.8243 cv
391.746 21.8243 390.627 20.7054 390.627 19.3243 cv
390.627 17.9433 391.746 16.8243 393.126 16.8243 cv
cp
393.126 15.8243 mo
391.193 15.8243 389.626 17.3913 389.626 19.3243 cv
389.626 21.2574 391.193 22.8243 393.126 22.8243 cv
395.059 22.8243 396.627 21.2574 396.627 19.3243 cv
396.627 17.3913 395.059 15.8243 393.126 15.8243 cv
f
393.134 16.8243 mo
394.515 16.8243 395.634 17.9433 395.634 19.3243 cv
395.634 20.7054 394.515 21.8243 393.134 21.8243 cv
391.754 21.8243 390.635 20.7054 390.635 19.3243 cv
390.635 17.9433 391.754 16.8243 393.134 16.8243 cv
cp
393.134 15.8243 mo
391.202 15.8243 389.634 17.3913 389.634 19.3243 cv
389.634 21.2574 391.202 22.8243 393.134 22.8243 cv
395.067 22.8243 396.635 21.2574 396.635 19.3243 cv
396.635 17.3913 395.067 15.8243 393.134 15.8243 cv
f
393.141 16.8243 mo
394.522 16.8243 395.641 17.9433 395.641 19.3243 cv
395.641 20.7054 394.522 21.8243 393.141 21.8243 cv
391.761 21.8243 390.642 20.7054 390.642 19.3243 cv
390.642 17.9433 391.761 16.8243 393.141 16.8243 cv
cp
393.141 15.8243 mo
391.209 15.8243 389.641 17.3913 389.641 19.3243 cv
389.641 21.2574 391.209 22.8243 393.141 22.8243 cv
395.074 22.8243 396.642 21.2574 396.642 19.3243 cv
396.642 17.3913 395.074 15.8243 393.141 15.8243 cv
f
393.147 16.8243 mo
394.528 16.8243 395.647 17.9433 395.647 19.3243 cv
395.647 20.7054 394.528 21.8243 393.147 21.8243 cv
391.766 21.8243 390.648 20.7054 390.648 19.3243 cv
390.648 17.9433 391.766 16.8243 393.147 16.8243 cv
cp
393.147 15.8243 mo
391.215 15.8243 389.647 17.3913 389.647 19.3243 cv
389.647 21.2574 391.215 22.8243 393.147 22.8243 cv
395.08 22.8243 396.648 21.2574 396.648 19.3243 cv
396.648 17.3913 395.08 15.8243 393.147 15.8243 cv
f
393.152 16.8243 mo
394.532 16.8243 395.651 17.9433 395.651 19.3243 cv
395.651 20.7054 394.532 21.8243 393.152 21.8243 cv
391.771 21.8243 390.652 20.7054 390.652 19.3243 cv
390.652 17.9433 391.771 16.8243 393.152 16.8243 cv
cp
393.152 15.8243 mo
391.219 15.8243 389.651 17.3913 389.651 19.3243 cv
389.651 21.2574 391.219 22.8243 393.152 22.8243 cv
395.084 22.8243 396.652 21.2574 396.652 19.3243 cv
396.652 17.3913 395.084 15.8243 393.152 15.8243 cv
f
393.156 16.8243 mo
394.537 16.8243 395.656 17.9433 395.656 19.3243 cv
395.656 20.7054 394.537 21.8243 393.156 21.8243 cv
391.775 21.8243 390.656 20.7054 390.656 19.3243 cv
390.656 17.9433 391.775 16.8243 393.156 16.8243 cv
cp
393.156 15.8243 mo
391.224 15.8243 389.656 17.3913 389.656 19.3243 cv
389.656 21.2574 391.224 22.8243 393.156 22.8243 cv
395.089 22.8243 396.656 21.2574 396.656 19.3243 cv
396.656 17.3913 395.089 15.8243 393.156 15.8243 cv
f
393.159 16.8243 mo
394.54 16.8243 395.659 17.9433 395.659 19.3243 cv
395.659 20.7054 394.54 21.8243 393.159 21.8243 cv
391.778 21.8243 390.659 20.7054 390.659 19.3243 cv
390.659 17.9433 391.778 16.8243 393.159 16.8243 cv
cp
393.159 15.8243 mo
391.226 15.8243 389.659 17.3913 389.659 19.3243 cv
389.659 21.2574 391.226 22.8243 393.159 22.8243 cv
395.092 22.8243 396.659 21.2574 396.659 19.3243 cv
396.659 17.3913 395.092 15.8243 393.159 15.8243 cv
f
393.163 16.8243 mo
394.544 16.8243 395.663 17.9433 395.663 19.3243 cv
395.663 20.7054 394.544 21.8243 393.163 21.8243 cv
391.782 21.8243 390.663 20.7054 390.663 19.3243 cv
390.663 17.9433 391.782 16.8243 393.163 16.8243 cv
cp
393.163 15.8243 mo
391.23 15.8243 389.663 17.3913 389.663 19.3243 cv
389.663 21.2574 391.23 22.8243 393.163 22.8243 cv
395.096 22.8243 396.663 21.2574 396.663 19.3243 cv
396.663 17.3913 395.096 15.8243 393.163 15.8243 cv
f
393.166 16.8243 mo
394.547 16.8243 395.665 17.9433 395.665 19.3243 cv
395.665 20.7054 394.547 21.8243 393.166 21.8243 cv
391.785 21.8243 390.666 20.7054 390.666 19.3243 cv
390.666 17.9433 391.785 16.8243 393.166 16.8243 cv
cp
393.166 15.8243 mo
391.233 15.8243 389.665 17.3913 389.665 19.3243 cv
389.665 21.2574 391.233 22.8243 393.166 22.8243 cv
395.099 22.8243 396.666 21.2574 396.666 19.3243 cv
396.666 17.3913 395.099 15.8243 393.166 15.8243 cv
f
393.167 16.8243 mo
394.548 16.8243 395.667 17.9433 395.667 19.3243 cv
395.667 20.7054 394.548 21.8243 393.167 21.8243 cv
391.786 21.8243 390.667 20.7054 390.667 19.3243 cv
390.667 17.9433 391.786 16.8243 393.167 16.8243 cv
cp
393.167 15.8243 mo
391.234 15.8243 389.667 17.3913 389.667 19.3243 cv
389.667 21.2574 391.234 22.8243 393.167 22.8243 cv
395.1 22.8243 396.667 21.2574 396.667 19.3243 cv
396.667 17.3913 395.1 15.8243 393.167 15.8243 cv
f
393.17 16.8243 mo
394.551 16.8243 395.67 17.9433 395.67 19.3243 cv
395.67 20.7054 394.551 21.8243 393.17 21.8243 cv
391.789 21.8243 390.67 20.7054 390.67 19.3243 cv
390.67 17.9433 391.789 16.8243 393.17 16.8243 cv
cp
393.17 15.8243 mo
391.237 15.8243 389.67 17.3913 389.67 19.3243 cv
389.67 21.2574 391.237 22.8243 393.17 22.8243 cv
395.103 22.8243 396.67 21.2574 396.67 19.3243 cv
396.67 17.3913 395.103 15.8243 393.17 15.8243 cv
f
393.172 16.8243 mo
394.553 16.8243 395.672 17.9433 395.672 19.3243 cv
395.672 20.7054 394.553 21.8243 393.172 21.8243 cv
391.791 21.8243 390.673 20.7054 390.673 19.3243 cv
390.673 17.9433 391.791 16.8243 393.172 16.8243 cv
cp
393.172 15.8243 mo
391.24 15.8243 389.672 17.3913 389.672 19.3243 cv
389.672 21.2574 391.24 22.8243 393.172 22.8243 cv
395.105 22.8243 396.673 21.2574 396.673 19.3243 cv
396.673 17.3913 395.105 15.8243 393.172 15.8243 cv
f
393.174 16.8243 mo
394.555 16.8243 395.674 17.9433 395.674 19.3243 cv
395.674 20.7054 394.555 21.8243 393.174 21.8243 cv
391.793 21.8243 390.675 20.7054 390.675 19.3243 cv
390.675 17.9433 391.793 16.8243 393.174 16.8243 cv
cp
393.174 15.8243 mo
391.241 15.8243 389.674 17.3913 389.674 19.3243 cv
389.674 21.2574 391.241 22.8243 393.174 22.8243 cv
395.107 22.8243 396.675 21.2574 396.675 19.3243 cv
396.675 17.3913 395.107 15.8243 393.174 15.8243 cv
f
393.176 16.8243 mo
394.556 16.8243 395.675 17.9433 395.675 19.3243 cv
395.675 20.7054 394.556 21.8243 393.176 21.8243 cv
391.795 21.8243 390.676 20.7054 390.676 19.3243 cv
390.676 17.9433 391.795 16.8243 393.176 16.8243 cv
cp
393.176 15.8243 mo
391.243 15.8243 389.675 17.3913 389.675 19.3243 cv
389.675 21.2574 391.243 22.8243 393.176 22.8243 cv
395.108 22.8243 396.676 21.2574 396.676 19.3243 cv
396.676 17.3913 395.108 15.8243 393.176 15.8243 cv
f
393.177 16.8243 mo
394.558 16.8243 395.677 17.9433 395.677 19.3243 cv
395.677 20.7054 394.558 21.8243 393.177 21.8243 cv
391.796 21.8243 390.677 20.7054 390.677 19.3243 cv
390.677 17.9433 391.796 16.8243 393.177 16.8243 cv
cp
393.177 15.8243 mo
391.244 15.8243 389.677 17.3913 389.677 19.3243 cv
389.677 21.2574 391.244 22.8243 393.177 22.8243 cv
395.11 22.8243 396.677 21.2574 396.677 19.3243 cv
396.677 17.3913 395.11 15.8243 393.177 15.8243 cv
f
393.178 16.8243 mo
394.559 16.8243 395.678 17.9433 395.678 19.3243 cv
395.678 20.7054 394.559 21.8243 393.178 21.8243 cv
391.797 21.8243 390.678 20.7054 390.678 19.3243 cv
390.678 17.9433 391.797 16.8243 393.178 16.8243 cv
cp
393.178 15.8243 mo
391.245 15.8243 389.678 17.3913 389.678 19.3243 cv
389.678 21.2574 391.245 22.8243 393.178 22.8243 cv
395.111 22.8243 396.678 21.2574 396.678 19.3243 cv
396.678 17.3913 395.111 15.8243 393.178 15.8243 cv
f
393.179 16.8243 mo
394.56 16.8243 395.679 17.9433 395.679 19.3243 cv
395.679 20.7054 394.56 21.8243 393.179 21.8243 cv
391.799 21.8243 390.679 20.7054 390.679 19.3243 cv
390.679 17.9433 391.799 16.8243 393.179 16.8243 cv
cp
393.179 15.8243 mo
391.247 15.8243 389.679 17.3913 389.679 19.3243 cv
389.679 21.2574 391.247 22.8243 393.179 22.8243 cv
395.112 22.8243 396.679 21.2574 396.679 19.3243 cv
396.679 17.3913 395.112 15.8243 393.179 15.8243 cv
f
393.18 16.8243 mo
394.561 16.8243 395.68 17.9433 395.68 19.3243 cv
395.68 20.7054 394.561 21.8243 393.18 21.8243 cv
391.799 21.8243 390.68 20.7054 390.68 19.3243 cv
390.68 17.9433 391.799 16.8243 393.18 16.8243 cv
cp
393.18 15.8243 mo
391.247 15.8243 389.68 17.3913 389.68 19.3243 cv
389.68 21.2574 391.247 22.8243 393.18 22.8243 cv
395.113 22.8243 396.68 21.2574 396.68 19.3243 cv
396.68 17.3913 395.113 15.8243 393.18 15.8243 cv
f
393.181 16.8243 mo
394.562 16.8243 395.681 17.9433 395.681 19.3243 cv
395.681 20.7054 394.562 21.8243 393.181 21.8243 cv
391.8 21.8243 390.681 20.7054 390.681 19.3243 cv
390.681 17.9433 391.8 16.8243 393.181 16.8243 cv
cp
393.181 15.8243 mo
391.249 15.8243 389.681 17.3913 389.681 19.3243 cv
389.681 21.2574 391.249 22.8243 393.181 22.8243 cv
395.114 22.8243 396.681 21.2574 396.681 19.3243 cv
396.681 17.3913 395.114 15.8243 393.181 15.8243 cv
f
393.182 16.8243 mo
394.563 16.8243 395.682 17.9433 395.682 19.3243 cv
395.682 20.7054 394.563 21.8243 393.182 21.8243 cv
391.801 21.8243 390.682 20.7054 390.682 19.3243 cv
390.682 17.9433 391.801 16.8243 393.182 16.8243 cv
cp
393.182 15.8243 mo
391.249 15.8243 389.682 17.3913 389.682 19.3243 cv
389.682 21.2574 391.249 22.8243 393.182 22.8243 cv
395.115 22.8243 396.682 21.2574 396.682 19.3243 cv
396.682 17.3913 395.115 15.8243 393.182 15.8243 cv
f
393.182 16.8243 mo
394.563 16.8243 395.682 17.9433 395.682 19.3243 cv
395.682 20.7054 394.563 21.8243 393.182 21.8243 cv
391.802 21.8243 390.683 20.7054 390.683 19.3243 cv
390.683 17.9433 391.802 16.8243 393.182 16.8243 cv
cp
393.182 15.8243 mo
391.25 15.8243 389.682 17.3913 389.682 19.3243 cv
389.682 21.2574 391.25 22.8243 393.182 22.8243 cv
395.115 22.8243 396.683 21.2574 396.683 19.3243 cv
396.683 17.3913 395.115 15.8243 393.182 15.8243 cv
f
393.183 16.8243 mo
394.564 16.8243 395.682 17.9433 395.682 19.3243 cv
395.682 20.7054 394.564 21.8243 393.183 21.8243 cv
391.802 21.8243 390.683 20.7054 390.683 19.3243 cv
390.683 17.9433 391.802 16.8243 393.183 16.8243 cv
cp
393.183 15.8243 mo
391.25 15.8243 389.682 17.3913 389.682 19.3243 cv
389.682 21.2574 391.25 22.8243 393.183 22.8243 cv
395.116 22.8243 396.683 21.2574 396.683 19.3243 cv
396.683 17.3913 395.116 15.8243 393.183 15.8243 cv
f
393.184 16.8243 mo
394.565 16.8243 395.683 17.9433 395.683 19.3243 cv
395.683 20.7054 394.565 21.8243 393.184 21.8243 cv
391.803 21.8243 390.684 20.7054 390.684 19.3243 cv
390.684 17.9433 391.803 16.8243 393.184 16.8243 cv
cp
393.184 15.8243 mo
391.251 15.8243 389.683 17.3913 389.683 19.3243 cv
389.683 21.2574 391.251 22.8243 393.184 22.8243 cv
395.116 22.8243 396.684 21.2574 396.684 19.3243 cv
396.684 17.3913 395.116 15.8243 393.184 15.8243 cv
f
393.184 16.8243 mo
394.565 16.8243 395.684 17.9433 395.684 19.3243 cv
395.684 20.7054 394.565 21.8243 393.184 21.8243 cv
391.803 21.8243 390.684 20.7054 390.684 19.3243 cv
390.684 17.9433 391.803 16.8243 393.184 16.8243 cv
cp
393.184 15.8243 mo
391.251 15.8243 389.684 17.3913 389.684 19.3243 cv
389.684 21.2574 391.251 22.8243 393.184 22.8243 cv
395.117 22.8243 396.684 21.2574 396.684 19.3243 cv
396.684 17.3913 395.117 15.8243 393.184 15.8243 cv
f
393.184 16.8243 mo
394.565 16.8243 395.684 17.9433 395.684 19.3243 cv
395.684 20.7054 394.565 21.8243 393.184 21.8243 cv
391.804 21.8243 390.684 20.7054 390.684 19.3243 cv
390.684 17.9433 391.804 16.8243 393.184 16.8243 cv
cp
393.184 15.8243 mo
391.251 15.8243 389.684 17.3913 389.684 19.3243 cv
389.684 21.2574 391.251 22.8243 393.184 22.8243 cv
395.117 22.8243 396.684 21.2574 396.684 19.3243 cv
396.684 17.3913 395.117 15.8243 393.184 15.8243 cv
f
393.184 16.8243 mo
394.565 16.8243 395.684 17.9433 395.684 19.3243 cv
395.684 20.7054 394.565 21.8243 393.184 21.8243 cv
391.804 21.8243 390.684 20.7054 390.684 19.3243 cv
390.684 17.9433 391.804 16.8243 393.184 16.8243 cv
cp
393.184 15.8243 mo
391.252 15.8243 389.684 17.3913 389.684 19.3243 cv
389.684 21.2574 391.252 22.8243 393.184 22.8243 cv
395.117 22.8243 396.684 21.2574 396.684 19.3243 cv
396.684 17.3913 395.117 15.8243 393.184 15.8243 cv
f
393.185 16.8243 mo
394.566 16.8243 395.685 17.9433 395.685 19.3243 cv
395.685 20.7054 394.566 21.8243 393.185 21.8243 cv
391.804 21.8243 390.685 20.7054 390.685 19.3243 cv
390.685 17.9433 391.804 16.8243 393.185 16.8243 cv
cp
393.185 15.8243 mo
391.252 15.8243 389.685 17.3913 389.685 19.3243 cv
389.685 21.2574 391.252 22.8243 393.185 22.8243 cv
395.118 22.8243 396.685 21.2574 396.685 19.3243 cv
396.685 17.3913 395.118 15.8243 393.185 15.8243 cv
f
393.185 16.8243 mo
394.566 16.8243 395.685 17.9433 395.685 19.3243 cv
395.685 20.7054 394.566 21.8243 393.185 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.185 16.8243 cv
cp
393.185 15.8243 mo
391.253 15.8243 389.685 17.3913 389.685 19.3243 cv
389.685 21.2574 391.253 22.8243 393.185 22.8243 cv
395.118 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.118 15.8243 393.185 15.8243 cv
f
393.186 16.8243 mo
394.566 16.8243 395.685 17.9433 395.685 19.3243 cv
395.685 20.7054 394.566 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.685 17.3913 389.685 19.3243 cv
389.685 21.2574 391.253 22.8243 393.186 22.8243 cv
395.118 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.118 15.8243 393.186 15.8243 cv
f
393.186 16.8243 mo
394.566 16.8243 395.685 17.9433 395.685 19.3243 cv
395.685 20.7054 394.566 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.685 17.3913 389.685 19.3243 cv
389.685 21.2574 391.253 22.8243 393.186 22.8243 cv
395.118 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.118 15.8243 393.186 15.8243 cv
f
393.186 16.8243 mo
394.566 16.8243 395.686 17.9433 395.686 19.3243 cv
395.686 20.7054 394.566 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.686 17.3913 389.686 19.3243 cv
389.686 21.2574 391.253 22.8243 393.186 22.8243 cv
395.118 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.118 15.8243 393.186 15.8243 cv
f
393.186 16.8243 mo
394.566 16.8243 395.686 17.9433 395.686 19.3243 cv
395.686 20.7054 394.566 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.686 17.3913 389.686 19.3243 cv
389.686 21.2574 391.253 22.8243 393.186 22.8243 cv
395.118 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.118 15.8243 393.186 15.8243 cv
f
393.186 16.8243 mo
394.566 16.8243 395.686 17.9433 395.686 19.3243 cv
395.686 20.7054 394.566 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.686 17.3913 389.686 19.3243 cv
389.686 21.2574 391.253 22.8243 393.186 22.8243 cv
395.118 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.118 15.8243 393.186 15.8243 cv
f
393.186 16.8243 mo
394.566 16.8243 395.686 17.9433 395.686 19.3243 cv
395.686 20.7054 394.566 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.686 17.3913 389.686 19.3243 cv
389.686 21.2574 391.253 22.8243 393.186 22.8243 cv
395.118 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.118 15.8243 393.186 15.8243 cv
f
393.186 16.8243 mo
394.566 16.8243 395.686 17.9433 395.686 19.3243 cv
395.686 20.7054 394.566 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.686 17.3913 389.686 19.3243 cv
389.686 21.2574 391.253 22.8243 393.186 22.8243 cv
395.119 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.119 15.8243 393.186 15.8243 cv
f
393.186 16.8243 mo
394.566 16.8243 395.686 17.9433 395.686 19.3243 cv
395.686 20.7054 394.566 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.686 17.3913 389.686 19.3243 cv
389.686 21.2574 391.253 22.8243 393.186 22.8243 cv
395.119 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.119 15.8243 393.186 15.8243 cv
f
393.186 16.8243 mo
394.566 16.8243 395.686 17.9433 395.686 19.3243 cv
395.686 20.7054 394.566 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.686 17.3913 389.686 19.3243 cv
389.686 21.2574 391.253 22.8243 393.186 22.8243 cv
395.119 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.119 15.8243 393.186 15.8243 cv
f
393.186 16.8243 mo
394.566 16.8243 395.686 17.9433 395.686 19.3243 cv
395.686 20.7054 394.566 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.686 17.3913 389.686 19.3243 cv
389.686 21.2574 391.253 22.8243 393.186 22.8243 cv
395.119 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.119 15.8243 393.186 15.8243 cv
f
393.186 16.8243 mo
394.566 16.8243 395.686 17.9433 395.686 19.3243 cv
395.686 20.7054 394.566 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.686 17.3913 389.686 19.3243 cv
389.686 21.2574 391.253 22.8243 393.186 22.8243 cv
395.119 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.119 15.8243 393.186 15.8243 cv
f
393.186 16.8243 mo
394.567 16.8243 395.686 17.9433 395.686 19.3243 cv
395.686 20.7054 394.567 21.8243 393.186 21.8243 cv
391.805 21.8243 390.686 20.7054 390.686 19.3243 cv
390.686 17.9433 391.805 16.8243 393.186 16.8243 cv
cp
393.186 15.8243 mo
391.253 15.8243 389.686 17.3913 389.686 19.3243 cv
389.686 21.2574 391.253 22.8243 393.186 22.8243 cv
395.119 22.8243 396.686 21.2574 396.686 19.3243 cv
396.686 17.3913 395.119 15.8243 393.186 15.8243 cv
f
155.436 248.074 mo
384.936 248.074 li
384.936 181.324 li
155.436 181.324 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
LQUXUC+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3
518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE7
19F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E5897699
5550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77
D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFF
C73DA426D2C4> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/L <1C60D8A8C9B7EF32574D0487D29C7903F9AE2E8AC57D9630AE9A94B5BC41
802BD0101167D0AC> |-
/T <1C60D8A8C9B7D8BE6A40C97BBF661CB0B8222F950E511FEAA4C1C13E5F94
78F30E1367384EBB0E379956ACFD> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LQUXUC+Helvetica /Encoding get
dup 37 /percent put
dup 51 /three put
dup 54 /six put
dup 58 /colon put
dup 59 /semicolon put
dup 69 /E put
dup 76 /L put
dup 84 /T put
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/LQUXUC+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 4{/.notdef}rp /L 5{/.notdef}rp /R /.notdef /T 
6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c 
/.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/.notdef /p 2{/.notdef}rp /s /t /u 138{/.notdef}rp]
LQUXUC+Helvetica nf
LQUXUC+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
190.686 199.324 mo
(TL [38]; E)sh
264.399 199.324 mo
(ER: 2.86%)
[11.3393 12.2741 4.72607 4.72604 9.45212 4.72604 9.45212 9.45209 0 ]xsh
158.436 193.324 mo
188.436 193.324 li
@
0 lj
171.186 195.574 mo
175.686 195.574 li
175.686 191.074 li
171.186 191.074 li
cp
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
LQUXUC+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B
61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1
E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36
DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B
7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LQUXUC+Helvetica /Encoding get
dup 83 /S put
pop
%ADOEndSubsetFont
/LQUXUC+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 4{/.notdef}rp /L 5{/.notdef}rp /R /S /T 
6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c 
/.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/.notdef /p 2{/.notdef}rp /s /t /u 138{/.notdef}rp]
LQUXUC+Helvetica nf
LQUXUC+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
190.686 220.699 mo
(STTL [37]; EER: 2.57%)
[11.3393 10.387 10.387 9.4521 4.72606 4.72604 9.45212 9.45212 4.72604 4.72604 4.72607 11.3392 
11.3393 12.2741 4.72607 4.72604 9.45212 4.72604 9.45212 9.45209 0 ]xsh
1 lj
158.436 214.699 mo
188.436 214.699 li
.895628 .7673 0 0 cmyk
@
0 lj
173.436 211.699 mo
173.436 217.699 li
170.436 214.699 mo
176.436 214.699 li
171.315 212.578 mo
175.557 216.82 li
171.315 216.82 mo
175.557 212.578 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
LQUXUC+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E2
2FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D216
1CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361
A4431D76AF6F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LQUXUC+Helvetica /Encoding get
dup 79 /O put
dup 114 /r put
pop
%ADOEndSubsetFont
/LQUXUC+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 4{/.notdef}rp /L 2{/.notdef}rp /O 2{/.notdef}rp /R 
/S /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 
/.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /.notdef /p /.notdef /r /s /t 
/u 138{/.notdef}rp]
LQUXUC+Helvetica nf
LQUXUC+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
190.686 242.074 mo
(Ours; E)sh
248.316 242.074 mo
(ER: 2.21%)
[11.3392 12.2742 4.72604 4.72604 9.45212 4.72604 9.45212 9.45212 0 ]xsh
1 lj
158.436 236.074 mo
188.436 236.074 li
0 .990631 1 .000396735 cmyk
@
173.436 233.575 mo
174.817 233.575 175.936 234.693 175.936 236.074 cv
175.936 237.455 174.817 238.574 173.436 238.574 cv
172.055 238.574 170.936 237.455 170.936 236.074 cv
170.936 234.693 172.055 233.575 173.436 233.575 cv
cp
173.436 232.574 mo
171.503 232.574 169.936 234.142 169.936 236.074 cv
169.936 238.007 171.503 239.575 173.436 239.575 cv
175.369 239.575 176.936 238.007 176.936 236.074 cv
176.936 234.142 175.369 232.574 173.436 232.574 cv
f
0 lj
155.436 248.074 mo
384.936 248.074 li
384.936 181.324 li
155.436 181.324 li
cp
1 /0 /CSD get_res sepcs
.851074 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/LQUXUD+Helvetica-Bold*1 uf
/LQUXUD+Helvetica-Bold uf
/JAAAAA+Helvetica-Bold uf
/LQUXUC+Helvetica*1 uf
/LQUXUC+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
