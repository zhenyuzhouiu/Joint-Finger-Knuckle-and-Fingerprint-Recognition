%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fkv3-two-session-roc_compare_new.eps-30826.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/16/2022, 11:04:05 AM
%%BoundingBox: -1 0 400 297
%%HiResBoundingBox: 0 0 399.3571 296.4702
%%CropBox: 0 0 399.3571 296.4702
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1028 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-16T11:03:40+08:00"
   xmp:CreateDate="2022-08-16T11:03:40+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.9.0.1467703 \(R2020b\). Operating System: Linux)"
   xmpMM:DocumentID="uuid:877d4c6e-1f6b-11ed-0000-b9cc93da7698"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/zhenyuzhou/Desktop/finger-knuckle/deep-learning/codekevin/fknet/test/tl-sttl-rsil/fkv3-two-session-roc_compare_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -296.47 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 296.47 li
399.357 296.47 li
399.357 0 li
cp
clp
gsave
-14.6285 296.562 mo
428.372 296.562 li
428.372 -2.43805 li
-14.6285 -2.43805 li
cp
clp
-14.6285 296.562 mo
427.872 296.562 li
427.872 -2.68805 li
-14.6285 -2.68805 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
grestore
-14.6285 296.562 mo
427.872 296.562 li
427.872 -2.68805 li
-14.6285 -2.68805 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
43.1215 256.812 mo
385.872 256.812 li
385.872 19.812 li
43.1215 19.812 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
48.3145 256.812 mo
48.3145 19.812 li
1 /0 /CSD get_res sepcs
.224609 sep
@
57.6391 256.812 mo
57.6391 19.812 li
@
64.8715 256.812 mo
64.8715 19.812 li
@
70.7817 256.812 mo
70.7817 19.812 li
@
75.7781 256.812 mo
75.7781 19.812 li
@
80.1055 256.812 mo
80.1055 19.812 li
@
83.9238 256.812 mo
83.9238 19.812 li
@
87.3385 256.812 mo
87.3385 19.812 li
@
109.806 256.812 mo
109.806 19.812 li
@
122.948 256.812 mo
122.948 19.812 li
@
132.273 256.812 mo
132.273 19.812 li
@
139.505 256.812 mo
139.505 19.812 li
@
145.415 256.812 mo
145.415 19.812 li
@
150.412 256.812 mo
150.412 19.812 li
@
154.739 256.812 mo
154.739 19.812 li
@
158.558 256.812 mo
158.558 19.812 li
@
161.972 256.812 mo
161.972 19.812 li
@
184.439 256.812 mo
184.439 19.812 li
@
197.581 256.812 mo
197.581 19.812 li
@
206.906 256.812 mo
206.906 19.812 li
@
214.138 256.812 mo
214.138 19.812 li
@
220.049 256.812 mo
220.049 19.812 li
@
225.045 256.812 mo
225.045 19.812 li
@
229.372 256.812 mo
229.372 19.812 li
@
233.191 256.812 mo
233.191 19.812 li
@
259.072 256.812 mo
259.072 19.812 li
@
272.215 256.812 mo
272.215 19.812 li
@
281.54 256.812 mo
281.54 19.812 li
@
288.772 256.812 mo
288.772 19.812 li
@
294.682 256.812 mo
294.682 19.812 li
@
299.678 256.812 mo
299.678 19.812 li
@
304.006 256.812 mo
304.006 19.812 li
@
307.824 256.812 mo
307.824 19.812 li
@
311.239 256.812 mo
311.239 19.812 li
@
333.706 256.812 mo
333.706 19.812 li
@
346.848 256.812 mo
346.848 19.812 li
@
356.173 256.812 mo
356.173 19.812 li
@
363.405 256.812 mo
363.405 19.812 li
@
369.315 256.812 mo
369.315 19.812 li
@
374.311 256.812 mo
374.311 19.812 li
@
378.639 256.812 mo
378.639 19.812 li
@
382.457 256.812 mo
382.457 19.812 li
@
1 lj
[] 0 dsh
87.3385 256.812 mo
87.3385 19.812 li
1 /0 /CSD get_res sepcs
.126953 sep
@
236.606 256.812 mo
236.606 19.812 li
@
385.872 256.812 mo
385.872 19.812 li
@
385.872 256.812 mo
43.1215 256.812 li
@
385.872 209.412 mo
43.1215 209.412 li
@
385.872 162.012 mo
43.1215 162.012 li
@
385.872 114.612 mo
43.1215 114.612 li
@
385.872 67.2119 mo
43.1215 67.2119 li
@
385.872 19.812 mo
43.1215 19.812 li
@
2 lc
43.1215 256.812 mo
385.872 256.812 li
1 /0 /CSD get_res sepcs
.851074 sep
@
43.1215 19.812 mo
385.872 19.812 li
@
87.3385 256.812 mo
87.3385 253.385 li
@
236.606 256.812 mo
236.606 253.385 li
@
385.872 256.812 mo
385.872 253.385 li
@
87.3385 19.812 mo
87.3385 23.239 li
@
236.606 19.812 mo
236.606 23.239 li
@
385.872 19.812 mo
385.872 23.239 li
@
48.3145 256.812 mo
48.3145 255.098 li
@
57.6391 256.812 mo
57.6391 255.098 li
@
64.8715 256.812 mo
64.8715 255.098 li
@
70.7817 256.812 mo
70.7817 255.098 li
@
75.7781 256.812 mo
75.7781 255.098 li
@
80.1055 256.812 mo
80.1055 255.098 li
@
83.9238 256.812 mo
83.9238 255.098 li
@
87.3385 256.812 mo
87.3385 255.098 li
@
87.3385 256.812 mo
87.3385 255.098 li
@
109.806 256.812 mo
109.806 255.098 li
@
122.948 256.812 mo
122.948 255.098 li
@
132.273 256.812 mo
132.273 255.098 li
@
139.505 256.812 mo
139.505 255.098 li
@
145.415 256.812 mo
145.415 255.098 li
@
150.412 256.812 mo
150.412 255.098 li
@
154.739 256.812 mo
154.739 255.098 li
@
158.558 256.812 mo
158.558 255.098 li
@
161.972 256.812 mo
161.972 255.098 li
@
184.439 256.812 mo
184.439 255.098 li
@
197.581 256.812 mo
197.581 255.098 li
@
206.906 256.812 mo
206.906 255.098 li
@
214.138 256.812 mo
214.138 255.098 li
@
220.049 256.812 mo
220.049 255.098 li
@
225.045 256.812 mo
225.045 255.098 li
@
229.372 256.812 mo
229.372 255.098 li
@
233.191 256.812 mo
233.191 255.098 li
@
236.606 256.812 mo
236.606 255.098 li
@
259.072 256.812 mo
259.072 255.098 li
@
272.215 256.812 mo
272.215 255.098 li
@
281.54 256.812 mo
281.54 255.098 li
@
288.772 256.812 mo
288.772 255.098 li
@
294.682 256.812 mo
294.682 255.098 li
@
299.678 256.812 mo
299.678 255.098 li
@
304.006 256.812 mo
304.006 255.098 li
@
307.824 256.812 mo
307.824 255.098 li
@
311.239 256.812 mo
311.239 255.098 li
@
333.706 256.812 mo
333.706 255.098 li
@
346.848 256.812 mo
346.848 255.098 li
@
356.173 256.812 mo
356.173 255.098 li
@
363.405 256.812 mo
363.405 255.098 li
@
369.315 256.812 mo
369.315 255.098 li
@
374.311 256.812 mo
374.311 255.098 li
@
378.639 256.812 mo
378.639 255.098 li
@
382.457 256.812 mo
382.457 255.098 li
@
385.872 256.812 mo
385.872 255.098 li
@
48.3145 19.812 mo
48.3145 21.5259 li
@
57.6391 19.812 mo
57.6391 21.5259 li
@
64.8715 19.812 mo
64.8715 21.5259 li
@
70.7817 19.812 mo
70.7817 21.5259 li
@
75.7781 19.812 mo
75.7781 21.5259 li
@
80.1055 19.812 mo
80.1055 21.5259 li
@
83.9238 19.812 mo
83.9238 21.5259 li
@
87.3385 19.812 mo
87.3385 21.5259 li
@
87.3385 19.812 mo
87.3385 21.5259 li
@
109.806 19.812 mo
109.806 21.5259 li
@
122.948 19.812 mo
122.948 21.5259 li
@
132.273 19.812 mo
132.273 21.5259 li
@
139.505 19.812 mo
139.505 21.5259 li
@
145.415 19.812 mo
145.415 21.5259 li
@
150.412 19.812 mo
150.412 21.5259 li
@
154.739 19.812 mo
154.739 21.5259 li
@
158.558 19.812 mo
158.558 21.5259 li
@
161.972 19.812 mo
161.972 21.5259 li
@
184.439 19.812 mo
184.439 21.5259 li
@
197.581 19.812 mo
197.581 21.5259 li
@
206.906 19.812 mo
206.906 21.5259 li
@
214.138 19.812 mo
214.138 21.5259 li
@
220.049 19.812 mo
220.049 21.5259 li
@
225.045 19.812 mo
225.045 21.5259 li
@
229.372 19.812 mo
229.372 21.5259 li
@
233.191 19.812 mo
233.191 21.5259 li
@
236.606 19.812 mo
236.606 21.5259 li
@
259.072 19.812 mo
259.072 21.5259 li
@
272.215 19.812 mo
272.215 21.5259 li
@
281.54 19.812 mo
281.54 21.5259 li
@
288.772 19.812 mo
288.772 21.5259 li
@
294.682 19.812 mo
294.682 21.5259 li
@
299.678 19.812 mo
299.678 21.5259 li
@
304.006 19.812 mo
304.006 21.5259 li
@
307.824 19.812 mo
307.824 21.5259 li
@
311.239 19.812 mo
311.239 21.5259 li
@
333.706 19.812 mo
333.706 21.5259 li
@
346.848 19.812 mo
346.848 21.5259 li
@
356.173 19.812 mo
356.173 21.5259 li
@
363.405 19.812 mo
363.405 21.5259 li
@
369.315 19.812 mo
369.315 21.5259 li
@
374.311 19.812 mo
374.311 21.5259 li
@
378.639 19.812 mo
378.639 21.5259 li
@
382.457 19.812 mo
382.457 21.5259 li
@
385.872 19.812 mo
385.872 21.5259 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QSSHCZ+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/QSSHCZ+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/.notdef /four 12{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t 139{/.notdef}rp]
QSSHCZ+Helvetica nf
QSSHCZ+Helvetica*1 [12 0 0 -12 0 0 ]msf
74.6215 276.312 mo
(10)
[6.672 0 ]xsh
QSSHCZ+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
90.3715 270.312 mo
(-4)
[3.19673 0 ]xsh
QSSHCZ+Helvetica*1 [12 0 0 -12 0 0 ]msf
223.872 276.312 mo
(10)
[6.672 0 ]xsh
QSSHCZ+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
239.622 270.312 mo
(-2)
[3.19672 0 ]xsh
QSSHCZ+Helvetica*1 [12 0 0 -12 0 0 ]msf
374.622 276.312 mo
(10)
[6.672 0 ]xsh
QSSHCZ+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
390.372 270.312 mo
(0)sh
QSSHCZ+Helvetica*1 [13.2 0 0 -13.2 0 0 ]msf
139.122 292.962 mo
(Fal)sh
157.456 292.962 mo
(se Acceptance R)sh
257.235 292.962 mo
(ate)sh
43.1215 256.812 mo
43.1215 19.812 li
@
385.872 256.812 mo
385.872 19.812 li
@
43.1215 256.812 mo
46.5488 256.812 li
@
43.1215 209.412 mo
46.5488 209.412 li
@
43.1215 162.012 mo
46.5488 162.012 li
@
43.1215 114.612 mo
46.5488 114.612 li
@
43.1215 67.2119 mo
46.5488 67.2119 li
@
43.1215 19.812 mo
46.5488 19.812 li
@
385.872 256.812 mo
382.445 256.812 li
@
385.872 209.412 mo
382.445 209.412 li
@
385.872 162.012 mo
382.445 162.012 li
@
385.872 114.612 mo
382.445 114.612 li
@
385.872 67.2119 mo
382.445 67.2119 li
@
385.872 19.812 mo
382.445 19.812 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QSSHCZ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QSSHCZ+Helvetica /Encoding get
dup 46 /period put
dup 54 /six put
dup 56 /eight put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/QSSHCZ+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp 
/A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp /a 
/.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t /u 
138{/.notdef}rp]
QSSHCZ+Helvetica nf
QSSHCZ+Helvetica*1 [12 0 0 -12 0 0 ]msf
30.4715 260.937 mo
(0)sh
19.2215 213.537 mo
(0.2)sh
19.2215 166.137 mo
(0.4)sh
19.2215 118.737 mo
(0.6)sh
19.2215 71.3369 mo
(0.8)sh
30.4715 23.937 mo
(1)sh
QSSHCZ+Helvetica*1 [0 -13.2 -13.2 0 0 0 ]msf
12.4715 224.187 mo
(Genuine Acceptance Rate)
[-10.2696 -7.3392 -7.3392 -7.33919 -2.9304 -7.3392 -7.33919 -3.6696 -8.8045 -6.59999 -6.59999 -7.3392 
-7.3392 -3.66959 -7.3392 -7.3392 -6.60001 -7.33919 -3.6696 -9.5304 -7.3392 -3.6696 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QSSHDA+Helvetica-Bold /JAAAAA+Helvetica-Bold findfont ct_VMDictPut
/QSSHDA+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
QSSHDA+Helvetica-Bold nf
QSSHDA+Helvetica-Bold*1 [13.2 0 0 -13.2 0 0 ]msf
84.3719 13.5869 mo
(Receiver Operating Characteristics)
[9.5304 7.3392 7.3392 7.3392 3.6696 7.3392 7.33919 5.1349 3.6696 10.2696 8.06511 7.33919 
5.1349 7.3392 4.39549 3.6696 8.06509 8.06509 3.66962 9.5304 8.06509 7.3392 5.1349 7.33919 
7.3392 4.39548 7.33923 5.13489 3.66962 7.33917 4.39551 3.66962 7.33917 0 ]xsh
0 lc
43.0809 239.069 mo
49.5004 238.961 li
49.5004 238.581 li
49.5004 237.821 li
49.5004 237.442 li
49.5004 237.062 li
49.5004 236.682 li
49.5004 236.303 li
71.9672 235.922 li
79.1996 235.922 li
79.1996 235.543 li
79.1996 234.783 li
85.1094 234.403 li
85.1094 234.023 li
85.1094 233.264 li
85.1094 232.505 li
90.1055 232.124 li
90.1055 231.365 li
94.4335 230.605 li
98.2515 230.225 li
98.2515 229.846 li
101.667 229.465 li
101.667 228.706 li
107.576 228.326 li
110.171 228.326 li
110.171 227.947 li
116.901 227.947 li
116.901 227.187 li
116.901 226.807 li
118.866 226.047 li
120.718 226.047 li
120.718 225.667 li
122.471 225.667 li
122.471 225.288 li
125.715 225.288 li
125.715 223.009 li
125.715 222.25 li
125.715 221.49 li
125.715 220.351 li
128.664 219.971 li
130.043 219.971 li
130.043 219.591 li
131.366 219.211 li
131.366 218.831 li
132.638 217.692 li
133.861 217.312 li
133.861 216.553 li
133.861 215.413 li
136.177 215.413 li
137.276 214.273 li
138.339 214.273 li
139.368 214.273 li
141.333 214.273 li
142.273 213.514 li
143.186 213.134 li
144.074 213.134 li
145.78 212.754 li
145.78 212.374 li
145.78 211.615 li
146.601 210.855 li
149.69 210.476 li
149.69 210.096 li
151.828 209.716 li
153.179 208.956 li
153.833 208.196 li
154.475 207.817 li
155.104 207.057 li
155.722 206.678 li
156.922 206.297 li
157.507 205.918 li
158.645 205.918 li
160.279 204.778 li
160.806 204.398 li
162.338 203.639 li
163.32 203.259 li
165.199 202.88 li
166.54 202.88 li
167.405 202.499 li
168.247 201.74 li
169.868 201.36 li
171.032 200.6 li
171.412 200.221 li
171.787 200.221 li
172.523 199.84 li
173.948 199.84 li
175.645 199.461 li
175.975 198.322 li
176.3 197.942 li
177.882 197.182 li
179.093 196.802 li
181.111 196.423 li
181.939 196.042 li
183.011 195.663 li
184.554 195.283 li
184.804 194.144 li
185.786 194.144 li
186.028 194.144 li
187.206 194.144 li
188.344 193.764 li
190.085 193.764 li
190.295 193.764 li
191.331 193.004 li
191.736 193.004 li
192.532 192.625 li
193.499 192.244 li
194.253 191.485 li
195.532 191.485 li
197.444 191.485 li
198.441 190.346 li
199.09 189.966 li
199.725 189.966 li
200.503 189.586 li
200.808 188.827 li
201.56 188.827 li
203.014 188.827 li
203.297 188.827 li
203.994 188.827 li
204.269 188.446 li
205.477 188.067 li
206.642 188.067 li
207.889 188.067 li
208.852 187.687 li
209.788 187.307 li
210.247 186.928 li
211.144 186.168 li
211.802 186.168 li
212.657 185.408 li
213.696 184.269 li
214.802 184.269 li
215.486 183.889 li
216.345 183.889 li
217.183 183.889 li
217.729 183.129 li
218.881 182.749 li
220.079 182.37 li
220.99 181.61 li
221.955 180.851 li
222.661 180.851 li
223.427 180.091 li
224.249 179.331 li
225.41 179.331 li
226.392 179.331 li
227.279 178.951 li
228.206 178.571 li
228.854 177.812 li
229.487 177.053 li
230.11 175.913 li
230.901 175.533 li
231.615 174.773 li
232.082 174.773 li
232.997 174.394 li
233.611 173.255 li
234.214 173.255 li
234.752 172.874 li
235.751 172.874 li
236.417 171.735 li
237.219 171.355 li
237.953 170.596 li
238.906 169.457 li
239.373 168.316 li
240.06 167.937 li
240.555 167.557 li
241.261 167.177 li
241.781 166.798 li
242.208 166.417 li
242.797 165.658 li
243.497 165.658 li
243.903 165.278 li
244.659 164.899 li
245.436 164.519 li
246.195 164.519 li
246.937 164.139 li
247.519 163.379 li
248.407 163 li
248.893 162.24 li
249.441 162.24 li
249.913 161.86 li
250.673 161.101 li
251.384 161.101 li
252.205 160.341 li
252.638 160.341 li
253.368 160.341 li
253.905 159.202 li
254.578 158.442 li
255.209 158.062 li
255.716 157.682 li
256.243 157.682 li
256.708 157.682 li
257.352 157.303 li
258.192 156.923 li
258.706 156.543 li
259.512 156.543 li
260.468 156.543 li
261.114 155.783 li
261.747 155.783 li
262.299 155.783 li
262.977 155.023 li
263.575 154.644 li
263.968 154.264 li
264.633 152.745 li
265.306 152.365 li
265.76 151.985 li
266.45 151.605 li
267.047 151.605 li
267.633 151.226 li
268.133 151.226 li
268.699 150.846 li
269.201 150.086 li
269.786 149.326 li
270.254 148.946 li
270.856 148.946 li
271.532 148.187 li
271.976 148.187 li
272.629 148.187 li
272.992 148.187 li
273.449 148.187 li
274.01 148.187 li
274.327 147.428 li
274.951 146.668 li
275.487 146.288 li
276.03 145.528 li
276.49 145.528 li
277.059 145.148 li
277.548 144.389 li
278.127 144.389 li
278.724 144.009 li
279.323 144.009 li
279.886 144.009 li
280.295 142.87 li
280.865 142.11 li
281.338 141.73 li
281.692 141.73 li
282.029 141.35 li
282.668 141.35 li
283.163 140.971 li
283.604 139.832 li
284.097 139.451 li
284.491 139.072 li
284.948 138.312 li
285.276 138.312 li
285.821 138.312 li
286.326 138.312 li
286.811 137.932 li
287.364 137.173 li
287.845 137.173 li
288.319 136.792 li
288.836 136.792 li
289.247 136.792 li
289.789 136.413 li
290.225 136.033 li
290.628 135.274 li
291.101 133.754 li
291.715 133.375 li
292.317 132.235 li
292.73 131.855 li
293.209 131.476 li
293.689 131.096 li
294.145 130.716 li
294.569 130.716 li
294.938 129.577 li
295.361 129.577 li
295.778 129.196 li
296.19 128.437 li
296.597 128.437 li
297.021 128.057 li
297.464 127.298 li
297.947 127.298 li
298.354 126.918 li
298.868 126.158 li
299.359 125.398 li
299.828 124.639 li
300.277 124.639 li
300.733 124.259 li
301.287 124.259 li
301.756 123.879 li
302.226 123.499 li
302.663 122.36 li
303.002 121.98 li
303.435 121.98 li
303.875 121.98 li
304.271 121.98 li
304.724 121.221 li
305.165 121.221 li
305.612 120.841 li
306.053 120.461 li
306.482 120.461 li
306.865 119.701 li
307.227 119.701 li
307.675 119.321 li
308.045 118.182 li
308.415 118.182 li
308.777 117.803 li
309.193 117.803 li
309.609 117.043 li
309.962 117.043 li
310.286 116.663 li
310.847 116.663 li
311.183 115.523 li
311.599 114.384 li
311.942 114.384 li
312.299 114.384 li
312.664 113.245 li
313.076 113.245 li
313.422 113.245 li
313.755 113.245 li
314.117 113.245 li
314.475 112.485 li
314.847 111.725 li
315.166 110.586 li
315.454 110.586 li
315.886 109.826 li
316.186 109.826 li
316.565 109.826 li
316.939 109.447 li
317.284 109.066 li
317.745 108.687 li
318.11 108.687 li
318.472 108.687 li
318.824 107.927 li
319.198 107.548 li
319.481 107.548 li
319.788 107.548 li
320.165 107.167 li
320.493 106.408 li
320.836 106.028 li
321.231 105.649 li
321.545 104.509 li
321.866 104.509 li
322.245 103.369 li
322.52 103.369 li
322.853 102.99 li
323.207 102.61 li
323.516 102.23 li
323.904 101.851 li
324.159 101.851 li
324.506 101.091 li
324.859 100.711 li
325.146 100.331 li
325.466 99.192 li
325.764 98.812 li
326.161 98.812 li
326.461 98.812 li
326.782 98.0529 li
327.065 98.0529 li
327.296 98.0529 li
327.572 97.6729 li
327.854 97.6729 li
328.148 96.9129 li
328.44 96.9129 li
328.688 96.9129 li
328.97 96.5329 li
329.356 96.5329 li
329.694 96.5329 li
329.967 96.153 li
330.299 95.7729 li
330.525 95.7729 li
330.833 95.3939 li
331.156 95.0139 li
331.4 95.0139 li
331.737 94.6339 li
331.996 94.254 li
332.314 93.1149 li
332.568 92.7349 li
332.89 92.3549 li
333.112 92.3549 li
333.395 91.976 li
333.713 91.596 li
333.988 91.216 li
334.295 90.836 li
334.575 90.836 li
334.84 90.836 li
335.108 90.836 li
335.359 90.836 li
335.631 90.4559 li
335.856 90.4559 li
336.103 90.4559 li
336.375 90.0759 li
336.604 89.317 li
336.889 88.5569 li
337.187 88.1779 li
337.451 87.797 li
337.679 87.418 li
337.926 87.418 li
338.186 86.6579 li
338.47 85.898 li
338.75 85.519 li
338.997 85.519 li
339.208 85.1389 li
339.454 85.1389 li
339.724 85.1389 li
339.972 85.1389 li
340.247 84.3799 li
340.483 83.999 li
340.729 83.2399 li
340.972 83.2399 li
341.231 82.4799 li
341.461 80.961 li
341.698 80.2009 li
341.904 79.442 li
342.148 79.062 li
342.396 79.062 li
342.661 78.3019 li
342.892 77.5419 li
343.122 77.5419 li
343.336 77.5419 li
343.57 77.5419 li
343.774 76.7829 li
343.976 76.024 li
344.2 75.644 li
344.42 75.2639 li
344.662 75.2639 li
344.906 74.5039 li
345.16 74.5039 li
345.361 74.5039 li
345.601 74.5039 li
345.791 74.5039 li
345.994 73.744 li
346.229 73.744 li
346.453 73.744 li
346.675 73.3649 li
346.924 72.9849 li
347.145 72.6049 li
347.344 72.2259 li
347.537 72.2259 li
347.738 71.846 li
347.945 71.846 li
348.155 71.466 li
348.358 71.466 li
348.578 71.466 li
348.77 71.086 li
348.941 70.3269 li
349.136 69.946 li
349.337 69.567 li
349.521 69.187 li
349.706 68.4279 li
349.921 68.048 li
350.123 67.2879 li
350.324 67.2879 li
350.492 66.9079 li
350.682 66.5279 li
350.913 66.5279 li
351.111 66.5279 li
351.268 66.148 li
351.453 66.148 li
351.636 65.769 li
351.82 65.0089 li
351.986 65.0089 li
352.18 65.0089 li
352.34 64.6289 li
352.473 64.6289 li
352.655 64.6289 li
352.846 64.249 li
353.057 63.8699 li
353.255 63.8699 li
353.417 63.1099 li
353.617 63.1099 li
353.773 63.1099 li
353.921 62.7299 li
354.101 62.7299 li
354.282 62.7299 li
354.461 62.3509 li
354.631 62.3509 li
354.811 61.971 li
354.992 61.971 li
355.159 60.8309 li
355.324 60.4509 li
355.517 60.4509 li
355.698 60.4509 li
355.857 60.4509 li
356.021 60.071 li
356.182 59.312 li
356.35 58.9319 li
356.537 58.9319 li
356.714 58.5529 li
356.879 58.172 li
357.053 57.793 li
357.194 57.793 li
357.339 57.793 li
357.515 57.0329 li
357.657 57.0329 li
357.812 57.0329 li
357.955 56.6529 li
358.121 56.273 li
358.267 55.1339 li
358.418 54.7549 li
358.57 54.7549 li
358.712 54.7549 li
358.876 54.374 li
359.027 54.374 li
359.169 54.374 li
359.322 53.9949 li
359.458 53.6149 li
359.606 53.6149 li
359.732 53.6149 li
359.883 53.6149 li
360.049 53.6149 li
360.211 53.6149 li
360.367 53.2349 li
360.524 52.8549 li
360.682 52.8549 li
360.837 52.8549 li
360.982 52.4749 li
361.12 52.096 li
361.24 52.096 li
361.381 51.336 li
361.523 50.9569 li
361.667 50.9569 li
361.803 50.9569 li
361.956 50.5759 li
362.109 49.0569 li
362.257 49.0569 li
362.4 49.0569 li
362.51 49.0569 li
362.627 47.9169 li
362.759 47.5379 li
362.857 47.5379 li
362.999 47.5379 li
363.148 47.1579 li
363.262 46.7779 li
363.378 46.7779 li
363.492 45.6389 li
363.626 45.6389 li
363.744 45.2589 li
363.87 44.8789 li
363.983 44.8789 li
364.09 44.8789 li
364.226 44.4999 li
364.343 44.119 li
364.462 44.119 li
364.576 44.119 li
364.694 44.119 li
364.838 44.119 li
364.97 44.119 li
365.089 43.7399 li
365.206 43.7399 li
365.318 43.7399 li
365.436 43.7399 li
365.561 43.7399 li
365.663 43.3599 li
365.784 43.3599 li
365.892 43.3599 li
366.042 43.3599 li
366.163 42.9799 li
366.281 42.221 li
366.395 41.841 li
366.517 41.841 li
366.64 41.461 li
366.748 41.461 li
366.839 41.461 li
366.949 41.461 li
367.094 41.461 li
367.202 41.461 li
367.306 41.461 li
367.421 41.461 li
367.522 41.461 li
367.632 41.461 li
367.729 41.461 li
367.832 41.461 li
367.926 41.0809 li
368.025 40.7019 li
368.12 40.7019 li
368.212 40.7019 li
368.31 40.7019 li
368.397 40.7019 li
368.481 40.7019 li
368.572 40.321 li
368.678 40.321 li
368.767 40.321 li
368.857 40.321 li
368.947 40.321 li
369.056 40.321 li
369.146 40.321 li
369.236 40.321 li
369.339 40.321 li
369.433 40.321 li
369.511 40.321 li
369.612 39.942 li
369.711 39.942 li
369.799 39.562 li
369.893 39.562 li
369.981 39.562 li
370.085 39.562 li
370.171 39.562 li
370.254 39.562 li
370.327 39.1819 li
370.427 38.8029 li
370.515 38.8029 li
370.615 38.4229 li
370.7 37.6629 li
370.79 37.6629 li
370.865 37.2829 li
370.958 36.5229 li
371.044 36.144 li
371.135 36.144 li
371.224 36.144 li
371.307 36.144 li
371.391 35.3839 li
371.475 35.0039 li
371.576 35.0039 li
371.654 34.624 li
371.729 34.245 li
371.795 33.865 li
371.877 33.865 li
371.954 33.485 li
372.038 33.1049 li
372.125 33.1049 li
372.21 33.1049 li
372.284 33.1049 li
372.356 33.1049 li
372.429 32.7259 li
372.498 32.7259 li
372.572 32.3459 li
372.648 31.9659 li
372.721 31.5859 li
372.804 31.5859 li
372.881 31.5859 li
372.959 31.2059 li
373.031 31.2059 li
373.106 31.2059 li
373.181 31.2059 li
373.241 31.2059 li
373.316 30.8259 li
373.393 30.446 li
373.472 30.446 li
373.544 30.446 li
373.627 30.446 li
373.706 30.446 li
373.784 30.446 li
373.844 30.446 li
373.91 30.446 li
373.986 30.446 li
374.048 30.446 li
374.135 30.446 li
374.204 30.446 li
374.252 30.446 li
374.318 30.446 li
374.383 30.446 li
374.448 30.446 li
374.518 30.446 li
374.579 30.067 li
374.645 30.067 li
374.716 30.067 li
374.783 30.067 li
374.849 30.067 li
374.917 30.067 li
374.983 29.687 li
375.043 29.687 li
375.119 29.687 li
375.167 29.687 li
375.233 29.687 li
375.292 29.687 li
375.376 29.687 li
375.445 29.687 li
375.51 29.687 li
375.556 29.687 li
375.621 29.3069 li
375.679 29.3069 li
375.742 29.3069 li
375.793 29.3069 li
375.853 29.3069 li
375.909 29.3069 li
375.971 29.3069 li
376.043 29.3069 li
376.102 29.3069 li
376.158 29.3069 li
376.216 29.3069 li
376.267 29.3069 li
376.324 29.3069 li
376.379 29.3069 li
376.438 28.9279 li
376.492 28.9279 li
376.545 28.9279 li
376.602 28.9279 li
376.654 28.9279 li
376.711 28.9279 li
376.77 28.9279 li
376.827 28.9279 li
376.88 28.9279 li
376.937 28.9279 li
376.99 28.9279 li
377.046 28.9279 li
377.091 28.9279 li
377.159 28.547 li
377.219 28.547 li
377.263 28.547 li
377.307 28.1679 li
377.356 28.1679 li
377.402 28.1679 li
377.461 28.1679 li
377.509 28.1679 li
377.554 28.1679 li
377.594 28.1679 li
377.644 28.1679 li
377.693 28.1679 li
377.741 28.1679 li
377.794 28.1679 li
377.84 27.7879 li
377.886 27.7879 li
377.94 27.7879 li
377.988 27.4079 li
378.04 27.4079 li
378.087 27.4079 li
378.141 27.4079 li
378.191 27.4079 li
378.238 27.4079 li
378.284 27.4079 li
378.328 27.4079 li
378.381 27.4079 li
378.424 27.0279 li
378.464 27.0279 li
378.506 27.0279 li
378.548 27.0279 li
378.593 27.0279 li
378.633 27.0279 li
378.671 26.6479 li
378.715 26.6479 li
378.758 26.6479 li
378.793 26.6479 li
378.838 26.6479 li
378.881 26.6479 li
378.93 26.6479 li
378.976 26.6479 li
379.024 26.6479 li
379.07 26.269 li
379.109 26.269 li
379.155 26.269 li
379.202 25.8889 li
379.249 25.8889 li
379.292 25.8889 li
379.34 25.8889 li
379.378 25.8889 li
379.419 25.8889 li
379.459 25.8889 li
379.49 25.8889 li
379.522 25.5089 li
379.561 25.5089 li
379.604 25.1299 li
379.649 25.1299 li
379.701 25.1299 li
379.737 25.1299 li
379.778 25.1299 li
379.822 25.1299 li
379.861 25.1299 li
379.91 25.1299 li
379.944 24.749 li
379.984 24.749 li
380.03 24.749 li
380.072 24.749 li
380.117 24.749 li
380.154 24.37 li
380.185 24.37 li
380.227 24.37 li
380.264 24.37 li
380.293 24.37 li
380.322 24.37 li
380.352 24.37 li
380.394 24.37 li
380.43 24.37 li
380.451 24.37 li
380.487 24.37 li
380.526 24.37 li
380.563 24.37 li
380.599 24.37 li
380.628 24.37 li
380.663 24.37 li
380.695 24.37 li
380.721 23.99 li
380.758 23.99 li
380.797 23.99 li
380.838 23.99 li
380.879 23.99 li
380.914 23.99 li
380.942 23.61 li
380.977 23.61 li
381.007 23.61 li
381.04 23.2299 li
381.078 23.2299 li
381.104 23.2299 li
381.129 23.2299 li
381.158 23.2299 li
381.188 23.2299 li
381.221 23.2299 li
381.249 23.2299 li
381.274 23.2299 li
381.307 23.2299 li
381.338 23.2299 li
381.361 23.2299 li
381.393 22.8499 li
381.42 22.8499 li
381.451 22.8499 li
381.479 22.8499 li
381.506 22.8499 li
381.533 22.8499 li
381.557 22.8499 li
381.586 22.8499 li
381.612 22.8499 li
381.64 22.8499 li
381.661 22.8499 li
381.688 22.4709 li
381.716 22.4709 li
381.747 22.4709 li
381.771 22.4709 li
381.801 22.4709 li
381.827 22.4709 li
381.865 22.4709 li
381.893 22.4709 li
381.92 22.4709 li
381.949 22.4709 li
381.975 22.4709 li
382.002 22.4709 li
382.025 22.4709 li
382.044 22.4709 li
382.067 22.4709 li
382.089 22.0909 li
382.115 22.0909 li
382.142 22.0909 li
382.166 22.0909 li
382.201 22.0909 li
382.226 22.0909 li
382.249 22.0909 li
382.274 22.0909 li
382.301 22.0909 li
382.326 22.0909 li
382.354 21.7109 li
382.373 21.7109 li
382.391 21.7109 li
382.418 21.7109 li
382.437 21.7109 li
382.456 21.7109 li
382.48 21.7109 li
382.5 21.7109 li
382.53 21.3319 li
382.554 21.3319 li
382.577 20.9509 li
382.598 20.9509 li
382.615 20.9509 li
382.637 20.9509 li
382.663 20.9509 li
382.687 20.9509 li
382.715 20.572 li
382.736 20.192 li
382.762 20.192 li
382.788 20.192 li
382.814 20.192 li
382.835 20.192 li
382.853 20.192 li
382.867 20.192 li
382.883 20.192 li
382.91 20.192 li
382.927 20.192 li
382.952 20.192 li
382.972 20.192 li
382.995 20.192 li
383.012 20.192 li
383.029 20.192 li
383.044 20.192 li
383.063 20.192 li
383.079 20.192 li
383.095 20.192 li
383.11 20.192 li
383.126 20.192 li
383.149 20.192 li
383.173 20.192 li
383.19 20.192 li
383.213 20.192 li
383.23 20.192 li
383.249 20.192 li
383.27 20.192 li
383.29 20.192 li
383.309 20.192 li
383.324 20.192 li
383.339 20.192 li
383.354 20.192 li
383.375 20.192 li
383.392 20.192 li
383.409 20.192 li
383.428 20.192 li
383.442 20.192 li
383.458 20.192 li
383.474 20.192 li
383.492 20.192 li
383.507 20.192 li
383.522 20.192 li
383.541 20.192 li
383.559 20.192 li
383.578 20.192 li
383.591 20.192 li
383.606 20.192 li
383.621 20.192 li
383.635 20.192 li
383.657 20.192 li
383.674 20.192 li
383.693 20.192 li
383.712 20.192 li
383.727 20.192 li
383.74 20.192 li
383.752 20.192 li
383.765 20.192 li
383.777 20.192 li
383.793 20.192 li
383.81 20.192 li
383.829 20.192 li
383.843 20.192 li
383.858 20.192 li
383.872 20.192 li
383.889 20.192 li
383.903 20.192 li
383.924 20.192 li
383.938 20.192 li
383.949 20.192 li
383.961 20.192 li
383.975 20.192 li
383.988 20.192 li
384.003 20.192 li
384.01 20.192 li
384.019 20.192 li
384.031 20.192 li
384.043 20.192 li
384.055 20.192 li
384.072 20.192 li
384.086 20.192 li
384.1 20.192 li
384.112 20.192 li
384.124 20.192 li
384.139 20.192 li
384.15 20.192 li
384.16 20.192 li
384.174 20.192 li
384.184 20.192 li
384.193 20.192 li
384.205 20.192 li
384.215 20.192 li
384.225 20.192 li
384.239 20.192 li
384.248 20.192 li
384.267 20.192 li
384.277 20.192 li
384.288 20.192 li
384.298 20.192 li
384.309 20.192 li
384.32 20.192 li
384.331 20.192 li
384.342 20.192 li
384.35 20.192 li
384.358 20.192 li
384.37 20.192 li
384.379 20.192 li
384.39 20.192 li
384.401 20.192 li
384.41 20.192 li
384.421 20.192 li
384.433 20.192 li
384.446 20.192 li
384.458 20.192 li
384.472 20.192 li
384.484 20.192 li
384.492 20.192 li
384.502 20.192 li
384.513 20.192 li
384.521 20.192 li
384.532 20.192 li
384.542 20.192 li
384.551 20.192 li
384.564 20.192 li
384.575 20.192 li
384.59 20.192 li
384.6 20.192 li
384.61 20.192 li
384.617 20.192 li
384.629 20.192 li
384.638 20.192 li
384.649 20.192 li
384.659 20.192 li
384.673 20.192 li
384.678 20.192 li
384.69 20.192 li
384.699 20.192 li
384.706 20.192 li
384.713 20.192 li
384.723 20.192 li
384.732 20.192 li
384.739 20.192 li
384.75 20.192 li
384.758 20.192 li
384.768 20.192 li
384.779 20.192 li
384.785 20.192 li
384.79 20.192 li
384.801 20.192 li
384.808 20.192 li
384.815 20.192 li
384.82 20.192 li
384.824 20.192 li
384.83 20.192 li
384.84 20.192 li
384.845 20.192 li
384.851 20.192 li
384.857 20.192 li
384.865 20.192 li
384.873 20.192 li
384.877 20.192 li
384.883 20.192 li
384.889 20.192 li
384.902 20.192 li
384.909 20.192 li
384.919 20.192 li
384.926 20.192 li
384.933 20.192 li
384.94 19.812 li
384.947 19.812 li
384.955 19.812 li
384.961 19.812 li
384.969 19.812 li
384.974 19.812 li
384.982 19.812 li
384.985 19.812 li
384.988 19.812 li
384.993 19.812 li
385.001 19.812 li
385.007 19.812 li
385.013 19.812 li
385.018 19.812 li
385.025 19.812 li
385.032 19.812 li
385.04 19.812 li
385.045 19.812 li
385.052 19.812 li
385.059 19.812 li
385.063 19.812 li
385.067 19.812 li
385.072 19.812 li
385.081 19.812 li
385.085 19.812 li
385.091 19.812 li
385.097 19.812 li
385.103 19.812 li
385.108 19.812 li
385.116 19.812 li
385.121 19.812 li
385.128 19.812 li
385.132 19.812 li
385.138 19.812 li
385.145 19.812 li
385.147 19.812 li
385.153 19.812 li
385.159 19.812 li
385.164 19.812 li
385.168 19.812 li
385.174 19.812 li
385.18 19.812 li
385.187 19.812 li
385.191 19.812 li
385.196 19.812 li
385.203 19.812 li
385.207 19.812 li
385.208 19.812 li
385.216 19.812 li
385.222 19.812 li
385.229 19.812 li
385.235 19.812 li
385.24 19.812 li
385.247 19.812 li
385.251 19.812 li
385.256 19.812 li
385.261 19.812 li
385.265 19.812 li
385.268 19.812 li
385.273 19.812 li
385.275 19.812 li
385.281 19.812 li
385.286 19.812 li
385.289 19.812 li
385.292 19.812 li
385.295 19.812 li
385.304 19.812 li
385.309 19.812 li
385.313 19.812 li
385.318 19.812 li
385.324 19.812 li
385.328 19.812 li
385.331 19.812 li
385.336 19.812 li
385.343 19.812 li
385.345 19.812 li
385.349 19.812 li
385.353 19.812 li
385.359 19.812 li
385.363 19.812 li
385.367 19.812 li
385.37 19.812 li
385.373 19.812 li
385.38 19.812 li
385.384 19.812 li
385.388 19.812 li
385.389 19.812 li
385.393 19.812 li
385.397 19.812 li
385.399 19.812 li
385.401 19.812 li
385.403 19.812 li
385.408 19.812 li
385.411 19.812 li
385.414 19.812 li
385.418 19.812 li
385.423 19.812 li
385.425 19.812 li
385.427 19.812 li
385.428 19.812 li
385.433 19.812 li
385.439 19.812 li
385.442 19.812 li
385.447 19.812 li
385.45 19.812 li
385.454 19.812 li
385.456 19.812 li
385.459 19.812 li
385.461 19.812 li
385.465 19.812 li
385.47 19.812 li
385.473 19.812 li
385.477 19.812 li
385.479 19.812 li
385.482 19.812 li
385.486 19.812 li
385.49 19.812 li
385.492 19.812 li
385.495 19.812 li
385.496 19.812 li
385.5 19.812 li
385.502 19.812 li
385.504 19.812 li
385.505 19.812 li
385.508 19.812 li
385.511 19.812 li
385.514 19.812 li
385.518 19.812 li
385.52 19.812 li
385.522 19.812 li
385.526 19.812 li
385.527 19.812 li
385.529 19.812 li
385.531 19.812 li
385.533 19.812 li
385.535 19.812 li
385.538 19.812 li
385.54 19.812 li
385.543 19.812 li
385.546 19.812 li
385.549 19.812 li
385.552 19.812 li
385.556 19.812 li
385.559 19.812 li
385.561 19.812 li
385.565 19.812 li
385.568 19.812 li
385.57 19.812 li
385.571 19.812 li
385.574 19.812 li
385.576 19.812 li
385.577 19.812 li
385.579 19.812 li
385.582 19.812 li
385.583 19.812 li
385.586 19.812 li
385.587 19.812 li
385.588 19.812 li
385.591 19.812 li
385.594 19.812 li
385.597 19.812 li
385.598 19.812 li
385.6 19.812 li
385.601 19.812 li
385.604 19.812 li
385.605 19.812 li
385.606 19.812 li
385.61 19.812 li
385.611 19.812 li
385.613 19.812 li
385.614 19.812 li
385.615 19.812 li
385.618 19.812 li
385.622 19.812 li
385.624 19.812 li
385.627 19.812 li
385.628 19.812 li
385.63 19.812 li
385.633 19.812 li
385.636 19.812 li
385.639 19.812 li
385.642 19.812 li
385.644 19.812 li
385.646 19.812 li
385.649 19.812 li
385.651 19.812 li
385.654 19.812 li
385.656 19.812 li
385.658 19.812 li
385.659 19.812 li
385.661 19.812 li
385.662 19.812 li
385.665 19.812 li
385.666 19.812 li
385.667 19.812 li
385.668 19.812 li
385.669 19.812 li
385.67 19.812 li
385.672 19.812 li
385.674 19.812 li
385.675 19.812 li
385.676 19.812 li
385.677 19.812 li
385.679 19.812 li
385.68 19.812 li
385.681 19.812 li
385.683 19.812 li
385.685 19.812 li
385.687 19.812 li
385.688 19.812 li
385.689 19.812 li
385.69 19.812 li
385.691 19.812 li
385.693 19.812 li
385.696 19.812 li
385.698 19.812 li
385.699 19.812 li
385.701 19.812 li
385.702 19.812 li
385.703 19.812 li
385.704 19.812 li
385.706 19.812 li
385.707 19.812 li
385.71 19.812 li
385.711 19.812 li
385.712 19.812 li
385.715 19.812 li
385.718 19.812 li
385.72 19.812 li
385.721 19.812 li
385.722 19.812 li
385.724 19.812 li
385.726 19.812 li
385.728 19.812 li
385.729 19.812 li
385.73 19.812 li
385.732 19.812 li
385.733 19.812 li
385.734 19.812 li
385.735 19.812 li
385.736 19.812 li
385.737 19.812 li
385.739 19.812 li
385.742 19.812 li
385.743 19.812 li
385.745 19.812 li
385.746 19.812 li
385.749 19.812 li
385.751 19.812 li
385.752 19.812 li
385.754 19.812 li
385.756 19.812 li
385.76 19.812 li
385.761 19.812 li
385.763 19.812 li
385.765 19.812 li
385.767 19.812 li
385.768 19.812 li
385.769 19.812 li
385.77 19.812 li
385.772 19.812 li
385.773 19.812 li
385.774 19.812 li
385.775 19.812 li
385.777 19.812 li
385.778 19.812 li
385.78 19.812 li
385.781 19.812 li
385.782 19.812 li
385.784 19.812 li
385.785 19.812 li
385.786 19.812 li
385.788 19.812 li
385.789 19.812 li
385.79 19.812 li
385.791 19.812 li
385.792 19.812 li
385.794 19.812 li
385.795 19.812 li
385.796 19.812 li
385.797 19.812 li
385.799 19.812 li
385.8 19.812 li
385.803 19.812 li
385.804 19.812 li
385.805 19.812 li
385.808 19.812 li
385.81 19.812 li
385.811 19.812 li
385.812 19.812 li
385.813 19.812 li
385.814 19.812 li
385.816 19.812 li
385.817 19.812 li
385.818 19.812 li
385.819 19.812 li
385.82 19.812 li
385.821 19.812 li
385.822 19.812 li
385.825 19.812 li
385.826 19.812 li
385.827 19.812 li
385.828 19.812 li
385.829 19.812 li
385.83 19.812 li
385.831 19.812 li
385.832 19.812 li
385.833 19.812 li
385.834 19.812 li
385.835 19.812 li
385.838 19.812 li
385.839 19.812 li
385.84 19.812 li
385.842 19.812 li
385.843 19.812 li
385.845 19.812 li
385.846 19.812 li
385.847 19.812 li
385.848 19.812 li
385.849 19.812 li
385.85 19.812 li
385.851 19.812 li
385.852 19.812 li
385.853 19.812 li
385.854 19.812 li
385.856 19.812 li
385.857 19.812 li
385.858 19.812 li
385.859 19.812 li
385.86 19.812 li
385.861 19.812 li
385.862 19.812 li
385.863 19.812 li
385.864 19.812 li
385.865 19.812 li
385.866 19.812 li
385.867 19.812 li
385.868 19.812 li
385.869 19.812 li
385.87 19.812 li
385.871 19.812 li
385.872 19.812 li
@
0 lj
47.25 241.211 mo
51.75 241.211 li
51.75 236.711 li
47.25 236.711 li
cp
@
47.25 239.312 mo
51.75 239.312 li
51.75 234.812 li
47.25 234.812 li
cp
@
82.8594 235.514 mo
87.3594 235.514 li
87.3594 231.014 li
82.8594 231.014 li
cp
@
99.4165 230.956 mo
103.917 230.956 li
103.917 226.456 li
99.4165 226.456 li
cp
@
114.651 229.437 mo
119.151 229.437 li
119.151 224.937 li
114.651 224.937 li
cp
@
123.465 225.259 mo
127.965 225.259 li
127.965 220.759 li
123.465 220.759 li
cp
@
129.117 221.081 mo
133.617 221.081 li
133.617 216.581 li
129.117 216.581 li
cp
@
139.083 216.524 mo
143.583 216.524 li
143.583 212.024 li
139.083 212.024 li
cp
@
147.44 212.346 mo
151.94 212.346 li
151.94 207.846 li
147.44 207.846 li
cp
@
156.394 208.168 mo
160.894 208.168 li
160.894 203.668 li
156.394 203.668 li
cp
@
168.783 202.85 mo
173.283 202.85 li
173.283 198.35 li
168.783 198.35 li
cp
@
178.861 198.672 mo
183.361 198.672 li
183.361 194.172 li
178.861 194.172 li
cp
@
188.045 196.014 mo
192.545 196.014 li
192.545 191.514 li
188.045 191.514 li
cp
@
197.475 192.216 mo
201.975 192.216 li
201.975 187.716 li
197.475 187.716 li
cp
@
205.638 190.317 mo
210.138 190.317 li
210.138 185.817 li
205.638 185.817 li
cp
@
214.095 186.139 mo
218.595 186.139 li
218.595 181.639 li
214.095 181.639 li
cp
@
223.16 181.581 mo
227.66 181.581 li
227.66 177.081 li
223.16 177.081 li
cp
@
230.747 176.644 mo
235.247 176.644 li
235.247 172.144 li
230.747 172.144 li
cp
@
237.81 170.187 mo
242.31 170.187 li
242.31 165.687 li
237.81 165.687 li
cp
@
243.945 166.769 mo
248.445 166.769 li
248.445 162.269 li
243.945 162.269 li
cp
@
250.388 162.591 mo
254.888 162.591 li
254.888 158.091 li
250.388 158.091 li
cp
@
256.456 158.793 mo
260.956 158.793 li
260.956 154.293 li
256.456 154.293 li
cp
@
263.056 154.615 mo
267.556 154.615 li
267.556 150.115 li
263.056 150.115 li
cp
@
268.606 151.197 mo
273.106 151.197 li
273.106 146.697 li
268.606 146.697 li
cp
@
273.78 147.778 mo
278.28 147.778 li
278.28 143.278 li
273.78 143.278 li
cp
@
279.088 143.98 mo
283.588 143.98 li
283.588 139.48 li
279.088 139.48 li
cp
@
283.572 140.562 mo
288.072 140.562 li
288.072 136.062 li
283.572 136.062 li
cp
@
288.378 137.524 mo
292.878 137.524 li
292.878 133.024 li
288.378 133.024 li
cp
@
293.111 131.826 mo
297.611 131.826 li
297.611 127.326 li
293.111 127.326 li
cp
@
297.579 126.889 mo
302.079 126.889 li
302.079 122.389 li
297.579 122.389 li
cp
@
302.021 124.23 mo
306.521 124.23 li
306.521 119.73 li
302.021 119.73 li
cp
@
306.165 120.432 mo
310.665 120.432 li
310.665 115.932 li
306.165 115.932 li
cp
@
310.049 116.634 mo
314.549 116.634 li
314.549 112.134 li
310.049 112.134 li
cp
@
313.636 112.076 mo
318.136 112.076 li
318.136 107.576 li
313.636 107.576 li
cp
@
317.23 109.798 mo
321.73 109.798 li
321.73 105.298 li
317.23 105.298 li
cp
@
320.604 105.24 mo
325.104 105.24 li
325.104 100.74 li
320.604 100.74 li
cp
@
323.911 101.062 mo
328.411 101.062 li
328.411 96.562 li
323.911 96.562 li
cp
@
326.72 98.7829 mo
331.22 98.7829 li
331.22 94.2829 li
326.72 94.2829 li
cp
@
329.746 96.504 mo
334.246 96.504 li
334.246 92.004 li
329.746 92.004 li
cp
@
332.59 93.086 mo
337.09 93.086 li
337.09 88.586 li
332.59 88.586 li
cp
@
335.201 90.048 mo
339.701 90.048 li
339.701 85.548 li
335.201 85.548 li
cp
@
337.722 87.3889 mo
342.222 87.3889 li
342.222 82.8889 li
337.722 82.8889 li
cp
@
340.146 81.312 mo
344.646 81.312 li
344.646 76.812 li
340.146 76.812 li
cp
@
342.412 77.5139 mo
346.912 77.5139 li
346.912 73.0139 li
342.412 73.0139 li
cp
@
344.674 75.2349 mo
349.174 75.2349 li
349.174 70.7349 li
344.674 70.7349 li
cp
@
346.691 72.5759 mo
351.191 72.5759 li
351.191 68.0759 li
346.691 68.0759 li
cp
@
348.663 68.7779 mo
353.163 68.7779 li
353.163 64.2779 li
348.663 64.2779 li
cp
@
350.405 66.8789 mo
354.905 66.8789 li
354.905 62.3789 li
350.405 62.3789 li
cp
@
352.21 64.5999 mo
356.71 64.5999 li
356.71 60.0999 li
352.21 60.0999 li
cp
@
353.931 61.562 mo
358.431 61.562 li
358.431 57.062 li
353.931 57.062 li
cp
@
355.562 59.2829 mo
360.062 59.2829 li
360.062 54.7829 li
355.562 54.7829 li
cp
@
357.072 56.2449 mo
361.572 56.2449 li
361.572 51.7449 li
357.072 51.7449 li
cp
@
358.587 55.1049 mo
363.087 55.1049 li
363.087 50.6049 li
358.587 50.6049 li
cp
@
360.006 51.3069 mo
364.506 51.3069 li
364.506 46.8069 li
360.006 46.8069 li
cp
@
361.242 47.8889 mo
365.742 47.8889 li
365.742 43.3889 li
361.242 43.3889 li
cp
@
362.444 46.3699 mo
366.944 46.3699 li
366.944 41.8699 li
362.444 41.8699 li
cp
@
363.642 45.6099 mo
368.142 45.6099 li
368.142 41.1099 li
363.642 41.1099 li
cp
@
364.844 43.711 mo
369.344 43.711 li
369.344 39.2109 li
364.844 39.2109 li
cp
@
365.869 42.9509 mo
370.369 42.9509 li
370.369 38.4509 li
365.869 38.4509 li
cp
@
366.806 42.572 mo
371.306 42.572 li
371.306 38.072 li
366.806 38.072 li
cp
@
367.731 41.812 mo
372.231 41.812 li
372.231 37.312 li
367.731 37.312 li
cp
@
368.615 39.5329 mo
373.115 39.5329 li
373.115 35.0329 li
368.615 35.0329 li
cp
@
369.479 36.495 mo
373.979 36.495 li
373.979 31.995 li
369.479 31.995 li
cp
@
370.248 34.9749 mo
374.748 34.9749 li
374.748 30.4749 li
370.248 30.4749 li
cp
@
370.992 33.4559 mo
375.492 33.4559 li
375.492 28.9559 li
370.992 28.9559 li
cp
@
371.736 32.697 mo
376.236 32.697 li
376.236 28.197 li
371.736 28.197 li
cp
@
372.394 32.317 mo
376.894 32.317 li
376.894 27.817 li
372.394 27.817 li
cp
@
373.042 31.937 mo
377.542 31.937 li
377.542 27.437 li
373.042 27.437 li
cp
@
373.659 31.5569 mo
378.159 31.5569 li
378.159 27.0569 li
373.659 27.0569 li
cp
@
374.242 31.1769 mo
378.742 31.1769 li
378.742 26.6769 li
374.242 26.6769 li
cp
@
374.796 31.1769 mo
379.296 31.1769 li
379.296 26.6769 li
374.796 26.6769 li
cp
@
375.304 30.4179 mo
379.804 30.4179 li
379.804 25.9179 li
375.304 25.9179 li
cp
@
375.79 29.6579 mo
380.29 29.6579 li
380.29 25.1579 li
375.79 25.1579 li
cp
@
376.256 29.2779 mo
380.756 29.2779 li
380.756 24.7779 li
376.256 24.7779 li
cp
@
376.68 28.899 mo
381.18 28.899 li
381.18 24.399 li
376.68 24.399 li
cp
@
377.127 28.1389 mo
381.627 28.1389 li
381.627 23.6389 li
377.127 23.6389 li
cp
@
377.529 27.3789 mo
382.029 27.3789 li
382.029 22.8789 li
377.529 22.8789 li
cp
@
377.935 26.62 mo
382.435 26.62 li
382.435 22.12 li
377.935 22.12 li
cp
@
378.276 26.62 mo
382.776 26.62 li
382.776 22.12 li
378.276 22.12 li
cp
@
378.628 26.24 mo
383.128 26.24 li
383.128 21.74 li
378.628 21.74 li
cp
@
378.938 25.4799 mo
383.438 25.4799 li
383.438 20.9799 li
378.938 20.9799 li
cp
@
379.229 25.0999 mo
383.729 25.0999 li
383.729 20.5999 li
379.229 20.5999 li
cp
@
379.497 24.7209 mo
383.997 24.7209 li
383.997 20.2209 li
379.497 20.2209 li
cp
@
379.776 24.7209 mo
384.276 24.7209 li
384.276 20.2209 li
379.776 20.2209 li
cp
@
380.024 24.3409 mo
384.524 24.3409 li
384.524 19.8409 li
380.024 19.8409 li
cp
@
380.25 23.9609 mo
384.75 23.9609 li
384.75 19.4609 li
380.25 19.4609 li
cp
@
380.486 22.442 mo
384.986 22.442 li
384.986 17.942 li
380.486 17.942 li
cp
@
380.702 22.442 mo
385.202 22.442 li
385.202 17.942 li
380.702 17.942 li
cp
@
380.876 22.442 mo
385.376 22.442 li
385.376 17.942 li
380.876 17.942 li
cp
@
381.074 22.442 mo
385.574 22.442 li
385.574 17.942 li
381.074 17.942 li
cp
@
381.242 22.442 mo
385.742 22.442 li
385.742 17.942 li
381.242 17.942 li
cp
@
381.407 22.442 mo
385.907 22.442 li
385.907 17.942 li
381.407 17.942 li
cp
@
381.56 22.442 mo
386.06 22.442 li
386.06 17.942 li
381.56 17.942 li
cp
@
381.711 22.442 mo
386.211 22.442 li
386.211 17.942 li
381.711 17.942 li
cp
@
381.835 22.442 mo
386.335 22.442 li
386.335 17.942 li
381.835 17.942 li
cp
@
381.954 22.442 mo
386.454 22.442 li
386.454 17.942 li
381.954 17.942 li
cp
@
382.07 22.442 mo
386.57 22.442 li
386.57 17.942 li
382.07 17.942 li
cp
@
382.171 22.442 mo
386.671 22.442 li
386.671 17.942 li
382.171 17.942 li
cp
@
382.282 22.442 mo
386.782 22.442 li
386.782 17.942 li
382.282 17.942 li
cp
@
382.388 22.442 mo
386.888 22.442 li
386.888 17.942 li
382.388 17.942 li
cp
@
382.482 22.442 mo
386.982 22.442 li
386.982 17.942 li
382.482 17.942 li
cp
@
382.565 22.442 mo
387.065 22.442 li
387.065 17.942 li
382.565 17.942 li
cp
@
382.627 22.442 mo
387.127 22.442 li
387.127 17.942 li
382.627 17.942 li
cp
@
382.704 22.062 mo
387.204 22.062 li
387.204 17.562 li
382.704 17.562 li
cp
@
382.763 22.062 mo
387.263 22.062 li
387.263 17.562 li
382.763 17.562 li
cp
@
382.822 22.062 mo
387.322 22.062 li
387.322 17.562 li
382.822 17.562 li
cp
@
382.882 22.062 mo
387.382 22.062 li
387.382 17.562 li
382.882 17.562 li
cp
@
382.937 22.062 mo
387.437 22.062 li
387.437 17.562 li
382.937 17.562 li
cp
@
382.99 22.062 mo
387.49 22.062 li
387.49 17.562 li
382.99 17.562 li
cp
@
383.036 22.062 mo
387.536 22.062 li
387.536 17.562 li
383.036 17.562 li
cp
@
383.081 22.062 mo
387.581 22.062 li
387.581 17.562 li
383.081 17.562 li
cp
@
383.124 22.062 mo
387.624 22.062 li
387.624 17.562 li
383.124 17.562 li
cp
@
383.158 22.062 mo
387.658 22.062 li
387.658 17.562 li
383.158 17.562 li
cp
@
383.193 22.062 mo
387.693 22.062 li
387.693 17.562 li
383.193 17.562 li
cp
@
383.227 22.062 mo
387.727 22.062 li
387.727 17.562 li
383.227 17.562 li
cp
@
383.254 22.062 mo
387.754 22.062 li
387.754 17.562 li
383.254 17.562 li
cp
@
383.278 22.062 mo
387.778 22.062 li
387.778 17.562 li
383.278 17.562 li
cp
@
383.305 22.062 mo
387.805 22.062 li
387.805 17.562 li
383.305 17.562 li
cp
@
383.325 22.062 mo
387.825 22.062 li
387.825 17.562 li
383.325 17.562 li
cp
@
383.34 22.062 mo
387.84 22.062 li
387.84 17.562 li
383.34 17.562 li
cp
@
383.361 22.062 mo
387.861 22.062 li
387.861 17.562 li
383.361 17.562 li
cp
@
383.379 22.062 mo
387.879 22.062 li
387.879 17.562 li
383.379 17.562 li
cp
@
383.401 22.062 mo
387.901 22.062 li
387.901 17.562 li
383.401 17.562 li
cp
@
383.417 22.062 mo
387.917 22.062 li
387.917 17.562 li
383.417 17.562 li
cp
@
383.428 22.062 mo
387.928 22.062 li
387.928 17.562 li
383.428 17.562 li
cp
@
383.443 22.062 mo
387.943 22.062 li
387.943 17.562 li
383.443 17.562 li
cp
@
383.457 22.062 mo
387.957 22.062 li
387.957 17.562 li
383.457 17.562 li
cp
@
383.474 22.062 mo
387.974 22.062 li
387.974 17.562 li
383.474 17.562 li
cp
@
383.486 22.062 mo
387.986 22.062 li
387.986 17.562 li
383.486 17.562 li
cp
@
383.501 22.062 mo
388.001 22.062 li
388.001 17.562 li
383.501 17.562 li
cp
@
383.515 22.062 mo
388.015 22.062 li
388.015 17.562 li
383.515 17.562 li
cp
@
383.522 22.062 mo
388.022 22.062 li
388.022 17.562 li
383.522 17.562 li
cp
@
383.529 22.062 mo
388.029 22.062 li
388.029 17.562 li
383.529 17.562 li
cp
@
383.538 22.062 mo
388.038 22.062 li
388.038 17.562 li
383.538 17.562 li
cp
@
383.545 22.062 mo
388.045 22.062 li
388.045 17.562 li
383.545 17.562 li
cp
@
383.551 22.062 mo
388.051 22.062 li
388.051 17.562 li
383.551 17.562 li
cp
@
383.562 22.062 mo
388.062 22.062 li
388.062 17.562 li
383.562 17.562 li
cp
@
383.567 22.062 mo
388.067 22.062 li
388.067 17.562 li
383.567 17.562 li
cp
@
383.572 22.062 mo
388.072 22.062 li
388.072 17.562 li
383.572 17.562 li
cp
@
383.577 22.062 mo
388.077 22.062 li
388.077 17.562 li
383.577 17.562 li
cp
@
383.581 22.062 mo
388.081 22.062 li
388.081 17.562 li
383.581 17.562 li
cp
@
383.583 22.062 mo
388.083 22.062 li
388.083 17.562 li
383.583 17.562 li
cp
@
383.588 22.062 mo
388.088 22.062 li
388.088 17.562 li
383.588 17.562 li
cp
@
383.593 22.062 mo
388.093 22.062 li
388.093 17.562 li
383.593 17.562 li
cp
@
383.596 22.062 mo
388.096 22.062 li
388.096 17.562 li
383.596 17.562 li
cp
@
383.598 22.062 mo
388.098 22.062 li
388.098 17.562 li
383.598 17.562 li
cp
@
383.6 22.062 mo
388.1 22.062 li
388.1 17.562 li
383.6 17.562 li
cp
@
383.602 22.062 mo
388.102 22.062 li
388.102 17.562 li
383.602 17.562 li
cp
@
383.603 22.062 mo
388.103 22.062 li
388.103 17.562 li
383.603 17.562 li
cp
@
383.603 22.062 mo
388.103 22.062 li
388.103 17.562 li
383.603 17.562 li
cp
@
383.605 22.062 mo
388.105 22.062 li
388.105 17.562 li
383.605 17.562 li
cp
@
383.609 22.062 mo
388.109 22.062 li
388.109 17.562 li
383.609 17.562 li
cp
@
383.61 22.062 mo
388.11 22.062 li
388.11 17.562 li
383.61 17.562 li
cp
@
383.612 22.062 mo
388.112 22.062 li
388.112 17.562 li
383.612 17.562 li
cp
@
383.614 22.062 mo
388.114 22.062 li
388.114 17.562 li
383.614 17.562 li
cp
@
383.615 22.062 mo
388.115 22.062 li
388.115 17.562 li
383.615 17.562 li
cp
@
383.617 22.062 mo
388.117 22.062 li
388.117 17.562 li
383.617 17.562 li
cp
@
383.617 22.062 mo
388.117 22.062 li
388.117 17.562 li
383.617 17.562 li
cp
@
383.617 22.062 mo
388.117 22.062 li
388.117 17.562 li
383.617 17.562 li
cp
@
383.617 22.062 mo
388.117 22.062 li
388.117 17.562 li
383.617 17.562 li
cp
@
383.618 22.062 mo
388.118 22.062 li
388.118 17.562 li
383.618 17.562 li
cp
@
383.619 22.062 mo
388.119 22.062 li
388.119 17.562 li
383.619 17.562 li
cp
@
383.62 22.062 mo
388.12 22.062 li
388.12 17.562 li
383.62 17.562 li
cp
@
383.62 22.062 mo
388.12 22.062 li
388.12 17.562 li
383.62 17.562 li
cp
@
383.62 22.062 mo
388.12 22.062 li
388.12 17.562 li
383.62 17.562 li
cp
@
383.62 22.062 mo
388.12 22.062 li
388.12 17.562 li
383.62 17.562 li
cp
@
383.621 22.062 mo
388.121 22.062 li
388.121 17.562 li
383.621 17.562 li
cp
@
383.621 22.062 mo
388.121 22.062 li
388.121 17.562 li
383.621 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
383.622 22.062 mo
388.122 22.062 li
388.122 17.562 li
383.622 17.562 li
cp
@
1 lj
43.0809 195.283 mo
49.5004 195.283 li
49.5004 193.385 li
62.6426 193.004 li
62.6426 191.105 li
62.6426 190.726 li
62.6426 190.346 li
71.9672 190.346 li
71.9672 189.966 li
71.9672 189.586 li
71.9672 188.446 li
71.9672 187.687 li
71.9672 187.307 li
71.9672 186.928 li
71.9672 186.548 li
71.9672 185.788 li
71.9672 185.028 li
71.9672 184.648 li
71.9672 184.269 li
71.9672 183.509 li
71.9672 183.129 li
71.9672 182.749 li
71.9672 182.37 li
71.9672 181.99 li
71.9672 181.61 li
71.9672 181.23 li
71.9672 180.851 li
79.1996 180.851 li
79.1996 179.711 li
85.1094 179.331 li
85.1094 178.571 li
85.1094 178.192 li
90.1055 178.192 li
90.1055 177.812 li
90.1055 177.053 li
90.1055 176.672 li
94.4335 176.293 li
98.2515 176.293 li
98.2515 175.913 li
98.2515 175.533 li
98.2515 175.153 li
98.2515 174.014 li
98.2515 173.255 li
98.2515 172.495 li
98.2515 172.115 li
98.2515 171.735 li
101.667 171.355 li
101.667 170.216 li
104.756 170.216 li
107.576 169.836 li
107.576 169.457 li
107.576 169.076 li
110.171 168.697 li
110.171 167.937 li
118.866 167.557 li
118.866 167.177 li
118.866 165.658 li
120.718 165.658 li
120.718 165.278 li
122.471 164.899 li
124.134 164.519 li
124.134 164.139 li
125.715 162.24 li
125.715 161.86 li
127.223 161.101 li
127.223 160.341 li
130.043 160.341 li
130.043 159.961 li
131.366 159.581 li
132.638 159.202 li
133.861 158.062 li
135.04 156.923 li
135.04 156.543 li
135.04 155.783 li
135.04 155.403 li
136.177 155.403 li
138.339 154.644 li
140.365 154.264 li
140.365 153.884 li
142.273 153.884 li
144.074 153.124 li
145.78 152.745 li
146.601 152.745 li
146.601 152.365 li
148.182 152.365 li
149.69 151.985 li
150.418 151.605 li
152.51 151.226 li
152.51 150.846 li
153.179 150.846 li
153.833 150.086 li
154.475 148.946 li
155.722 148.946 li
157.507 148.567 li
158.081 148.187 li
159.743 147.807 li
160.806 147.807 li
162.338 147.428 li
162.833 147.047 li
163.8 146.668 li
165.199 146.668 li
166.54 146.288 li
168.247 145.908 li
168.66 145.148 li
170.261 144.389 li
170.649 144.009 li
171.787 142.87 li
172.523 142.87 li
172.523 142.49 li
173.948 142.49 li
175.313 142.49 li
175.645 142.49 li
175.975 142.11 li
177.258 141.73 li
177.572 140.971 li
178.795 140.211 li
179.39 140.211 li
179.974 139.451 li
180.83 139.072 li
182.21 139.072 li
183.533 138.691 li
184.302 138.691 li
184.804 138.312 li
185.299 137.932 li
186.74 137.552 li
187.666 137.173 li
188.344 137.173 li
189.442 136.792 li
189.872 136.792 li
190.921 136.792 li
192.335 136.033 li
193.499 136.033 li
194.99 135.653 li
195.71 134.894 li
196.933 134.514 li
197.444 134.134 li
198.277 134.134 li
198.441 133.754 li
199.409 132.994 li
200.656 132.615 li
201.856 132.235 li
203.014 132.235 li
203.717 131.855 li
204.542 131.855 li
205.477 131.855 li
206.514 131.855 li
207.271 131.476 li
207.766 131.476 li
208.374 131.476 li
208.971 131.096 li
210.473 129.956 li
211.364 129.196 li
212.125 129.196 li
212.552 128.817 li
213.388 128.817 li
214.604 128.817 li
215.583 128.817 li
216.627 128.817 li
218.088 128.057 li
219.486 127.298 li
220.247 127.298 li
220.744 126.918 li
221.315 126.918 li
222.427 126.918 li
223.123 126.918 li
223.804 126.918 li
224.249 126.158 li
224.98 126.158 li
225.764 126.158 li
226.599 125.019 li
227.279 125.019 li
227.746 124.259 li
228.402 123.879 li
229.298 122.74 li
229.862 122.36 li
230.841 122.36 li
231.32 121.221 li
231.79 121.221 li
232.771 120.841 li
233.555 120.461 li
234.322 120.461 li
235.071 120.461 li
235.439 119.701 li
236.163 119.701 li
236.72 118.942 li
237.318 118.182 li
237.71 117.803 li
238.338 117.422 li
238.67 117.422 li
239.233 117.043 li
240.014 116.663 li
240.644 116.663 li
240.998 116.663 li
241.305 115.903 li
241.867 115.523 li
242.377 115.144 li
242.88 114.384 li
243.375 114.384 li
244.063 114.384 li
244.855 114.005 li
245.36 114.005 li
246.12 114.005 li
246.753 114.005 li
247.302 113.624 li
247.698 113.245 li
248.407 112.865 li
249.1 112.485 li
249.812 112.485 li
250.345 112.105 li
251.159 111.725 li
251.86 110.966 li
252.515 110.207 li
253.217 109.447 li
253.637 109.447 li
254.52 109.447 li
255.095 108.687 li
255.716 108.307 li
256.298 107.927 li
256.951 106.788 li
257.352 106.788 li
258.036 106.408 li
258.706 106.408 li
259.412 106.028 li
260.25 106.028 li
260.852 105.649 li
261.467 105.269 li
262.001 105.269 li
262.64 104.129 li
263.311 103.369 li
264.011 103.369 li
264.505 103.369 li
265.285 102.23 li
265.801 101.851 li
266.47 101.471 li
267.165 101.091 li
267.788 100.711 li
268.418 100.331 li
268.886 99.192 li
269.696 98.4319 li
270.308 98.4319 li
270.82 98.0529 li
271.239 97.293 li
271.857 96.9129 li
272.479 96.5329 li
272.927 96.5329 li
273.578 96.153 li
274.09 95.3939 li
274.811 95.3939 li
275.441 95.3939 li
276.149 94.254 li
276.797 94.254 li
277.333 93.4949 li
277.803 93.4949 li
278.281 92.7349 li
278.888 92.7349 li
279.445 92.3549 li
280.15 91.976 li
280.659 91.596 li
281.109 91.596 li
281.692 91.216 li
282.239 90.836 li
282.778 90.4559 li
283.271 90.0759 li
283.663 90.0759 li
284.272 88.5569 li
284.755 87.418 li
285.208 87.0379 li
285.888 87.0379 li
286.271 86.6579 li
286.79 86.6579 li
287.364 86.6579 li
287.876 86.6579 li
288.268 85.898 li
288.836 85.519 li
289.395 85.519 li
289.886 85.1389 li
290.389 85.1389 li
290.998 85.1389 li
291.502 84.7589 li
291.871 83.6199 li
292.416 83.2399 li
292.952 83.2399 li
293.541 82.4799 li
294.051 81.721 li
294.536 80.961 li
295.038 80.961 li
295.525 80.961 li
296.165 80.961 li
296.738 80.961 li
297.263 80.5819 li
297.771 80.2009 li
298.159 80.2009 li
298.571 80.2009 li
298.993 79.442 li
299.475 79.062 li
299.979 79.062 li
300.502 77.5419 li
301.025 77.5419 li
301.526 77.5419 li
301.945 77.5419 li
302.412 77.1629 li
302.931 77.1629 li
303.429 77.1629 li
303.931 77.1629 li
304.384 76.4029 li
304.793 76.4029 li
305.226 76.4029 li
305.726 76.4029 li
306.224 76.4029 li
306.663 76.024 li
307.085 76.024 li
307.579 75.644 li
308.083 75.644 li
308.58 75.2639 li
309.026 75.2639 li
309.561 74.5039 li
310.025 74.5039 li
310.544 74.5039 li
310.985 73.744 li
311.404 73.744 li
311.877 73.744 li
312.275 73.3649 li
312.755 73.3649 li
313.266 73.3649 li
313.755 73.3649 li
314.278 73.3649 li
314.743 73.3649 li
315.188 73.3649 li
315.64 73.3649 li
316.142 72.6049 li
316.612 72.6049 li
317.074 72.2259 li
317.505 72.2259 li
317.918 71.846 li
318.399 71.846 li
318.808 71.846 li
319.174 71.846 li
319.601 71.466 li
319.997 70.3269 li
320.436 69.946 li
320.866 69.567 li
321.272 69.567 li
321.614 69.187 li
321.989 68.4279 li
322.331 68.048 li
322.73 68.048 li
323.11 67.668 li
323.451 66.9079 li
323.846 66.9079 li
324.233 66.9079 li
324.643 66.9079 li
325.041 66.9079 li
325.394 66.9079 li
325.742 66.9079 li
326.126 65.769 li
326.474 65.3889 li
326.888 65.3889 li
327.274 65.3889 li
327.599 65.0089 li
328.001 65.0089 li
328.39 64.6289 li
328.791 64.6289 li
329.17 64.6289 li
329.545 64.6289 li
329.938 64.249 li
330.333 64.249 li
330.722 63.4899 li
331.074 63.1099 li
331.444 63.1099 li
331.756 62.3509 li
332.099 61.971 li
332.442 60.4509 li
332.825 60.071 li
333.135 60.071 li
333.497 59.692 li
333.888 59.692 li
334.302 59.692 li
334.619 58.5529 li
334.932 57.793 li
335.27 57.793 li
335.64 57.793 li
335.933 57.793 li
336.287 57.793 li
336.598 57.4129 li
336.951 57.4129 li
337.289 57.0329 li
337.572 57.0329 li
337.893 56.273 li
338.227 56.273 li
338.592 55.5139 li
338.849 55.5139 li
339.164 54.7549 li
339.541 54.374 li
339.886 54.374 li
340.181 53.6149 li
340.487 53.6149 li
340.777 53.6149 li
341.075 53.6149 li
341.361 53.6149 li
341.694 53.6149 li
341.977 53.6149 li
342.268 53.2349 li
342.523 53.2349 li
342.838 52.8549 li
343.134 52.4749 li
343.415 52.4749 li
343.741 52.4749 li
344.011 52.096 li
344.324 51.716 li
344.627 51.716 li
344.957 51.716 li
345.229 50.9569 li
345.511 50.5759 li
345.831 49.817 li
346.128 49.817 li
346.42 49.817 li
346.7 49.0569 li
346.956 48.6769 li
347.254 48.298 li
347.562 48.298 li
347.85 48.298 li
348.155 48.298 li
348.436 48.298 li
348.71 48.298 li
348.984 48.298 li
349.249 47.9169 li
349.55 47.9169 li
349.813 47.5379 li
350.065 47.1579 li
350.355 47.1579 li
350.602 47.1579 li
350.825 46.7779 li
351.076 46.7779 li
351.344 46.7779 li
351.591 46.7779 li
351.867 46.7779 li
352.129 46.7779 li
352.385 46.399 li
352.618 45.6389 li
352.87 45.2589 li
353.124 44.8789 li
353.384 44.4999 li
353.619 44.4999 li
353.897 44.119 li
354.149 44.119 li
354.383 44.119 li
354.652 43.7399 li
354.912 43.7399 li
355.139 43.7399 li
355.379 43.7399 li
355.57 43.3599 li
355.829 43.3599 li
356.047 42.9799 li
356.282 42.6009 li
356.527 42.221 li
356.756 42.221 li
356.971 41.461 li
357.195 41.461 li
357.389 41.0809 li
357.597 41.0809 li
357.806 40.321 li
358.013 40.321 li
358.234 40.321 li
358.436 40.321 li
358.636 40.321 li
358.844 40.321 li
359.049 40.321 li
359.255 39.942 li
359.449 39.942 li
359.637 39.942 li
359.847 39.942 li
360.056 39.562 li
360.268 39.1819 li
360.461 39.1819 li
360.654 39.1819 li
360.856 38.8029 li
361.056 38.4229 li
361.249 38.4229 li
361.456 38.0429 li
361.665 38.0429 li
361.841 38.0429 li
362.036 38.0429 li
362.233 38.0429 li
362.396 38.0429 li
362.589 38.0429 li
362.759 38.0429 li
362.936 37.2829 li
363.135 36.5229 li
363.299 36.5229 li
363.461 36.144 li
363.62 36.144 li
363.801 36.144 li
363.995 36.144 li
364.151 36.144 li
364.303 36.144 li
364.49 36.144 li
364.652 36.144 li
364.843 36.144 li
365.002 35.7639 li
365.156 35.7639 li
365.346 35.7639 li
365.518 35.7639 li
365.667 35.7639 li
365.836 35.3839 li
366.007 35.0039 li
366.166 34.624 li
366.318 34.624 li
366.47 33.865 li
366.631 33.865 li
366.797 33.865 li
366.943 33.865 li
367.097 33.865 li
367.261 33.865 li
367.439 33.865 li
367.57 33.865 li
367.724 33.865 li
367.898 33.865 li
368.056 33.865 li
368.197 33.485 li
368.327 33.485 li
368.465 33.485 li
368.619 33.1049 li
368.778 33.1049 li
368.923 33.1049 li
369.057 32.7259 li
369.208 32.7259 li
369.349 32.7259 li
369.468 32.3459 li
369.599 32.3459 li
369.738 32.3459 li
369.861 32.3459 li
370.007 32.3459 li
370.143 32.3459 li
370.273 31.9659 li
370.395 31.9659 li
370.522 31.9659 li
370.636 31.9659 li
370.745 31.9659 li
370.906 31.9659 li
371.024 31.5859 li
371.155 31.5859 li
371.264 31.5859 li
371.393 31.5859 li
371.504 31.2059 li
371.629 31.2059 li
371.732 31.2059 li
371.856 31.2059 li
371.969 31.2059 li
372.091 30.8259 li
372.218 30.446 li
372.352 30.446 li
372.463 30.067 li
372.567 30.067 li
372.671 30.067 li
372.799 30.067 li
372.904 30.067 li
373.021 30.067 li
373.127 29.687 li
373.229 29.3069 li
373.33 29.3069 li
373.447 29.3069 li
373.544 28.9279 li
373.649 28.9279 li
373.751 28.9279 li
373.855 28.547 li
373.968 28.547 li
374.074 28.547 li
374.169 28.547 li
374.264 28.547 li
374.354 28.547 li
374.463 28.547 li
374.551 28.547 li
374.647 28.547 li
374.742 28.547 li
374.834 28.547 li
374.936 28.1679 li
375.026 28.1679 li
375.106 27.7879 li
375.202 27.7879 li
375.31 27.7879 li
375.388 27.7879 li
375.487 27.7879 li
375.575 27.4079 li
375.655 27.4079 li
375.741 27.4079 li
375.824 27.4079 li
375.913 27.4079 li
375.993 27.4079 li
376.084 27.4079 li
376.169 27.4079 li
376.253 27.4079 li
376.326 27.4079 li
376.408 27.4079 li
376.493 27.0279 li
376.577 27.0279 li
376.658 27.0279 li
376.733 27.0279 li
376.814 27.0279 li
376.884 27.0279 li
376.95 27.0279 li
377.016 27.0279 li
377.084 27.0279 li
377.169 27.0279 li
377.231 27.0279 li
377.314 27.0279 li
377.384 26.6479 li
377.456 26.6479 li
377.531 26.6479 li
377.608 26.269 li
377.677 26.269 li
377.743 26.269 li
377.806 25.8889 li
377.885 25.8889 li
377.96 25.8889 li
378.027 25.5089 li
378.088 25.5089 li
378.145 25.5089 li
378.212 25.5089 li
378.277 25.5089 li
378.342 25.1299 li
378.402 25.1299 li
378.455 25.1299 li
378.52 25.1299 li
378.573 25.1299 li
378.638 25.1299 li
378.706 25.1299 li
378.774 25.1299 li
378.835 25.1299 li
378.887 25.1299 li
378.954 25.1299 li
379.019 25.1299 li
379.086 24.37 li
379.145 24.37 li
379.202 24.37 li
379.272 24.37 li
379.321 24.37 li
379.371 23.99 li
379.423 23.99 li
379.49 23.99 li
379.549 23.99 li
379.604 23.99 li
379.654 23.99 li
379.707 23.99 li
379.756 23.99 li
379.811 23.99 li
379.865 23.99 li
379.916 23.99 li
379.963 23.99 li
380.019 23.99 li
380.063 23.99 li
380.11 23.99 li
380.159 23.99 li
380.206 23.99 li
380.255 23.99 li
380.31 23.99 li
380.358 23.99 li
380.401 23.99 li
380.456 23.99 li
380.51 23.99 li
380.561 23.99 li
380.603 23.99 li
380.646 23.99 li
380.692 23.99 li
380.749 23.99 li
380.788 23.99 li
380.829 23.99 li
380.871 23.99 li
380.907 23.99 li
380.946 23.99 li
380.983 23.99 li
381.031 23.99 li
381.083 23.99 li
381.119 23.99 li
381.153 23.99 li
381.18 23.99 li
381.224 23.99 li
381.264 23.99 li
381.302 23.99 li
381.344 23.99 li
381.382 23.99 li
381.423 23.99 li
381.468 23.99 li
381.498 23.99 li
381.526 23.99 li
381.563 23.99 li
381.6 23.99 li
381.635 23.61 li
381.676 23.61 li
381.711 23.61 li
381.742 23.61 li
381.773 23.61 li
381.805 23.2299 li
381.829 23.2299 li
381.863 23.2299 li
381.904 22.8499 li
381.937 22.8499 li
381.976 22.8499 li
382.01 22.8499 li
382.042 22.8499 li
382.074 22.8499 li
382.112 22.8499 li
382.15 22.8499 li
382.187 22.8499 li
382.223 22.8499 li
382.249 22.8499 li
382.274 22.8499 li
382.301 22.8499 li
382.33 22.8499 li
382.364 22.8499 li
382.389 22.8499 li
382.419 22.8499 li
382.449 22.8499 li
382.48 22.4709 li
382.512 22.4709 li
382.543 22.4709 li
382.567 22.4709 li
382.593 22.4709 li
382.62 22.0909 li
382.646 22.0909 li
382.676 21.7109 li
382.708 21.7109 li
382.735 21.7109 li
382.757 21.7109 li
382.79 21.7109 li
382.818 21.7109 li
382.845 21.7109 li
382.871 21.7109 li
382.897 21.7109 li
382.924 21.7109 li
382.944 21.7109 li
382.963 21.7109 li
382.985 21.7109 li
383.011 21.7109 li
383.029 21.7109 li
383.054 21.7109 li
383.073 21.7109 li
383.097 21.7109 li
383.117 21.7109 li
383.147 21.7109 li
383.178 21.7109 li
383.204 21.7109 li
383.219 21.7109 li
383.242 21.7109 li
383.262 21.7109 li
383.283 21.7109 li
383.306 21.3319 li
383.327 21.3319 li
383.347 21.3319 li
383.368 21.3319 li
383.388 21.3319 li
383.413 21.3319 li
383.431 21.3319 li
383.456 20.9509 li
383.475 20.9509 li
383.499 20.9509 li
383.52 20.9509 li
383.544 20.9509 li
383.565 20.9509 li
383.59 20.9509 li
383.608 20.9509 li
383.628 20.9509 li
383.648 20.9509 li
383.664 20.9509 li
383.68 20.9509 li
383.699 20.9509 li
383.718 20.9509 li
383.737 20.9509 li
383.755 20.9509 li
383.772 20.572 li
383.789 20.572 li
383.806 20.192 li
383.83 20.192 li
383.848 20.192 li
383.862 20.192 li
383.878 20.192 li
383.896 20.192 li
383.915 20.192 li
383.934 20.192 li
383.951 20.192 li
383.968 20.192 li
383.985 20.192 li
384.002 20.192 li
384.021 20.192 li
384.04 20.192 li
384.053 20.192 li
384.071 20.192 li
384.085 20.192 li
384.095 20.192 li
384.11 20.192 li
384.124 20.192 li
384.136 20.192 li
384.156 20.192 li
384.172 20.192 li
384.185 20.192 li
384.197 20.192 li
384.217 20.192 li
384.232 20.192 li
384.249 20.192 li
384.268 20.192 li
384.287 20.192 li
384.304 20.192 li
384.32 20.192 li
384.336 20.192 li
384.351 20.192 li
384.361 20.192 li
384.374 20.192 li
384.389 20.192 li
384.406 20.192 li
384.42 20.192 li
384.436 20.192 li
384.448 20.192 li
384.46 20.192 li
384.474 20.192 li
384.486 20.192 li
384.501 20.192 li
384.511 20.192 li
384.524 20.192 li
384.537 20.192 li
384.551 20.192 li
384.561 20.192 li
384.574 20.192 li
384.586 20.192 li
384.594 20.192 li
384.604 20.192 li
384.613 20.192 li
384.622 20.192 li
384.635 20.192 li
384.649 19.812 li
384.661 19.812 li
384.674 19.812 li
384.686 19.812 li
384.695 19.812 li
384.708 19.812 li
384.719 19.812 li
384.729 19.812 li
384.74 19.812 li
384.747 19.812 li
384.756 19.812 li
384.766 19.812 li
384.772 19.812 li
384.784 19.812 li
384.795 19.812 li
384.808 19.812 li
384.819 19.812 li
384.831 19.812 li
384.839 19.812 li
384.849 19.812 li
384.861 19.812 li
384.875 19.812 li
384.883 19.812 li
384.889 19.812 li
384.899 19.812 li
384.908 19.812 li
384.922 19.812 li
384.929 19.812 li
384.939 19.812 li
384.948 19.812 li
384.956 19.812 li
384.964 19.812 li
384.97 19.812 li
384.978 19.812 li
384.99 19.812 li
385 19.812 li
385.009 19.812 li
385.018 19.812 li
385.025 19.812 li
385.033 19.812 li
385.04 19.812 li
385.044 19.812 li
385.052 19.812 li
385.06 19.812 li
385.065 19.812 li
385.073 19.812 li
385.081 19.812 li
385.088 19.812 li
385.095 19.812 li
385.106 19.812 li
385.111 19.812 li
385.12 19.812 li
385.127 19.812 li
385.133 19.812 li
385.139 19.812 li
385.144 19.812 li
385.149 19.812 li
385.154 19.812 li
385.16 19.812 li
385.166 19.812 li
385.172 19.812 li
385.18 19.812 li
385.186 19.812 li
385.193 19.812 li
385.197 19.812 li
385.202 19.812 li
385.21 19.812 li
385.217 19.812 li
385.225 19.812 li
385.231 19.812 li
385.238 19.812 li
385.249 19.812 li
385.256 19.812 li
385.261 19.812 li
385.266 19.812 li
385.273 19.812 li
385.277 19.812 li
385.29 19.812 li
385.297 19.812 li
385.302 19.812 li
385.308 19.812 li
385.313 19.812 li
385.322 19.812 li
385.326 19.812 li
385.333 19.812 li
385.339 19.812 li
385.343 19.812 li
385.348 19.812 li
385.352 19.812 li
385.361 19.812 li
385.367 19.812 li
385.372 19.812 li
385.375 19.812 li
385.385 19.812 li
385.388 19.812 li
385.391 19.812 li
385.398 19.812 li
385.406 19.812 li
385.41 19.812 li
385.415 19.812 li
385.421 19.812 li
385.425 19.812 li
385.429 19.812 li
385.433 19.812 li
385.436 19.812 li
385.439 19.812 li
385.442 19.812 li
385.446 19.812 li
385.451 19.812 li
385.455 19.812 li
385.458 19.812 li
385.463 19.812 li
385.466 19.812 li
385.473 19.812 li
385.477 19.812 li
385.482 19.812 li
385.486 19.812 li
385.487 19.812 li
385.49 19.812 li
385.493 19.812 li
385.495 19.812 li
385.5 19.812 li
385.503 19.812 li
385.506 19.812 li
385.511 19.812 li
385.514 19.812 li
385.517 19.812 li
385.523 19.812 li
385.526 19.812 li
385.529 19.812 li
385.535 19.812 li
385.541 19.812 li
385.547 19.812 li
385.548 19.812 li
385.549 19.812 li
385.555 19.812 li
385.557 19.812 li
385.561 19.812 li
385.565 19.812 li
385.567 19.812 li
385.57 19.812 li
385.576 19.812 li
385.577 19.812 li
385.579 19.812 li
385.584 19.812 li
385.586 19.812 li
385.588 19.812 li
385.592 19.812 li
385.595 19.812 li
385.597 19.812 li
385.599 19.812 li
385.602 19.812 li
385.608 19.812 li
385.612 19.812 li
385.615 19.812 li
385.621 19.812 li
385.622 19.812 li
385.625 19.812 li
385.628 19.812 li
385.633 19.812 li
385.636 19.812 li
385.639 19.812 li
385.641 19.812 li
385.642 19.812 li
385.644 19.812 li
385.645 19.812 li
385.647 19.812 li
385.65 19.812 li
385.654 19.812 li
385.655 19.812 li
385.657 19.812 li
385.66 19.812 li
385.662 19.812 li
385.664 19.812 li
385.666 19.812 li
385.67 19.812 li
385.672 19.812 li
385.675 19.812 li
385.679 19.812 li
385.68 19.812 li
385.681 19.812 li
385.684 19.812 li
385.685 19.812 li
385.686 19.812 li
385.687 19.812 li
385.69 19.812 li
385.691 19.812 li
385.692 19.812 li
385.693 19.812 li
385.694 19.812 li
385.697 19.812 li
385.699 19.812 li
385.7 19.812 li
385.702 19.812 li
385.704 19.812 li
385.705 19.812 li
385.707 19.812 li
385.708 19.812 li
385.71 19.812 li
385.713 19.812 li
385.716 19.812 li
385.718 19.812 li
385.724 19.812 li
385.727 19.812 li
385.729 19.812 li
385.73 19.812 li
385.732 19.812 li
385.733 19.812 li
385.736 19.812 li
385.738 19.812 li
385.739 19.812 li
385.742 19.812 li
385.744 19.812 li
385.745 19.812 li
385.746 19.812 li
385.748 19.812 li
385.749 19.812 li
385.751 19.812 li
385.753 19.812 li
385.755 19.812 li
385.757 19.812 li
385.758 19.812 li
385.76 19.812 li
385.761 19.812 li
385.765 19.812 li
385.766 19.812 li
385.768 19.812 li
385.769 19.812 li
385.771 19.812 li
385.772 19.812 li
385.774 19.812 li
385.777 19.812 li
385.778 19.812 li
385.78 19.812 li
385.781 19.812 li
385.783 19.812 li
385.785 19.812 li
385.786 19.812 li
385.787 19.812 li
385.788 19.812 li
385.79 19.812 li
385.791 19.812 li
385.792 19.812 li
385.793 19.812 li
385.794 19.812 li
385.795 19.812 li
385.796 19.812 li
385.797 19.812 li
385.799 19.812 li
385.8 19.812 li
385.802 19.812 li
385.803 19.812 li
385.804 19.812 li
385.805 19.812 li
385.807 19.812 li
385.808 19.812 li
385.809 19.812 li
385.81 19.812 li
385.812 19.812 li
385.813 19.812 li
385.814 19.812 li
385.816 19.812 li
385.817 19.812 li
385.818 19.812 li
385.819 19.812 li
385.82 19.812 li
385.821 19.812 li
385.822 19.812 li
385.823 19.812 li
385.825 19.812 li
385.826 19.812 li
385.827 19.812 li
385.828 19.812 li
385.829 19.812 li
385.83 19.812 li
385.831 19.812 li
385.832 19.812 li
385.833 19.812 li
385.835 19.812 li
385.836 19.812 li
385.838 19.812 li
385.839 19.812 li
385.84 19.812 li
385.841 19.812 li
385.842 19.812 li
385.843 19.812 li
385.844 19.812 li
385.845 19.812 li
385.846 19.812 li
385.847 19.812 li
385.848 19.812 li
385.849 19.812 li
385.85 19.812 li
385.851 19.812 li
385.852 19.812 li
385.853 19.812 li
385.854 19.812 li
385.855 19.812 li
385.856 19.812 li
385.857 19.812 li
385.858 19.812 li
385.859 19.812 li
385.86 19.812 li
385.861 19.812 li
385.862 19.812 li
385.863 19.812 li
385.864 19.812 li
385.865 19.812 li
385.866 19.812 li
385.867 19.812 li
385.868 19.812 li
385.869 19.812 li
385.87 19.812 li
385.871 19.812 li
385.872 19.812 li
/1 
[/DeviceCMYK] /CSA add_res
.895628 .7673 0 0 cmyk
@
0 lj
49.5 191.524 mo
49.5 197.524 li
46.5 194.524 mo
52.5 194.524 li
47.3793 192.403 mo
51.6211 196.644 li
47.3793 196.644 mo
51.6211 192.403 li
@
71.9668 187.346 mo
71.9668 193.346 li
68.9668 190.346 mo
74.9668 190.346 li
69.8461 188.224 mo
74.0879 192.467 li
69.8461 192.467 mo
74.0879 188.224 li
@
71.9668 182.788 mo
71.9668 188.788 li
68.9668 185.788 mo
74.9668 185.788 li
69.8461 183.667 mo
74.0879 187.909 li
69.8461 187.909 mo
74.0879 183.667 li
@
71.9668 178.99 mo
71.9668 184.99 li
68.9668 181.99 mo
74.9668 181.99 li
69.8461 179.869 mo
74.0879 184.111 li
69.8461 184.111 mo
74.0879 179.869 li
@
85.1094 175.192 mo
85.1094 181.192 li
82.1094 178.192 mo
88.1095 178.192 li
82.9883 176.071 mo
87.2305 180.313 li
82.9883 180.313 mo
87.2305 176.071 li
@
98.2515 172.913 mo
98.2515 178.913 li
95.2515 175.913 mo
101.252 175.913 li
96.1305 173.792 mo
100.373 178.034 li
96.1305 178.034 mo
100.373 173.792 li
@
98.2515 169.115 mo
98.2515 175.115 li
95.2515 172.115 mo
101.252 172.115 li
96.1305 169.994 mo
100.373 174.236 li
96.1305 174.236 mo
100.373 169.994 li
@
107.577 166.076 mo
107.577 172.076 li
104.577 169.076 mo
110.577 169.076 li
105.456 166.955 mo
109.697 171.198 li
105.456 171.198 mo
109.697 166.955 li
@
120.719 162.278 mo
120.719 168.278 li
117.719 165.278 mo
123.719 165.278 li
118.598 163.157 mo
122.84 167.399 li
118.598 167.399 mo
122.84 163.157 li
@
125.715 158.86 mo
125.715 164.86 li
122.715 161.86 mo
128.715 161.86 li
123.594 159.739 mo
127.836 163.981 li
123.594 163.981 mo
127.836 159.739 li
@
135.04 153.923 mo
135.04 159.923 li
132.04 156.923 mo
138.04 156.923 li
132.919 154.801 mo
137.161 159.044 li
132.919 159.044 mo
137.161 154.801 li
@
142.272 150.884 mo
142.272 156.884 li
139.272 153.884 mo
145.272 153.884 li
140.152 151.763 mo
144.393 156.005 li
140.152 156.005 mo
144.393 151.763 li
@
152.51 147.846 mo
152.51 153.846 li
149.51 150.846 mo
155.51 150.846 li
150.389 148.724 mo
154.631 152.967 li
150.389 152.967 mo
154.631 148.724 li
@
162.337 144.427 mo
162.337 150.427 li
159.337 147.427 mo
165.337 147.427 li
160.217 145.307 mo
164.458 149.548 li
160.217 149.548 mo
164.458 145.307 li
@
172.523 139.87 mo
172.523 145.87 li
169.523 142.87 mo
175.523 142.87 li
170.402 140.749 mo
174.644 144.991 li
170.402 144.991 mo
174.644 140.749 li
@
179.974 136.451 mo
179.974 142.451 li
176.974 139.451 mo
182.974 139.451 li
177.852 137.33 mo
182.095 141.573 li
177.852 141.573 mo
182.095 137.33 li
@
189.443 133.793 mo
189.443 139.793 li
186.443 136.793 mo
192.443 136.793 li
187.322 134.672 mo
191.563 138.914 li
187.322 138.914 mo
191.563 134.672 li
@
198.442 130.754 mo
198.442 136.754 li
195.442 133.754 mo
201.442 133.754 li
196.32 131.633 mo
200.562 135.875 li
196.32 135.875 mo
200.562 131.633 li
@
207.766 128.475 mo
207.766 134.475 li
204.766 131.475 mo
210.766 131.475 li
205.645 129.355 mo
209.887 133.596 li
205.645 133.596 mo
209.887 129.355 li
@
216.627 125.817 mo
216.627 131.817 li
213.627 128.817 mo
219.627 128.817 li
214.506 126.696 mo
218.748 130.938 li
214.506 130.938 mo
218.748 126.696 li
@
224.979 123.158 mo
224.979 129.158 li
221.979 126.158 mo
227.979 126.158 li
222.858 124.037 mo
227.101 128.279 li
222.858 128.279 mo
227.101 124.037 li
@
231.791 118.221 mo
231.791 124.221 li
228.791 121.221 mo
234.791 121.221 li
229.67 119.099 mo
233.912 123.342 li
229.67 123.342 mo
233.912 119.099 li
@
238.338 114.423 mo
238.338 120.423 li
235.338 117.423 mo
241.338 117.423 li
236.217 115.301 mo
240.459 119.544 li
236.217 119.544 mo
240.459 115.301 li
@
243.375 111.384 mo
243.375 117.384 li
240.375 114.384 mo
246.375 114.384 li
241.254 112.263 mo
245.496 116.505 li
241.254 116.505 mo
245.496 112.263 li
@
249.812 109.485 mo
249.812 115.485 li
246.812 112.485 mo
252.812 112.485 li
247.691 110.364 mo
251.933 114.606 li
247.691 114.606 mo
251.933 110.364 li
@
256.298 104.927 mo
256.298 110.927 li
253.298 107.927 mo
259.298 107.927 li
254.177 105.807 mo
258.419 110.048 li
254.177 110.048 mo
258.419 105.807 li
@
262.64 101.129 mo
262.64 107.129 li
259.64 104.129 mo
265.64 104.129 li
260.519 102.008 mo
264.761 106.25 li
260.519 106.25 mo
264.761 102.008 li
@
268.886 96.192 mo
268.886 102.192 li
265.886 99.192 mo
271.886 99.192 li
266.765 97.0709 mo
271.008 101.313 li
266.765 101.313 mo
271.008 97.0709 li
@
274.811 92.3939 mo
274.811 98.3939 li
271.811 95.3939 mo
277.811 95.3939 li
272.69 93.2729 mo
276.933 97.515 li
272.69 97.515 mo
276.933 93.2729 li
@
280.659 88.596 mo
280.659 94.5959 li
277.659 91.596 mo
283.659 91.596 li
278.538 89.474 mo
282.78 93.7169 li
278.538 93.7169 mo
282.78 89.474 li
@
285.888 84.0379 mo
285.888 90.0379 li
282.888 87.0379 mo
288.888 87.0379 li
283.767 84.9169 mo
288.009 89.159 li
283.767 89.159 mo
288.009 84.9169 li
@
290.997 82.1389 mo
290.997 88.1389 li
287.997 85.1389 mo
293.997 85.1389 li
288.876 83.018 mo
293.118 87.2599 li
288.876 87.2599 mo
293.118 83.018 li
@
296.166 77.961 mo
296.166 83.961 li
293.166 80.961 mo
299.166 80.961 li
294.045 78.84 mo
298.286 83.0819 li
294.045 83.0819 mo
298.286 78.84 li
@
301.025 74.543 mo
301.025 80.543 li
298.025 77.543 mo
304.025 77.543 li
298.904 75.422 mo
303.146 79.664 li
298.904 79.664 mo
303.146 75.422 li
@
305.726 73.4029 mo
305.726 79.4029 li
302.726 76.4029 mo
308.726 76.4029 li
303.605 74.2819 mo
307.847 78.524 li
303.605 78.524 mo
307.847 74.2819 li
@
310.545 71.5039 mo
310.545 77.5039 li
307.545 74.5039 mo
313.545 74.5039 li
308.424 72.3829 mo
312.665 76.6249 li
308.424 76.6249 mo
312.665 72.3829 li
@
315.188 70.3649 mo
315.188 76.3649 li
312.188 73.3649 mo
318.188 73.3649 li
313.067 71.244 mo
317.309 75.4859 li
313.067 75.4859 mo
317.309 71.244 li
@
319.601 68.466 mo
319.601 74.466 li
316.601 71.466 mo
322.601 71.466 li
317.48 69.345 mo
321.722 73.5869 li
317.48 73.5869 mo
321.722 69.345 li
@
323.451 63.9079 mo
323.451 69.9079 li
320.451 66.9079 mo
326.451 66.9079 li
321.33 64.7869 mo
325.572 69.0289 li
321.33 69.0289 mo
325.572 64.7869 li
@
327.274 62.3889 mo
327.274 68.3889 li
324.274 65.3889 mo
330.274 65.3889 li
325.153 63.268 mo
329.395 67.5099 li
325.153 67.5099 mo
329.395 63.268 li
@
331.074 60.1099 mo
331.074 66.1099 li
328.074 63.1099 mo
334.074 63.1099 li
328.953 60.989 mo
333.195 65.2309 li
328.953 65.2309 mo
333.195 60.989 li
@
334.62 55.5519 mo
334.62 61.5519 li
331.62 58.5519 mo
337.62 58.5519 li
332.499 56.4319 mo
336.74 60.673 li
332.499 60.673 mo
336.74 56.4319 li
@
337.893 53.273 mo
337.893 59.273 li
334.893 56.273 mo
340.893 56.273 li
335.772 54.1529 mo
340.014 58.394 li
335.772 58.394 mo
340.014 54.1529 li
@
341.075 50.6149 mo
341.075 56.6149 li
338.075 53.6149 mo
344.075 53.6149 li
338.954 51.494 mo
343.196 55.7359 li
338.954 55.7359 mo
343.196 51.494 li
@
344.011 49.096 mo
344.011 55.096 li
341.011 52.096 mo
347.011 52.096 li
341.89 49.974 mo
346.133 54.2169 li
341.89 54.2169 mo
346.133 49.974 li
@
346.956 45.6769 mo
346.956 51.6769 li
343.956 48.6769 mo
349.956 48.6769 li
344.835 46.5569 mo
349.077 50.798 li
344.835 50.798 mo
349.077 46.5569 li
@
349.813 44.5379 mo
349.813 50.5379 li
346.813 47.5379 mo
352.813 47.5379 li
347.692 45.4169 mo
351.935 49.659 li
347.692 49.659 mo
351.935 45.4169 li
@
352.384 43.398 mo
352.384 49.398 li
349.384 46.398 mo
355.384 46.398 li
350.263 44.2779 mo
354.505 48.519 li
350.263 48.519 mo
354.505 44.2779 li
@
354.912 40.7399 mo
354.912 46.7399 li
351.912 43.7399 mo
357.912 43.7399 li
352.791 41.619 mo
357.033 45.8609 li
352.791 45.8609 mo
357.033 41.619 li
@
357.195 38.4609 mo
357.195 44.461 li
354.195 41.461 mo
360.195 41.461 li
355.074 39.3399 mo
359.316 43.5819 li
355.074 43.5819 mo
359.316 39.3399 li
@
359.255 36.942 mo
359.255 42.942 li
356.255 39.942 mo
362.255 39.942 li
357.134 37.821 mo
361.376 42.0629 li
357.134 42.0629 mo
361.376 37.821 li
@
361.249 35.4229 mo
361.249 41.423 li
358.249 38.4229 mo
364.249 38.4229 li
359.128 36.3009 mo
363.37 40.5439 li
359.128 40.5439 mo
363.37 36.3009 li
@
363.135 33.524 mo
363.135 39.524 li
360.135 36.524 mo
366.135 36.524 li
361.014 34.4029 mo
365.256 38.644 li
361.014 38.644 mo
365.256 34.4029 li
@
364.842 33.144 mo
364.842 39.144 li
361.842 36.144 mo
367.842 36.144 li
362.721 34.0229 mo
366.963 38.265 li
362.721 38.265 mo
366.963 34.0229 li
@
366.47 30.865 mo
366.47 36.865 li
363.47 33.865 mo
369.47 33.865 li
364.349 31.744 mo
368.591 35.9859 li
364.349 35.9859 mo
368.591 31.744 li
@
368.056 30.865 mo
368.056 36.865 li
365.056 33.865 mo
371.056 33.865 li
365.935 31.744 mo
370.177 35.9859 li
365.935 35.9859 mo
370.177 31.744 li
@
369.468 29.3459 mo
369.468 35.3459 li
366.468 32.3459 mo
372.468 32.3459 li
367.347 30.224 mo
371.589 34.4669 li
367.347 34.4669 mo
371.589 30.224 li
@
370.745 28.9659 mo
370.745 34.9659 li
367.745 31.9659 mo
373.745 31.9659 li
368.624 29.8449 mo
372.866 34.0869 li
368.624 34.0869 mo
372.866 29.8449 li
@
371.969 28.2059 mo
371.969 34.2059 li
368.969 31.2059 mo
374.969 31.2059 li
369.848 29.0849 mo
374.09 33.3269 li
369.848 33.3269 mo
374.09 29.0849 li
@
373.127 26.687 mo
373.127 32.687 li
370.127 29.687 mo
376.127 29.687 li
371.006 27.5659 mo
375.249 31.808 li
371.006 31.808 mo
375.249 27.5659 li
@
374.168 25.5479 mo
374.168 31.5479 li
371.168 28.5479 mo
377.168 28.5479 li
372.048 26.4259 mo
376.29 30.6689 li
372.048 30.6689 mo
376.29 26.4259 li
@
375.106 24.7879 mo
375.106 30.7879 li
372.106 27.7879 mo
378.106 27.7879 li
372.985 25.667 mo
377.227 29.9089 li
372.985 29.9089 mo
377.227 25.667 li
@
375.993 24.4079 mo
375.993 30.4079 li
372.993 27.4079 mo
378.993 27.4079 li
373.872 25.287 mo
378.114 29.5289 li
373.872 29.5289 mo
378.114 25.287 li
@
376.815 24.0279 mo
376.815 30.0279 li
373.815 27.0279 mo
379.815 27.0279 li
374.693 24.907 mo
378.936 29.149 li
374.693 29.149 mo
378.936 24.907 li
@
377.53 23.649 mo
377.53 29.649 li
374.53 26.649 mo
380.53 26.649 li
375.409 24.5279 mo
379.651 28.769 li
375.409 28.769 mo
379.651 24.5279 li
@
378.213 22.5089 mo
378.213 28.5089 li
375.213 25.5089 mo
381.213 25.5089 li
376.092 23.3879 mo
380.334 27.6299 li
376.092 27.6299 mo
380.334 23.3879 li
@
378.835 22.1289 mo
378.835 28.1289 li
375.835 25.1289 mo
381.835 25.1289 li
376.714 23.0079 mo
380.956 27.2499 li
376.714 27.2499 mo
380.956 23.0079 li
@
379.422 20.99 mo
379.422 26.99 li
376.422 23.99 mo
382.422 23.99 li
377.301 21.869 mo
381.543 26.1109 li
377.301 26.1109 mo
381.543 21.869 li
@
379.964 20.99 mo
379.964 26.99 li
376.964 23.99 mo
382.964 23.99 li
377.843 21.869 mo
382.085 26.1109 li
377.843 26.1109 mo
382.085 21.869 li
@
380.456 20.99 mo
380.456 26.99 li
377.456 23.99 mo
383.456 23.99 li
378.335 21.869 mo
382.577 26.1109 li
378.335 26.1109 mo
382.577 21.869 li
@
380.907 20.99 mo
380.907 26.99 li
377.907 23.99 mo
383.907 23.99 li
378.786 21.869 mo
383.028 26.1109 li
378.786 26.1109 mo
383.028 21.869 li
@
381.301 20.99 mo
381.301 26.99 li
378.301 23.99 mo
384.301 23.99 li
379.181 21.869 mo
383.422 26.1109 li
379.181 26.1109 mo
383.422 21.869 li
@
381.676 20.61 mo
381.676 26.61 li
378.676 23.61 mo
384.676 23.61 li
379.554 21.489 mo
383.797 25.7309 li
379.554 25.7309 mo
383.797 21.489 li
@
382.01 19.8499 mo
382.01 25.8499 li
379.01 22.8499 mo
385.01 22.8499 li
379.889 20.7299 mo
384.131 24.9709 li
379.889 24.9709 mo
384.131 20.7299 li
@
382.33 19.8499 mo
382.33 25.8499 li
379.33 22.8499 mo
385.33 22.8499 li
380.209 20.7299 mo
384.451 24.9709 li
380.209 24.9709 mo
384.451 20.7299 li
@
382.62 19.0909 mo
382.62 25.0909 li
379.62 22.0909 mo
385.62 22.0909 li
380.499 19.9699 mo
384.741 24.2119 li
380.499 24.2119 mo
384.741 19.9699 li
@
382.897 18.7109 mo
382.897 24.7109 li
379.897 21.7109 mo
385.897 21.7109 li
380.776 19.5899 mo
385.018 23.8319 li
380.776 23.8319 mo
385.018 19.5899 li
@
383.117 18.7109 mo
383.117 24.7109 li
380.117 21.7109 mo
386.117 21.7109 li
380.996 19.5899 mo
385.238 23.8319 li
380.996 23.8319 mo
385.238 19.5899 li
@
383.347 18.3309 mo
383.347 24.3309 li
380.347 21.3309 mo
386.347 21.3309 li
381.226 19.2099 mo
385.468 23.4519 li
381.226 23.4519 mo
385.468 19.2099 li
@
383.565 17.9509 mo
383.565 23.9509 li
380.565 20.9509 mo
386.565 20.9509 li
381.444 18.8299 mo
385.686 23.073 li
381.444 23.073 mo
385.686 18.8299 li
@
383.755 17.9509 mo
383.755 23.9509 li
380.755 20.9509 mo
386.755 20.9509 li
381.634 18.8299 mo
385.876 23.073 li
381.634 23.073 mo
385.876 18.8299 li
@
383.934 17.192 mo
383.934 23.192 li
380.934 20.192 mo
386.934 20.192 li
381.813 18.071 mo
386.055 22.313 li
381.813 22.313 mo
386.055 18.071 li
@
384.095 17.192 mo
384.095 23.192 li
381.095 20.192 mo
387.095 20.192 li
381.974 18.071 mo
386.216 22.313 li
381.974 22.313 mo
386.216 18.071 li
@
384.249 17.192 mo
384.249 23.192 li
381.249 20.192 mo
387.249 20.192 li
382.128 18.071 mo
386.37 22.313 li
382.128 22.313 mo
386.37 18.071 li
@
384.407 17.192 mo
384.407 23.192 li
381.407 20.192 mo
387.407 20.192 li
382.286 18.071 mo
386.527 22.313 li
382.286 22.313 mo
386.527 18.071 li
@
384.537 17.192 mo
384.537 23.192 li
381.537 20.192 mo
387.537 20.192 li
382.416 18.071 mo
386.658 22.313 li
382.416 22.313 mo
386.658 18.071 li
@
384.649 16.812 mo
384.649 22.812 li
381.649 19.812 mo
387.649 19.812 li
382.527 17.6909 mo
386.769 21.933 li
382.527 21.933 mo
386.769 17.6909 li
@
384.756 16.812 mo
384.756 22.812 li
381.756 19.812 mo
387.756 19.812 li
382.635 17.6909 mo
386.877 21.933 li
382.635 21.933 mo
386.877 17.6909 li
@
384.861 16.812 mo
384.861 22.812 li
381.861 19.812 mo
387.861 19.812 li
382.74 17.6909 mo
386.982 21.933 li
382.74 21.933 mo
386.982 17.6909 li
@
384.956 16.812 mo
384.956 22.812 li
381.956 19.812 mo
387.956 19.812 li
382.835 17.6909 mo
387.076 21.933 li
382.835 21.933 mo
387.076 17.6909 li
@
385.04 16.812 mo
385.04 22.812 li
382.04 19.812 mo
388.04 19.812 li
382.919 17.6909 mo
387.161 21.933 li
382.919 21.933 mo
387.161 17.6909 li
@
385.111 16.812 mo
385.111 22.812 li
382.111 19.812 mo
388.111 19.812 li
382.99 17.6909 mo
387.232 21.933 li
382.99 21.933 mo
387.232 17.6909 li
@
385.172 16.812 mo
385.172 22.812 li
382.172 19.812 mo
388.172 19.812 li
383.052 17.6909 mo
387.293 21.933 li
383.052 21.933 mo
387.293 17.6909 li
@
385.238 16.812 mo
385.238 22.812 li
382.238 19.812 mo
388.238 19.812 li
383.117 17.6909 mo
387.358 21.933 li
383.117 21.933 mo
387.358 17.6909 li
@
385.308 16.812 mo
385.308 22.812 li
382.308 19.812 mo
388.308 19.812 li
383.187 17.6909 mo
387.429 21.933 li
383.187 21.933 mo
387.429 17.6909 li
@
385.367 16.812 mo
385.367 22.812 li
382.367 19.812 mo
388.367 19.812 li
383.246 17.6909 mo
387.488 21.933 li
383.246 21.933 mo
387.488 17.6909 li
@
385.422 16.812 mo
385.422 22.812 li
382.422 19.812 mo
388.422 19.812 li
383.301 17.6909 mo
387.543 21.933 li
383.301 21.933 mo
387.543 17.6909 li
@
385.458 16.812 mo
385.458 22.812 li
382.458 19.812 mo
388.458 19.812 li
383.337 17.6909 mo
387.579 21.933 li
383.337 21.933 mo
387.579 17.6909 li
@
385.496 16.812 mo
385.496 22.812 li
382.496 19.812 mo
388.496 19.812 li
383.375 17.6909 mo
387.617 21.933 li
383.375 21.933 mo
387.617 17.6909 li
@
385.535 16.812 mo
385.535 22.812 li
382.535 19.812 mo
388.535 19.812 li
383.413 17.6909 mo
387.656 21.933 li
383.413 21.933 mo
387.656 17.6909 li
@
385.57 16.812 mo
385.57 22.812 li
382.57 19.812 mo
388.57 19.812 li
383.449 17.6909 mo
387.691 21.933 li
383.449 21.933 mo
387.691 17.6909 li
@
385.599 16.812 mo
385.599 22.812 li
382.599 19.812 mo
388.599 19.812 li
383.478 17.6909 mo
387.72 21.933 li
383.478 21.933 mo
387.72 17.6909 li
@
385.636 16.812 mo
385.636 22.812 li
382.636 19.812 mo
388.636 19.812 li
383.515 17.6909 mo
387.757 21.933 li
383.515 21.933 mo
387.757 17.6909 li
@
385.657 16.812 mo
385.657 22.812 li
382.657 19.812 mo
388.657 19.812 li
383.536 17.6909 mo
387.778 21.933 li
383.536 21.933 mo
387.778 17.6909 li
@
385.682 16.812 mo
385.682 22.812 li
382.682 19.812 mo
388.682 19.812 li
383.561 17.6909 mo
387.803 21.933 li
383.561 21.933 mo
387.803 17.6909 li
@
385.695 16.812 mo
385.695 22.812 li
382.695 19.812 mo
388.695 19.812 li
383.574 17.6909 mo
387.815 21.933 li
383.574 21.933 mo
387.815 17.6909 li
@
385.71 16.812 mo
385.71 22.812 li
382.71 19.812 mo
388.71 19.812 li
383.589 17.6909 mo
387.831 21.933 li
383.589 21.933 mo
387.831 17.6909 li
@
385.731 16.812 mo
385.731 22.812 li
382.731 19.812 mo
388.731 19.812 li
383.611 17.6909 mo
387.852 21.933 li
383.611 21.933 mo
387.852 17.6909 li
@
385.746 16.812 mo
385.746 22.812 li
382.746 19.812 mo
388.746 19.812 li
383.625 17.6909 mo
387.867 21.933 li
383.625 21.933 mo
387.867 17.6909 li
@
385.76 16.812 mo
385.76 22.812 li
382.76 19.812 mo
388.76 19.812 li
383.639 17.6909 mo
387.881 21.933 li
383.639 21.933 mo
387.881 17.6909 li
@
385.772 16.812 mo
385.772 22.812 li
382.772 19.812 mo
388.772 19.812 li
383.651 17.6909 mo
387.892 21.933 li
383.651 21.933 mo
387.892 17.6909 li
@
385.783 16.812 mo
385.783 22.812 li
382.783 19.812 mo
388.783 19.812 li
383.662 17.6909 mo
387.904 21.933 li
383.662 21.933 mo
387.904 17.6909 li
@
385.792 16.812 mo
385.792 22.812 li
382.792 19.812 mo
388.792 19.812 li
383.671 17.6909 mo
387.913 21.933 li
383.671 21.933 mo
387.913 17.6909 li
@
385.797 16.812 mo
385.797 22.812 li
382.797 19.812 mo
388.797 19.812 li
383.676 17.6909 mo
387.918 21.933 li
383.676 21.933 mo
387.918 17.6909 li
@
385.803 16.812 mo
385.803 22.812 li
382.803 19.812 mo
388.803 19.812 li
383.682 17.6909 mo
387.924 21.933 li
383.682 21.933 mo
387.924 17.6909 li
@
385.812 16.812 mo
385.812 22.812 li
382.812 19.812 mo
388.812 19.812 li
383.691 17.6909 mo
387.933 21.933 li
383.691 21.933 mo
387.933 17.6909 li
@
385.82 16.812 mo
385.82 22.812 li
382.82 19.812 mo
388.82 19.812 li
383.699 17.6909 mo
387.94 21.933 li
383.699 21.933 mo
387.94 17.6909 li
@
385.826 16.812 mo
385.826 22.812 li
382.826 19.812 mo
388.826 19.812 li
383.705 17.6909 mo
387.947 21.933 li
383.705 21.933 mo
387.947 17.6909 li
@
385.83 16.812 mo
385.83 22.812 li
382.83 19.812 mo
388.83 19.812 li
383.709 17.6909 mo
387.951 21.933 li
383.709 21.933 mo
387.951 17.6909 li
@
385.835 16.812 mo
385.835 22.812 li
382.835 19.812 mo
388.835 19.812 li
383.714 17.6909 mo
387.956 21.933 li
383.714 21.933 mo
387.956 17.6909 li
@
385.838 16.812 mo
385.838 22.812 li
382.838 19.812 mo
388.838 19.812 li
383.717 17.6909 mo
387.959 21.933 li
383.717 21.933 mo
387.959 17.6909 li
@
385.842 16.812 mo
385.842 22.812 li
382.842 19.812 mo
388.842 19.812 li
383.721 17.6909 mo
387.963 21.933 li
383.721 21.933 mo
387.963 17.6909 li
@
385.846 16.812 mo
385.846 22.812 li
382.846 19.812 mo
388.846 19.812 li
383.725 17.6909 mo
387.967 21.933 li
383.725 21.933 mo
387.967 17.6909 li
@
385.847 16.812 mo
385.847 22.812 li
382.847 19.812 mo
388.847 19.812 li
383.726 17.6909 mo
387.968 21.933 li
383.726 21.933 mo
387.968 17.6909 li
@
385.849 16.812 mo
385.849 22.812 li
382.849 19.812 mo
388.849 19.812 li
383.728 17.6909 mo
387.97 21.933 li
383.728 21.933 mo
387.97 17.6909 li
@
385.851 16.812 mo
385.851 22.812 li
382.851 19.812 mo
388.851 19.812 li
383.73 17.6909 mo
387.972 21.933 li
383.73 21.933 mo
387.972 17.6909 li
@
385.853 16.812 mo
385.853 22.812 li
382.853 19.812 mo
388.853 19.812 li
383.732 17.6909 mo
387.974 21.933 li
383.732 21.933 mo
387.974 17.6909 li
@
385.856 16.812 mo
385.856 22.812 li
382.856 19.812 mo
388.856 19.812 li
383.735 17.6909 mo
387.977 21.933 li
383.735 21.933 mo
387.977 17.6909 li
@
385.858 16.812 mo
385.858 22.812 li
382.858 19.812 mo
388.858 19.812 li
383.736 17.6909 mo
387.978 21.933 li
383.736 21.933 mo
387.978 17.6909 li
@
385.858 16.812 mo
385.858 22.812 li
382.858 19.812 mo
388.858 19.812 li
383.737 17.6909 mo
387.979 21.933 li
383.737 21.933 mo
387.979 17.6909 li
@
385.861 16.812 mo
385.861 22.812 li
382.861 19.812 mo
388.861 19.812 li
383.74 17.6909 mo
387.983 21.933 li
383.74 21.933 mo
387.983 17.6909 li
@
385.863 16.812 mo
385.863 22.812 li
382.863 19.812 mo
388.863 19.812 li
383.742 17.6909 mo
387.983 21.933 li
383.742 21.933 mo
387.983 17.6909 li
@
385.863 16.812 mo
385.863 22.812 li
382.863 19.812 mo
388.863 19.812 li
383.742 17.6909 mo
387.983 21.933 li
383.742 21.933 mo
387.983 17.6909 li
@
385.864 16.812 mo
385.864 22.812 li
382.864 19.812 mo
388.864 19.812 li
383.743 17.6909 mo
387.985 21.933 li
383.743 21.933 mo
387.985 17.6909 li
@
385.865 16.812 mo
385.865 22.812 li
382.865 19.812 mo
388.865 19.812 li
383.744 17.6909 mo
387.986 21.933 li
383.744 21.933 mo
387.986 17.6909 li
@
385.867 16.812 mo
385.867 22.812 li
382.867 19.812 mo
388.867 19.812 li
383.746 17.6909 mo
387.988 21.933 li
383.746 21.933 mo
387.988 17.6909 li
@
385.867 16.812 mo
385.867 22.812 li
382.867 19.812 mo
388.867 19.812 li
383.747 17.6909 mo
387.988 21.933 li
383.747 21.933 mo
387.988 17.6909 li
@
385.867 16.812 mo
385.867 22.812 li
382.867 19.812 mo
388.867 19.812 li
383.747 17.6909 mo
387.988 21.933 li
383.747 21.933 mo
387.988 17.6909 li
@
385.868 16.812 mo
385.868 22.812 li
382.868 19.812 mo
388.868 19.812 li
383.747 17.6909 mo
387.989 21.933 li
383.747 21.933 mo
387.989 17.6909 li
@
385.869 16.812 mo
385.869 22.812 li
382.869 19.812 mo
388.869 19.812 li
383.748 17.6909 mo
387.99 21.933 li
383.748 21.933 mo
387.99 17.6909 li
@
385.869 16.812 mo
385.869 22.812 li
382.869 19.812 mo
388.869 19.812 li
383.748 17.6909 mo
387.99 21.933 li
383.748 21.933 mo
387.99 17.6909 li
@
385.869 16.812 mo
385.869 22.812 li
382.869 19.812 mo
388.869 19.812 li
383.748 17.6909 mo
387.99 21.933 li
383.748 21.933 mo
387.99 17.6909 li
@
385.87 16.812 mo
385.87 22.812 li
382.87 19.812 mo
388.87 19.812 li
383.749 17.6909 mo
387.99 21.933 li
383.749 21.933 mo
387.99 17.6909 li
@
385.87 16.812 mo
385.87 22.812 li
382.87 19.812 mo
388.87 19.812 li
383.749 17.6909 mo
387.992 21.933 li
383.749 21.933 mo
387.992 17.6909 li
@
385.87 16.812 mo
385.87 22.812 li
382.87 19.812 mo
388.87 19.812 li
383.749 17.6909 mo
387.992 21.933 li
383.749 21.933 mo
387.992 17.6909 li
@
385.871 16.812 mo
385.871 22.812 li
382.871 19.812 mo
388.871 19.812 li
383.75 17.6909 mo
387.992 21.933 li
383.75 21.933 mo
387.992 17.6909 li
@
385.871 16.812 mo
385.871 22.812 li
382.871 19.812 mo
388.871 19.812 li
383.75 17.6909 mo
387.992 21.933 li
383.75 21.933 mo
387.992 17.6909 li
@
385.871 16.812 mo
385.871 22.812 li
382.871 19.812 mo
388.871 19.812 li
383.75 17.6909 mo
387.992 21.933 li
383.75 21.933 mo
387.992 17.6909 li
@
385.872 16.812 mo
385.872 22.812 li
382.872 19.812 mo
388.872 19.812 li
383.751 17.6909 mo
387.993 21.933 li
383.751 21.933 mo
387.993 17.6909 li
@
385.872 16.812 mo
385.872 22.812 li
382.872 19.812 mo
388.872 19.812 li
383.751 17.6909 mo
387.993 21.933 li
383.751 21.933 mo
387.993 17.6909 li
@
385.872 16.812 mo
385.872 22.812 li
382.872 19.812 mo
388.872 19.812 li
383.751 17.6909 mo
387.993 21.933 li
383.751 21.933 mo
387.993 17.6909 li
@
385.872 16.812 mo
385.872 22.812 li
382.872 19.812 mo
388.872 19.812 li
383.751 17.6909 mo
387.993 21.933 li
383.751 21.933 mo
387.993 17.6909 li
@
385.872 16.812 mo
385.872 22.812 li
382.872 19.812 mo
388.872 19.812 li
383.751 17.6909 mo
387.993 21.933 li
383.751 21.933 mo
387.993 17.6909 li
@
385.872 16.812 mo
385.872 22.812 li
382.872 19.812 mo
388.872 19.812 li
383.751 17.6909 mo
387.993 21.933 li
383.751 21.933 mo
387.993 17.6909 li
@
385.872 16.812 mo
385.872 22.812 li
382.872 19.812 mo
388.872 19.812 li
383.751 17.6909 mo
387.993 21.933 li
383.751 21.933 mo
387.993 17.6909 li
@
385.872 16.812 mo
385.872 22.812 li
382.872 19.812 mo
388.872 19.812 li
383.751 17.6909 mo
387.993 21.933 li
383.751 21.933 mo
387.993 17.6909 li
@
1 lj
43.0809 171.355 mo
49.5004 171.355 li
49.5004 166.798 li
62.6426 166.798 li
62.6426 166.417 li
62.6426 166.038 li
62.6426 165.658 li
62.6426 165.278 li
62.6426 164.519 li
62.6426 163 li
62.6426 162.619 li
62.6426 162.24 li
71.9672 161.86 li
71.9672 161.101 li
71.9672 160.341 li
79.1996 160.341 li
85.1094 159.961 li
85.1094 158.821 li
85.1094 158.062 li
85.1094 157.682 li
90.1055 157.682 li
90.1055 157.303 li
94.4335 156.923 li
94.4335 156.543 li
94.4335 156.163 li
94.4335 155.403 li
94.4335 155.023 li
94.4335 154.264 li
98.2515 154.264 li
98.2515 153.124 li
98.2515 152.745 li
98.2515 152.365 li
101.667 151.985 li
104.756 151.985 li
107.576 151.985 li
110.171 151.605 li
110.171 151.226 li
110.171 150.466 li
110.171 150.086 li
112.573 149.706 li
114.809 149.326 li
116.901 148.946 li
118.866 148.946 li
120.718 148.946 li
122.471 148.567 li
124.134 148.187 li
124.134 147.047 li
125.715 147.047 li
125.715 146.288 li
127.223 146.288 li
127.223 145.528 li
128.664 145.528 li
128.664 145.148 li
130.043 144.769 li
132.638 144.389 li
132.638 144.009 li
132.638 143.63 li
133.861 143.63 li
133.861 143.249 li
135.04 143.249 li
135.04 142.11 li
137.276 141.73 li
137.276 140.971 li
138.339 140.211 li
138.339 139.832 li
140.365 139.832 li
141.333 139.451 li
142.273 139.072 li
144.074 139.072 li
144.938 138.691 li
145.78 138.691 li
146.601 138.691 li
146.601 138.312 li
147.401 138.312 li
148.945 138.312 li
148.945 137.932 li
149.69 137.932 li
151.131 137.932 li
152.51 137.552 li
153.179 136.792 li
153.833 136.033 li
155.722 135.274 li
156.922 135.274 li
156.922 134.514 li
158.645 134.134 li
159.198 134.134 li
160.279 133.375 li
161.324 132.994 li
161.835 131.855 li
163.32 131.855 li
165.199 131.476 li
165.652 131.476 li
166.976 131.476 li
167.829 131.476 li
168.247 130.716 li
169.067 130.716 li
169.47 130.716 li
170.649 130.336 li
170.649 129.956 li
170.649 129.196 li
172.156 129.196 li
172.523 129.196 li
173.243 129.196 li
173.597 128.817 li
173.948 128.817 li
174.295 128.817 li
174.638 128.817 li
175.645 128.817 li
176.942 128.817 li
177.572 128.817 li
178.493 128.437 li
179.39 128.057 li
179.683 128.057 li
180.262 128.057 li
181.665 128.057 li
182.479 127.678 li
183.791 127.678 li
184.804 127.678 li
185.786 127.298 li
186.504 126.918 li
186.504 126.538 li
187.206 126.158 li
187.666 126.158 li
187.894 125.778 li
188.567 125.778 li
188.788 125.398 li
189.442 125.398 li
190.714 125.398 li
191.534 125.398 li
191.937 125.019 li
192.136 125.019 li
193.116 124.259 li
194.807 123.499 li
195.352 123.499 li
196.064 123.499 li
196.762 123.499 li
197.444 123.12 li
198.113 122.74 li
199.249 122.36 li
199.883 122.36 li
200.808 121.98 li
201.262 121.98 li
202.004 121.601 li
202.729 121.601 li
203.014 120.841 li
203.578 120.841 li
203.856 120.081 li
203.994 119.701 li
204.811 119.701 li
205.477 118.182 li
205.999 117.803 li
206.514 117.422 li
207.021 117.043 li
207.395 117.043 li
208.494 116.663 li
209.206 115.903 li
210.247 115.903 li
211.255 114.384 li
212.018 114.384 li
212.018 114.005 li
212.445 113.624 li
213.077 113.624 li
213.9 113.245 li
214.604 112.485 li
215.39 112.105 li
215.583 112.105 li
215.966 111.725 li
217.274 111.725 li
217.548 111.725 li
218.266 111.725 li
218.881 111.346 li
219.486 111.346 li
220.247 110.966 li
221.395 110.966 li
222.427 110.966 li
222.969 110.586 li
223.729 110.207 li
223.953 109.826 li
224.397 109.826 li
224.762 109.066 li
225.267 108.687 li
226.045 108.307 li
226.392 107.927 li
226.736 107.548 li
227.413 107.548 li
227.878 107.167 li
228.337 107.167 li
229.045 107.167 li
229.487 106.788 li
229.986 106.408 li
230.538 106.408 li
231.32 106.408 li
231.732 106.408 li
232.371 106.408 li
232.997 106.408 li
233.831 106.408 li
234.214 106.028 li
234.806 105.649 li
235.177 105.649 li
235.699 105.269 li
236.417 105.269 li
236.77 105.269 li
237.07 105.269 li
237.808 105.269 li
238.29 104.889 li
238.859 104.509 li
239.373 104.129 li
240.06 103.369 li
240.688 103.369 li
241.261 102.61 li
241.609 102.23 li
241.996 101.851 li
242.336 101.851 li
243.004 101.851 li
243.538 101.851 li
244.023 101.851 li
244.422 101.471 li
244.972 101.091 li
245.474 101.091 li
245.932 101.091 li
246.158 101.091 li
246.79 100.331 li
247.193 99.952 li
247.698 99.5709 li
248.336 98.812 li
248.686 98.812 li
249.271 98.4319 li
249.979 97.6729 li
250.575 97.6729 li
250.901 97.6729 li
251.288 96.5329 li
251.702 96.153 li
252.298 96.153 li
252.669 96.153 li
253.247 95.7729 li
253.934 95.3939 li
254.433 95.3939 li
255.01 95.3939 li
255.548 95.0139 li
256.022 94.6339 li
256.572 94.6339 li
257.112 94.6339 li
257.722 94.6339 li
258.218 94.6339 li
258.681 94.6339 li
259.137 94.6339 li
259.587 94.6339 li
260.226 94.254 li
260.709 93.8739 li
261.397 93.4949 li
261.886 93.4949 li
262.162 93.1149 li
262.663 93.1149 li
263.244 92.7349 li
263.881 92.7349 li
264.569 92.3549 li
265.202 91.216 li
265.658 89.696 li
266.39 89.317 li
266.869 89.317 li
267.38 89.317 li
267.788 88.937 li
268.361 88.937 li
268.756 88.1779 li
269.477 87.418 li
270.147 87.418 li
270.592 87.418 li
271.117 87.418 li
271.72 87.418 li
272.145 87.0379 li
272.53 86.6579 li
273.254 86.6579 li
273.658 86.2779 li
274.311 86.2779 li
274.796 85.898 li
275.289 85.898 li
275.699 85.519 li
276.238 85.519 li
276.68 85.519 li
277.232 85.1389 li
277.577 85.1389 li
278.015 85.1389 li
278.558 84.7589 li
279.052 84.7589 li
279.606 84.3799 li
280.044 83.999 li
280.49 83.999 li
281.045 83.999 li
281.604 83.6199 li
282.239 83.6199 li
282.631 83.6199 li
283.103 83.6199 li
283.569 83.2399 li
284.12 83.2399 li
284.364 82.0999 li
284.686 81.341 li
285.343 80.961 li
285.767 80.961 li
286.195 80.2009 li
286.661 79.442 li
287.152 79.442 li
287.647 79.442 li
288.104 79.442 li
288.482 79.442 li
289.007 79.442 li
289.474 79.442 li
289.964 79.442 li
290.389 79.442 li
290.789 79.442 li
291.223 79.062 li
291.65 79.062 li
292.063 79.062 li
292.703 79.062 li
293.094 78.6819 li
293.463 78.6819 li
293.87 78.3019 li
294.256 78.3019 li
294.746 78.3019 li
295.195 78.3019 li
295.713 77.5419 li
296.093 77.5419 li
296.597 77.5419 li
297.021 77.5419 li
297.479 76.4029 li
297.984 76.4029 li
298.445 76.024 li
298.942 76.024 li
299.301 76.024 li
299.707 75.644 li
300.22 75.2639 li
300.706 75.2639 li
301.183 75.2639 li
301.547 74.1249 li
302.019 74.1249 li
302.365 72.9849 li
302.827 72.9849 li
303.274 72.9849 li
303.595 72.6049 li
303.92 72.6049 li
304.365 72.2259 li
304.724 72.2259 li
305.159 71.846 li
305.552 71.846 li
306.041 71.846 li
306.377 71.846 li
306.756 71.846 li
307.181 71.846 li
307.556 71.846 li
307.927 71.846 li
308.272 71.466 li
308.574 71.466 li
308.928 71.086 li
309.3 71.086 li
309.609 71.086 li
309.973 70.3269 li
310.363 70.3269 li
310.791 69.946 li
311.248 69.187 li
311.674 69.187 li
312.138 68.8069 li
312.494 68.8069 li
312.832 68.8069 li
313.295 68.8069 li
313.676 68.4279 li
314.084 68.4279 li
314.461 68.048 li
314.833 68.048 li
315.143 67.668 li
315.468 67.668 li
315.785 67.2879 li
316.138 66.9079 li
316.522 66.5279 li
316.918 66.5279 li
317.267 66.148 li
317.629 66.148 li
317.959 66.148 li
318.29 66.148 li
318.68 66.148 li
319.036 65.3889 li
319.426 64.6289 li
319.854 64.249 li
320.238 63.8699 li
320.558 63.4899 li
320.892 63.4899 li
321.242 63.1099 li
321.574 62.7299 li
321.953 62.7299 li
322.274 62.7299 li
322.624 61.971 li
322.938 61.971 li
323.281 61.211 li
323.581 60.8309 li
323.908 60.8309 li
324.26 60.8309 li
324.536 60.8309 li
324.892 60.8309 li
325.221 60.8309 li
325.574 60.4509 li
325.879 60.4509 li
326.168 60.4509 li
326.509 60.071 li
326.838 60.071 li
327.13 59.692 li
327.458 59.312 li
327.73 59.312 li
328.082 58.9319 li
328.39 58.9319 li
328.753 58.9319 li
329.063 58.172 li
329.353 57.793 li
329.637 57.793 li
329.99 57.793 li
330.28 57.793 li
330.592 57.793 li
330.887 57.793 li
331.205 57.793 li
331.487 57.793 li
331.786 57.793 li
332.094 57.793 li
332.353 57.4129 li
332.646 57.4129 li
332.939 57.4129 li
333.224 57.4129 li
333.525 57.4129 li
333.836 57.0329 li
334.111 56.273 li
334.425 56.273 li
334.735 56.273 li
335.019 56.273 li
335.342 55.894 li
335.647 55.894 li
335.947 55.894 li
336.271 55.894 li
336.502 55.1339 li
336.768 54.7549 li
337.035 54.7549 li
337.348 54.7549 li
337.644 54.7549 li
337.924 54.7549 li
338.168 54.7549 li
338.403 54.374 li
338.699 54.374 li
338.978 54.374 li
339.219 54.374 li
339.535 53.9949 li
339.833 52.8549 li
340.102 52.4749 li
340.426 52.096 li
340.703 52.096 li
340.987 51.716 li
341.249 51.716 li
341.516 51.716 li
341.738 51.716 li
341.981 50.9569 li
342.243 50.9569 li
342.521 50.5759 li
342.793 50.5759 li
343.073 50.197 li
343.329 50.197 li
343.611 50.197 li
343.909 49.817 li
344.189 49.817 li
344.479 49.0569 li
344.74 49.0569 li
345.002 49.0569 li
345.25 48.6769 li
345.514 48.6769 li
345.732 48.6769 li
345.983 48.298 li
346.222 48.298 li
346.461 47.9169 li
346.7 47.9169 li
346.951 47.9169 li
347.238 47.9169 li
347.481 47.9169 li
347.726 47.9169 li
347.996 47.5379 li
348.24 47.5379 li
348.475 47.5379 li
348.745 47.5379 li
349.014 47.5379 li
349.244 47.5379 li
349.469 47.1579 li
349.712 47.1579 li
349.956 47.1579 li
350.227 47.1579 li
350.441 47.1579 li
350.681 46.7779 li
350.911 46.399 li
351.167 46.019 li
351.401 46.019 li
351.652 46.019 li
351.864 45.6389 li
352.109 45.2589 li
352.313 45.2589 li
352.564 44.8789 li
352.746 44.8789 li
352.961 44.8789 li
353.172 44.8789 li
353.415 44.8789 li
353.629 44.8789 li
353.833 44.8789 li
354.022 44.8789 li
354.239 44.8789 li
354.427 44.8789 li
354.647 44.8789 li
354.874 44.119 li
355.063 44.119 li
355.278 44.119 li
355.483 44.119 li
355.671 44.119 li
355.895 44.119 li
356.108 44.119 li
356.318 44.119 li
356.52 44.119 li
356.709 44.119 li
356.917 43.7399 li
357.125 43.7399 li
357.337 43.7399 li
357.525 43.7399 li
357.722 43.7399 li
357.921 42.9799 li
358.142 42.9799 li
358.354 42.6009 li
358.547 42.6009 li
358.732 42.6009 li
358.892 42.6009 li
359.069 42.221 li
359.262 42.221 li
359.458 41.841 li
359.633 41.841 li
359.827 41.841 li
359.999 41.841 li
360.163 41.841 li
360.344 41.461 li
360.536 41.461 li
360.732 41.461 li
360.898 41.461 li
361.081 40.7019 li
361.247 40.7019 li
361.441 40.7019 li
361.627 40.7019 li
361.798 40.7019 li
361.981 40.7019 li
362.149 40.7019 li
362.301 40.7019 li
362.475 40.7019 li
362.636 40.7019 li
362.817 40.7019 li
362.96 40.7019 li
363.124 40.7019 li
363.277 40.7019 li
363.434 40.7019 li
363.583 40.7019 li
363.764 40.321 li
363.919 39.562 li
364.084 39.562 li
364.26 39.562 li
364.406 39.562 li
364.565 39.562 li
364.71 39.562 li
364.86 39.1819 li
365.021 38.8029 li
365.178 38.8029 li
365.329 38.8029 li
365.483 38.0429 li
365.617 38.0429 li
365.762 38.0429 li
365.906 37.6629 li
366.064 37.2829 li
366.22 36.9029 li
366.356 36.5229 li
366.524 36.144 li
366.689 36.144 li
366.816 36.144 li
366.965 36.144 li
367.094 36.144 li
367.247 35.7639 li
367.387 35.7639 li
367.544 35.7639 li
367.692 35.7639 li
367.843 35.7639 li
367.979 35.7639 li
368.126 35.3839 li
368.271 35.3839 li
368.413 35.3839 li
368.558 34.624 li
368.677 34.245 li
368.806 34.245 li
368.927 34.245 li
369.056 33.865 li
369.181 33.485 li
369.301 33.1049 li
369.43 33.1049 li
369.561 33.1049 li
369.688 33.1049 li
369.812 32.7259 li
369.934 32.3459 li
370.059 32.3459 li
370.184 32.3459 li
370.32 31.9659 li
370.447 31.9659 li
370.557 31.5859 li
370.663 31.5859 li
370.784 31.5859 li
370.899 31.2059 li
371.02 31.2059 li
371.137 31.2059 li
371.263 31.2059 li
371.377 31.2059 li
371.491 31.2059 li
371.611 31.2059 li
371.714 31.2059 li
371.814 31.2059 li
371.915 30.8259 li
372.018 30.8259 li
372.116 30.8259 li
372.213 30.8259 li
372.302 30.8259 li
372.403 30.8259 li
372.497 30.8259 li
372.59 30.446 li
372.694 30.446 li
372.799 30.067 li
372.9 30.067 li
373.004 30.067 li
373.126 30.067 li
373.221 30.067 li
373.331 29.687 li
373.444 29.3069 li
373.543 29.3069 li
373.642 29.3069 li
373.758 29.3069 li
373.865 29.3069 li
373.971 29.3069 li
374.074 29.3069 li
374.18 28.9279 li
374.27 28.9279 li
374.377 28.9279 li
374.482 28.9279 li
374.586 28.9279 li
374.673 28.9279 li
374.752 28.9279 li
374.848 28.9279 li
374.941 28.9279 li
375.038 28.9279 li
375.118 28.9279 li
375.204 28.9279 li
375.288 28.9279 li
375.371 28.9279 li
375.466 28.9279 li
375.556 28.9279 li
375.647 28.9279 li
375.738 28.9279 li
375.824 28.9279 li
375.904 28.9279 li
376.004 28.9279 li
376.076 28.9279 li
376.152 28.547 li
376.229 28.547 li
376.305 28.547 li
376.393 28.547 li
376.481 28.547 li
376.565 28.547 li
376.642 28.547 li
376.727 28.547 li
376.815 28.547 li
376.899 28.547 li
376.976 28.547 li
377.068 28.547 li
377.143 28.547 li
377.206 28.547 li
377.297 28.547 li
377.377 28.547 li
377.455 28.547 li
377.536 28.547 li
377.602 28.1679 li
377.681 28.1679 li
377.758 28.1679 li
377.833 28.1679 li
377.895 28.1679 li
377.979 28.1679 li
378.041 28.1679 li
378.115 28.1679 li
378.186 27.7879 li
378.261 27.4079 li
378.312 27.4079 li
378.379 27.4079 li
378.444 27.4079 li
378.515 27.4079 li
378.583 27.4079 li
378.636 27.4079 li
378.701 27.4079 li
378.765 27.0279 li
378.826 27.0279 li
378.889 26.6479 li
378.948 26.6479 li
379.009 26.6479 li
379.071 26.6479 li
379.139 26.6479 li
379.195 26.269 li
379.25 26.269 li
379.316 26.269 li
379.381 26.269 li
379.449 26.269 li
379.507 26.269 li
379.561 26.269 li
379.622 26.269 li
379.683 26.269 li
379.746 26.269 li
379.813 26.269 li
379.87 25.8889 li
379.923 25.8889 li
379.979 25.8889 li
380.032 25.8889 li
380.093 25.8889 li
380.149 25.8889 li
380.203 25.8889 li
380.258 25.8889 li
380.308 25.8889 li
380.352 25.8889 li
380.402 25.8889 li
380.461 25.8889 li
380.521 25.8889 li
380.562 25.8889 li
380.615 25.8889 li
380.668 25.5089 li
380.722 25.1299 li
380.771 25.1299 li
380.816 25.1299 li
380.867 25.1299 li
380.915 25.1299 li
380.956 25.1299 li
381.004 25.1299 li
381.047 25.1299 li
381.099 25.1299 li
381.139 25.1299 li
381.182 25.1299 li
381.242 25.1299 li
381.29 25.1299 li
381.329 25.1299 li
381.371 25.1299 li
381.41 25.1299 li
381.445 25.1299 li
381.493 25.1299 li
381.531 25.1299 li
381.577 25.1299 li
381.628 25.1299 li
381.671 24.749 li
381.71 24.749 li
381.748 24.749 li
381.788 24.749 li
381.818 24.749 li
381.853 24.749 li
381.895 24.749 li
381.93 24.749 li
381.965 24.749 li
382.004 24.37 li
382.049 24.37 li
382.086 24.37 li
382.123 24.37 li
382.162 24.37 li
382.194 24.37 li
382.229 23.99 li
382.261 23.61 li
382.297 23.61 li
382.331 23.61 li
382.36 23.61 li
382.393 23.61 li
382.433 23.61 li
382.46 23.61 li
382.485 23.61 li
382.517 23.61 li
382.554 23.61 li
382.588 23.61 li
382.613 23.61 li
382.645 23.61 li
382.676 23.61 li
382.713 23.61 li
382.742 23.2299 li
382.771 23.2299 li
382.799 23.2299 li
382.832 23.2299 li
382.858 22.8499 li
382.892 22.8499 li
382.925 22.8499 li
382.95 22.8499 li
382.977 22.8499 li
383.005 22.8499 li
383.029 22.4709 li
383.065 22.4709 li
383.09 22.4709 li
383.12 22.4709 li
383.152 22.4709 li
383.184 22.4709 li
383.212 22.4709 li
383.249 22.4709 li
383.268 22.4709 li
383.298 22.4709 li
383.333 22.4709 li
383.356 22.4709 li
383.388 22.4709 li
383.418 22.4709 li
383.445 22.4709 li
383.468 22.4709 li
383.495 22.4709 li
383.532 22.4709 li
383.558 22.4709 li
383.585 22.4709 li
383.605 22.4709 li
383.633 22.4709 li
383.651 22.4709 li
383.677 22.4709 li
383.702 22.4709 li
383.72 22.4709 li
383.738 22.4709 li
383.76 22.4709 li
383.778 22.4709 li
383.801 22.4709 li
383.818 22.4709 li
383.845 22.4709 li
383.863 22.4709 li
383.884 22.4709 li
383.902 22.4709 li
383.923 22.4709 li
383.948 22.4709 li
383.971 22.4709 li
383.99 22.0909 li
384.01 22.0909 li
384.029 22.0909 li
384.047 22.0909 li
384.061 22.0909 li
384.076 22.0909 li
384.093 22.0909 li
384.114 22.0909 li
384.137 22.0909 li
384.158 22.0909 li
384.176 22.0909 li
384.197 22.0909 li
384.214 22.0909 li
384.228 22.0909 li
384.246 22.0909 li
384.263 22.0909 li
384.275 22.0909 li
384.29 21.7109 li
384.31 21.7109 li
384.326 21.7109 li
384.34 21.7109 li
384.361 21.7109 li
384.376 21.3319 li
384.392 21.3319 li
384.404 21.3319 li
384.421 21.3319 li
384.431 21.3319 li
384.446 21.3319 li
384.46 21.3319 li
384.477 21.3319 li
384.494 21.3319 li
384.506 21.3319 li
384.519 21.3319 li
384.538 21.3319 li
384.555 21.3319 li
384.567 21.3319 li
384.583 21.3319 li
384.592 21.3319 li
384.61 21.3319 li
384.62 21.3319 li
384.631 21.3319 li
384.645 21.3319 li
384.659 21.3319 li
384.667 21.3319 li
384.683 21.3319 li
384.699 21.3319 li
384.708 21.3319 li
384.723 21.3319 li
384.733 21.3319 li
384.744 21.3319 li
384.754 21.3319 li
384.766 21.3319 li
384.776 21.3319 li
384.785 21.3319 li
384.802 21.3319 li
384.811 21.3319 li
384.82 21.3319 li
384.829 21.3319 li
384.846 21.3319 li
384.856 21.3319 li
384.865 21.3319 li
384.879 21.3319 li
384.889 21.3319 li
384.904 21.3319 li
384.917 21.3319 li
384.926 21.3319 li
384.935 21.3319 li
384.943 21.3319 li
384.95 21.3319 li
384.962 21.3319 li
384.973 21.3319 li
384.983 21.3319 li
384.992 21.3319 li
385.003 21.3319 li
385.012 21.3319 li
385.02 21.3319 li
385.031 21.3319 li
385.038 21.3319 li
385.049 21.3319 li
385.058 21.3319 li
385.065 21.3319 li
385.07 21.3319 li
385.083 21.3319 li
385.09 21.3319 li
385.098 21.3319 li
385.106 21.3319 li
385.115 21.3319 li
385.125 21.3319 li
385.135 21.3319 li
385.142 21.3319 li
385.147 21.3319 li
385.158 21.3319 li
385.168 21.3319 li
385.171 21.3319 li
385.179 21.3319 li
385.186 21.3319 li
385.193 21.3319 li
385.199 20.9509 li
385.205 20.9509 li
385.212 20.9509 li
385.22 20.9509 li
385.225 20.9509 li
385.235 20.9509 li
385.243 20.9509 li
385.249 20.9509 li
385.254 20.9509 li
385.261 20.9509 li
385.267 20.9509 li
385.274 20.9509 li
385.279 20.9509 li
385.288 20.9509 li
385.292 20.9509 li
385.296 20.9509 li
385.304 20.9509 li
385.307 20.9509 li
385.315 20.9509 li
385.323 20.9509 li
385.331 20.9509 li
385.337 20.9509 li
385.345 20.9509 li
385.354 20.9509 li
385.361 20.9509 li
385.37 20.9509 li
385.376 20.9509 li
385.385 20.9509 li
385.39 20.9509 li
385.397 20.9509 li
385.401 20.9509 li
385.407 20.9509 li
385.411 20.9509 li
385.415 20.9509 li
385.422 20.9509 li
385.429 20.9509 li
385.432 20.9509 li
385.441 20.9509 li
385.445 20.9509 li
385.447 20.9509 li
385.45 20.9509 li
385.455 20.9509 li
385.461 20.9509 li
385.466 20.9509 li
385.47 20.9509 li
385.475 20.9509 li
385.48 20.9509 li
385.484 20.9509 li
385.49 20.9509 li
385.495 20.9509 li
385.497 20.9509 li
385.502 20.9509 li
385.506 20.9509 li
385.508 20.9509 li
385.516 20.9509 li
385.524 20.9509 li
385.526 20.9509 li
385.531 20.9509 li
385.538 20.9509 li
385.543 20.9509 li
385.548 20.9509 li
385.549 20.9509 li
385.555 20.9509 li
385.56 20.9509 li
385.562 20.9509 li
385.564 20.9509 li
385.566 20.9509 li
385.568 20.9509 li
385.573 20.9509 li
385.579 20.9509 li
385.583 20.9509 li
385.584 20.9509 li
385.587 20.9509 li
385.591 20.9509 li
385.592 20.9509 li
385.594 20.9509 li
385.597 20.9509 li
385.6 20.9509 li
385.604 20.572 li
385.608 20.572 li
385.61 20.572 li
385.614 20.572 li
385.618 20.572 li
385.622 20.572 li
385.624 20.572 li
385.625 20.572 li
385.627 20.572 li
385.631 20.572 li
385.634 20.572 li
385.64 20.572 li
385.644 20.572 li
385.646 20.572 li
385.648 20.572 li
385.65 20.572 li
385.654 20.572 li
385.657 20.572 li
385.658 20.572 li
385.66 20.572 li
385.661 20.572 li
385.667 20.192 li
385.671 20.192 li
385.672 20.192 li
385.675 20.192 li
385.679 20.192 li
385.68 20.192 li
385.681 20.192 li
385.683 20.192 li
385.685 20.192 li
385.686 20.192 li
385.688 20.192 li
385.69 20.192 li
385.693 20.192 li
385.695 20.192 li
385.696 20.192 li
385.697 20.192 li
385.699 20.192 li
385.701 20.192 li
385.702 20.192 li
385.706 20.192 li
385.707 20.192 li
385.709 20.192 li
385.711 19.812 li
385.715 19.812 li
385.717 19.812 li
385.718 19.812 li
385.719 19.812 li
385.722 19.812 li
385.725 19.812 li
385.727 19.812 li
385.729 19.812 li
385.731 19.812 li
385.733 19.812 li
385.734 19.812 li
385.736 19.812 li
385.739 19.812 li
385.742 19.812 li
385.743 19.812 li
385.746 19.812 li
385.748 19.812 li
385.749 19.812 li
385.751 19.812 li
385.752 19.812 li
385.753 19.812 li
385.754 19.812 li
385.756 19.812 li
385.759 19.812 li
385.76 19.812 li
385.761 19.812 li
385.762 19.812 li
385.763 19.812 li
385.765 19.812 li
385.766 19.812 li
385.768 19.812 li
385.769 19.812 li
385.771 19.812 li
385.772 19.812 li
385.773 19.812 li
385.774 19.812 li
385.775 19.812 li
385.777 19.812 li
385.778 19.812 li
385.779 19.812 li
385.78 19.812 li
385.781 19.812 li
385.782 19.812 li
385.783 19.812 li
385.784 19.812 li
385.785 19.812 li
385.786 19.812 li
385.788 19.812 li
385.79 19.812 li
385.791 19.812 li
385.792 19.812 li
385.793 19.812 li
385.794 19.812 li
385.795 19.812 li
385.797 19.812 li
385.799 19.812 li
385.8 19.812 li
385.801 19.812 li
385.802 19.812 li
385.803 19.812 li
385.805 19.812 li
385.806 19.812 li
385.807 19.812 li
385.808 19.812 li
385.809 19.812 li
385.81 19.812 li
385.811 19.812 li
385.812 19.812 li
385.813 19.812 li
385.814 19.812 li
385.815 19.812 li
385.817 19.812 li
385.819 19.812 li
385.82 19.812 li
385.821 19.812 li
385.822 19.812 li
385.823 19.812 li
385.824 19.812 li
385.825 19.812 li
385.826 19.812 li
385.827 19.812 li
385.828 19.812 li
385.829 19.812 li
385.83 19.812 li
385.831 19.812 li
385.833 19.812 li
385.834 19.812 li
385.835 19.812 li
385.836 19.812 li
385.838 19.812 li
385.839 19.812 li
385.84 19.812 li
385.841 19.812 li
385.842 19.812 li
385.843 19.812 li
385.844 19.812 li
385.845 19.812 li
385.846 19.812 li
385.847 19.812 li
385.848 19.812 li
385.849 19.812 li
385.85 19.812 li
385.851 19.812 li
385.852 19.812 li
385.853 19.812 li
385.854 19.812 li
385.855 19.812 li
385.856 19.812 li
385.857 19.812 li
385.858 19.812 li
385.859 19.812 li
385.86 19.812 li
385.861 19.812 li
385.862 19.812 li
385.863 19.812 li
385.864 19.812 li
385.865 19.812 li
385.866 19.812 li
385.867 19.812 li
385.868 19.812 li
385.869 19.812 li
385.87 19.812 li
385.871 19.812 li
385.872 19.812 li
0 .990631 1 .000396735 cmyk
@
49.5 168.476 mo
50.8809 168.476 52 169.595 52 170.975 cv
52 172.356 50.8809 173.475 49.5 173.475 cv
48.1195 173.475 47.0004 172.356 47.0004 170.975 cv
47.0004 169.595 48.1195 168.476 49.5 168.476 cv
cp
49.5 167.475 mo
47.5672 167.475 46 169.043 46 170.975 cv
46 172.908 47.5672 174.476 49.5 174.476 cv
51.4328 174.476 53.0004 172.908 53.0004 170.975 cv
53.0004 169.043 51.4328 167.475 49.5 167.475 cv
f
49.5 165.057 mo
50.8809 165.057 52 166.176 52 167.557 cv
52 168.938 50.8809 170.057 49.5 170.057 cv
48.1195 170.057 47.0004 168.938 47.0004 167.557 cv
47.0004 166.176 48.1195 165.057 49.5 165.057 cv
cp
49.5 164.057 mo
47.5672 164.057 46 165.624 46 167.557 cv
46 169.49 47.5672 171.057 49.5 171.057 cv
51.4328 171.057 53.0004 169.49 53.0004 167.557 cv
53.0004 165.624 51.4328 164.057 49.5 164.057 cv
f
62.6426 160.5 mo
64.0231 160.5 65.1422 161.619 65.1422 162.999 cv
65.1422 164.38 64.0231 165.499 62.6426 165.499 cv
61.2617 165.499 60.1426 164.38 60.1426 162.999 cv
60.1426 161.619 61.2617 160.5 62.6426 160.5 cv
cp
62.6426 159.499 mo
60.7098 159.499 59.1422 161.067 59.1422 162.999 cv
59.1422 164.932 60.7098 166.5 62.6426 166.5 cv
64.575 166.5 66.1426 164.932 66.1426 162.999 cv
66.1426 161.067 64.575 159.499 62.6426 159.499 cv
f
85.1094 157.461 mo
86.4895 157.461 87.6095 158.58 87.6095 159.961 cv
87.6095 161.342 86.4895 162.461 85.1094 162.461 cv
83.7285 162.461 82.6094 161.342 82.6094 159.961 cv
82.6094 158.58 83.7285 157.461 85.1094 157.461 cv
cp
85.1094 156.461 mo
83.1766 156.461 81.609 158.028 81.609 159.961 cv
81.609 161.894 83.1766 163.461 85.1094 163.461 cv
87.0415 163.461 88.6095 161.894 88.6095 159.961 cv
88.6095 158.028 87.0415 156.461 85.1094 156.461 cv
f
94.4345 154.043 mo
95.8145 154.043 96.9335 155.162 96.9335 156.543 cv
96.9335 157.924 95.8145 159.042 94.4345 159.042 cv
93.0535 159.042 91.9345 157.924 91.9345 156.543 cv
91.9345 155.162 93.0535 154.043 94.4345 154.043 cv
cp
94.4345 153.042 mo
92.5015 153.042 90.9335 154.61 90.9335 156.543 cv
90.9335 158.476 92.5015 160.043 94.4345 160.043 cv
96.3665 160.043 97.9345 158.476 97.9345 156.543 cv
97.9345 154.61 96.3665 153.042 94.4345 153.042 cv
f
98.2515 149.865 mo
99.6325 149.865 100.752 150.984 100.752 152.365 cv
100.752 153.746 99.6325 154.865 98.2515 154.865 cv
96.8705 154.865 95.7515 153.746 95.7515 152.365 cv
95.7515 150.984 96.8705 149.865 98.2515 149.865 cv
cp
98.2515 148.865 mo
96.3185 148.865 94.7515 150.432 94.7515 152.365 cv
94.7515 154.298 96.3185 155.865 98.2515 155.865 cv
100.185 155.865 101.752 154.298 101.752 152.365 cv
101.752 150.432 100.185 148.865 98.2515 148.865 cv
f
110.171 149.105 mo
111.552 149.105 112.671 150.224 112.671 151.605 cv
112.671 152.986 111.552 154.105 110.171 154.105 cv
108.79 154.105 107.671 152.986 107.671 151.605 cv
107.671 150.224 108.79 149.105 110.171 149.105 cv
cp
110.171 148.105 mo
108.238 148.105 106.671 149.673 106.671 151.605 cv
106.671 153.538 108.238 155.105 110.171 155.105 cv
112.104 155.105 113.671 153.538 113.671 151.605 cv
113.671 149.673 112.104 148.105 110.171 148.105 cv
f
120.719 146.447 mo
122.1 146.447 123.218 147.566 123.218 148.947 cv
123.218 150.327 122.1 151.446 120.719 151.446 cv
119.338 151.446 118.219 150.327 118.219 148.947 cv
118.219 147.566 119.338 146.447 120.719 146.447 cv
cp
120.719 145.446 mo
118.786 145.446 117.218 147.014 117.218 148.947 cv
117.218 150.879 118.786 152.447 120.719 152.447 cv
122.652 152.447 124.219 150.879 124.219 148.947 cv
124.219 147.014 122.652 145.446 120.719 145.446 cv
f
128.664 142.649 mo
130.045 142.649 131.164 143.768 131.164 145.149 cv
131.164 146.529 130.045 147.648 128.664 147.648 cv
127.283 147.648 126.164 146.529 126.164 145.149 cv
126.164 143.768 127.283 142.649 128.664 142.649 cv
cp
128.664 141.648 mo
126.731 141.648 125.164 143.216 125.164 145.149 cv
125.164 147.081 126.731 148.649 128.664 148.649 cv
130.597 148.649 132.164 147.081 132.164 145.149 cv
132.164 143.216 130.597 141.648 128.664 141.648 cv
f
135.04 139.61 mo
136.42 139.61 137.54 140.729 137.54 142.11 cv
137.54 143.491 136.42 144.61 135.04 144.61 cv
133.659 144.61 132.54 143.491 132.54 142.11 cv
132.54 140.729 133.659 139.61 135.04 139.61 cv
cp
135.04 138.61 mo
133.107 138.61 131.54 140.177 131.54 142.11 cv
131.54 144.043 133.107 145.61 135.04 145.61 cv
136.973 145.61 138.54 144.043 138.54 142.11 cv
138.54 140.177 136.973 138.61 135.04 138.61 cv
f
144.938 136.192 mo
146.319 136.192 147.438 137.311 147.438 138.692 cv
147.438 140.073 146.319 141.192 144.938 141.192 cv
143.558 141.192 142.438 140.073 142.438 138.692 cv
142.438 137.311 143.558 136.192 144.938 136.192 cv
cp
144.938 135.192 mo
143.006 135.192 141.438 136.759 141.438 138.692 cv
141.438 140.624 143.006 142.192 144.938 142.192 cv
146.871 142.192 148.438 140.624 148.438 138.692 cv
148.438 136.759 146.871 135.192 144.938 135.192 cv
f
152.51 135.053 mo
153.891 135.053 155.01 136.172 155.01 137.552 cv
155.01 138.933 153.891 140.052 152.51 140.052 cv
151.129 140.052 150.011 138.933 150.011 137.552 cv
150.011 136.172 151.129 135.053 152.51 135.053 cv
cp
152.51 134.052 mo
150.577 134.052 149.01 135.62 149.01 137.552 cv
149.01 139.485 150.577 141.053 152.51 141.053 cv
154.443 141.053 156.011 139.485 156.011 137.552 cv
156.011 135.62 154.443 134.052 152.51 134.052 cv
f
161.324 130.495 mo
162.705 130.495 163.824 131.614 163.824 132.995 cv
163.824 134.375 162.705 135.494 161.324 135.494 cv
159.943 135.494 158.825 134.375 158.825 132.995 cv
158.825 131.614 159.943 130.495 161.324 130.495 cv
cp
161.324 129.494 mo
159.392 129.494 157.824 131.062 157.824 132.995 cv
157.824 134.928 159.392 136.495 161.324 136.495 cv
163.257 136.495 164.825 134.928 164.825 132.995 cv
164.825 131.062 163.257 129.494 161.324 129.494 cv
f
169.068 128.216 mo
170.448 128.216 171.567 129.335 171.567 130.716 cv
171.567 132.097 170.448 133.216 169.068 133.216 cv
167.687 133.216 166.568 132.097 166.568 130.716 cv
166.568 129.335 167.687 128.216 169.068 128.216 cv
cp
169.068 127.216 mo
167.135 127.216 165.567 128.783 165.567 130.716 cv
165.567 132.649 167.135 134.216 169.068 134.216 cv
171 134.216 172.568 132.649 172.568 130.716 cv
172.568 128.783 171 127.216 169.068 127.216 cv
f
174.295 126.317 mo
175.676 126.317 176.795 127.436 176.795 128.817 cv
176.795 130.198 175.676 131.317 174.295 131.317 cv
172.914 131.317 171.795 130.198 171.795 128.817 cv
171.795 127.436 172.914 126.317 174.295 126.317 cv
cp
174.295 125.317 mo
172.362 125.317 170.795 126.884 170.795 128.817 cv
170.795 130.749 172.362 132.317 174.295 132.317 cv
176.227 132.317 177.795 130.749 177.795 128.817 cv
177.795 126.884 176.227 125.317 174.295 125.317 cv
f
182.479 125.178 mo
183.86 125.178 184.979 126.297 184.979 127.677 cv
184.979 129.058 183.86 130.177 182.479 130.177 cv
181.098 130.177 179.979 129.058 179.979 127.677 cv
179.979 126.297 181.098 125.178 182.479 125.178 cv
cp
182.479 124.177 mo
180.546 124.177 178.979 125.745 178.979 127.677 cv
178.979 129.61 180.546 131.178 182.479 131.178 cv
184.411 131.178 185.979 129.61 185.979 127.677 cv
185.979 125.745 184.411 124.177 182.479 124.177 cv
f
188.788 122.899 mo
190.168 122.899 191.288 124.018 191.288 125.399 cv
191.288 126.779 190.168 127.898 188.788 127.898 cv
187.407 127.898 186.288 126.779 186.288 125.399 cv
186.288 124.018 187.407 122.899 188.788 122.899 cv
cp
188.788 121.898 mo
186.855 121.898 185.288 123.466 185.288 125.399 cv
185.288 127.331 186.855 128.899 188.788 128.899 cv
190.72 128.899 192.288 127.331 192.288 125.399 cv
192.288 123.466 190.72 121.898 188.788 121.898 cv
f
196.761 121 mo
198.142 121 199.261 122.119 199.261 123.499 cv
199.261 124.88 198.142 125.999 196.761 125.999 cv
195.381 125.999 194.262 124.88 194.262 123.499 cv
194.262 122.119 195.381 121 196.761 121 cv
cp
196.761 119.999 mo
194.829 119.999 193.261 121.567 193.261 123.499 cv
193.261 125.432 194.829 127 196.761 127 cv
198.694 127 200.262 125.432 200.262 123.499 cv
200.262 121.567 198.694 119.999 196.761 119.999 cv
f
203.578 118.341 mo
204.959 118.341 206.077 119.46 206.077 120.841 cv
206.077 122.222 204.959 123.341 203.578 123.341 cv
202.197 123.341 201.078 122.222 201.078 120.841 cv
201.078 119.46 202.197 118.341 203.578 118.341 cv
cp
203.578 117.341 mo
201.645 117.341 200.077 118.908 200.077 120.841 cv
200.077 122.774 201.645 124.341 203.578 124.341 cv
205.511 124.341 207.078 122.774 207.078 120.841 cv
207.078 118.908 205.511 117.341 203.578 117.341 cv
f
209.207 113.403 mo
210.588 113.403 211.706 114.523 211.706 115.903 cv
211.706 117.284 210.588 118.403 209.207 118.403 cv
207.826 118.403 206.707 117.284 206.707 115.903 cv
206.707 114.523 207.826 113.403 209.207 113.403 cv
cp
209.207 112.403 mo
207.274 112.403 205.706 113.971 205.706 115.903 cv
205.706 117.836 207.274 119.403 209.207 119.403 cv
211.14 119.403 212.707 117.836 212.707 115.903 cv
212.707 113.971 211.14 112.403 209.207 112.403 cv
f
215.583 109.605 mo
216.963 109.605 218.083 110.724 218.083 112.105 cv
218.083 113.486 216.963 114.605 215.583 114.605 cv
214.202 114.605 213.083 113.486 213.083 112.105 cv
213.083 110.724 214.202 109.605 215.583 109.605 cv
cp
215.583 108.605 mo
213.65 108.605 212.083 110.173 212.083 112.105 cv
212.083 114.038 213.65 115.605 215.583 115.605 cv
217.515 115.605 219.083 114.038 219.083 112.105 cv
219.083 110.173 217.515 108.605 215.583 108.605 cv
f
222.969 108.086 mo
224.35 108.086 225.469 109.205 225.469 110.586 cv
225.469 111.967 224.35 113.086 222.969 113.086 cv
221.589 113.086 220.47 111.967 220.47 110.586 cv
220.47 109.205 221.589 108.086 222.969 108.086 cv
cp
222.969 107.086 mo
221.036 107.086 219.469 108.653 219.469 110.586 cv
219.469 112.519 221.036 114.086 222.969 114.086 cv
224.902 114.086 226.47 112.519 226.47 110.586 cv
226.47 108.653 224.902 107.086 222.969 107.086 cv
f
227.878 104.668 mo
229.259 104.668 230.377 105.787 230.377 107.168 cv
230.377 108.548 229.259 109.667 227.878 109.667 cv
226.497 109.667 225.378 108.548 225.378 107.168 cv
225.378 105.787 226.497 104.668 227.878 104.668 cv
cp
227.878 103.667 mo
225.945 103.667 224.377 105.235 224.377 107.168 cv
224.377 109.101 225.945 110.668 227.878 110.668 cv
229.811 110.668 231.378 109.101 231.378 107.168 cv
231.378 105.235 229.811 103.667 227.878 103.667 cv
f
233.831 103.908 mo
235.212 103.908 236.331 105.027 236.331 106.408 cv
236.331 107.789 235.212 108.908 233.831 108.908 cv
232.451 108.908 231.332 107.789 231.332 106.408 cv
231.332 105.027 232.451 103.908 233.831 103.908 cv
cp
233.831 102.908 mo
231.899 102.908 230.331 104.475 230.331 106.408 cv
230.331 108.341 231.899 109.908 233.831 109.908 cv
235.764 109.908 237.332 108.341 237.332 106.408 cv
237.332 104.475 235.764 102.908 233.831 102.908 cv
f
238.859 102.009 mo
240.24 102.009 241.359 103.128 241.359 104.509 cv
241.359 105.89 240.24 107.009 238.859 107.009 cv
237.479 107.009 236.36 105.89 236.36 104.509 cv
236.36 103.128 237.479 102.009 238.859 102.009 cv
cp
238.859 101.009 mo
236.927 101.009 235.359 102.576 235.359 104.509 cv
235.359 106.442 236.927 108.009 238.859 108.009 cv
240.792 108.009 242.36 106.442 242.36 104.509 cv
242.36 102.576 240.792 101.009 238.859 101.009 cv
f
244.023 99.351 mo
245.404 99.351 246.523 100.47 246.523 101.85 cv
246.523 103.231 245.404 104.35 244.023 104.35 cv
242.643 104.35 241.524 103.231 241.524 101.85 cv
241.524 100.47 242.643 99.351 244.023 99.351 cv
cp
244.023 98.3499 mo
242.091 98.3499 240.523 99.918 240.523 101.85 cv
240.523 103.783 242.091 105.351 244.023 105.351 cv
245.956 105.351 247.524 103.783 247.524 101.85 cv
247.524 99.918 245.956 98.3499 244.023 98.3499 cv
f
248.686 96.312 mo
250.067 96.312 251.185 97.4309 251.185 98.812 cv
251.185 100.193 250.067 101.312 248.686 101.312 cv
247.305 101.312 246.186 100.193 246.186 98.812 cv
246.186 97.4309 247.305 96.312 248.686 96.312 cv
cp
248.686 95.312 mo
246.753 95.312 245.185 96.879 245.185 98.812 cv
245.185 100.745 246.753 102.312 248.686 102.312 cv
250.618 102.312 252.186 100.745 252.186 98.812 cv
252.186 96.879 250.618 95.312 248.686 95.312 cv
f
253.934 92.8939 mo
255.315 92.8939 256.434 94.013 256.434 95.3939 cv
256.434 96.7739 255.315 97.8939 253.934 97.8939 cv
252.554 97.8939 251.435 96.7739 251.435 95.3939 cv
251.435 94.013 252.554 92.8939 253.934 92.8939 cv
cp
253.934 91.8939 mo
252.001 91.8939 250.434 93.461 250.434 95.3939 cv
250.434 97.3259 252.001 98.8939 253.934 98.8939 cv
255.867 98.8939 257.435 97.3259 257.435 95.3939 cv
257.435 93.461 255.867 91.8939 253.934 91.8939 cv
f
259.137 92.1339 mo
260.518 92.1339 261.636 93.2529 261.636 94.6339 cv
261.636 96.015 260.518 97.1339 259.137 97.1339 cv
257.756 97.1339 256.637 96.015 256.637 94.6339 cv
256.637 93.2529 257.756 92.1339 259.137 92.1339 cv
cp
259.137 91.1339 mo
257.204 91.1339 255.636 92.7009 255.636 94.6339 cv
255.636 96.567 257.204 98.1339 259.137 98.1339 cv
261.07 98.1339 262.637 96.567 262.637 94.6339 cv
262.637 92.7009 261.07 91.1339 259.137 91.1339 cv
f
264.569 89.8549 mo
265.95 89.8549 267.069 90.974 267.069 92.3549 cv
267.069 93.7359 265.95 94.8549 264.569 94.8549 cv
263.188 94.8549 262.069 93.7359 262.069 92.3549 cv
262.069 90.974 263.188 89.8549 264.569 89.8549 cv
cp
264.569 88.8549 mo
262.636 88.8549 261.069 90.423 261.069 92.3549 cv
261.069 94.2879 262.636 95.8549 264.569 95.8549 cv
266.502 95.8549 268.069 94.2879 268.069 92.3549 cv
268.069 90.423 266.502 88.8549 264.569 88.8549 cv
f
270.147 84.918 mo
271.528 84.918 272.647 86.0369 272.647 87.418 cv
272.647 88.798 271.528 89.9169 270.147 89.9169 cv
268.766 89.9169 267.647 88.798 267.647 87.418 cv
267.647 86.0369 268.766 84.918 270.147 84.918 cv
cp
270.147 83.9169 mo
268.214 83.9169 266.647 85.4849 266.647 87.418 cv
266.647 89.3509 268.214 90.918 270.147 90.918 cv
272.08 90.918 273.647 89.3509 273.647 87.418 cv
273.647 85.4849 272.08 83.9169 270.147 83.9169 cv
f
275.289 83.399 mo
276.67 83.399 277.789 84.518 277.789 85.898 cv
277.789 87.2789 276.67 88.398 275.289 88.398 cv
273.908 88.398 272.789 87.2789 272.789 85.898 cv
272.789 84.518 273.908 83.399 275.289 83.399 cv
cp
275.289 82.398 mo
273.356 82.398 271.789 83.966 271.789 85.898 cv
271.789 87.8309 273.356 89.399 275.289 89.399 cv
277.222 89.399 278.789 87.8309 278.789 85.898 cv
278.789 83.966 277.222 82.398 275.289 82.398 cv
f
280.044 81.4999 mo
281.425 81.4999 282.544 82.619 282.544 83.999 cv
282.544 85.3799 281.425 86.499 280.044 86.499 cv
278.663 86.499 277.545 85.3799 277.545 83.999 cv
277.545 82.619 278.663 81.4999 280.044 81.4999 cv
cp
280.044 80.499 mo
278.111 80.499 276.544 82.067 276.544 83.999 cv
276.544 85.9319 278.111 87.4999 280.044 87.4999 cv
281.977 87.4999 283.545 85.9319 283.545 83.999 cv
283.545 82.067 281.977 80.499 280.044 80.499 cv
f
284.686 78.841 mo
286.067 78.841 287.186 79.9599 287.186 81.341 cv
287.186 82.722 286.067 83.841 284.686 83.841 cv
283.305 83.841 282.186 82.722 282.186 81.341 cv
282.186 79.9599 283.305 78.841 284.686 78.841 cv
cp
284.686 77.841 mo
282.753 77.841 281.186 79.4079 281.186 81.341 cv
281.186 83.274 282.753 84.841 284.686 84.841 cv
286.619 84.841 288.186 83.274 288.186 81.341 cv
288.186 79.4079 286.619 77.841 284.686 77.841 cv
f
289.474 76.942 mo
290.855 76.942 291.974 78.0609 291.974 79.442 cv
291.974 80.823 290.855 81.942 289.474 81.942 cv
288.093 81.942 286.975 80.823 286.975 79.442 cv
286.975 78.0609 288.093 76.942 289.474 76.942 cv
cp
289.474 75.942 mo
287.542 75.942 285.974 77.5089 285.974 79.442 cv
285.974 81.374 287.542 82.942 289.474 82.942 cv
291.407 82.942 292.975 81.374 292.975 79.442 cv
292.975 77.5089 291.407 75.942 289.474 75.942 cv
f
293.87 75.8029 mo
295.251 75.8029 296.37 76.922 296.37 78.3019 cv
296.37 79.6829 295.251 80.8019 293.87 80.8019 cv
292.49 80.8019 291.37 79.6829 291.37 78.3019 cv
291.37 76.922 292.49 75.8029 293.87 75.8029 cv
cp
293.87 74.8019 mo
291.938 74.8019 290.37 76.3699 290.37 78.3019 cv
290.37 80.2349 291.938 81.8029 293.87 81.8029 cv
295.803 81.8029 297.37 80.2349 297.37 78.3019 cv
297.37 76.3699 295.803 74.8019 293.87 74.8019 cv
f
298.444 73.524 mo
299.825 73.524 300.944 74.643 300.944 76.023 cv
300.944 77.4039 299.825 78.523 298.444 78.523 cv
297.063 78.523 295.944 77.4039 295.944 76.023 cv
295.944 74.643 297.063 73.524 298.444 73.524 cv
cp
298.444 72.523 mo
296.511 72.523 294.944 74.091 294.944 76.023 cv
294.944 77.9559 296.511 79.524 298.444 79.524 cv
300.377 79.524 301.944 77.9559 301.944 76.023 cv
301.944 74.091 300.377 72.523 298.444 72.523 cv
f
302.826 70.4849 mo
304.207 70.4849 305.326 71.6039 305.326 72.9849 cv
305.326 74.366 304.207 75.4849 302.826 75.4849 cv
301.446 75.4849 300.327 74.366 300.327 72.9849 cv
300.327 71.6039 301.446 70.4849 302.826 70.4849 cv
cp
302.826 69.4849 mo
300.894 69.4849 299.326 71.0519 299.326 72.9849 cv
299.326 74.918 300.894 76.4849 302.826 76.4849 cv
304.759 76.4849 306.327 74.918 306.327 72.9849 cv
306.327 71.0519 304.759 69.4849 302.826 69.4849 cv
f
306.756 69.346 mo
308.136 69.346 309.256 70.465 309.256 71.846 cv
309.256 73.2259 308.136 74.345 306.756 74.345 cv
305.375 74.345 304.256 73.2259 304.256 71.846 cv
304.256 70.465 305.375 69.346 306.756 69.346 cv
cp
306.756 68.345 mo
304.823 68.345 303.256 69.9129 303.256 71.846 cv
303.256 73.7779 304.823 75.346 306.756 75.346 cv
308.688 75.346 310.256 73.7779 310.256 71.846 cv
310.256 69.9129 308.688 68.345 306.756 68.345 cv
f
310.364 67.8269 mo
311.744 67.8269 312.863 68.946 312.863 70.3259 cv
312.863 71.7069 311.744 72.8259 310.364 72.8259 cv
308.983 72.8259 307.864 71.7069 307.864 70.3259 cv
307.864 68.946 308.983 67.8269 310.364 67.8269 cv
cp
310.364 66.8259 mo
308.431 66.8259 306.863 68.394 306.863 70.3259 cv
306.863 72.2589 308.431 73.8269 310.364 73.8269 cv
312.297 73.8269 313.864 72.2589 313.864 70.3259 cv
313.864 68.394 312.297 66.8259 310.364 66.8259 cv
f
314.461 65.548 mo
315.842 65.548 316.961 66.6669 316.961 68.048 cv
316.961 69.4279 315.842 70.547 314.461 70.547 cv
313.08 70.547 311.961 69.4279 311.961 68.048 cv
311.961 66.6669 313.08 65.548 314.461 65.548 cv
cp
314.461 64.547 mo
312.528 64.547 310.961 66.1149 310.961 68.048 cv
310.961 69.9799 312.528 71.548 314.461 71.548 cv
316.394 71.548 317.961 69.9799 317.961 68.048 cv
317.961 66.1149 316.394 64.547 314.461 64.547 cv
f
317.959 63.649 mo
319.34 63.649 320.459 64.768 320.459 66.149 cv
320.459 67.5289 319.34 68.648 317.959 68.648 cv
316.578 68.648 315.46 67.5289 315.46 66.149 cv
315.46 64.768 316.578 63.649 317.959 63.649 cv
cp
317.959 62.648 mo
316.026 62.648 314.459 64.216 314.459 66.149 cv
314.459 68.0809 316.026 69.649 317.959 69.649 cv
319.892 69.649 321.46 68.0809 321.46 66.149 cv
321.46 64.216 319.892 62.648 317.959 62.648 cv
f
321.574 60.2299 mo
322.955 60.2299 324.074 61.349 324.074 62.7299 cv
324.074 64.1109 322.955 65.2299 321.574 65.2299 cv
320.193 65.2299 319.074 64.1109 319.074 62.7299 cv
319.074 61.349 320.193 60.2299 321.574 60.2299 cv
cp
321.574 59.2299 mo
319.641 59.2299 318.074 60.798 318.074 62.7299 cv
318.074 64.6629 319.641 66.2299 321.574 66.2299 cv
323.507 66.2299 325.074 64.6629 325.074 62.7299 cv
325.074 60.798 323.507 59.2299 321.574 59.2299 cv
f
324.892 58.3319 mo
326.273 58.3319 327.392 59.4509 327.392 60.8309 cv
327.392 62.2119 326.273 63.3309 324.892 63.3309 cv
323.511 63.3309 322.392 62.2119 322.392 60.8309 cv
322.392 59.4509 323.511 58.3319 324.892 58.3319 cv
cp
324.892 57.3309 mo
322.959 57.3309 321.392 58.898 321.392 60.8309 cv
321.392 62.7639 322.959 64.3319 324.892 64.3319 cv
326.825 64.3319 328.392 62.7639 328.392 60.8309 cv
328.392 58.898 326.825 57.3309 324.892 57.3309 cv
f
328.082 56.4319 mo
329.463 56.4319 330.582 57.5509 330.582 58.9319 cv
330.582 60.3129 329.463 61.4319 328.082 61.4319 cv
326.701 61.4319 325.583 60.3129 325.583 58.9319 cv
325.583 57.5509 326.701 56.4319 328.082 56.4319 cv
cp
328.082 55.4319 mo
326.149 55.4319 324.582 56.999 324.582 58.9319 cv
324.582 60.8649 326.149 62.4319 328.082 62.4319 cv
330.015 62.4319 331.583 60.8649 331.583 58.9319 cv
331.583 56.999 330.015 55.4319 328.082 55.4319 cv
f
331.205 55.293 mo
332.586 55.293 333.705 56.4119 333.705 57.793 cv
333.705 59.173 332.586 60.2919 331.205 60.2919 cv
329.824 60.2919 328.705 59.173 328.705 57.793 cv
328.705 56.4119 329.824 55.293 331.205 55.293 cv
cp
331.205 54.2919 mo
329.272 54.2919 327.705 55.8599 327.705 57.793 cv
327.705 59.7259 329.272 61.293 331.205 61.293 cv
333.138 61.293 334.705 59.7259 334.705 57.793 cv
334.705 55.8599 333.138 54.2919 331.205 54.2919 cv
f
334.111 53.774 mo
335.491 53.774 336.61 54.893 336.61 56.273 cv
336.61 57.6539 335.491 58.773 334.111 58.773 cv
332.73 58.773 331.611 57.6539 331.611 56.273 cv
331.611 54.893 332.73 53.774 334.111 53.774 cv
cp
334.111 52.773 mo
332.178 52.773 330.61 54.341 330.61 56.273 cv
330.61 58.2059 332.178 59.774 334.111 59.774 cv
336.043 59.774 337.611 58.2059 337.611 56.273 cv
337.611 54.341 336.043 52.773 334.111 52.773 cv
f
337.035 52.2549 mo
338.416 52.2549 339.535 53.374 339.535 54.7539 cv
339.535 56.1349 338.416 57.2539 337.035 57.2539 cv
335.654 57.2539 334.535 56.1349 334.535 54.7539 cv
334.535 53.374 335.654 52.2549 337.035 52.2549 cv
cp
337.035 51.2539 mo
335.102 51.2539 333.535 52.821 333.535 54.7539 cv
333.535 56.687 335.102 58.2549 337.035 58.2549 cv
338.968 58.2549 340.535 56.687 340.535 54.7539 cv
340.535 52.821 338.968 51.2539 337.035 51.2539 cv
f
339.833 50.3549 mo
341.213 50.3549 342.332 51.474 342.332 52.8549 cv
342.332 54.2359 341.213 55.3549 339.833 55.3549 cv
338.452 55.3549 337.333 54.2359 337.333 52.8549 cv
337.333 51.474 338.452 50.3549 339.833 50.3549 cv
cp
339.833 49.3549 mo
337.9 49.3549 336.332 50.923 336.332 52.8549 cv
336.332 54.7879 337.9 56.3549 339.833 56.3549 cv
341.765 56.3549 343.333 54.7879 343.333 52.8549 cv
343.333 50.923 341.765 49.3549 339.833 49.3549 cv
f
342.521 48.0769 mo
343.902 48.0769 345.021 49.196 345.021 50.5759 cv
345.021 51.9569 343.902 53.0759 342.521 53.0759 cv
341.14 53.0759 340.021 51.9569 340.021 50.5759 cv
340.021 49.196 341.14 48.0769 342.521 48.0769 cv
cp
342.521 47.0759 mo
340.588 47.0759 339.021 48.644 339.021 50.5759 cv
339.021 52.5089 340.588 54.0769 342.521 54.0769 cv
344.454 54.0769 346.021 52.5089 346.021 50.5759 cv
346.021 48.644 344.454 47.0759 342.521 47.0759 cv
f
345.25 46.1779 mo
346.631 46.1779 347.75 47.297 347.75 48.6769 cv
347.75 50.0579 346.631 51.1769 345.25 51.1769 cv
343.869 51.1769 342.75 50.0579 342.75 48.6769 cv
342.75 47.297 343.869 46.1779 345.25 46.1779 cv
cp
345.25 45.1769 mo
343.317 45.1769 341.75 46.7449 341.75 48.6769 cv
341.75 50.6099 343.317 52.1779 345.25 52.1779 cv
347.183 52.1779 348.75 50.6099 348.75 48.6769 cv
348.75 46.7449 347.183 45.1769 345.25 45.1769 cv
f
347.726 45.418 mo
349.106 45.418 350.226 46.5369 350.226 47.918 cv
350.226 49.298 349.106 50.4169 347.726 50.4169 cv
346.345 50.4169 345.226 49.298 345.226 47.918 cv
345.226 46.5369 346.345 45.418 347.726 45.418 cv
cp
347.726 44.4169 mo
345.793 44.4169 344.226 45.9849 344.226 47.918 cv
344.226 49.8509 345.793 51.418 347.726 51.418 cv
349.659 51.418 351.226 49.8509 351.226 47.918 cv
351.226 45.9849 349.659 44.4169 347.726 44.4169 cv
f
350.227 44.6579 mo
351.607 44.6579 352.726 45.7769 352.726 47.1579 cv
352.726 48.539 351.607 49.6579 350.227 49.6579 cv
348.846 49.6579 347.727 48.539 347.727 47.1579 cv
347.727 45.7769 348.846 44.6579 350.227 44.6579 cv
cp
350.227 43.6579 mo
348.294 43.6579 346.726 45.2249 346.726 47.1579 cv
346.726 49.091 348.294 50.6579 350.227 50.6579 cv
352.159 50.6579 353.727 49.091 353.727 47.1579 cv
353.727 45.2249 352.159 43.6579 350.227 43.6579 cv
f
352.564 42.3799 mo
353.944 42.3799 355.063 43.499 355.063 44.8789 cv
355.063 46.2599 353.944 47.3789 352.564 47.3789 cv
351.183 47.3789 350.064 46.2599 350.064 44.8789 cv
350.064 43.499 351.183 42.3799 352.564 42.3799 cv
cp
352.564 41.3789 mo
350.631 41.3789 349.063 42.946 349.063 44.8789 cv
349.063 46.812 350.631 48.3799 352.564 48.3799 cv
354.496 48.3799 356.064 46.812 356.064 44.8789 cv
356.064 42.946 354.496 41.3789 352.564 41.3789 cv
f
354.647 42.3799 mo
356.028 42.3799 357.147 43.499 357.147 44.8789 cv
357.147 46.2599 356.028 47.3789 354.647 47.3789 cv
353.267 47.3789 352.147 46.2599 352.147 44.8789 cv
352.147 43.499 353.267 42.3799 354.647 42.3799 cv
cp
354.647 41.3789 mo
352.715 41.3789 351.147 42.946 351.147 44.8789 cv
351.147 46.812 352.715 48.3799 354.647 48.3799 cv
356.58 48.3799 358.147 46.812 358.147 44.8789 cv
358.147 42.946 356.58 41.3789 354.647 41.3789 cv
f
356.709 41.6199 mo
358.09 41.6199 359.209 42.739 359.209 44.1199 cv
359.209 45.4999 358.09 46.619 356.709 46.619 cv
355.328 46.619 354.21 45.4999 354.21 44.1199 cv
354.21 42.739 355.328 41.6199 356.709 41.6199 cv
cp
356.709 40.619 mo
354.776 40.619 353.209 42.187 353.209 44.1199 cv
353.209 46.0529 354.776 47.6199 356.709 47.6199 cv
358.642 47.6199 360.21 46.0529 360.21 44.1199 cv
360.21 42.187 358.642 40.619 356.709 40.619 cv
f
358.732 40.1009 mo
360.113 40.1009 361.231 41.22 361.231 42.5999 cv
361.231 43.9809 360.113 45.0999 358.732 45.0999 cv
357.351 45.0999 356.232 43.9809 356.232 42.5999 cv
356.232 41.22 357.351 40.1009 358.732 40.1009 cv
cp
358.732 39.0999 mo
356.799 39.0999 355.231 40.668 355.231 42.5999 cv
355.231 44.5329 356.799 46.1009 358.732 46.1009 cv
360.665 46.1009 362.232 44.5329 362.232 42.5999 cv
362.232 40.668 360.665 39.0999 358.732 39.0999 cv
f
360.535 38.9609 mo
361.916 38.9609 363.035 40.0799 363.035 41.461 cv
363.035 42.8419 361.916 43.961 360.535 43.961 cv
359.154 43.961 358.036 42.8419 358.036 41.461 cv
358.036 40.0799 359.154 38.9609 360.535 38.9609 cv
cp
360.535 37.9609 mo
358.602 37.9609 357.035 39.5279 357.035 41.461 cv
357.035 43.394 358.602 44.961 360.535 44.961 cv
362.468 44.961 364.036 43.394 364.036 41.461 cv
364.036 39.5279 362.468 37.9609 360.535 37.9609 cv
f
362.301 38.2019 mo
363.682 38.2019 364.801 39.321 364.801 40.7009 cv
364.801 42.0819 363.682 43.2009 362.301 43.2009 cv
360.92 43.2009 359.802 42.0819 359.802 40.7009 cv
359.802 39.321 360.92 38.2019 362.301 38.2019 cv
cp
362.301 37.2009 mo
360.368 37.2009 358.801 38.769 358.801 40.7009 cv
358.801 42.6339 360.368 44.2019 362.301 44.2019 cv
364.234 44.2019 365.802 42.6339 365.802 40.7009 cv
365.802 38.769 364.234 37.2009 362.301 37.2009 cv
f
363.918 37.062 mo
365.299 37.062 366.418 38.1809 366.418 39.562 cv
366.418 40.9429 365.299 42.062 363.918 42.062 cv
362.538 42.062 361.419 40.9429 361.419 39.562 cv
361.419 38.1809 362.538 37.062 363.918 37.062 cv
cp
363.918 36.062 mo
361.986 36.062 360.418 37.6289 360.418 39.562 cv
360.418 41.4949 361.986 43.062 363.918 43.062 cv
365.851 43.062 367.419 41.4949 367.419 39.562 cv
367.419 37.6289 365.851 36.062 363.918 36.062 cv
f
365.483 35.5429 mo
366.863 35.5429 367.982 36.662 367.982 38.0429 cv
367.982 39.4229 366.863 40.542 365.483 40.542 cv
364.102 40.542 362.983 39.4229 362.983 38.0429 cv
362.983 36.662 364.102 35.5429 365.483 35.5429 cv
cp
365.483 34.542 mo
363.55 34.542 361.982 36.11 361.982 38.0429 cv
361.982 39.9759 363.55 41.543 365.483 41.543 cv
367.415 41.543 368.983 39.9759 368.983 38.0429 cv
368.983 36.11 367.415 34.542 365.483 34.542 cv
f
366.965 33.644 mo
368.345 33.644 369.464 34.7629 369.464 36.144 cv
369.464 37.524 368.345 38.644 366.965 38.644 cv
365.584 38.644 364.465 37.524 364.465 36.144 cv
364.465 34.7629 365.584 33.644 366.965 33.644 cv
cp
366.965 32.644 mo
365.032 32.644 363.464 34.2109 363.464 36.144 cv
363.464 38.0759 365.032 39.644 366.965 39.644 cv
368.897 39.644 370.465 38.0759 370.465 36.144 cv
370.465 34.2109 368.897 32.644 366.965 32.644 cv
f
368.414 32.8839 mo
369.795 32.8839 370.913 34.0029 370.913 35.3839 cv
370.913 36.765 369.795 37.8839 368.414 37.8839 cv
367.033 37.8839 365.914 36.765 365.914 35.3839 cv
365.914 34.0029 367.033 32.8839 368.414 32.8839 cv
cp
368.414 31.8839 mo
366.481 31.8839 364.913 33.4509 364.913 35.3839 cv
364.913 37.317 366.481 38.8839 368.414 38.8839 cv
370.347 38.8839 371.914 37.317 371.914 35.3839 cv
371.914 33.4509 370.347 31.8839 368.414 31.8839 cv
f
369.688 30.6049 mo
371.069 30.6049 372.188 31.724 372.188 33.1049 cv
372.188 34.4859 371.069 35.6049 369.688 35.6049 cv
368.308 35.6049 367.188 34.4859 367.188 33.1049 cv
367.188 31.724 368.308 30.6049 369.688 30.6049 cv
cp
369.688 29.6049 mo
367.755 29.6049 366.188 31.1729 366.188 33.1049 cv
366.188 35.0379 367.755 36.6049 369.688 36.6049 cv
371.621 36.6049 373.188 35.0379 373.188 33.1049 cv
373.188 31.1729 371.621 29.6049 369.688 29.6049 cv
f
370.899 28.7069 mo
372.28 28.7069 373.399 29.8259 373.399 31.2059 cv
373.399 32.5869 372.28 33.7059 370.899 33.7059 cv
369.518 33.7059 368.399 32.5869 368.399 31.2059 cv
368.399 29.8259 369.518 28.7069 370.899 28.7069 cv
cp
370.899 27.7059 mo
368.966 27.7059 367.399 29.2729 367.399 31.2059 cv
367.399 33.1389 368.966 34.7069 370.899 34.7069 cv
372.832 34.7069 374.399 33.1389 374.399 31.2059 cv
374.399 29.2729 372.832 27.7059 370.899 27.7059 cv
f
372.018 28.3269 mo
373.399 28.3269 374.517 29.446 374.517 30.8259 cv
374.517 32.2069 373.399 33.3259 372.018 33.3259 cv
370.637 33.3259 369.518 32.2069 369.518 30.8259 cv
369.518 29.446 370.637 28.3269 372.018 28.3269 cv
cp
372.018 27.3259 mo
370.085 27.3259 368.517 28.894 368.517 30.8259 cv
368.517 32.7589 370.085 34.3269 372.018 34.3269 cv
373.951 34.3269 375.518 32.7589 375.518 30.8259 cv
375.518 28.894 373.951 27.3259 372.018 27.3259 cv
f
373.003 27.567 mo
374.384 27.567 375.503 28.6859 375.503 30.067 cv
375.503 31.448 374.384 32.567 373.003 32.567 cv
371.622 32.567 370.503 31.448 370.503 30.067 cv
370.503 28.6859 371.622 27.567 373.003 27.567 cv
cp
373.003 26.567 mo
371.07 26.567 369.503 28.1339 369.503 30.067 cv
369.503 31.999 371.07 33.567 373.003 33.567 cv
374.936 33.567 376.503 31.999 376.503 30.067 cv
376.503 28.1339 374.936 26.567 373.003 26.567 cv
f
374.074 26.8069 mo
375.454 26.8069 376.574 27.9259 376.574 29.3069 cv
376.574 30.688 375.454 31.8069 374.074 31.8069 cv
372.693 31.8069 371.574 30.688 371.574 29.3069 cv
371.574 27.9259 372.693 26.8069 374.074 26.8069 cv
cp
374.074 25.8069 mo
372.141 25.8069 370.574 27.374 370.574 29.3069 cv
370.574 31.24 372.141 32.8069 374.074 32.8069 cv
376.006 32.8069 377.574 31.24 377.574 29.3069 cv
377.574 27.374 376.006 25.8069 374.074 25.8069 cv
f
375.038 26.4279 mo
376.418 26.4279 377.537 27.547 377.537 28.9269 cv
377.537 30.308 376.418 31.4269 375.038 31.4269 cv
373.657 31.4269 372.538 30.308 372.538 28.9269 cv
372.538 27.547 373.657 26.4279 375.038 26.4279 cv
cp
375.038 25.4269 mo
373.105 25.4269 371.537 26.995 371.537 28.9269 cv
371.537 30.86 373.105 32.4279 375.038 32.4279 cv
376.97 32.4279 378.538 30.86 378.538 28.9269 cv
378.538 26.995 376.97 25.4269 375.038 25.4269 cv
f
375.904 26.4279 mo
377.285 26.4279 378.404 27.547 378.404 28.9269 cv
378.404 30.308 377.285 31.4269 375.904 31.4269 cv
374.524 31.4269 373.404 30.308 373.404 28.9269 cv
373.404 27.547 374.524 26.4279 375.904 26.4279 cv
cp
375.904 25.4269 mo
373.972 25.4269 372.404 26.995 372.404 28.9269 cv
372.404 30.86 373.972 32.4279 375.904 32.4279 cv
377.837 32.4279 379.404 30.86 379.404 28.9269 cv
379.404 26.995 377.837 25.4269 375.904 25.4269 cv
f
376.727 26.0479 mo
378.108 26.0479 379.227 27.167 379.227 28.5479 cv
379.227 29.9279 378.108 31.047 376.727 31.047 cv
375.346 31.047 374.227 29.9279 374.227 28.5479 cv
374.227 27.167 375.346 26.0479 376.727 26.0479 cv
cp
376.727 25.047 mo
374.794 25.047 373.227 26.615 373.227 28.5479 cv
373.227 30.4799 374.794 32.0479 376.727 32.0479 cv
378.66 32.0479 380.227 30.4799 380.227 28.5479 cv
380.227 26.615 378.66 25.047 376.727 25.047 cv
f
377.535 26.0479 mo
378.916 26.0479 380.035 27.167 380.035 28.5479 cv
380.035 29.9279 378.916 31.047 377.535 31.047 cv
376.155 31.047 375.036 29.9279 375.036 28.5479 cv
375.036 27.167 376.155 26.0479 377.535 26.0479 cv
cp
377.535 25.047 mo
375.603 25.047 374.035 26.615 374.035 28.5479 cv
374.035 30.4799 375.603 32.0479 377.535 32.0479 cv
379.468 32.0479 381.036 30.4799 381.036 28.5479 cv
381.036 26.615 379.468 25.047 377.535 25.047 cv
f
378.261 24.9079 mo
379.642 24.9079 380.761 26.0269 380.761 27.4079 cv
380.761 28.7889 379.642 29.9079 378.261 29.9079 cv
376.88 29.9079 375.761 28.7889 375.761 27.4079 cv
375.761 26.0269 376.88 24.9079 378.261 24.9079 cv
cp
378.261 23.9079 mo
376.328 23.9079 374.761 25.4749 374.761 27.4079 cv
374.761 29.3409 376.328 30.9079 378.261 30.9079 cv
380.194 30.9079 381.761 29.3409 381.761 27.4079 cv
381.761 25.4749 380.194 23.9079 378.261 23.9079 cv
f
378.889 24.149 mo
380.27 24.149 381.388 25.2679 381.388 26.649 cv
381.388 28.0289 380.27 29.1479 378.889 29.1479 cv
377.508 29.1479 376.389 28.0289 376.389 26.649 cv
376.389 25.2679 377.508 24.149 378.889 24.149 cv
cp
378.889 23.1479 mo
376.956 23.1479 375.388 24.7159 375.388 26.649 cv
375.388 28.5809 376.956 30.149 378.889 30.149 cv
380.822 30.149 382.389 28.5809 382.389 26.649 cv
382.389 24.7159 380.822 23.1479 378.889 23.1479 cv
f
379.507 23.769 mo
380.887 23.769 382.006 24.8879 382.006 26.269 cv
382.006 27.649 380.887 28.769 379.507 28.769 cv
378.126 28.769 377.007 27.649 377.007 26.269 cv
377.007 24.8879 378.126 23.769 379.507 23.769 cv
cp
379.507 22.769 mo
377.574 22.769 376.006 24.3359 376.006 26.269 cv
376.006 28.2009 377.574 29.769 379.507 29.769 cv
381.439 29.769 383.007 28.2009 383.007 26.269 cv
383.007 24.3359 381.439 22.769 379.507 22.769 cv
f
380.093 23.3889 mo
381.474 23.3889 382.593 24.5079 382.593 25.8889 cv
382.593 27.27 381.474 28.3889 380.093 28.3889 cv
378.713 28.3889 377.594 27.27 377.594 25.8889 cv
377.594 24.5079 378.713 23.3889 380.093 23.3889 cv
cp
380.093 22.3889 mo
378.161 22.3889 376.593 23.9559 376.593 25.8889 cv
376.593 27.822 378.161 29.3889 380.093 29.3889 cv
382.026 29.3889 383.594 27.822 383.594 25.8889 cv
383.594 23.9559 382.026 22.3889 380.093 22.3889 cv
f
380.615 23.3889 mo
381.996 23.3889 383.115 24.5079 383.115 25.8889 cv
383.115 27.27 381.996 28.3889 380.615 28.3889 cv
379.235 28.3889 378.116 27.27 378.116 25.8889 cv
378.116 24.5079 379.235 23.3889 380.615 23.3889 cv
cp
380.615 22.3889 mo
378.683 22.3889 377.115 23.9559 377.115 25.8889 cv
377.115 27.822 378.683 29.3889 380.615 29.3889 cv
382.548 29.3889 384.116 27.822 384.116 25.8889 cv
384.116 23.9559 382.548 22.3889 380.615 22.3889 cv
f
381.099 22.6299 mo
382.479 22.6299 383.599 23.749 383.599 25.1289 cv
383.599 26.5099 382.479 27.6289 381.099 27.6289 cv
379.718 27.6289 378.599 26.5099 378.599 25.1289 cv
378.599 23.749 379.718 22.6299 381.099 22.6299 cv
cp
381.099 21.6289 mo
379.166 21.6289 377.599 23.196 377.599 25.1289 cv
377.599 27.062 379.166 28.6299 381.099 28.6299 cv
383.031 28.6299 384.599 27.062 384.599 25.1289 cv
384.599 23.196 383.031 21.6289 381.099 21.6289 cv
f
381.531 22.6299 mo
382.912 22.6299 384.031 23.749 384.031 25.1289 cv
384.031 26.5099 382.912 27.6289 381.531 27.6289 cv
380.151 27.6289 379.031 26.5099 379.031 25.1289 cv
379.031 23.749 380.151 22.6299 381.531 22.6299 cv
cp
381.531 21.6289 mo
379.599 21.6289 378.031 23.196 378.031 25.1289 cv
378.031 27.062 379.599 28.6299 381.531 28.6299 cv
383.464 28.6299 385.031 27.062 385.031 25.1289 cv
385.031 23.196 383.464 21.6289 381.531 21.6289 cv
f
381.93 22.2499 mo
383.311 22.2499 384.43 23.369 384.43 24.749 cv
384.43 26.1299 383.311 27.249 381.93 27.249 cv
380.549 27.249 379.43 26.1299 379.43 24.749 cv
379.43 23.369 380.549 22.2499 381.93 22.2499 cv
cp
381.93 21.249 mo
379.997 21.249 378.43 22.817 378.43 24.749 cv
378.43 26.6819 379.997 28.2499 381.93 28.2499 cv
383.863 28.2499 385.43 26.6819 385.43 24.749 cv
385.43 22.817 383.863 21.249 381.93 21.249 cv
f
382.297 21.11 mo
383.678 21.11 384.797 22.2289 384.797 23.61 cv
384.797 24.9909 383.678 26.11 382.297 26.11 cv
380.917 26.11 379.798 24.9909 379.798 23.61 cv
379.798 22.2289 380.917 21.11 382.297 21.11 cv
cp
382.297 20.11 mo
380.365 20.11 378.797 21.6769 378.797 23.61 cv
378.797 25.5429 380.365 27.11 382.297 27.11 cv
384.23 27.11 385.798 25.5429 385.798 23.61 cv
385.798 21.6769 384.23 20.11 382.297 20.11 cv
f
382.613 21.11 mo
383.994 21.11 385.113 22.2289 385.113 23.61 cv
385.113 24.9909 383.994 26.11 382.613 26.11 cv
381.232 26.11 380.113 24.9909 380.113 23.61 cv
380.113 22.2289 381.232 21.11 382.613 21.11 cv
cp
382.613 20.11 mo
380.68 20.11 379.113 21.6769 379.113 23.61 cv
379.113 25.5429 380.68 27.11 382.613 27.11 cv
384.546 27.11 386.113 25.5429 386.113 23.61 cv
386.113 21.6769 384.546 20.11 382.613 20.11 cv
f
382.926 20.3509 mo
384.306 20.3509 385.425 21.4699 385.425 22.8499 cv
385.425 24.2309 384.306 25.3499 382.926 25.3499 cv
381.545 25.3499 380.426 24.2309 380.426 22.8499 cv
380.426 21.4699 381.545 20.3509 382.926 20.3509 cv
cp
382.926 19.3499 mo
380.993 19.3499 379.425 20.9179 379.425 22.8499 cv
379.425 24.7829 380.993 26.3509 382.926 26.3509 cv
384.858 26.3509 386.426 24.7829 386.426 22.8499 cv
386.426 20.9179 384.858 19.3499 382.926 19.3499 cv
f
383.212 19.9709 mo
384.593 19.9709 385.712 21.0899 385.712 22.4709 cv
385.712 23.8509 384.593 24.9699 383.212 24.9699 cv
381.831 24.9699 380.712 23.8509 380.712 22.4709 cv
380.712 21.0899 381.831 19.9709 383.212 19.9709 cv
cp
383.212 18.9699 mo
381.279 18.9699 379.712 20.5379 379.712 22.4709 cv
379.712 24.4029 381.279 25.9709 383.212 25.9709 cv
385.145 25.9709 386.712 24.4029 386.712 22.4709 cv
386.712 20.5379 385.145 18.9699 383.212 18.9699 cv
f
383.495 19.9709 mo
384.876 19.9709 385.995 21.0899 385.995 22.4709 cv
385.995 23.8509 384.876 24.9699 383.495 24.9699 cv
382.114 24.9699 380.995 23.8509 380.995 22.4709 cv
380.995 21.0899 382.114 19.9709 383.495 19.9709 cv
cp
383.495 18.9699 mo
381.562 18.9699 379.995 20.5379 379.995 22.4709 cv
379.995 24.4029 381.562 25.9709 383.495 25.9709 cv
385.427 25.9709 386.995 24.4029 386.995 22.4709 cv
386.995 20.5379 385.427 18.9699 383.495 18.9699 cv
f
383.738 19.9709 mo
385.119 19.9709 386.238 21.0899 386.238 22.4709 cv
386.238 23.8509 385.119 24.9699 383.738 24.9699 cv
382.358 24.9699 381.238 23.8509 381.238 22.4709 cv
381.238 21.0899 382.358 19.9709 383.738 19.9709 cv
cp
383.738 18.9699 mo
381.805 18.9699 380.238 20.5379 380.238 22.4709 cv
380.238 24.4029 381.805 25.9709 383.738 25.9709 cv
385.671 25.9709 387.238 24.4029 387.238 22.4709 cv
387.238 20.5379 385.671 18.9699 383.738 18.9699 cv
f
383.949 19.9709 mo
385.329 19.9709 386.448 21.0899 386.448 22.4709 cv
386.448 23.8509 385.329 24.9699 383.949 24.9699 cv
382.568 24.9699 381.449 23.8509 381.449 22.4709 cv
381.449 21.0899 382.568 19.9709 383.949 19.9709 cv
cp
383.949 18.9699 mo
382.016 18.9699 380.448 20.5379 380.448 22.4709 cv
380.448 24.4029 382.016 25.9709 383.949 25.9709 cv
385.881 25.9709 387.449 24.4029 387.449 22.4709 cv
387.449 20.5379 385.881 18.9699 383.949 18.9699 cv
f
384.138 19.5909 mo
385.518 19.5909 386.637 20.7099 386.637 22.0909 cv
386.637 23.472 385.518 24.5909 384.138 24.5909 cv
382.757 24.5909 381.638 23.472 381.638 22.0909 cv
381.638 20.7099 382.757 19.5909 384.138 19.5909 cv
cp
384.138 18.5909 mo
382.205 18.5909 380.637 20.1579 380.637 22.0909 cv
380.637 24.024 382.205 25.5909 384.138 25.5909 cv
386.07 25.5909 387.638 24.024 387.638 22.0909 cv
387.638 20.1579 386.07 18.5909 384.138 18.5909 cv
f
384.31 19.2109 mo
385.691 19.2109 386.81 20.3299 386.81 21.7109 cv
386.81 23.0919 385.691 24.2109 384.31 24.2109 cv
382.929 24.2109 381.81 23.0919 381.81 21.7109 cv
381.81 20.3299 382.929 19.2109 384.31 19.2109 cv
cp
384.31 18.2109 mo
382.377 18.2109 380.81 19.7779 380.81 21.7109 cv
380.81 23.644 382.377 25.2109 384.31 25.2109 cv
386.243 25.2109 387.81 23.644 387.81 21.7109 cv
387.81 19.7779 386.243 18.2109 384.31 18.2109 cv
f
384.46 18.8319 mo
385.841 18.8319 386.96 19.9509 386.96 21.3309 cv
386.96 22.7119 385.841 23.8309 384.46 23.8309 cv
383.079 23.8309 381.96 22.7119 381.96 21.3309 cv
381.96 19.9509 383.079 18.8319 384.46 18.8319 cv
cp
384.46 17.8309 mo
382.527 17.8309 380.96 19.3979 380.96 21.3309 cv
380.96 23.2639 382.527 24.8319 384.46 24.8319 cv
386.393 24.8319 387.96 23.2639 387.96 21.3309 cv
387.96 19.3979 386.393 17.8309 384.46 17.8309 cv
f
384.61 18.8319 mo
385.99 18.8319 387.11 19.9509 387.11 21.3309 cv
387.11 22.7119 385.99 23.8309 384.61 23.8309 cv
383.229 23.8309 382.11 22.7119 382.11 21.3309 cv
382.11 19.9509 383.229 18.8319 384.61 18.8319 cv
cp
384.61 17.8309 mo
382.677 17.8309 381.11 19.3979 381.11 21.3309 cv
381.11 23.2639 382.677 24.8319 384.61 24.8319 cv
386.542 24.8319 388.11 23.2639 388.11 21.3309 cv
388.11 19.3979 386.542 17.8309 384.61 17.8309 cv
f
384.733 18.8319 mo
386.114 18.8319 387.233 19.9509 387.233 21.3309 cv
387.233 22.7119 386.114 23.8309 384.733 23.8309 cv
383.352 23.8309 382.233 22.7119 382.233 21.3309 cv
382.233 19.9509 383.352 18.8319 384.733 18.8319 cv
cp
384.733 17.8309 mo
382.801 17.8309 381.233 19.3979 381.233 21.3309 cv
381.233 23.2639 382.801 24.8319 384.733 24.8319 cv
386.666 24.8319 388.233 23.2639 388.233 21.3309 cv
388.233 19.3979 386.666 17.8309 384.733 17.8309 cv
f
384.846 18.8319 mo
386.227 18.8319 387.345 19.9509 387.345 21.3309 cv
387.345 22.7119 386.227 23.8309 384.846 23.8309 cv
383.465 23.8309 382.346 22.7119 382.346 21.3309 cv
382.346 19.9509 383.465 18.8319 384.846 18.8319 cv
cp
384.846 17.8309 mo
382.913 17.8309 381.345 19.3979 381.345 21.3309 cv
381.345 23.2639 382.913 24.8319 384.846 24.8319 cv
386.779 24.8319 388.346 23.2639 388.346 21.3309 cv
388.346 19.3979 386.779 17.8309 384.846 17.8309 cv
f
384.95 18.8319 mo
386.331 18.8319 387.45 19.9509 387.45 21.3309 cv
387.45 22.7119 386.331 23.8309 384.95 23.8309 cv
383.57 23.8309 382.451 22.7119 382.451 21.3309 cv
382.451 19.9509 383.57 18.8319 384.95 18.8319 cv
cp
384.95 17.8309 mo
383.017 17.8309 381.45 19.3979 381.45 21.3309 cv
381.45 23.2639 383.017 24.8319 384.95 24.8319 cv
386.883 24.8319 388.451 23.2639 388.451 21.3309 cv
388.451 19.3979 386.883 17.8309 384.95 17.8309 cv
f
385.049 18.8319 mo
386.429 18.8319 387.549 19.9509 387.549 21.3309 cv
387.549 22.7119 386.429 23.8309 385.049 23.8309 cv
383.668 23.8309 382.549 22.7119 382.549 21.3309 cv
382.549 19.9509 383.668 18.8319 385.049 18.8319 cv
cp
385.049 17.8309 mo
383.116 17.8309 381.549 19.3979 381.549 21.3309 cv
381.549 23.2639 383.116 24.8319 385.049 24.8319 cv
386.981 24.8319 388.549 23.2639 388.549 21.3309 cv
388.549 19.3979 386.981 17.8309 385.049 17.8309 cv
f
385.135 18.8319 mo
386.515 18.8319 387.634 19.9509 387.634 21.3309 cv
387.634 22.7119 386.515 23.8309 385.135 23.8309 cv
383.754 23.8309 382.635 22.7119 382.635 21.3309 cv
382.635 19.9509 383.754 18.8319 385.135 18.8319 cv
cp
385.135 17.8309 mo
383.202 17.8309 381.634 19.3979 381.634 21.3309 cv
381.634 23.2639 383.202 24.8319 385.135 24.8319 cv
387.067 24.8319 388.635 23.2639 388.635 21.3309 cv
388.635 19.3979 387.067 17.8309 385.135 17.8309 cv
f
385.206 18.4519 mo
386.586 18.4519 387.705 19.571 387.705 20.9509 cv
387.705 22.3319 386.586 23.4509 385.206 23.4509 cv
383.825 23.4509 382.706 22.3319 382.706 20.9509 cv
382.706 19.571 383.825 18.4519 385.206 18.4519 cv
cp
385.206 17.4509 mo
383.273 17.4509 381.705 19.019 381.705 20.9509 cv
381.705 22.8839 383.273 24.4519 385.206 24.4519 cv
387.138 24.4519 388.706 22.8839 388.706 20.9509 cv
388.706 19.019 387.138 17.4509 385.206 17.4509 cv
f
385.274 18.4519 mo
386.654 18.4519 387.773 19.571 387.773 20.9509 cv
387.773 22.3319 386.654 23.4509 385.274 23.4509 cv
383.893 23.4509 382.774 22.3319 382.774 20.9509 cv
382.774 19.571 383.893 18.4519 385.274 18.4519 cv
cp
385.274 17.4509 mo
383.341 17.4509 381.773 19.019 381.773 20.9509 cv
381.773 22.8839 383.341 24.4519 385.274 24.4519 cv
387.206 24.4519 388.774 22.8839 388.774 20.9509 cv
388.774 19.019 387.206 17.4509 385.274 17.4509 cv
f
385.337 18.4519 mo
386.718 18.4519 387.837 19.571 387.837 20.9509 cv
387.837 22.3319 386.718 23.4509 385.337 23.4509 cv
383.956 23.4509 382.837 22.3319 382.837 20.9509 cv
382.837 19.571 383.956 18.4519 385.337 18.4519 cv
cp
385.337 17.4509 mo
383.404 17.4509 381.837 19.019 381.837 20.9509 cv
381.837 22.8839 383.404 24.4519 385.337 24.4519 cv
387.27 24.4519 388.837 22.8839 388.837 20.9509 cv
388.837 19.019 387.27 17.4509 385.337 17.4509 cv
f
385.407 18.4519 mo
386.788 18.4519 387.907 19.571 387.907 20.9509 cv
387.907 22.3319 386.788 23.4509 385.407 23.4509 cv
384.026 23.4509 382.908 22.3319 382.908 20.9509 cv
382.908 19.571 384.026 18.4519 385.407 18.4519 cv
cp
385.407 17.4509 mo
383.474 17.4509 381.907 19.019 381.907 20.9509 cv
381.907 22.8839 383.474 24.4519 385.407 24.4519 cv
387.34 24.4519 388.908 22.8839 388.908 20.9509 cv
388.908 19.019 387.34 17.4509 385.407 17.4509 cv
f
385.455 18.4519 mo
386.836 18.4519 387.954 19.571 387.954 20.9509 cv
387.954 22.3319 386.836 23.4509 385.455 23.4509 cv
384.074 23.4509 382.955 22.3319 382.955 20.9509 cv
382.955 19.571 384.074 18.4519 385.455 18.4519 cv
cp
385.455 17.4509 mo
383.522 17.4509 381.954 19.019 381.954 20.9509 cv
381.954 22.8839 383.522 24.4519 385.455 24.4519 cv
387.388 24.4519 388.955 22.8839 388.955 20.9509 cv
388.955 19.019 387.388 17.4509 385.455 17.4509 cv
f
385.502 18.4519 mo
386.883 18.4519 388.002 19.571 388.002 20.9509 cv
388.002 22.3319 386.883 23.4509 385.502 23.4509 cv
384.122 23.4509 383.002 22.3319 383.002 20.9509 cv
383.002 19.571 384.122 18.4519 385.502 18.4519 cv
cp
385.502 17.4509 mo
383.57 17.4509 382.002 19.019 382.002 20.9509 cv
382.002 22.8839 383.57 24.4519 385.502 24.4519 cv
387.435 24.4519 389.002 22.8839 389.002 20.9509 cv
389.002 19.019 387.435 17.4509 385.502 17.4509 cv
f
385.55 18.4519 mo
386.93 18.4519 388.049 19.571 388.049 20.9509 cv
388.049 22.3319 386.93 23.4509 385.55 23.4509 cv
384.169 23.4509 383.05 22.3319 383.05 20.9509 cv
383.05 19.571 384.169 18.4519 385.55 18.4519 cv
cp
385.55 17.4509 mo
383.617 17.4509 382.049 19.019 382.049 20.9509 cv
382.049 22.8839 383.617 24.4519 385.55 24.4519 cv
387.483 24.4519 389.05 22.8839 389.05 20.9509 cv
389.05 19.019 387.483 17.4509 385.55 17.4509 cv
f
385.584 18.4519 mo
386.965 18.4519 388.084 19.571 388.084 20.9509 cv
388.084 22.3319 386.965 23.4509 385.584 23.4509 cv
384.204 23.4509 383.085 22.3319 383.085 20.9509 cv
383.085 19.571 384.204 18.4519 385.584 18.4519 cv
cp
385.584 17.4509 mo
383.652 17.4509 382.084 19.019 382.084 20.9509 cv
382.084 22.8839 383.652 24.4519 385.584 24.4519 cv
387.517 24.4519 389.085 22.8839 389.085 20.9509 cv
389.085 19.019 387.517 17.4509 385.584 17.4509 cv
f
385.61 18.072 mo
386.99 18.072 388.11 19.1909 388.11 20.572 cv
388.11 21.9519 386.99 23.071 385.61 23.071 cv
384.229 23.071 383.11 21.9519 383.11 20.572 cv
383.11 19.1909 384.229 18.072 385.61 18.072 cv
cp
385.61 17.071 mo
383.677 17.071 382.11 18.6389 382.11 20.572 cv
382.11 22.5039 383.677 24.072 385.61 24.072 cv
387.542 24.072 389.11 22.5039 389.11 20.572 cv
389.11 18.6389 387.542 17.071 385.61 17.071 cv
f
385.644 18.072 mo
387.025 18.072 388.144 19.1909 388.144 20.572 cv
388.144 21.9519 387.025 23.071 385.644 23.071 cv
384.263 23.071 383.145 21.9519 383.145 20.572 cv
383.145 19.1909 384.263 18.072 385.644 18.072 cv
cp
385.644 17.071 mo
383.711 17.071 382.144 18.6389 382.144 20.572 cv
382.144 22.5039 383.711 24.072 385.644 24.072 cv
387.577 24.072 389.145 22.5039 389.145 20.572 cv
389.145 18.6389 387.577 17.071 385.644 17.071 cv
f
385.671 17.692 mo
387.051 17.692 388.17 18.8109 388.17 20.192 cv
388.17 21.573 387.051 22.692 385.671 22.692 cv
384.29 22.692 383.171 21.573 383.171 20.192 cv
383.171 18.8109 384.29 17.692 385.671 17.692 cv
cp
385.671 16.692 mo
383.738 16.692 382.17 18.2589 382.17 20.192 cv
382.17 22.124 383.738 23.692 385.671 23.692 cv
387.603 23.692 389.171 22.124 389.171 20.192 cv
389.171 18.2589 387.603 16.692 385.671 16.692 cv
f
385.69 17.692 mo
387.071 17.692 388.19 18.8109 388.19 20.192 cv
388.19 21.573 387.071 22.692 385.69 22.692 cv
384.309 22.692 383.19 21.573 383.19 20.192 cv
383.19 18.8109 384.309 17.692 385.69 17.692 cv
cp
385.69 16.692 mo
383.757 16.692 382.19 18.2589 382.19 20.192 cv
382.19 22.124 383.757 23.692 385.69 23.692 cv
387.623 23.692 389.19 22.124 389.19 20.192 cv
389.19 18.2589 387.623 16.692 385.69 16.692 cv
f
385.709 17.692 mo
387.09 17.692 388.209 18.8109 388.209 20.192 cv
388.209 21.573 387.09 22.692 385.709 22.692 cv
384.329 22.692 383.21 21.573 383.21 20.192 cv
383.21 18.8109 384.329 17.692 385.709 17.692 cv
cp
385.709 16.692 mo
383.776 16.692 382.209 18.2589 382.209 20.192 cv
382.209 22.124 383.776 23.692 385.709 23.692 cv
387.642 23.692 389.21 22.124 389.21 20.192 cv
389.21 18.2589 387.642 16.692 385.709 16.692 cv
f
385.729 17.312 mo
387.109 17.312 388.228 18.4309 388.228 19.812 cv
388.228 21.193 387.109 22.312 385.729 22.312 cv
384.348 22.312 383.229 21.193 383.229 19.812 cv
383.229 18.4309 384.348 17.312 385.729 17.312 cv
cp
385.729 16.312 mo
383.796 16.312 382.228 17.8789 382.228 19.812 cv
382.228 21.745 383.796 23.312 385.729 23.312 cv
387.661 23.312 389.229 21.745 389.229 19.812 cv
389.229 17.8789 387.661 16.312 385.729 16.312 cv
f
385.748 17.312 mo
387.129 17.312 388.248 18.4309 388.248 19.812 cv
388.248 21.193 387.129 22.312 385.748 22.312 cv
384.367 22.312 383.249 21.193 383.249 19.812 cv
383.249 18.4309 384.367 17.312 385.748 17.312 cv
cp
385.748 16.312 mo
383.815 16.312 382.248 17.8789 382.248 19.812 cv
382.248 21.745 383.815 23.312 385.748 23.312 cv
387.681 23.312 389.249 21.745 389.249 19.812 cv
389.249 17.8789 387.681 16.312 385.748 16.312 cv
f
385.76 17.312 mo
387.14 17.312 388.259 18.4309 388.259 19.812 cv
388.259 21.193 387.14 22.312 385.76 22.312 cv
384.379 22.312 383.26 21.193 383.26 19.812 cv
383.26 18.4309 384.379 17.312 385.76 17.312 cv
cp
385.76 16.312 mo
383.827 16.312 382.259 17.8789 382.259 19.812 cv
382.259 21.745 383.827 23.312 385.76 23.312 cv
387.692 23.312 389.26 21.745 389.26 19.812 cv
389.26 17.8789 387.692 16.312 385.76 16.312 cv
f
385.772 17.312 mo
387.153 17.312 388.272 18.4309 388.272 19.812 cv
388.272 21.193 387.153 22.312 385.772 22.312 cv
384.391 22.312 383.272 21.193 383.272 19.812 cv
383.272 18.4309 384.391 17.312 385.772 17.312 cv
cp
385.772 16.312 mo
383.839 16.312 382.272 17.8789 382.272 19.812 cv
382.272 21.745 383.839 23.312 385.772 23.312 cv
387.705 23.312 389.272 21.745 389.272 19.812 cv
389.272 17.8789 387.705 16.312 385.772 16.312 cv
f
385.78 17.312 mo
387.161 17.312 388.28 18.4309 388.28 19.812 cv
388.28 21.193 387.161 22.312 385.78 22.312 cv
384.399 22.312 383.28 21.193 383.28 19.812 cv
383.28 18.4309 384.399 17.312 385.78 17.312 cv
cp
385.78 16.312 mo
383.847 16.312 382.28 17.8789 382.28 19.812 cv
382.28 21.745 383.847 23.312 385.78 23.312 cv
387.713 23.312 389.28 21.745 389.28 19.812 cv
389.28 17.8789 387.713 16.312 385.78 16.312 cv
f
385.788 17.312 mo
387.169 17.312 388.288 18.4309 388.288 19.812 cv
388.288 21.193 387.169 22.312 385.788 22.312 cv
384.408 22.312 383.288 21.193 383.288 19.812 cv
383.288 18.4309 384.408 17.312 385.788 17.312 cv
cp
385.788 16.312 mo
383.856 16.312 382.288 17.8789 382.288 19.812 cv
382.288 21.745 383.856 23.312 385.788 23.312 cv
387.721 23.312 389.288 21.745 389.288 19.812 cv
389.288 17.8789 387.721 16.312 385.788 16.312 cv
f
385.794 17.312 mo
387.175 17.312 388.294 18.4309 388.294 19.812 cv
388.294 21.193 387.175 22.312 385.794 22.312 cv
384.413 22.312 383.295 21.193 383.295 19.812 cv
383.295 18.4309 384.413 17.312 385.794 17.312 cv
cp
385.794 16.312 mo
383.861 16.312 382.294 17.8789 382.294 19.812 cv
382.294 21.745 383.861 23.312 385.794 23.312 cv
387.727 23.312 389.295 21.745 389.295 19.812 cv
389.295 17.8789 387.727 16.312 385.794 16.312 cv
f
385.806 17.312 mo
387.186 17.312 388.306 18.4309 388.306 19.812 cv
388.306 21.193 387.186 22.312 385.806 22.312 cv
384.425 22.312 383.306 21.193 383.306 19.812 cv
383.306 18.4309 384.425 17.312 385.806 17.312 cv
cp
385.806 16.312 mo
383.873 16.312 382.306 17.8789 382.306 19.812 cv
382.306 21.745 383.873 23.312 385.806 23.312 cv
387.738 23.312 389.306 21.745 389.306 19.812 cv
389.306 17.8789 387.738 16.312 385.806 16.312 cv
f
385.813 17.312 mo
387.193 17.312 388.312 18.4309 388.312 19.812 cv
388.312 21.193 387.193 22.312 385.813 22.312 cv
384.432 22.312 383.313 21.193 383.313 19.812 cv
383.313 18.4309 384.432 17.312 385.813 17.312 cv
cp
385.813 16.312 mo
383.88 16.312 382.312 17.8789 382.312 19.812 cv
382.312 21.745 383.88 23.312 385.813 23.312 cv
387.745 23.312 389.313 21.745 389.313 19.812 cv
389.313 17.8789 387.745 16.312 385.813 16.312 cv
f
385.817 17.312 mo
387.198 17.312 388.317 18.4309 388.317 19.812 cv
388.317 21.193 387.198 22.312 385.817 22.312 cv
384.437 22.312 383.318 21.193 383.318 19.812 cv
383.318 18.4309 384.437 17.312 385.817 17.312 cv
cp
385.817 16.312 mo
383.885 16.312 382.317 17.8789 382.317 19.812 cv
382.317 21.745 383.885 23.312 385.817 23.312 cv
387.75 23.312 389.318 21.745 389.318 19.812 cv
389.318 17.8789 387.75 16.312 385.817 16.312 cv
f
385.822 17.312 mo
387.203 17.312 388.322 18.4309 388.322 19.812 cv
388.322 21.193 387.203 22.312 385.822 22.312 cv
384.442 22.312 383.323 21.193 383.323 19.812 cv
383.323 18.4309 384.442 17.312 385.822 17.312 cv
cp
385.822 16.312 mo
383.89 16.312 382.322 17.8789 382.322 19.812 cv
382.322 21.745 383.89 23.312 385.822 23.312 cv
387.755 23.312 389.323 21.745 389.323 19.812 cv
389.323 17.8789 387.755 16.312 385.822 16.312 cv
f
385.827 17.312 mo
387.208 17.312 388.327 18.4309 388.327 19.812 cv
388.327 21.193 387.208 22.312 385.827 22.312 cv
384.446 22.312 383.327 21.193 383.327 19.812 cv
383.327 18.4309 384.446 17.312 385.827 17.312 cv
cp
385.827 16.312 mo
383.894 16.312 382.327 17.8789 382.327 19.812 cv
382.327 21.745 383.894 23.312 385.827 23.312 cv
387.76 23.312 389.327 21.745 389.327 19.812 cv
389.327 17.8789 387.76 16.312 385.827 16.312 cv
f
385.83 17.312 mo
387.211 17.312 388.33 18.4309 388.33 19.812 cv
388.33 21.193 387.211 22.312 385.83 22.312 cv
384.449 22.312 383.33 21.193 383.33 19.812 cv
383.33 18.4309 384.449 17.312 385.83 17.312 cv
cp
385.83 16.312 mo
383.897 16.312 382.33 17.8789 382.33 19.812 cv
382.33 21.745 383.897 23.312 385.83 23.312 cv
387.763 23.312 389.33 21.745 389.33 19.812 cv
389.33 17.8789 387.763 16.312 385.83 16.312 cv
f
385.836 17.312 mo
387.217 17.312 388.335 18.4309 388.335 19.812 cv
388.335 21.193 387.217 22.312 385.836 22.312 cv
384.455 22.312 383.336 21.193 383.336 19.812 cv
383.336 18.4309 384.455 17.312 385.836 17.312 cv
cp
385.836 16.312 mo
383.903 16.312 382.335 17.8789 382.335 19.812 cv
382.335 21.745 383.903 23.312 385.836 23.312 cv
387.768 23.312 389.336 21.745 389.336 19.812 cv
389.336 17.8789 387.768 16.312 385.836 16.312 cv
f
385.842 17.312 mo
387.223 17.312 388.342 18.4309 388.342 19.812 cv
388.342 21.193 387.223 22.312 385.842 22.312 cv
384.461 22.312 383.342 21.193 383.342 19.812 cv
383.342 18.4309 384.461 17.312 385.842 17.312 cv
cp
385.842 16.312 mo
383.91 16.312 382.342 17.8789 382.342 19.812 cv
382.342 21.745 383.91 23.312 385.842 23.312 cv
387.775 23.312 389.342 21.745 389.342 19.812 cv
389.342 17.8789 387.775 16.312 385.842 16.312 cv
f
385.846 17.312 mo
387.227 17.312 388.345 18.4309 388.345 19.812 cv
388.345 21.193 387.227 22.312 385.846 22.312 cv
384.465 22.312 383.346 21.193 383.346 19.812 cv
383.346 18.4309 384.465 17.312 385.846 17.312 cv
cp
385.846 16.312 mo
383.913 16.312 382.345 17.8789 382.345 19.812 cv
382.345 21.745 383.913 23.312 385.846 23.312 cv
387.779 23.312 389.346 21.745 389.346 19.812 cv
389.346 17.8789 387.779 16.312 385.846 16.312 cv
f
385.848 17.312 mo
387.229 17.312 388.348 18.4309 388.348 19.812 cv
388.348 21.193 387.229 22.312 385.848 22.312 cv
384.468 22.312 383.349 21.193 383.349 19.812 cv
383.349 18.4309 384.468 17.312 385.848 17.312 cv
cp
385.848 16.312 mo
383.915 16.312 382.348 17.8789 382.348 19.812 cv
382.348 21.745 383.915 23.312 385.848 23.312 cv
387.781 23.312 389.349 21.745 389.349 19.812 cv
389.349 17.8789 387.781 16.312 385.848 16.312 cv
f
385.849 17.312 mo
387.229 17.312 388.349 18.4309 388.349 19.812 cv
388.349 21.193 387.229 22.312 385.849 22.312 cv
384.468 22.312 383.349 21.193 383.349 19.812 cv
383.349 18.4309 384.468 17.312 385.849 17.312 cv
cp
385.849 16.312 mo
383.916 16.312 382.349 17.8789 382.349 19.812 cv
382.349 21.745 383.916 23.312 385.849 23.312 cv
387.781 23.312 389.349 21.745 389.349 19.812 cv
389.349 17.8789 387.781 16.312 385.849 16.312 cv
f
385.851 17.312 mo
387.232 17.312 388.351 18.4309 388.351 19.812 cv
388.351 21.193 387.232 22.312 385.851 22.312 cv
384.47 22.312 383.352 21.193 383.352 19.812 cv
383.352 18.4309 384.47 17.312 385.851 17.312 cv
cp
385.851 16.312 mo
383.918 16.312 382.351 17.8789 382.351 19.812 cv
382.351 21.745 383.918 23.312 385.851 23.312 cv
387.784 23.312 389.352 21.745 389.352 19.812 cv
389.352 17.8789 387.784 16.312 385.851 16.312 cv
f
385.855 17.312 mo
387.236 17.312 388.354 18.4309 388.354 19.812 cv
388.354 21.193 387.236 22.312 385.855 22.312 cv
384.474 22.312 383.355 21.193 383.355 19.812 cv
383.355 18.4309 384.474 17.312 385.855 17.312 cv
cp
385.855 16.312 mo
383.922 16.312 382.354 17.8789 382.354 19.812 cv
382.354 21.745 383.922 23.312 385.855 23.312 cv
387.788 23.312 389.355 21.745 389.355 19.812 cv
389.355 17.8789 387.788 16.312 385.855 16.312 cv
f
385.857 17.312 mo
387.238 17.312 388.357 18.4309 388.357 19.812 cv
388.357 21.193 387.238 22.312 385.857 22.312 cv
384.476 22.312 383.357 21.193 383.357 19.812 cv
383.357 18.4309 384.476 17.312 385.857 17.312 cv
cp
385.857 16.312 mo
383.924 16.312 382.357 17.8789 382.357 19.812 cv
382.357 21.745 383.924 23.312 385.857 23.312 cv
387.79 23.312 389.357 21.745 389.357 19.812 cv
389.357 17.8789 387.79 16.312 385.857 16.312 cv
f
385.859 17.312 mo
387.24 17.312 388.359 18.4309 388.359 19.812 cv
388.359 21.193 387.24 22.312 385.859 22.312 cv
384.478 22.312 383.359 21.193 383.359 19.812 cv
383.359 18.4309 384.478 17.312 385.859 17.312 cv
cp
385.859 16.312 mo
383.926 16.312 382.359 17.8789 382.359 19.812 cv
382.359 21.745 383.926 23.312 385.859 23.312 cv
387.792 23.312 389.359 21.745 389.359 19.812 cv
389.359 17.8789 387.792 16.312 385.859 16.312 cv
f
385.86 17.312 mo
387.24 17.312 388.359 18.4309 388.359 19.812 cv
388.359 21.193 387.24 22.312 385.86 22.312 cv
384.479 22.312 383.36 21.193 383.36 19.812 cv
383.36 18.4309 384.479 17.312 385.86 17.312 cv
cp
385.86 16.312 mo
383.927 16.312 382.359 17.8789 382.359 19.812 cv
382.359 21.745 383.927 23.312 385.86 23.312 cv
387.792 23.312 389.36 21.745 389.36 19.812 cv
389.36 17.8789 387.792 16.312 385.86 16.312 cv
f
385.86 17.312 mo
387.241 17.312 388.36 18.4309 388.36 19.812 cv
388.36 21.193 387.241 22.312 385.86 22.312 cv
384.479 22.312 383.36 21.193 383.36 19.812 cv
383.36 18.4309 384.479 17.312 385.86 17.312 cv
cp
385.86 16.312 mo
383.927 16.312 382.36 17.8789 382.36 19.812 cv
382.36 21.745 383.927 23.312 385.86 23.312 cv
387.793 23.312 389.36 21.745 389.36 19.812 cv
389.36 17.8789 387.793 16.312 385.86 16.312 cv
f
385.86 17.312 mo
387.241 17.312 388.36 18.4309 388.36 19.812 cv
388.36 21.193 387.241 22.312 385.86 22.312 cv
384.48 22.312 383.361 21.193 383.361 19.812 cv
383.361 18.4309 384.48 17.312 385.86 17.312 cv
cp
385.86 16.312 mo
383.928 16.312 382.36 17.8789 382.36 19.812 cv
382.36 21.745 383.928 23.312 385.86 23.312 cv
387.793 23.312 389.361 21.745 389.361 19.812 cv
389.361 17.8789 387.793 16.312 385.86 16.312 cv
f
385.862 17.312 mo
387.243 17.312 388.362 18.4309 388.362 19.812 cv
388.362 21.193 387.243 22.312 385.862 22.312 cv
384.481 22.312 383.362 21.193 383.362 19.812 cv
383.362 18.4309 384.481 17.312 385.862 17.312 cv
cp
385.862 16.312 mo
383.929 16.312 382.362 17.8789 382.362 19.812 cv
382.362 21.745 383.929 23.312 385.862 23.312 cv
387.795 23.312 389.362 21.745 389.362 19.812 cv
389.362 17.8789 387.795 16.312 385.862 16.312 cv
f
385.863 17.312 mo
387.244 17.312 388.363 18.4309 388.363 19.812 cv
388.363 21.193 387.244 22.312 385.863 22.312 cv
384.483 22.312 383.364 21.193 383.364 19.812 cv
383.364 18.4309 384.483 17.312 385.863 17.312 cv
cp
385.863 16.312 mo
383.931 16.312 382.363 17.8789 382.363 19.812 cv
382.363 21.745 383.931 23.312 385.863 23.312 cv
387.796 23.312 389.364 21.745 389.364 19.812 cv
389.364 17.8789 387.796 16.312 385.863 16.312 cv
f
385.865 17.312 mo
387.246 17.312 388.365 18.4309 388.365 19.812 cv
388.365 21.193 387.246 22.312 385.865 22.312 cv
384.484 22.312 383.365 21.193 383.365 19.812 cv
383.365 18.4309 384.484 17.312 385.865 17.312 cv
cp
385.865 16.312 mo
383.932 16.312 382.365 17.8789 382.365 19.812 cv
382.365 21.745 383.932 23.312 385.865 23.312 cv
387.798 23.312 389.365 21.745 389.365 19.812 cv
389.365 17.8789 387.798 16.312 385.865 16.312 cv
f
385.865 17.312 mo
387.246 17.312 388.365 18.4309 388.365 19.812 cv
388.365 21.193 387.246 22.312 385.865 22.312 cv
384.485 22.312 383.366 21.193 383.366 19.812 cv
383.366 18.4309 384.485 17.312 385.865 17.312 cv
cp
385.865 16.312 mo
383.933 16.312 382.365 17.8789 382.365 19.812 cv
382.365 21.745 383.933 23.312 385.865 23.312 cv
387.798 23.312 389.366 21.745 389.366 19.812 cv
389.366 17.8789 387.798 16.312 385.865 16.312 cv
f
385.867 17.312 mo
387.247 17.312 388.366 18.4309 388.366 19.812 cv
388.366 21.193 387.247 22.312 385.867 22.312 cv
384.486 22.312 383.367 21.193 383.367 19.812 cv
383.367 18.4309 384.486 17.312 385.867 17.312 cv
cp
385.867 16.312 mo
383.934 16.312 382.366 17.8789 382.366 19.812 cv
382.366 21.745 383.934 23.312 385.867 23.312 cv
387.799 23.312 389.367 21.745 389.367 19.812 cv
389.367 17.8789 387.799 16.312 385.867 16.312 cv
f
385.868 17.312 mo
387.249 17.312 388.368 18.4309 388.368 19.812 cv
388.368 21.193 387.249 22.312 385.868 22.312 cv
384.487 22.312 383.368 21.193 383.368 19.812 cv
383.368 18.4309 384.487 17.312 385.868 17.312 cv
cp
385.868 16.312 mo
383.935 16.312 382.368 17.8789 382.368 19.812 cv
382.368 21.745 383.935 23.312 385.868 23.312 cv
387.801 23.312 389.368 21.745 389.368 19.812 cv
389.368 17.8789 387.801 16.312 385.868 16.312 cv
f
385.868 17.312 mo
387.249 17.312 388.368 18.4309 388.368 19.812 cv
388.368 21.193 387.249 22.312 385.868 22.312 cv
384.487 22.312 383.368 21.193 383.368 19.812 cv
383.368 18.4309 384.487 17.312 385.868 17.312 cv
cp
385.868 16.312 mo
383.935 16.312 382.368 17.8789 382.368 19.812 cv
382.368 21.745 383.935 23.312 385.868 23.312 cv
387.801 23.312 389.368 21.745 389.368 19.812 cv
389.368 17.8789 387.801 16.312 385.868 16.312 cv
f
385.87 17.312 mo
387.25 17.312 388.369 18.4309 388.369 19.812 cv
388.369 21.193 387.25 22.312 385.87 22.312 cv
384.489 22.312 383.37 21.193 383.37 19.812 cv
383.37 18.4309 384.489 17.312 385.87 17.312 cv
cp
385.87 16.312 mo
383.937 16.312 382.369 17.8789 382.369 19.812 cv
382.369 21.745 383.937 23.312 385.87 23.312 cv
387.802 23.312 389.37 21.745 389.37 19.812 cv
389.37 17.8789 387.802 16.312 385.87 16.312 cv
f
385.87 17.312 mo
387.251 17.312 388.37 18.4309 388.37 19.812 cv
388.37 21.193 387.251 22.312 385.87 22.312 cv
384.489 22.312 383.37 21.193 383.37 19.812 cv
383.37 18.4309 384.489 17.312 385.87 17.312 cv
cp
385.87 16.312 mo
383.937 16.312 382.37 17.8789 382.37 19.812 cv
382.37 21.745 383.937 23.312 385.87 23.312 cv
387.803 23.312 389.37 21.745 389.37 19.812 cv
389.37 17.8789 387.803 16.312 385.87 16.312 cv
f
385.87 17.312 mo
387.251 17.312 388.37 18.4309 388.37 19.812 cv
388.37 21.193 387.251 22.312 385.87 22.312 cv
384.49 22.312 383.371 21.193 383.371 19.812 cv
383.371 18.4309 384.49 17.312 385.87 17.312 cv
cp
385.87 16.312 mo
383.938 16.312 382.37 17.8789 382.37 19.812 cv
382.37 21.745 383.938 23.312 385.87 23.312 cv
387.803 23.312 389.371 21.745 389.371 19.812 cv
389.371 17.8789 387.803 16.312 385.87 16.312 cv
f
385.87 17.312 mo
387.251 17.312 388.37 18.4309 388.37 19.812 cv
388.37 21.193 387.251 22.312 385.87 22.312 cv
384.49 22.312 383.371 21.193 383.371 19.812 cv
383.371 18.4309 384.49 17.312 385.87 17.312 cv
cp
385.87 16.312 mo
383.938 16.312 382.37 17.8789 382.37 19.812 cv
382.37 21.745 383.938 23.312 385.87 23.312 cv
387.803 23.312 389.371 21.745 389.371 19.812 cv
389.371 17.8789 387.803 16.312 385.87 16.312 cv
f
385.87 17.312 mo
387.251 17.312 388.37 18.4309 388.37 19.812 cv
388.37 21.193 387.251 22.312 385.87 22.312 cv
384.49 22.312 383.371 21.193 383.371 19.812 cv
383.371 18.4309 384.49 17.312 385.87 17.312 cv
cp
385.87 16.312 mo
383.938 16.312 382.37 17.8789 382.37 19.812 cv
382.37 21.745 383.938 23.312 385.87 23.312 cv
387.803 23.312 389.371 21.745 389.371 19.812 cv
389.371 17.8789 387.803 16.312 385.87 16.312 cv
f
385.872 17.312 mo
387.252 17.312 388.371 18.4309 388.371 19.812 cv
388.371 21.193 387.252 22.312 385.872 22.312 cv
384.491 22.312 383.372 21.193 383.372 19.812 cv
383.372 18.4309 384.491 17.312 385.872 17.312 cv
cp
385.872 16.312 mo
383.939 16.312 382.371 17.8789 382.371 19.812 cv
382.371 21.745 383.939 23.312 385.872 23.312 cv
387.804 23.312 389.372 21.745 389.372 19.812 cv
389.372 17.8789 387.804 16.312 385.872 16.312 cv
f
385.872 17.312 mo
387.252 17.312 388.371 18.4309 388.371 19.812 cv
388.371 21.193 387.252 22.312 385.872 22.312 cv
384.491 22.312 383.372 21.193 383.372 19.812 cv
383.372 18.4309 384.491 17.312 385.872 17.312 cv
cp
385.872 16.312 mo
383.939 16.312 382.371 17.8789 382.371 19.812 cv
382.371 21.745 383.939 23.312 385.872 23.312 cv
387.804 23.312 389.372 21.745 389.372 19.812 cv
389.372 17.8789 387.804 16.312 385.872 16.312 cv
f
385.872 17.312 mo
387.253 17.312 388.372 18.4309 388.372 19.812 cv
388.372 21.193 387.253 22.312 385.872 22.312 cv
384.491 22.312 383.372 21.193 383.372 19.812 cv
383.372 18.4309 384.491 17.312 385.872 17.312 cv
cp
385.872 16.312 mo
383.939 16.312 382.372 17.8789 382.372 19.812 cv
382.372 21.745 383.939 23.312 385.872 23.312 cv
387.805 23.312 389.372 21.745 389.372 19.812 cv
389.372 17.8789 387.805 16.312 385.872 16.312 cv
f
137.622 248.562 mo
377.622 248.562 li
377.622 181.812 li
137.622 181.812 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QSSHCZ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3
518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE7
19F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E5897699
5550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77
D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFF
C73DA426D2C4> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/L <1C60D8A8C9B7EF32574D0487D29C7903F9AE2E8AC57D9630AE9A94B5BC41
802BD0101167D0AC> |-
/T <1C60D8A8C9B7D8BE6A40C97BBF661CB0B8222F950E511FEAA4C1C13E5F94
78F30E1367384EBB0E379956ACFD> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QSSHCZ+Helvetica /Encoding get
dup 37 /percent put
dup 51 /three put
dup 53 /five put
dup 58 /colon put
dup 59 /semicolon put
dup 69 /E put
dup 76 /L put
dup 84 /T put
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/QSSHCZ+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /.notdef 
/eight /.notdef /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 4{/.notdef}rp /L 5{/.notdef}rp /R /.notdef /T 
6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c 
/.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/.notdef /p 2{/.notdef}rp /s /t /u 138{/.notdef}rp]
QSSHCZ+Helvetica nf
QSSHCZ+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
172.872 199.812 mo
(TL [38]; E)sh
246.584 199.812 mo
(ER: 25.54%)
[11.3393 12.2741 4.72607 4.72604 9.45212 9.45209 4.72607 9.45209 9.45212 0 ]xsh
140.622 193.812 mo
170.622 193.812 li
@
0 lj
153.372 196.062 mo
157.872 196.062 li
157.872 191.562 li
153.372 191.562 li
cp
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QSSHCZ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B
61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1
E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36
DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B
7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QSSHCZ+Helvetica /Encoding get
dup 55 /seven put
dup 83 /S put
pop
%ADOEndSubsetFont
/QSSHCZ+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /.notdef /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 4{/.notdef}rp /L 5{/.notdef}rp /R /S /T 
6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c 
/.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/.notdef /p 2{/.notdef}rp /s /t /u 138{/.notdef}rp]
QSSHCZ+Helvetica nf
QSSHCZ+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
172.872 221.187 mo
(STTL [37]; EER: 18.35%)
[11.3393 10.387 10.387 9.4521 4.72606 4.72604 9.45212 9.45212 4.72604 4.72604 4.72607 11.3392 
11.3393 12.2741 4.72607 4.72604 9.45212 9.45209 4.72607 9.45209 9.45212 0 ]xsh
1 lj
140.622 215.187 mo
170.622 215.187 li
.895628 .7673 0 0 cmyk
@
0 lj
155.622 212.187 mo
155.622 218.187 li
152.622 215.187 mo
158.622 215.187 li
153.501 213.066 mo
157.743 217.308 li
153.501 217.308 mo
157.743 213.066 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
QSSHCZ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E2
2FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D216
1CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361
A4431D76AF6F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QSSHCZ+Helvetica /Encoding get
dup 79 /O put
dup 114 /r put
pop
%ADOEndSubsetFont
/QSSHCZ+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /.notdef /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 4{/.notdef}rp /L 2{/.notdef}rp /O 2{/.notdef}rp /R 
/S /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 
/.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /.notdef /p /.notdef /r /s /t 
/u 138{/.notdef}rp]
QSSHCZ+Helvetica nf
QSSHCZ+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
172.872 242.562 mo
(Ours; E)sh
230.502 242.562 mo
(ER: 16.65%)
[11.3392 12.2742 4.72604 4.72604 9.45212 9.45212 4.72604 9.45212 9.45209 0 ]xsh
1 lj
140.622 236.562 mo
170.622 236.562 li
0 .990631 1 .000396735 cmyk
@
155.622 234.062 mo
157.003 234.062 158.122 235.181 158.122 236.562 cv
158.122 237.943 157.003 239.062 155.622 239.062 cv
154.241 239.062 153.122 237.943 153.122 236.562 cv
153.122 235.181 154.241 234.062 155.622 234.062 cv
cp
155.622 233.062 mo
153.689 233.062 152.122 234.629 152.122 236.562 cv
152.122 238.495 153.689 240.062 155.622 240.062 cv
157.555 240.062 159.122 238.495 159.122 236.562 cv
159.122 234.629 157.555 233.062 155.622 233.062 cv
f
0 lj
137.622 248.562 mo
377.622 248.562 li
377.622 181.812 li
137.622 181.812 li
cp
1 /0 /CSD get_res sepcs
.851074 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/QSSHDA+Helvetica-Bold*1 uf
/QSSHDA+Helvetica-Bold uf
/JAAAAA+Helvetica-Bold uf
/QSSHCZ+Helvetica*1 uf
/QSSHCZ+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
