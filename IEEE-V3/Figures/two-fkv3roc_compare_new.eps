%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: two-fkv3roc_compare_new.eps-70777.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/16/2022, 10:59:12 AM
%%BoundingBox: 0 0 510 417
%%HiResBoundingBox: 0 0 509.1124 416.5465
%%CropBox: 0 0 509.1124 416.5465
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1025 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-16T10:58:41+08:00"
   xmp:CreateDate="2022-08-16T10:58:41+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.9.0.1467703 \(R2020b\). Operating System: Linux)"
   xmpMM:DocumentID="uuid:d54584eb-1f6a-11ed-0000-b45d8f4cbe7b"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/zhenyuzhou/Desktop/finger-knuckle/deep-learning/codekevin/fknet/test/version-2/two-fkv3/two-fkv3roc_compare_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -416.546 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 416.546 li
509.112 416.546 li
509.112 0 li
cp
clp
-27.8965 420.588 mo
548.103 420.588 li
548.103 -11.4122 li
-27.8965 -11.4122 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
-27.8965 420.588 mo
548.103 420.588 li
548.103 -11.4122 li
-27.8965 -11.4122 li
cp
f
47.1035 373.338 mo
493.353 373.338 li
493.353 20.8378 li
47.1035 20.8378 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
57.2246 373.338 mo
57.2246 20.8378 li
1 /0 /CSD get_res sepcs
.224609 sep
@
73.5685 373.338 mo
73.5685 20.8378 li
@
85.1645 373.338 mo
85.1645 20.8378 li
@
94.1595 373.338 mo
94.1595 20.8378 li
@
101.508 373.338 mo
101.508 20.8378 li
@
107.722 373.338 mo
107.722 20.8378 li
@
113.104 373.338 mo
113.104 20.8378 li
@
117.851 373.338 mo
117.851 20.8378 li
@
122.099 373.338 mo
122.099 20.8378 li
@
150.038 373.338 mo
150.038 20.8378 li
@
166.382 373.338 mo
166.382 20.8378 li
@
177.978 373.338 mo
177.978 20.8378 li
@
186.973 373.338 mo
186.973 20.8378 li
@
194.321 373.338 mo
194.321 20.8378 li
@
200.535 373.338 mo
200.535 20.8378 li
@
205.918 373.338 mo
205.918 20.8378 li
@
210.665 373.338 mo
210.665 20.8378 li
@
242.851 373.338 mo
242.851 20.8378 li
@
259.196 373.338 mo
259.196 20.8378 li
@
270.791 373.338 mo
270.791 20.8378 li
@
279.786 373.338 mo
279.786 20.8378 li
@
287.135 373.338 mo
287.135 20.8378 li
@
293.349 373.338 mo
293.349 20.8378 li
@
298.731 373.338 mo
298.731 20.8378 li
@
303.478 373.338 mo
303.478 20.8378 li
@
335.666 373.338 mo
335.666 20.8378 li
@
352.009 373.338 mo
352.009 20.8378 li
@
363.605 373.338 mo
363.605 20.8378 li
@
372.6 373.338 mo
372.6 20.8378 li
@
379.949 373.338 mo
379.949 20.8378 li
@
386.162 373.338 mo
386.162 20.8378 li
@
391.545 373.338 mo
391.545 20.8378 li
@
396.292 373.338 mo
396.292 20.8378 li
@
428.479 373.338 mo
428.479 20.8378 li
@
444.823 373.338 mo
444.823 20.8378 li
@
456.419 373.338 mo
456.419 20.8378 li
@
465.413 373.338 mo
465.413 20.8378 li
@
472.762 373.338 mo
472.762 20.8378 li
@
478.976 373.338 mo
478.976 20.8378 li
@
484.358 373.338 mo
484.358 20.8378 li
@
489.106 373.338 mo
489.106 20.8378 li
@
1 lj
[] 0 dsh
122.099 373.338 mo
122.099 20.8378 li
1 /0 /CSD get_res sepcs
.126953 sep
@
214.912 373.338 mo
214.912 20.8378 li
@
307.726 373.338 mo
307.726 20.8378 li
@
400.539 373.338 mo
400.539 20.8378 li
@
493.353 373.338 mo
493.353 20.8378 li
@
493.353 373.338 mo
47.1035 373.338 li
@
493.353 338.088 mo
47.1035 338.088 li
@
493.353 302.838 mo
47.1035 302.838 li
@
493.353 267.588 mo
47.1035 267.588 li
@
493.353 232.338 mo
47.1035 232.338 li
@
493.353 197.088 mo
47.1035 197.088 li
@
493.353 161.838 mo
47.1035 161.838 li
@
493.353 126.588 mo
47.1035 126.588 li
@
493.353 91.3378 mo
47.1035 91.3378 li
@
493.353 56.0878 mo
47.1035 56.0878 li
@
493.353 20.8378 mo
47.1035 20.8378 li
@
2 lc
47.1035 373.338 mo
493.353 373.338 li
1 /0 /CSD get_res sepcs
.851074 sep
@
47.1035 20.8378 mo
493.353 20.8378 li
@
122.099 373.338 mo
122.099 368.875 li
@
214.912 373.338 mo
214.912 368.875 li
@
307.726 373.338 mo
307.726 368.875 li
@
400.539 373.338 mo
400.539 368.875 li
@
493.353 373.338 mo
493.353 368.875 li
@
122.099 20.8378 mo
122.099 25.2998 li
@
214.912 20.8378 mo
214.912 25.2998 li
@
307.726 20.8378 mo
307.726 25.2998 li
@
400.539 20.8378 mo
400.539 25.2998 li
@
493.353 20.8378 mo
493.353 25.2998 li
@
57.2246 373.338 mo
57.2246 371.107 li
@
73.5685 373.338 mo
73.5685 371.107 li
@
85.1645 373.338 mo
85.1645 371.107 li
@
94.1595 373.338 mo
94.1595 371.107 li
@
101.508 373.338 mo
101.508 371.107 li
@
107.722 373.338 mo
107.722 371.107 li
@
113.104 373.338 mo
113.104 371.107 li
@
117.851 373.338 mo
117.851 371.107 li
@
122.099 373.338 mo
122.099 371.107 li
@
122.099 373.338 mo
122.099 371.107 li
@
150.038 373.338 mo
150.038 371.107 li
@
166.382 373.338 mo
166.382 371.107 li
@
177.978 373.338 mo
177.978 371.107 li
@
186.973 373.338 mo
186.973 371.107 li
@
194.321 373.338 mo
194.321 371.107 li
@
200.535 373.338 mo
200.535 371.107 li
@
205.918 373.338 mo
205.918 371.107 li
@
210.665 373.338 mo
210.665 371.107 li
@
214.912 373.338 mo
214.912 371.107 li
@
242.851 373.338 mo
242.851 371.107 li
@
259.196 373.338 mo
259.196 371.107 li
@
270.791 373.338 mo
270.791 371.107 li
@
279.786 373.338 mo
279.786 371.107 li
@
287.135 373.338 mo
287.135 371.107 li
@
293.349 373.338 mo
293.349 371.107 li
@
298.731 373.338 mo
298.731 371.107 li
@
303.478 373.338 mo
303.478 371.107 li
@
307.726 373.338 mo
307.726 371.107 li
@
335.666 373.338 mo
335.666 371.107 li
@
352.009 373.338 mo
352.009 371.107 li
@
363.605 373.338 mo
363.605 371.107 li
@
372.6 373.338 mo
372.6 371.107 li
@
379.949 373.338 mo
379.949 371.107 li
@
386.162 373.338 mo
386.162 371.107 li
@
391.545 373.338 mo
391.545 371.107 li
@
396.292 373.338 mo
396.292 371.107 li
@
400.539 373.338 mo
400.539 371.107 li
@
428.479 373.338 mo
428.479 371.107 li
@
444.823 373.338 mo
444.823 371.107 li
@
456.419 373.338 mo
456.419 371.107 li
@
465.413 373.338 mo
465.413 371.107 li
@
472.762 373.338 mo
472.762 371.107 li
@
478.976 373.338 mo
478.976 371.107 li
@
484.358 373.338 mo
484.358 371.107 li
@
489.106 373.338 mo
489.106 371.107 li
@
493.353 373.338 mo
493.353 371.107 li
@
57.2246 20.8378 mo
57.2246 23.0688 li
@
73.5685 20.8378 mo
73.5685 23.0688 li
@
85.1645 20.8378 mo
85.1645 23.0688 li
@
94.1595 20.8378 mo
94.1595 23.0688 li
@
101.508 20.8378 mo
101.508 23.0688 li
@
107.722 20.8378 mo
107.722 23.0688 li
@
113.104 20.8378 mo
113.104 23.0688 li
@
117.851 20.8378 mo
117.851 23.0688 li
@
122.099 20.8378 mo
122.099 23.0688 li
@
122.099 20.8378 mo
122.099 23.0688 li
@
150.038 20.8378 mo
150.038 23.0688 li
@
166.382 20.8378 mo
166.382 23.0688 li
@
177.978 20.8378 mo
177.978 23.0688 li
@
186.973 20.8378 mo
186.973 23.0688 li
@
194.321 20.8378 mo
194.321 23.0688 li
@
200.535 20.8378 mo
200.535 23.0688 li
@
205.918 20.8378 mo
205.918 23.0688 li
@
210.665 20.8378 mo
210.665 23.0688 li
@
214.912 20.8378 mo
214.912 23.0688 li
@
242.851 20.8378 mo
242.851 23.0688 li
@
259.196 20.8378 mo
259.196 23.0688 li
@
270.791 20.8378 mo
270.791 23.0688 li
@
279.786 20.8378 mo
279.786 23.0688 li
@
287.135 20.8378 mo
287.135 23.0688 li
@
293.349 20.8378 mo
293.349 23.0688 li
@
298.731 20.8378 mo
298.731 23.0688 li
@
303.478 20.8378 mo
303.478 23.0688 li
@
307.726 20.8378 mo
307.726 23.0688 li
@
335.666 20.8378 mo
335.666 23.0688 li
@
352.009 20.8378 mo
352.009 23.0688 li
@
363.605 20.8378 mo
363.605 23.0688 li
@
372.6 20.8378 mo
372.6 23.0688 li
@
379.949 20.8378 mo
379.949 23.0688 li
@
386.162 20.8378 mo
386.162 23.0688 li
@
391.545 20.8378 mo
391.545 23.0688 li
@
396.292 20.8378 mo
396.292 23.0688 li
@
400.539 20.8378 mo
400.539 23.0688 li
@
428.479 20.8378 mo
428.479 23.0688 li
@
444.823 20.8378 mo
444.823 23.0688 li
@
456.419 20.8378 mo
456.419 23.0688 li
@
465.413 20.8378 mo
465.413 23.0688 li
@
472.762 20.8378 mo
472.762 23.0688 li
@
478.976 20.8378 mo
478.976 23.0688 li
@
484.358 20.8378 mo
484.358 23.0688 li
@
489.106 20.8378 mo
489.106 23.0688 li
@
493.353 20.8378 mo
493.353 23.0688 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
19 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3
518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE7
19F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E5897699
5550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77
D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFF
C73DA426D2C4> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DGOFTG+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/DGOFTG+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four 12{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t 139{/.notdef}rp]
DGOFTG+Helvetica nf
DGOFTG+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
107.853 394.338 mo
(10)
[7.36215 0 ]xsh
DGOFTG+Helvetica*1 [10.593 0 0 -10.593 0 0 ]msf
125.103 388.338 mo
(-4)
[3.52739 0 ]xsh
DGOFTG+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
200.853 394.338 mo
(10)
[7.36215 0 ]xsh
DGOFTG+Helvetica*1 [10.593 0 0 -10.593 0 0 ]msf
218.103 388.338 mo
(-3)
[3.52739 0 ]xsh
DGOFTG+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
293.103 394.338 mo
(10)
[7.36215 0 ]xsh
DGOFTG+Helvetica*1 [10.593 0 0 -10.593 0 0 ]msf
310.353 388.338 mo
(-2)
[3.5274 0 ]xsh
DGOFTG+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
386.103 394.338 mo
(10)
[7.36215 0 ]xsh
DGOFTG+Helvetica*1 [10.593 0 0 -10.593 0 0 ]msf
403.353 388.338 mo
(-1)
[3.5274 0 ]xsh
DGOFTG+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
481.353 394.338 mo
(10)
[7.36218 0 ]xsh
DGOFTG+Helvetica*1 [10.593 0 0 -10.593 0 0 ]msf
498.603 388.338 mo
(0)sh
DGOFTG+Helvetica*1 [14.5658 0 0 -14.5658 0 0 ]msf
219.001 411.363 mo
(Fal)sh
239.233 411.363 mo
(se A)sh
268.38 411.363 mo
(cceptance R)sh
349.336 411.363 mo
(ate)sh
47.1035 373.338 mo
47.1035 20.8378 li
@
493.353 373.338 mo
493.353 20.8378 li
@
47.1035 373.338 mo
51.566 373.338 li
@
47.1035 338.088 mo
51.566 338.088 li
@
47.1035 302.838 mo
51.566 302.838 li
@
47.1035 267.588 mo
51.566 267.588 li
@
47.1035 232.338 mo
51.566 232.338 li
@
47.1035 197.088 mo
51.566 197.088 li
@
47.1035 161.838 mo
51.566 161.838 li
@
47.1035 126.588 mo
51.566 126.588 li
@
47.1035 91.3378 mo
51.566 91.3378 li
@
47.1035 56.0878 mo
51.566 56.0878 li
@
47.1035 20.8378 mo
51.566 20.8378 li
@
493.353 373.338 mo
488.891 373.338 li
@
493.353 338.088 mo
488.891 338.088 li
@
493.353 302.838 mo
488.891 302.838 li
@
493.353 267.588 mo
488.891 267.588 li
@
493.353 232.338 mo
488.891 232.338 li
@
493.353 197.088 mo
488.891 197.088 li
@
493.353 161.838 mo
488.891 161.838 li
@
493.353 126.588 mo
488.891 126.588 li
@
493.353 91.3378 mo
488.891 91.3378 li
@
493.353 56.0878 mo
488.891 56.0878 li
@
493.353 20.8378 mo
488.891 20.8378 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DGOFTG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DGOFTG+Helvetica /Encoding get
dup 46 /period put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/DGOFTG+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /three /four /five /six /seven /eight /nine 
7{/.notdef}rp /A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
DGOFTG+Helvetica nf
DGOFTG+Helvetica*1 [13.2413 0 0 -13.2413 0 0 ]msf
33.4551 377.838 mo
(0)sh
20.7051 342.588 mo
(0.1)sh
20.7051 307.338 mo
(0.2)sh
20.7051 272.088 mo
(0.3)sh
20.7051 236.838 mo
(0.4)sh
20.7051 201.588 mo
(0.5)sh
20.7051 166.338 mo
(0.6)sh
20.7051 131.088 mo
(0.7)sh
20.7051 95.8378 mo
(0.8)sh
20.7051 60.5878 mo
(0.9)sh
33.4551 25.3378 mo
(1)sh
DGOFTG+Helvetica*1 [0 -14.5658 -14.5658 0 0 0 ]msf
13.9551 291.588 mo
(Genuine Acceptance Rate)
[-11.3322 -8.09857 -8.0986 -8.09857 -3.23361 -8.09859 -8.09857 -4.0493 -9.71548 -7.2829 -7.2829 -8.0986 
-8.09857 -4.04929 -8.09859 -8.09859 -7.2829 -8.09857 -4.04929 -10.5165 -8.0986 -4.04926 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DGOFTH+Helvetica-Bold /JAAAAA+Helvetica-Bold findfont ct_VMDictPut
/DGOFTH+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
DGOFTH+Helvetica-Bold nf
DGOFTH+Helvetica-Bold*1 [14.5658 0 0 -14.5658 0 0 ]msf
123.978 14.3568 mo
(Receiver Operating Characteristics )
[10.5165 8.09857 8.09859 8.09859 4.04929 8.09859 8.09857 5.66621 4.04929 11.3322 8.8996 8.09859 
5.66621 8.09857 4.85031 4.04929 8.8996 8.89957 4.04932 10.5165 8.89957 8.0986 5.6662 8.0986 
8.09857 4.85028 8.0986 5.6662 4.04929 8.09857 4.85034 4.04926 8.09857 8.0986 0 ]xsh
0 lc
493.161 20.8378 mo
493.161 20.8378 li
493.16 20.8378 li
493.158 20.8378 li
493.157 20.8378 li
493.155 20.8378 li
493.153 20.8378 li
493.151 20.8378 li
493.148 20.8378 li
493.147 20.8378 li
493.144 20.8378 li
493.143 20.8378 li
493.141 20.8378 li
493.136 20.8378 li
493.135 20.8378 li
493.133 20.8378 li
493.132 20.8378 li
493.129 20.8378 li
493.126 20.8378 li
493.123 20.8378 li
493.12 20.8378 li
493.112 20.8378 li
493.105 20.8378 li
493.101 20.8378 li
493.097 20.8378 li
493.096 20.8378 li
493.089 20.8378 li
493.082 20.8378 li
493.078 20.8378 li
493.069 20.8378 li
493.062 20.8378 li
493.056 20.8378 li
493.051 20.8378 li
493.041 20.8378 li
493.033 20.8378 li
493.028 20.8378 li
493.021 20.8378 li
493.012 20.8378 li
493.005 20.8378 li
492.998 20.8378 li
492.985 20.8378 li
492.974 20.8378 li
492.958 20.8378 li
492.937 20.8378 li
492.919 20.8378 li
492.907 20.8378 li
492.884 20.8378 li
492.864 20.8378 li
492.835 20.8378 li
492.808 20.8378 li
492.779 20.8378 li
492.753 20.8378 li
492.72 20.8378 li
492.688 20.8378 li
492.657 20.8378 li
492.622 20.8378 li
492.581 20.8378 li
492.533 20.8378 li
492.483 20.8378 li
492.44 20.8378 li
492.376 20.8378 li
492.31 20.8378 li
492.24 20.8378 li
492.156 20.8378 li
492.081 20.8378 li
491.989 20.8378 li
491.903 20.8378 li
491.798 20.8378 li
491.699 20.8378 li
491.576 20.8378 li
491.443 20.8378 li
491.308 20.8378 li
491.17 21.4028 li
491.016 21.4028 li
490.849 21.4028 li
490.667 21.4028 li
490.462 21.4028 li
490.246 21.9678 li
490 21.9678 li
489.776 21.9678 li
489.536 22.5328 li
489.253 22.5328 li
488.962 22.5328 li
488.669 22.5328 li
488.353 22.5328 li
488.026 23.0978 li
487.668 23.0978 li
487.262 23.0978 li
486.84 23.6628 li
486.365 24.2268 li
485.883 24.2268 li
485.401 24.2268 li
484.835 24.2268 li
484.269 24.2268 li
483.654 24.7918 li
483.016 24.7918 li
482.312 25.9218 li
481.608 28.1818 li
480.889 29.3108 li
480.134 29.8758 li
479.324 29.8758 li
478.478 29.8758 li
477.615 29.8758 li
476.696 30.4418 li
475.828 31.0058 li
474.862 31.5708 li
473.843 32.7008 li
472.862 32.7008 li
471.782 32.7008 li
470.615 32.7008 li
469.449 33.2658 li
468.226 34.3958 li
467.035 36.0908 li
465.753 37.2198 li
464.521 38.3498 li
463.192 38.3498 li
461.86 40.0448 li
460.496 41.1738 li
459.028 44.5638 li
457.535 46.2578 li
456.011 47.9538 li
454.573 49.0828 li
452.962 50.2128 li
451.364 51.3428 li
449.754 54.7318 li
448.178 57.5558 li
446.56 58.6868 li
444.887 60.9468 li
443.21 63.7708 li
441.507 64.3358 li
439.744 66.0298 li
438.046 68.2898 li
436.337 69.9848 li
434.578 71.6788 li
432.882 73.9388 li
431.044 76.7628 li
429.208 76.7628 li
427.404 79.0228 li
425.39 82.4118 li
423.405 84.1068 li
421.43 86.3668 li
419.576 89.7558 li
417.592 92.0158 li
415.739 94.2758 li
413.674 97.0998 li
411.883 99.9248 li
409.933 102.184 li
407.843 108.398 li
405.914 111.223 li
403.871 112.917 li
401.889 116.307 li
399.83 121.39 li
397.828 124.216 li
395.876 125.91 li
393.646 129.299 li
391.546 130.994 li
389.348 132.689 li
387.101 134.948 li
385.045 140.033 li
383.024 141.727 li
380.691 147.941 li
378.455 151.331 li
376.305 152.461 li
374.251 158.11 li
372.087 162.064 li
369.72 164.324 li
367.632 166.583 li
365.401 169.408 li
363.15 170.537 li
360.933 173.927 li
358.942 176.752 li
356.417 179.011 li
353.785 186.92 li
351.374 189.744 li
348.536 195.393 li
346.239 198.218 li
343.906 201.042 li
341.155 204.432 li
338.818 207.256 li
336.521 212.341 li
334.085 215.73 li
331.213 217.424 li
328.646 221.944 li
325.463 223.639 li
322.878 227.028 li
320.391 230.417 li
317.79 234.372 li
315.269 238.891 li
312.134 242.845 li
308.673 245.67 li
305.949 249.624 li
304.07 253.579 li
301.81 256.403 li
298.796 259.228 li
296.21 261.487 li
293.446 262.617 li
290.576 264.311 li
287.795 266.571 li
285.139 270.526 li
281.462 276.175 li
279.866 278.434 li
277.414 280.129 li
274.088 282.388 li
270.62 284.648 li
269.014 286.908 li
265.774 290.297 li
263.019 291.992 li
257.961 293.122 li
254.591 294.816 li
251.423 298.206 li
247.148 300.466 li
242.046 304.42 li
237.299 306.679 li
234.311 308.374 li
232.73 312.329 li
231.503 314.588 li
228.928 317.977 li
221.669 320.802 li
219.489 322.497 li
217.185 325.321 li
213.461 327.58 li
207.892 328.711 li
203.976 329.275 li
200.544 331.535 li
193.729 333.229 li
188.042 333.795 li
179.953 334.924 li
176.851 334.924 li
173.49 337.184 li
171.698 338.314 li
165.789 338.878 li
165.789 341.703 li
156.26 343.398 li
147.266 345.658 li
143.758 346.222 li
139.917 347.353 li
135.67 347.917 li
125.539 349.047 li
119.326 349.612 li
111.977 350.177 li
111.977 350.742 li
111.977 351.871 li
102.983 354.696 li
91.3865 357.52 li
91.3865 358.651 li
75.0435 360.345 li
75.0435 361.475 li
75.0435 362.04 li
75.0435 362.605 li
75.0435 364.299 li
47.1035 364.299 li
47.1035 364.864 li
47.1035 365.429 li
47.1035 365.994 li
47.1035 366.559 li
47.1035 367.689 li
47.1035 368.253 li
47.1035 369.948 li
47.1035 370.513 li
47.1035 371.078 li
47.1035 371.643 li
47.1035 372.208 li
47.1035 372.773 li
/1 
[/DeviceCMYK] /CSA add_res
.517266 0 .125643 0 cmyk
@
493.161 18.3378 mo
494.542 18.3378 495.661 19.4568 495.661 20.8378 cv
495.661 22.2188 494.542 23.3378 493.161 23.3378 cv
491.78 23.3378 490.662 22.2188 490.662 20.8378 cv
490.662 19.4568 491.78 18.3378 493.161 18.3378 cv
cp
493.161 17.3378 mo
491.228 17.3378 489.661 18.9048 489.661 20.8378 cv
489.661 22.7708 491.228 24.3378 493.161 24.3378 cv
495.094 24.3378 496.662 22.7708 496.662 20.8378 cv
496.662 18.9048 495.094 17.3378 493.161 17.3378 cv
f
493.147 18.3378 mo
494.528 18.3378 495.646 19.4568 495.646 20.8378 cv
495.646 22.2188 494.528 23.3378 493.147 23.3378 cv
491.766 23.3378 490.647 22.2188 490.647 20.8378 cv
490.647 19.4568 491.766 18.3378 493.147 18.3378 cv
cp
493.147 17.3378 mo
491.214 17.3378 489.646 18.9048 489.646 20.8378 cv
489.646 22.7708 491.214 24.3378 493.147 24.3378 cv
495.08 24.3378 496.647 22.7708 496.647 20.8378 cv
496.647 18.9048 495.08 17.3378 493.147 17.3378 cv
f
493.078 18.3378 mo
494.457 18.3378 495.576 19.4568 495.576 20.8378 cv
495.576 22.2188 494.457 23.3378 493.078 23.3378 cv
491.696 23.3378 490.578 22.2188 490.578 20.8378 cv
490.578 19.4568 491.696 18.3378 493.078 18.3378 cv
cp
493.078 17.3378 mo
491.144 17.3378 489.576 18.9048 489.576 20.8378 cv
489.576 22.7708 491.144 24.3378 493.078 24.3378 cv
495.01 24.3378 496.578 22.7708 496.578 20.8378 cv
496.578 18.9048 495.01 17.3378 493.078 17.3378 cv
f
492.835 18.3378 mo
494.216 18.3378 495.335 19.4568 495.335 20.8378 cv
495.335 22.2188 494.216 23.3378 492.835 23.3378 cv
491.455 23.3378 490.336 22.2188 490.336 20.8378 cv
490.336 19.4568 491.455 18.3378 492.835 18.3378 cv
cp
492.835 17.3378 mo
490.903 17.3378 489.335 18.9048 489.335 20.8378 cv
489.335 22.7708 490.903 24.3378 492.835 24.3378 cv
494.768 24.3378 496.336 22.7708 496.336 20.8378 cv
496.336 18.9048 494.768 17.3378 492.835 17.3378 cv
f
491.699 18.3378 mo
493.08 18.3378 494.199 19.4568 494.199 20.8378 cv
494.199 22.2188 493.08 23.3378 491.699 23.3378 cv
490.319 23.3378 489.201 22.2188 489.201 20.8378 cv
489.201 19.4568 490.319 18.3378 491.699 18.3378 cv
cp
491.699 17.3378 mo
489.767 17.3378 488.199 18.9048 488.199 20.8378 cv
488.199 22.7708 489.767 24.3378 491.699 24.3378 cv
493.632 24.3378 495.201 22.7708 495.201 20.8378 cv
495.201 18.9048 493.632 17.3378 491.699 17.3378 cv
f
486.841 21.1628 mo
488.221 21.1628 489.34 22.2818 489.34 23.6628 cv
489.34 25.0428 488.221 26.1618 486.841 26.1618 cv
485.46 26.1618 484.341 25.0428 484.341 23.6628 cv
484.341 22.2818 485.46 21.1628 486.841 21.1628 cv
cp
486.841 20.1618 mo
484.908 20.1618 483.34 21.7298 483.34 23.6628 cv
483.34 25.5948 484.908 27.1628 486.841 27.1628 cv
488.773 27.1628 490.341 25.5948 490.341 23.6628 cv
490.341 21.7298 488.773 20.1618 486.841 20.1618 cv
f
471.783 30.2008 mo
473.163 30.2008 474.282 31.3198 474.282 32.7008 cv
474.282 34.0818 473.163 35.2008 471.783 35.2008 cv
470.402 35.2008 469.283 34.0818 469.283 32.7008 cv
469.283 31.3198 470.402 30.2008 471.783 30.2008 cv
cp
471.783 29.2008 mo
469.85 29.2008 468.282 30.7678 468.282 32.7008 cv
468.282 34.6338 469.85 36.2008 471.783 36.2008 cv
473.715 36.2008 475.283 34.6338 475.283 32.7008 cv
475.283 30.7678 473.715 29.2008 471.783 29.2008 cv
f
443.209 61.2708 mo
444.59 61.2708 445.709 62.3898 445.709 63.7708 cv
445.709 65.1508 444.59 66.2698 443.209 66.2698 cv
441.828 66.2698 440.709 65.1508 440.709 63.7708 cv
440.709 62.3898 441.828 61.2708 443.209 61.2708 cv
cp
443.209 60.2698 mo
441.276 60.2698 439.709 61.8378 439.709 63.7708 cv
439.709 65.7038 441.276 67.2708 443.209 67.2708 cv
445.142 67.2708 446.709 65.7038 446.709 63.7708 cv
446.709 61.8378 445.142 60.2698 443.209 60.2698 cv
f
405.914 108.723 mo
407.295 108.723 408.414 109.842 408.414 111.223 cv
408.414 112.603 407.295 113.722 405.914 113.722 cv
404.533 113.722 403.415 112.603 403.415 111.223 cv
403.415 109.842 404.533 108.723 405.914 108.723 cv
cp
405.914 107.722 mo
403.982 107.722 402.414 109.29 402.414 111.223 cv
402.414 113.155 403.982 114.723 405.914 114.723 cv
407.847 114.723 409.415 113.155 409.415 111.223 cv
409.415 109.29 407.847 107.722 405.914 107.722 cv
f
363.15 168.038 mo
364.53 168.038 365.649 169.157 365.649 170.538 cv
365.649 171.918 364.53 173.037 363.15 173.037 cv
361.769 173.037 360.65 171.918 360.65 170.538 cv
360.65 169.157 361.769 168.038 363.15 168.038 cv
cp
363.15 167.037 mo
361.217 167.037 359.649 168.605 359.649 170.538 cv
359.649 172.47 361.217 174.038 363.15 174.038 cv
365.082 174.038 366.65 172.47 366.65 170.538 cv
366.65 168.605 365.082 167.037 363.15 167.037 cv
f
312.134 240.345 mo
313.515 240.345 314.634 241.465 314.634 242.845 cv
314.634 244.226 313.515 245.345 312.134 245.345 cv
310.753 245.345 309.634 244.226 309.634 242.845 cv
309.634 241.465 310.753 240.345 312.134 240.345 cv
cp
312.134 239.345 mo
310.201 239.345 308.634 240.913 308.634 242.845 cv
308.634 244.778 310.201 246.345 312.134 246.345 cv
314.067 246.345 315.634 244.778 315.634 242.845 cv
315.634 240.913 314.067 239.345 312.134 239.345 cv
f
254.591 292.317 mo
255.971 292.317 257.09 293.436 257.09 294.817 cv
257.09 296.197 255.971 297.316 254.591 297.316 cv
253.21 297.316 252.091 296.197 252.091 294.817 cv
252.091 293.436 253.21 292.317 254.591 292.317 cv
cp
254.591 291.316 mo
252.658 291.316 251.09 292.884 251.09 294.817 cv
251.09 296.749 252.658 298.317 254.591 298.317 cv
256.523 298.317 258.091 296.749 258.091 294.817 cv
258.091 292.884 256.523 291.316 254.591 291.316 cv
f
173.49 334.684 mo
174.871 334.684 175.99 335.803 175.99 337.184 cv
175.99 338.565 174.871 339.684 173.49 339.684 cv
172.109 339.684 170.99 338.565 170.99 337.184 cv
170.99 335.803 172.109 334.684 173.49 334.684 cv
cp
173.49 333.684 mo
171.557 333.684 169.99 335.251 169.99 337.184 cv
169.99 339.117 171.557 340.684 173.49 340.684 cv
175.423 340.684 176.99 339.117 176.99 337.184 cv
176.99 335.251 175.423 333.684 173.49 333.684 cv
f
75.0435 358.975 mo
76.4235 358.975 77.5425 360.094 77.5425 361.475 cv
77.5425 362.856 76.4235 363.974 75.0435 363.974 cv
73.6625 363.974 72.5435 362.856 72.5435 361.475 cv
72.5435 360.094 73.6625 358.975 75.0435 358.975 cv
cp
75.0435 357.974 mo
73.1105 357.974 71.543 359.542 71.543 361.475 cv
71.543 363.408 73.1105 364.975 75.0435 364.975 cv
76.9755 364.975 78.5435 363.408 78.5435 361.475 cv
78.5435 359.542 76.9755 357.974 75.0435 357.974 cv
f
47.1035 368.578 mo
48.4844 368.578 49.6031 369.698 49.6031 371.078 cv
49.6031 372.459 48.4844 373.578 47.1035 373.578 cv
45.7226 373.578 44.6039 372.459 44.6039 371.078 cv
44.6039 369.698 45.7226 368.578 47.1035 368.578 cv
cp
47.1035 367.578 mo
45.1707 367.578 43.6031 369.146 43.6031 371.078 cv
43.6031 373.011 45.1707 374.578 47.1035 374.578 cv
49.0363 374.578 50.6039 373.011 50.6039 371.078 cv
50.6039 369.146 49.0363 367.578 47.1035 367.578 cv
f
249.342 372.773 mo
284.251 372.773 li
284.919 372.208 li
290.191 372.208 li
291.431 371.643 li
292.176 371.078 li
293.178 371.078 li
294.243 370.513 li
295.706 370.513 li
296.542 370.513 li
297.605 370.513 li
298.717 370.513 li
299.724 370.513 li
300.407 370.513 li
301.078 370.513 li
302.172 370.513 li
302.815 370.513 li
304.139 370.513 li
304.886 369.948 li
305.817 369.948 li
306.663 369.948 li
307.239 369.948 li
308.489 369.948 li
309.461 369.948 li
310.235 369.948 li
311.167 369.948 li
312.191 369.384 li
313.024 368.818 li
313.948 368.818 li
314.693 368.818 li
315.322 368.253 li
316.246 367.689 li
316.951 367.124 li
317.643 367.124 li
318.372 367.124 li
319.417 367.124 li
320.437 367.124 li
321.297 366.559 li
321.919 365.429 li
322.705 365.429 li
323.221 365.429 li
324.066 365.429 li
324.73 365.429 li
325.463 364.864 li
326.263 364.864 li
326.657 364.864 li
327.587 364.864 li
328.309 364.299 li
329.017 363.735 li
329.896 363.735 li
330.861 363.169 li
331.596 363.169 li
332.352 363.169 li
333.16 363.169 li
333.724 363.169 li
334.377 363.169 li
335.273 363.169 li
336.089 362.605 li
336.674 362.605 li
337.341 361.475 li
337.849 361.475 li
338.439 361.475 li
339.221 361.475 li
339.933 361.475 li
340.576 360.91 li
341.128 360.345 li
341.807 358.651 li
342.342 357.52 li
342.791 357.52 li
343.623 357.52 li
344.312 357.52 li
344.89 356.955 li
345.583 356.955 li
346.215 356.955 li
346.814 356.391 li
347.357 356.391 li
347.801 356.391 li
348.331 356.391 li
348.809 356.391 li
349.682 355.826 li
350.123 355.826 li
350.904 355.26 li
351.31 354.696 li
351.796 354.131 li
352.422 353.566 li
352.874 353.566 li
353.464 353.566 li
353.824 353.566 li
354.341 353.566 li
355.064 353.001 li
355.66 353.001 li
356.192 352.436 li
356.698 352.436 li
356.994 352.436 li
357.599 352.436 li
358.087 352.436 li
358.588 352.436 li
359.117 352.436 li
359.553 352.436 li
359.984 352.436 li
360.512 352.436 li
361.001 352.436 li
361.648 352.436 li
362.3 352.436 li
362.671 352.436 li
363.182 352.436 li
363.529 352.436 li
364.075 352.436 li
364.629 352.436 li
365.009 351.871 li
365.699 351.871 li
366.1 351.871 li
366.655 351.871 li
366.974 351.871 li
367.519 351.306 li
368.042 351.306 li
368.613 350.177 li
369.177 350.177 li
369.53 349.612 li
370.055 349.612 li
370.507 349.612 li
370.967 349.047 li
371.421 349.047 li
371.845 349.047 li
372.378 349.047 li
372.692 348.482 li
373.029 347.917 li
373.363 347.353 li
373.803 347.353 li
374.287 347.353 li
374.659 346.787 li
375.062 346.787 li
375.554 346.222 li
375.983 346.222 li
376.373 346.222 li
376.726 345.093 li
377.132 345.093 li
377.533 344.528 li
377.963 344.528 li
378.292 344.528 li
378.8 343.962 li
379.153 343.398 li
379.651 343.398 li
379.967 342.833 li
380.371 342.833 li
380.712 342.268 li
381.1 342.268 li
381.464 342.268 li
381.974 341.703 li
382.301 341.138 li
382.585 341.138 li
383.082 340.008 li
383.6 340.008 li
384.075 340.008 li
384.526 340.008 li
384.897 339.444 li
385.237 338.878 li
385.576 338.878 li
385.955 338.314 li
386.35 337.749 li
386.705 337.749 li
387.179 337.749 li
387.596 337.184 li
388.018 336.619 li
388.283 336.619 li
388.714 336.054 li
389.032 335.489 li
389.423 335.489 li
389.825 335.489 li
390.127 334.924 li
390.434 333.795 li
390.811 333.229 li
391.097 333.229 li
391.515 332.664 li
391.937 332.664 li
392.408 332.664 li
392.637 332.664 li
393.1 332.664 li
393.453 332.664 li
393.728 332.664 li
394.091 332.664 li
394.487 332.664 li
394.827 332.1 li
395.223 332.1 li
395.565 332.1 li
395.792 332.1 li
396.142 330.97 li
396.553 330.97 li
396.911 329.84 li
397.178 329.84 li
397.652 329.84 li
398.002 329.84 li
398.321 329.84 li
398.617 329.84 li
398.933 329.275 li
399.199 329.275 li
399.503 328.711 li
399.874 328.711 li
400.173 328.146 li
400.532 328.146 li
400.907 328.146 li
401.173 328.146 li
401.56 328.146 li
401.919 328.146 li
402.185 328.146 li
402.616 327.58 li
402.954 327.016 li
403.231 326.451 li
403.587 325.886 li
403.964 324.756 li
404.273 324.756 li
404.705 324.756 li
405.044 323.626 li
405.378 323.626 li
405.711 323.062 li
406.04 322.497 li
406.297 322.497 li
406.638 322.497 li
406.97 322.497 li
407.264 322.497 li
407.544 321.931 li
407.88 321.367 li
408.244 320.802 li
408.605 320.802 li
408.907 320.237 li
409.257 320.237 li
409.529 320.237 li
409.844 319.672 li
410.146 319.672 li
410.481 319.672 li
410.716 319.672 li
410.983 319.107 li
411.277 319.107 li
411.592 319.107 li
411.863 319.107 li
412.156 318.542 li
412.466 318.542 li
412.823 318.542 li
413.141 317.977 li
413.488 317.977 li
413.828 317.977 li
414.102 317.977 li
414.432 316.847 li
414.702 316.847 li
415.005 316.283 li
415.302 316.283 li
415.523 316.283 li
415.842 316.283 li
416.146 315.718 li
416.476 315.718 li
416.699 315.153 li
416.976 315.153 li
417.25 315.153 li
417.551 314.588 li
417.797 314.588 li
418.099 314.023 li
418.374 313.458 li
418.639 313.458 li
418.933 313.458 li
419.171 312.893 li
419.51 312.893 li
419.764 312.893 li
420.028 312.893 li
420.278 312.329 li
420.516 312.329 li
420.812 311.764 li
421.047 311.764 li
421.31 310.633 li
421.535 310.633 li
421.769 310.069 li
421.994 309.504 li
422.261 309.504 li
422.495 309.504 li
422.803 308.939 li
423.016 308.374 li
423.284 307.244 li
423.512 307.244 li
423.784 306.679 li
424.076 306.679 li
424.319 306.679 li
424.555 306.679 li
424.755 306.679 li
424.988 306.115 li
425.227 306.115 li
425.454 304.984 li
425.734 304.984 li
426.025 304.984 li
426.27 304.984 li
426.521 304.984 li
426.745 304.42 li
426.986 303.855 li
427.239 303.855 li
427.449 302.725 li
427.728 302.725 li
427.976 301.595 li
428.16 301.031 li
428.38 300.466 li
428.634 300.466 li
428.874 300.466 li
429.091 299.336 li
429.297 298.771 li
429.518 297.076 li
429.685 296.511 li
429.886 295.946 li
430.124 295.946 li
430.379 295.381 li
430.564 294.251 li
430.811 293.686 li
431.059 292.557 li
431.273 291.427 li
431.498 291.427 li
431.715 290.297 li
431.952 290.297 li
432.147 289.167 li
432.362 288.038 li
432.56 288.038 li
432.792 286.908 li
432.994 285.778 li
433.22 285.778 li
433.412 285.778 li
433.59 284.648 li
433.771 284.648 li
433.96 283.518 li
434.168 282.953 li
434.408 282.388 li
434.575 281.824 li
434.776 281.259 li
434.966 280.693 li
435.177 280.693 li
435.389 280.129 li
435.592 280.129 li
435.76 279.564 li
435.968 279.564 li
436.158 279.564 li
436.355 279.564 li
436.558 279.564 li
436.783 279.564 li
436.941 278.999 li
437.108 278.434 li
437.303 277.869 li
437.479 277.869 li
437.676 276.74 li
437.838 276.74 li
438.007 275.045 li
438.177 275.045 li
438.406 275.045 li
438.597 275.045 li
438.803 273.35 li
439.01 271.655 li
439.202 271.09 li
439.417 269.395 li
439.616 268.831 li
439.834 268.266 li
440.079 266.571 li
440.251 266.006 li
440.419 266.006 li
440.609 264.311 li
440.807 263.747 li
441.044 262.617 li
441.25 262.052 li
441.455 261.487 li
441.641 261.487 li
441.821 260.922 li
442.01 260.357 li
442.191 259.792 li
442.369 258.662 li
442.509 258.097 li
442.701 257.533 li
442.916 257.533 li
443.102 256.968 li
443.292 256.403 li
443.483 255.838 li
443.687 255.838 li
443.844 255.838 li
443.993 254.708 li
444.178 254.143 li
444.353 253.579 li
444.534 253.013 li
444.709 252.449 li
444.876 252.449 li
445.046 251.884 li
445.233 251.884 li
445.432 251.884 li
445.604 251.884 li
445.762 250.754 li
445.919 250.754 li
446.091 248.495 li
446.283 247.364 li
446.454 247.364 li
446.621 246.235 li
446.746 245.104 li
446.913 245.104 li
447.08 243.41 li
447.255 243.41 li
447.461 243.41 li
447.616 243.41 li
447.764 243.41 li
447.926 243.41 li
448.079 242.845 li
448.206 242.845 li
448.385 242.28 li
448.556 241.715 li
448.754 241.15 li
448.921 240.021 li
449.094 240.021 li
449.263 240.021 li
449.401 239.456 li
449.595 239.456 li
449.776 237.761 li
449.944 237.761 li
450.099 237.761 li
450.282 237.197 li
450.458 237.197 li
450.647 236.066 li
450.795 235.502 li
450.958 234.937 li
451.103 234.372 li
451.24 234.372 li
451.387 233.806 li
451.538 233.806 li
451.688 233.806 li
451.849 233.806 li
451.989 233.242 li
452.132 233.242 li
452.301 232.112 li
452.439 231.547 li
452.591 230.417 li
452.741 229.288 li
452.894 229.288 li
453.058 228.722 li
453.207 228.158 li
453.375 228.158 li
453.515 228.158 li
453.689 227.593 li
453.846 227.028 li
453.961 227.028 li
454.096 226.463 li
454.225 226.463 li
454.388 225.898 li
454.546 225.898 li
454.667 225.333 li
454.819 225.333 li
454.957 225.333 li
455.098 225.333 li
455.243 225.333 li
455.39 225.333 li
455.531 225.333 li
455.678 225.333 li
455.833 224.768 li
455.969 224.204 li
456.106 224.204 li
456.263 223.073 li
456.399 223.073 li
456.551 223.073 li
456.699 222.508 li
456.818 222.508 li
456.959 221.944 li
457.067 221.379 li
457.203 221.379 li
457.354 221.379 li
457.476 221.379 li
457.604 220.249 li
457.771 220.249 li
457.904 219.119 li
458.039 218.554 li
458.2 218.554 li
458.321 217.99 li
458.445 217.99 li
458.578 217.424 li
458.708 216.295 li
458.829 216.295 li
458.969 216.295 li
459.112 216.295 li
459.23 215.73 li
459.369 215.165 li
459.513 215.165 li
459.648 215.165 li
459.792 215.165 li
459.909 214.035 li
460.035 214.035 li
460.147 213.47 li
460.31 211.775 li
460.429 211.775 li
460.562 211.775 li
460.657 211.211 li
460.779 211.211 li
460.906 211.211 li
461.03 210.081 li
461.158 210.081 li
461.284 208.951 li
461.422 207.821 li
461.543 207.821 li
461.666 207.821 li
461.806 207.821 li
461.94 206.126 li
462.066 206.126 li
462.196 204.432 li
462.319 203.867 li
462.451 202.737 li
462.566 202.172 li
462.694 201.042 li
462.846 201.042 li
462.959 201.042 li
463.053 201.042 li
463.15 200.477 li
463.255 199.348 li
463.381 199.348 li
463.497 199.348 li
463.612 198.783 li
463.741 198.218 li
463.846 197.653 li
463.956 197.088 li
464.066 197.088 li
464.16 196.523 li
464.28 195.958 li
464.391 194.828 li
464.503 192.004 li
464.63 192.004 li
464.751 191.439 li
464.872 191.439 li
464.976 190.874 li
465.094 189.744 li
465.191 189.179 li
465.322 189.179 li
465.441 189.179 li
465.548 189.179 li
465.655 188.615 li
465.77 188.05 li
465.878 186.355 li
465.992 184.661 li
466.106 183.53 li
466.21 182.965 li
466.321 182.965 li
466.419 182.965 li
466.558 182.401 li
466.676 181.835 li
466.787 181.835 li
466.904 181.835 li
466.996 181.835 li
467.118 181.27 li
467.242 181.27 li
467.362 180.706 li
467.471 180.706 li
467.573 180.141 li
467.653 180.141 li
467.769 179.576 li
467.874 177.881 li
467.971 177.317 li
468.078 176.186 li
468.17 176.186 li
468.271 176.186 li
468.377 176.186 li
468.478 176.186 li
468.574 176.186 li
468.676 176.186 li
468.767 175.622 li
468.879 175.057 li
468.971 173.927 li
469.068 172.797 li
469.181 172.232 li
469.259 172.232 li
469.372 172.232 li
469.457 172.232 li
469.547 172.232 li
469.647 172.232 li
469.741 171.668 li
469.841 170.537 li
469.952 170.537 li
470.027 170.537 li
470.126 170.537 li
470.233 170.537 li
470.326 169.972 li
470.42 169.408 li
470.515 168.278 li
470.605 167.713 li
470.69 167.713 li
470.786 166.583 li
470.882 166.583 li
470.969 166.018 li
471.064 166.018 li
471.167 166.018 li
471.245 165.453 li
471.33 165.453 li
471.41 164.888 li
471.503 164.888 li
471.596 164.888 li
471.688 164.324 li
471.776 164.324 li
471.87 163.759 li
471.961 163.759 li
472.049 163.194 li
472.146 162.064 li
472.255 162.064 li
472.349 162.064 li
472.453 161.499 li
472.547 160.934 li
472.638 159.804 li
472.739 159.804 li
472.817 159.804 li
472.91 159.804 li
472.999 159.804 li
473.096 159.804 li
473.186 159.804 li
473.282 159.239 li
473.383 159.239 li
473.489 159.239 li
473.576 158.11 li
473.671 158.11 li
473.758 158.11 li
473.841 157.545 li
473.917 156.979 li
474.005 156.979 li
474.103 156.979 li
474.185 156.979 li
474.282 156.979 li
474.366 156.415 li
474.451 154.72 li
474.512 154.72 li
474.597 154.72 li
474.675 154.155 li
474.741 154.155 li
474.833 154.155 li
474.911 154.155 li
474.994 154.155 li
475.069 154.155 li
475.148 153.59 li
475.223 153.59 li
475.294 152.461 li
475.37 151.896 li
475.442 151.896 li
475.515 151.331 li
475.592 151.331 li
475.683 151.331 li
475.757 150.766 li
475.846 150.201 li
475.914 150.201 li
475.982 150.201 li
476.059 149.072 li
476.136 149.072 li
476.226 148.506 li
476.313 147.941 li
476.391 147.941 li
476.47 147.941 li
476.533 147.941 li
476.606 147.941 li
476.687 147.941 li
476.759 147.377 li
476.825 146.812 li
476.886 146.812 li
476.959 146.247 li
477.025 145.681 li
477.106 145.681 li
477.185 143.987 li
477.275 143.987 li
477.347 143.422 li
477.431 143.422 li
477.489 143.422 li
477.557 143.422 li
477.633 142.292 li
477.71 142.292 li
477.785 142.292 li
477.844 141.727 li
477.906 141.163 li
477.987 140.598 li
478.049 140.598 li
478.13 140.598 li
478.204 139.468 li
478.289 138.903 li
478.354 138.903 li
478.408 138.903 li
478.485 138.903 li
478.548 138.338 li
478.614 138.338 li
478.673 137.773 li
478.745 137.773 li
478.819 137.208 li
478.905 137.208 li
478.969 136.643 li
479.03 136.643 li
479.107 136.643 li
479.176 136.643 li
479.234 136.079 li
479.309 136.079 li
479.371 135.514 li
479.435 134.383 li
479.501 133.819 li
479.558 133.819 li
479.636 133.819 li
479.697 133.819 li
479.757 133.819 li
479.81 133.819 li
479.868 133.819 li
479.921 133.254 li
479.975 132.689 li
480.031 132.124 li
480.071 131.559 li
480.137 130.994 li
480.2 130.429 li
480.261 129.299 li
480.322 129.299 li
480.389 129.299 li
480.438 129.299 li
480.497 128.734 li
480.554 127.04 li
480.608 126.475 li
480.671 125.345 li
480.731 125.345 li
480.776 124.781 li
480.833 124.216 li
480.892 123.086 li
480.949 122.521 li
481.008 121.39 li
481.068 120.826 li
481.126 120.826 li
481.178 120.826 li
481.241 120.261 li
481.294 120.261 li
481.356 119.696 li
481.41 119.696 li
481.469 119.131 li
481.521 118.567 li
481.579 118.001 li
481.632 118.001 li
481.689 118.001 li
481.746 117.436 li
481.801 117.436 li
481.851 117.436 li
481.909 116.872 li
481.96 116.307 li
482.015 116.307 li
482.06 116.307 li
482.116 116.307 li
482.161 116.307 li
482.221 114.612 li
482.271 114.612 li
482.324 114.612 li
482.376 114.612 li
482.425 114.047 li
482.469 113.483 li
482.511 113.483 li
482.562 112.917 li
482.615 112.917 li
482.666 112.352 li
482.714 112.352 li
482.762 111.788 li
482.808 111.223 li
482.859 111.223 li
482.906 110.658 li
482.96 110.092 li
483.011 110.092 li
483.064 110.092 li
483.112 110.092 li
483.16 110.092 li
483.214 109.528 li
483.263 109.528 li
483.314 108.963 li
483.363 108.963 li
483.403 108.398 li
483.444 108.398 li
483.485 107.268 li
483.538 106.703 li
483.583 106.138 li
483.61 105.009 li
483.662 105.009 li
483.719 104.443 li
483.769 104.443 li
483.822 103.879 li
483.872 103.314 li
483.911 102.184 li
483.967 102.184 li
484.008 101.054 li
484.051 100.49 li
484.092 98.7948 li
484.142 98.2298 li
484.189 97.6648 li
484.23 97.0998 li
484.281 97.0998 li
484.316 96.5358 li
484.355 96.5358 li
484.391 96.5358 li
484.439 96.5358 li
484.491 95.9698 li
484.532 95.9698 li
484.582 95.9698 li
484.62 94.8398 li
484.655 94.8398 li
484.693 93.1448 li
484.733 93.1448 li
484.778 92.0158 li
484.821 92.0158 li
484.862 91.4508 li
484.898 91.4508 li
484.943 90.3208 li
484.982 89.7558 li
485.016 89.7558 li
485.06 89.7558 li
485.101 89.7558 li
485.142 88.6268 li
485.183 88.6268 li
485.219 88.0608 li
485.248 88.0608 li
485.292 88.0608 li
485.319 87.4968 li
485.346 87.4968 li
485.385 86.3668 li
485.435 86.3668 li
485.478 86.3668 li
485.517 86.3668 li
485.551 85.8018 li
485.583 85.2368 li
485.614 84.6718 li
485.656 84.6718 li
485.684 84.6718 li
485.727 84.6718 li
485.768 84.1068 li
485.805 84.1068 li
485.832 83.5428 li
485.858 83.5428 li
485.889 83.5428 li
485.922 82.9778 li
485.96 82.4118 li
485.991 81.8468 li
486.019 81.8468 li
486.056 81.8468 li
486.093 81.2828 li
486.128 81.2828 li
486.166 81.2828 li
486.201 80.7178 li
486.242 80.7178 li
486.281 80.1528 li
486.314 80.1528 li
486.355 79.0228 li
486.376 77.8928 li
486.411 77.8928 li
486.453 77.8928 li
486.479 77.8928 li
486.52 77.3288 li
486.553 77.3288 li
486.583 77.3288 li
486.624 77.3288 li
486.655 76.7628 li
486.677 76.1988 li
486.712 75.6338 li
486.755 75.0688 li
486.782 75.0688 li
486.823 75.0688 li
486.866 75.0688 li
486.901 75.0688 li
486.931 75.0688 li
486.965 73.9388 li
486.992 73.3738 li
487.023 71.6788 li
487.059 71.6788 li
487.082 71.6788 li
487.11 71.6788 li
487.134 71.1138 li
487.172 71.1138 li
487.206 70.5488 li
487.24 70.5488 li
487.276 69.9848 li
487.312 69.9848 li
487.34 69.4198 li
487.367 69.4198 li
487.398 69.4198 li
487.427 69.4198 li
487.453 69.4198 li
487.475 68.8538 li
487.505 68.8538 li
487.532 68.8538 li
487.562 68.2898 li
487.595 67.7248 li
487.631 67.7248 li
487.668 67.7248 li
487.701 67.1598 li
487.724 66.5948 li
487.753 66.0298 li
487.786 66.0298 li
487.813 65.4648 li
487.841 64.8998 li
487.868 64.3358 li
487.896 64.3358 li
487.931 64.3358 li
487.951 63.7708 li
487.972 63.7708 li
487.995 63.7708 li
488.017 63.7708 li
488.044 63.2058 li
488.069 62.6408 li
488.09 62.6408 li
488.125 62.0758 li
488.156 62.0758 li
488.177 61.5108 li
488.195 60.9468 li
488.216 60.9468 li
488.246 60.9468 li
488.269 60.9468 li
488.3 60.3808 li
488.322 60.3808 li
488.353 60.3808 li
488.383 60.3808 li
488.409 60.3808 li
488.431 59.8158 li
488.458 59.8158 li
488.485 59.2518 li
488.51 59.2518 li
488.533 59.2518 li
488.569 58.6868 li
488.596 58.6868 li
488.612 58.6868 li
488.633 58.6868 li
488.655 58.6868 li
488.674 58.6868 li
488.703 58.6868 li
488.718 58.1218 li
488.738 57.5558 li
488.763 57.5558 li
488.789 56.9918 li
488.814 56.9918 li
488.841 56.9918 li
488.864 56.9918 li
488.878 56.9918 li
488.895 56.4268 li
488.919 56.4268 li
488.943 56.4268 li
488.965 55.8618 li
488.99 55.8618 li
489.013 55.8618 li
489.034 55.8618 li
489.064 55.8618 li
489.082 55.8618 li
489.102 55.8618 li
489.12 55.8618 li
489.141 55.2968 li
489.165 55.2968 li
489.187 54.7318 li
489.214 54.7318 li
489.236 54.7318 li
489.253 54.7318 li
489.272 54.7318 li
489.289 54.7318 li
489.309 54.1668 li
489.326 54.1668 li
489.347 53.6018 li
489.367 53.6018 li
489.389 53.6018 li
489.407 53.6018 li
489.428 53.6018 li
489.451 52.4718 li
489.476 52.4718 li
489.503 51.9078 li
489.524 51.9078 li
489.545 51.9078 li
489.563 51.9078 li
489.579 51.9078 li
489.599 51.9078 li
489.618 51.9078 li
489.642 51.9078 li
489.66 51.3428 li
489.683 51.3428 li
489.703 51.3428 li
489.719 51.3428 li
489.739 51.3428 li
489.749 51.3428 li
489.767 51.3428 li
489.783 51.3428 li
489.804 50.7778 li
489.821 50.7778 li
489.839 50.7778 li
489.851 50.2128 li
489.871 50.2128 li
489.891 49.6478 li
489.916 49.0828 li
489.929 48.5178 li
489.946 48.5178 li
489.967 47.9538 li
489.992 47.9538 li
490.01 47.3888 li
490.027 47.3888 li
490.049 47.3888 li
490.069 47.3888 li
490.09 47.3888 li
490.117 47.3888 li
490.133 46.8228 li
490.151 46.8228 li
490.172 46.8228 li
490.188 46.8228 li
490.206 46.8228 li
490.219 46.8228 li
490.235 46.8228 li
490.25 46.8228 li
490.268 46.8228 li
490.286 46.8228 li
490.309 46.8228 li
490.328 46.2578 li
490.349 46.2578 li
490.362 45.1288 li
490.382 45.1288 li
490.396 45.1288 li
490.414 45.1288 li
490.432 45.1288 li
490.443 45.1288 li
490.462 45.1288 li
490.48 45.1288 li
490.495 45.1288 li
490.509 45.1288 li
490.518 45.1288 li
490.535 45.1288 li
490.553 45.1288 li
490.565 45.1288 li
490.581 45.1288 li
490.593 44.5638 li
490.607 44.5638 li
490.624 44.5638 li
490.637 44.5638 li
490.654 44.5638 li
490.669 44.5638 li
490.682 42.8688 li
490.696 42.8688 li
490.712 42.3038 li
490.725 42.3038 li
490.745 41.7398 li
490.756 41.1738 li
490.774 41.1738 li
490.788 41.1738 li
490.802 41.1738 li
490.814 41.1738 li
490.828 40.6088 li
490.846 40.0448 li
490.861 40.0448 li
490.873 39.4798 li
490.889 39.4798 li
490.902 39.4798 li
490.916 39.4798 li
490.932 38.9148 li
490.944 38.9148 li
490.961 38.9148 li
490.974 38.9148 li
490.992 38.9148 li
491.016 38.9148 li
491.028 38.9148 li
491.044 38.9148 li
491.053 38.9148 li
491.068 38.9148 li
491.08 38.9148 li
491.091 38.3498 li
491.108 38.3498 li
491.123 38.3498 li
491.137 38.3498 li
491.146 37.7848 li
491.165 37.7848 li
491.177 37.7848 li
491.186 37.7848 li
491.198 37.2198 li
491.211 37.2198 li
491.221 36.6558 li
491.24 36.0908 li
491.251 36.0908 li
491.264 35.5248 li
491.273 35.5248 li
491.282 35.5248 li
491.297 35.5248 li
491.314 35.5248 li
491.328 35.5248 li
491.339 34.9608 li
491.354 34.9608 li
491.365 34.9608 li
491.378 34.9608 li
491.391 34.3958 li
491.402 34.3958 li
491.415 34.3958 li
491.426 34.3958 li
491.438 33.8308 li
491.453 33.8308 li
491.466 33.2658 li
491.477 33.2658 li
491.492 33.2658 li
491.503 32.7008 li
491.513 32.7008 li
491.526 32.7008 li
491.537 32.7008 li
491.543 32.7008 li
491.555 32.7008 li
491.566 32.7008 li
491.579 32.1358 li
491.589 32.1358 li
491.601 32.1358 li
491.614 32.1358 li
491.624 32.1358 li
491.634 31.5708 li
491.648 31.5708 li
491.661 31.0058 li
491.67 31.0058 li
491.678 31.0058 li
491.689 31.0058 li
491.696 31.0058 li
491.705 31.0058 li
491.714 30.4418 li
491.727 30.4418 li
491.74 29.3108 li
491.753 29.3108 li
491.761 29.3108 li
491.767 29.3108 li
491.776 29.3108 li
491.79 29.3108 li
491.804 28.7468 li
491.811 28.7468 li
491.819 28.7468 li
491.833 28.7468 li
491.849 28.7468 li
491.856 28.1818 li
491.867 28.1818 li
491.874 28.1818 li
491.885 28.1818 li
491.896 28.1818 li
491.903 28.1818 li
491.912 28.1818 li
491.919 28.1818 li
491.926 28.1818 li
491.934 28.1818 li
491.946 28.1818 li
491.96 27.6168 li
491.966 27.6168 li
491.974 27.0518 li
491.983 27.0518 li
491.99 27.0518 li
491.996 26.4868 li
492.01 26.4868 li
492.014 25.9218 li
492.023 25.9218 li
492.026 25.9218 li
492.035 25.9218 li
492.044 25.3578 li
492.053 25.3578 li
492.063 25.3578 li
492.071 25.3578 li
492.081 25.3578 li
492.089 25.3578 li
492.099 25.3578 li
492.105 24.7918 li
492.112 24.7918 li
492.121 24.7918 li
492.13 24.7918 li
492.141 24.7918 li
492.146 24.7918 li
492.151 24.7918 li
492.16 24.7918 li
492.17 24.7918 li
492.178 24.7918 li
492.187 24.7918 li
492.194 24.7918 li
492.203 24.7918 li
492.212 24.7918 li
492.226 24.7918 li
492.232 24.2268 li
492.24 24.2268 li
492.248 24.2268 li
492.251 24.2268 li
492.258 24.2268 li
492.262 24.2268 li
492.268 24.2268 li
492.279 24.2268 li
492.286 24.2268 li
492.29 24.2268 li
492.301 24.2268 li
492.309 24.2268 li
492.315 24.2268 li
492.322 24.2268 li
492.33 24.2268 li
492.336 24.2268 li
492.349 24.2268 li
492.355 24.2268 li
492.36 24.2268 li
492.364 24.2268 li
492.371 24.2268 li
492.376 24.2268 li
492.383 24.2268 li
492.391 24.2268 li
492.395 24.2268 li
492.403 24.2268 li
492.412 24.2268 li
492.418 24.2268 li
492.425 24.2268 li
492.433 24.2268 li
492.44 24.2268 li
492.446 24.2268 li
492.449 24.2268 li
492.451 24.2268 li
492.461 24.2268 li
492.467 24.2268 li
492.474 24.2268 li
492.481 24.2268 li
492.487 24.2268 li
492.493 24.2268 li
492.499 24.2268 li
492.504 24.2268 li
492.512 24.2268 li
492.52 24.2268 li
492.526 24.2268 li
492.533 24.2268 li
492.538 24.2268 li
492.544 24.2268 li
492.551 24.2268 li
492.559 24.2268 li
492.566 24.2268 li
492.569 24.2268 li
492.574 24.2268 li
492.583 24.2268 li
492.587 24.2268 li
492.594 24.2268 li
492.599 24.2268 li
492.605 24.2268 li
492.609 24.2268 li
492.617 24.2268 li
492.62 24.2268 li
492.624 24.2268 li
492.629 24.2268 li
492.634 24.2268 li
492.637 24.2268 li
492.641 24.2268 li
492.649 24.2268 li
492.655 24.2268 li
492.658 24.2268 li
492.667 24.2268 li
492.674 24.2268 li
492.683 24.2268 li
492.686 24.2268 li
492.694 24.2268 li
492.703 24.2268 li
492.71 24.2268 li
492.715 24.2268 li
492.72 24.2268 li
492.724 24.2268 li
492.728 24.2268 li
492.733 24.2268 li
492.742 24.2268 li
492.747 24.2268 li
492.753 24.2268 li
492.755 24.2268 li
492.758 24.2268 li
492.762 24.2268 li
492.768 24.2268 li
492.77 24.2268 li
492.776 24.2268 li
492.778 24.2268 li
492.785 24.2268 li
492.791 24.2268 li
492.794 24.2268 li
492.797 23.6628 li
492.798 23.6628 li
492.801 23.6628 li
492.805 23.6628 li
492.812 23.6628 li
492.814 23.6628 li
492.819 23.6628 li
492.826 23.6628 li
492.833 23.6628 li
492.835 23.6628 li
492.842 23.6628 li
492.845 23.6628 li
492.851 23.6628 li
492.853 23.6628 li
492.858 23.6628 li
492.86 23.6628 li
492.862 23.6628 li
492.866 23.6628 li
492.87 23.6628 li
492.871 23.6628 li
492.874 23.6628 li
492.878 23.6628 li
492.882 23.6628 li
492.887 23.6628 li
492.891 23.0978 li
492.894 23.0978 li
492.898 23.0978 li
492.899 23.0978 li
492.905 23.0978 li
492.908 23.0978 li
492.911 23.0978 li
492.913 23.0978 li
492.916 23.0978 li
492.917 23.0978 li
492.919 23.0978 li
492.922 23.0978 li
492.927 23.0978 li
492.931 23.0978 li
492.934 23.0978 li
492.94 23.0978 li
492.941 23.0978 li
492.946 22.5328 li
492.949 22.5328 li
492.954 22.5328 li
492.961 22.5328 li
492.964 22.5328 li
492.968 22.5328 li
492.972 22.5328 li
492.976 22.5328 li
492.98 22.5328 li
492.985 22.5328 li
492.989 22.5328 li
492.993 22.5328 li
492.996 22.5328 li
492.998 22.5328 li
493.001 22.5328 li
493.005 22.5328 li
493.007 22.5328 li
493.009 22.5328 li
493.011 22.5328 li
493.014 22.5328 li
493.019 22.5328 li
493.022 22.5328 li
493.026 22.5328 li
493.027 22.5328 li
493.031 22.5328 li
493.034 22.5328 li
493.037 22.5328 li
493.039 22.5328 li
493.045 22.5328 li
493.049 22.5328 li
493.051 22.5328 li
493.052 22.5328 li
493.053 22.5328 li
493.054 22.5328 li
493.056 22.5328 li
493.058 22.5328 li
493.06 22.5328 li
493.062 22.5328 li
493.064 22.5328 li
493.066 22.5328 li
493.069 22.5328 li
493.072 22.5328 li
493.073 22.5328 li
493.076 22.5328 li
493.078 22.5328 li
493.079 22.5328 li
493.08 22.5328 li
493.082 22.5328 li
493.084 22.5328 li
493.085 22.5328 li
493.086 22.5328 li
493.09 22.5328 li
493.092 22.5328 li
493.094 22.5328 li
493.095 22.5328 li
493.096 22.5328 li
493.099 22.5328 li
493.102 22.5328 li
493.105 22.5328 li
493.108 22.5328 li
493.109 22.5328 li
493.112 22.5328 li
493.113 22.5328 li
493.114 22.5328 li
493.116 22.5328 li
493.117 22.5328 li
493.12 22.5328 li
493.121 22.5328 li
493.123 22.5328 li
493.126 22.5328 li
493.129 22.5328 li
493.132 22.5328 li
493.135 22.5328 li
493.136 22.5328 li
493.141 22.5328 li
493.142 22.5328 li
493.143 22.5328 li
493.144 22.5328 li
493.146 22.5328 li
493.148 22.5328 li
493.149 22.5328 li
493.151 22.5328 li
493.153 22.5328 li
493.157 22.5328 li
493.158 22.5328 li
493.16 22.5328 li
493.161 21.9678 li
493.165 21.9678 li
493.166 21.9678 li
493.167 21.9678 li
493.169 21.9678 li
493.172 21.9678 li
493.172 21.9678 li
493.174 21.9678 li
493.175 21.9678 li
493.177 21.9678 li
493.178 21.9678 li
493.179 21.9678 li
493.182 21.9678 li
493.183 21.9678 li
493.184 21.9678 li
493.185 21.9678 li
493.186 21.9678 li
493.187 21.9678 li
493.189 21.9678 li
493.19 21.9678 li
493.191 21.9678 li
493.193 21.9678 li
493.193 21.9678 li
493.194 21.9678 li
493.196 21.9678 li
493.197 21.9678 li
493.199 21.9678 li
493.201 21.9678 li
493.201 21.9678 li
493.203 21.9678 li
493.205 21.9678 li
493.208 21.9678 li
493.209 21.9678 li
493.211 21.9678 li
493.214 21.9678 li
493.214 21.9678 li
493.215 21.9678 li
493.217 21.4028 li
493.218 21.4028 li
493.219 21.4028 li
493.224 21.4028 li
493.226 21.4028 li
493.227 21.4028 li
493.228 21.4028 li
493.229 21.4028 li
493.23 21.4028 li
493.231 21.4028 li
493.232 21.4028 li
493.233 21.4028 li
493.235 21.4028 li
493.236 21.4028 li
493.237 21.4028 li
493.238 21.4028 li
493.24 21.4028 li
493.241 21.4028 li
493.243 21.4028 li
493.245 21.4028 li
493.245 21.4028 li
493.246 21.4028 li
493.247 21.4028 li
493.248 21.4028 li
493.249 21.4028 li
493.251 21.4028 li
493.253 21.4028 li
493.253 21.4028 li
493.255 21.4028 li
493.256 21.4028 li
493.257 21.4028 li
493.258 21.4028 li
493.26 21.4028 li
493.262 21.4028 li
493.266 21.4028 li
493.267 21.4028 li
493.268 21.4028 li
493.269 21.4028 li
493.27 21.4028 li
493.273 21.4028 li
493.274 21.4028 li
493.276 21.4028 li
493.276 21.4028 li
493.277 21.4028 li
493.278 21.4028 li
493.28 21.4028 li
493.281 21.4028 li
493.282 21.4028 li
493.283 21.4028 li
493.284 21.4028 li
493.285 21.4028 li
493.286 21.4028 li
493.287 21.4028 li
493.288 21.4028 li
493.289 21.4028 li
493.29 21.4028 li
493.292 21.4028 li
493.293 21.4028 li
493.294 21.4028 li
493.297 21.4028 li
493.297 21.4028 li
493.298 21.4028 li
493.299 21.4028 li
493.3 21.4028 li
493.301 21.4028 li
493.303 21.4028 li
493.304 21.4028 li
493.305 21.4028 li
493.307 21.4028 li
493.308 21.4028 li
493.309 21.4028 li
493.31 21.4028 li
493.312 21.4028 li
493.313 21.4028 li
493.314 21.4028 li
493.316 21.4028 li
493.318 21.4028 li
493.318 21.4028 li
493.319 21.4028 li
493.32 21.4028 li
493.321 21.4028 li
493.323 21.4028 li
493.324 21.4028 li
493.326 21.4028 li
493.326 21.4028 li
493.328 21.4028 li
493.329 21.4028 li
493.33 21.4028 li
493.331 21.4028 li
493.332 21.4028 li
493.333 21.4028 li
493.334 21.4028 li
493.335 21.4028 li
493.336 21.4028 li
493.337 21.4028 li
493.339 21.4028 li
493.341 21.4028 li
493.342 21.4028 li
493.343 21.4028 li
493.344 21.4028 li
493.345 21.4028 li
493.346 21.4028 li
493.347 21.4028 li
493.349 21.4028 li
493.349 21.4028 li
493.35 21.4028 li
493.351 21.4028 li
493.352 21.4028 li
493.353 21.4028 li
.265019 .809232 0 0 cmyk
@
0 lj
247.092 375.023 mo
251.592 375.023 li
251.592 370.523 li
247.092 370.523 li
cp
@
260.958 375.023 mo
265.458 375.023 li
265.458 370.523 li
260.958 370.523 li
cp
@
271.839 375.023 mo
276.339 375.023 li
276.339 370.523 li
271.839 370.523 li
cp
@
283.543 374.458 mo
288.043 374.458 li
288.043 369.958 li
283.543 369.958 li
cp
@
293.456 372.763 mo
297.956 372.763 li
297.956 368.263 li
293.456 368.263 li
cp
@
302.636 372.198 mo
307.136 372.198 li
307.136 367.698 li
302.636 367.698 li
cp
@
311.698 371.069 mo
316.198 371.069 li
316.198 366.569 li
311.698 366.569 li
cp
@
319.669 367.679 mo
324.169 367.679 li
324.169 363.179 li
319.669 363.179 li
cp
@
326.767 365.984 mo
331.267 365.984 li
331.267 361.484 li
326.767 361.484 li
cp
@
334.424 364.855 mo
338.924 364.855 li
338.924 360.355 li
334.424 360.355 li
cp
@
340.541 359.771 mo
345.041 359.771 li
345.041 355.271 li
340.541 355.271 li
cp
@
346.559 358.641 mo
351.059 358.641 li
351.059 354.141 li
346.559 354.141 li
cp
@
352.091 355.816 mo
356.591 355.816 li
356.591 351.316 li
352.091 351.316 li
cp
@
357.303 354.686 mo
361.803 354.686 li
361.803 350.186 li
357.303 350.186 li
cp
@
362.379 354.686 mo
366.879 354.686 li
366.879 350.186 li
362.379 350.186 li
cp
@
367.281 351.862 mo
371.781 351.862 li
371.781 347.362 li
367.281 347.362 li
cp
@
371.553 349.602 mo
376.053 349.602 li
376.053 345.102 li
371.553 345.102 li
cp
@
375.714 346.778 mo
380.214 346.778 li
380.214 342.278 li
375.714 342.278 li
cp
@
379.724 343.953 mo
384.224 343.953 li
384.224 339.453 li
379.724 339.453 li
cp
@
383.705 340.564 mo
388.205 340.564 li
388.205 336.064 li
383.705 336.064 li
cp
@
387.575 337.739 mo
392.075 337.739 li
392.075 333.239 li
387.575 333.239 li
cp
@
391.203 334.915 mo
395.703 334.915 li
395.703 330.415 li
391.203 330.415 li
cp
@
394.662 332.09 mo
399.162 332.09 li
399.162 327.59 li
394.662 327.59 li
cp
@
397.923 330.396 mo
402.423 330.396 li
402.423 325.896 li
397.923 325.896 li
cp
@
401.337 328.136 mo
405.837 328.136 li
405.837 323.636 li
401.337 323.636 li
cp
@
404.721 324.746 mo
409.221 324.746 li
409.221 320.246 li
404.721 320.246 li
cp
@
407.896 321.922 mo
412.396 321.922 li
412.396 317.422 li
407.896 317.422 li
cp
@
410.891 320.227 mo
415.391 320.227 li
415.391 315.727 li
410.891 315.727 li
cp
@
413.896 317.968 mo
418.396 317.968 li
418.396 313.468 li
413.896 313.468 li
cp
@
416.684 315.708 mo
421.184 315.708 li
421.184 311.208 li
416.684 311.208 li
cp
@
419.284 312.884 mo
423.784 312.884 li
423.784 308.384 li
419.284 308.384 li
cp
@
421.825 308.929 mo
426.325 308.929 li
426.325 304.429 li
421.825 304.429 li
cp
@
424.271 307.234 mo
428.771 307.234 li
428.771 302.734 li
424.271 302.734 li
cp
@
426.624 302.715 mo
431.124 302.715 li
431.124 298.215 li
426.624 298.215 li
cp
@
428.809 294.807 mo
433.309 294.807 li
433.309 290.307 li
428.809 290.307 li
cp
@
430.971 288.028 mo
435.471 288.028 li
435.471 283.528 li
430.971 283.528 li
cp
@
432.927 282.944 mo
437.427 282.944 li
437.427 278.444 li
432.927 278.444 li
cp
@
434.858 280.684 mo
439.358 280.684 li
439.358 276.184 li
434.858 276.184 li
cp
@
436.759 273.905 mo
441.259 273.905 li
441.259 269.405 li
436.759 269.405 li
cp
@
438.794 264.867 mo
443.294 264.867 li
443.294 260.367 li
438.794 260.367 li
cp
@
440.667 259.783 mo
445.167 259.783 li
445.167 255.283 li
440.667 255.283 li
cp
@
442.458 254.699 mo
446.958 254.699 li
446.958 250.199 li
442.458 250.199 li
cp
@
444.204 249.615 mo
448.704 249.615 li
448.704 245.115 li
444.204 245.115 li
cp
@
445.829 245.095 mo
450.329 245.095 li
450.329 240.595 li
445.829 240.595 li
cp
@
447.526 240.011 mo
452.026 240.011 li
452.026 235.511 li
447.526 235.511 li
cp
@
449.137 236.057 mo
453.637 236.057 li
453.637 231.557 li
449.137 231.557 li
cp
@
450.644 231.538 mo
455.144 231.538 li
455.144 227.038 li
450.644 227.038 li
cp
@
452.139 228.148 mo
456.639 228.148 li
456.639 223.648 li
452.139 223.648 li
cp
@
453.583 227.018 mo
458.083 227.018 li
458.083 222.518 li
453.583 222.518 li
cp
@
454.953 223.629 mo
459.453 223.629 li
459.453 219.129 li
454.953 219.129 li
cp
@
456.329 219.675 mo
460.829 219.675 li
460.829 215.175 li
456.329 215.175 li
cp
@
457.659 216.285 mo
462.159 216.285 li
462.159 211.785 li
457.659 211.785 li
cp
@
458.909 212.331 mo
463.409 212.331 li
463.409 207.831 li
458.909 207.831 li
cp
@
460.201 204.987 mo
464.701 204.987 li
464.701 200.487 li
460.201 200.487 li
cp
@
461.363 201.033 mo
465.863 201.033 li
465.863 196.533 li
461.363 196.533 li
cp
@
462.501 193.689 mo
467.001 193.689 li
467.001 189.189 li
462.501 189.189 li
cp
@
463.628 188.605 mo
468.128 188.605 li
468.128 184.105 li
463.628 184.105 li
cp
@
464.746 184.086 mo
469.246 184.086 li
469.246 179.586 li
464.746 179.586 li
cp
@
465.828 178.436 mo
470.328 178.436 li
470.328 173.936 li
465.828 173.936 li
cp
@
466.818 175.047 mo
471.318 175.047 li
471.318 170.547 li
466.818 170.547 li
cp
@
467.777 172.788 mo
472.277 172.788 li
472.277 168.288 li
467.777 168.288 li
cp
@
468.719 168.268 mo
473.219 168.268 li
473.219 163.768 li
468.719 163.768 li
cp
@
469.62 166.009 mo
474.12 166.009 li
474.12 161.509 li
469.62 161.509 li
cp
@
470.567 162.054 mo
475.067 162.054 li
475.067 157.554 li
470.567 157.554 li
cp
@
471.507 160.359 mo
476.007 160.359 li
476.007 155.859 li
471.507 155.859 li
cp
@
472.347 156.97 mo
476.847 156.97 li
476.847 152.47 li
472.347 152.47 li
cp
@
473.121 154.146 mo
477.621 154.146 li
477.621 149.646 li
473.121 149.646 li
cp
@
473.886 151.321 mo
478.386 151.321 li
478.386 146.821 li
473.886 146.821 li
cp
@
474.636 149.061 mo
479.136 149.061 li
479.136 144.561 li
474.636 144.561 li
cp
@
475.383 144.542 mo
479.883 144.542 li
479.883 140.042 li
475.383 140.042 li
cp
@
476.103 141.153 mo
480.603 141.153 li
480.603 136.653 li
476.103 136.653 li
cp
@
476.78 138.893 mo
481.28 138.893 li
481.28 134.393 li
476.78 134.393 li
cp
@
477.447 136.069 mo
481.947 136.069 li
481.947 131.569 li
477.447 131.569 li
cp
@
478.011 131.549 mo
482.511 131.549 li
482.511 127.049 li
478.011 127.049 li
cp
@
478.583 126.465 mo
483.083 126.465 li
483.083 121.965 li
478.583 121.965 li
cp
@
479.16 121.946 mo
483.66 121.946 li
483.66 117.446 li
479.16 117.446 li
cp
@
479.71 118.557 mo
484.21 118.557 li
484.21 114.057 li
479.71 114.057 li
cp
@
480.219 115.732 mo
484.719 115.732 li
484.719 111.232 li
480.219 111.232 li
cp
@
480.71 112.343 mo
485.21 112.343 li
485.21 107.843 li
480.71 107.843 li
cp
@
481.194 110.648 mo
485.694 110.648 li
485.694 106.148 li
481.194 106.148 li
cp
@
481.661 104.434 mo
486.161 104.434 li
486.161 99.9338 li
481.661 99.9338 li
cp
@
482.106 98.7848 mo
486.606 98.7848 li
486.606 94.2848 li
482.106 94.2848 li
cp
@
482.528 94.2658 mo
487.028 94.2658 li
487.028 89.7658 li
482.528 89.7658 li
cp
@
482.933 90.8758 mo
487.433 90.8758 li
487.433 86.3758 li
482.933 86.3758 li
cp
@
483.301 88.0518 mo
487.801 88.0518 li
487.801 83.5518 li
483.301 83.5518 li
cp
@
483.639 85.7918 mo
488.139 85.7918 li
488.139 81.2918 li
483.639 81.2918 li
cp
@
483.992 82.9678 mo
488.492 82.9678 li
488.492 78.4678 li
483.992 78.4678 li
cp
@
484.334 79.5778 mo
488.834 79.5778 li
488.834 75.0778 li
484.334 75.0778 li
cp
@
484.681 77.3188 mo
489.181 77.3188 li
489.181 72.8188 li
484.681 72.8188 li
cp
@
484.99 72.7998 mo
489.49 72.7998 li
489.49 68.2998 li
484.99 68.2998 li
cp
@
485.282 71.1048 mo
489.782 71.1048 li
489.782 66.6048 li
485.282 66.6048 li
cp
@
485.591 67.1498 mo
490.091 67.1498 li
490.091 62.6498 li
485.591 62.6498 li
cp
@
485.84 64.8908 mo
490.34 64.8908 li
490.34 60.3908 li
485.84 60.3908 li
cp
@
486.104 62.6308 mo
490.604 62.6308 li
490.604 58.1308 li
486.104 58.1308 li
cp
@
486.362 60.9358 mo
490.862 60.9358 li
490.862 56.4358 li
486.362 56.4358 li
cp
@
486.591 59.2418 mo
491.091 59.2418 li
491.091 54.7418 li
486.591 54.7418 li
cp
@
486.814 58.1118 mo
491.314 58.1118 li
491.314 53.6118 li
486.814 53.6118 li
cp
@
487.023 56.9818 mo
491.523 56.9818 li
491.523 52.4818 li
487.023 52.4818 li
cp
@
487.226 54.7228 mo
491.726 54.7228 li
491.726 50.2228 li
487.226 50.2228 li
cp
@
487.433 53.5928 mo
491.933 53.5928 li
491.933 49.0928 li
487.433 49.0928 li
cp
@
487.601 52.4628 mo
492.101 52.4628 li
492.101 47.9628 li
487.601 47.9628 li
cp
@
487.799 49.6378 mo
492.299 49.6378 li
492.299 45.1378 li
487.799 45.1378 li
cp
@
487.985 49.0738 mo
492.485 49.0738 li
492.485 44.5738 li
487.985 44.5738 li
cp
@
488.164 47.3788 mo
492.664 47.3788 li
492.664 42.8788 li
488.164 42.8788 li
cp
@
488.315 47.3788 mo
492.815 47.3788 li
492.815 42.8788 li
488.315 42.8788 li
cp
@
488.462 44.5538 mo
492.962 44.5538 li
492.962 40.0538 li
488.462 40.0538 li
cp
@
488.611 42.2948 mo
493.111 42.2948 li
493.111 37.7948 li
488.611 37.7948 li
cp
@
488.766 41.1648 mo
493.266 41.1648 li
493.266 36.6648 li
488.766 36.6648 li
cp
@
488.896 40.0348 mo
493.396 40.0348 li
493.396 35.5348 li
488.896 35.5348 li
cp
@
489.023 37.7748 mo
493.523 37.7748 li
493.523 33.2748 li
489.023 33.2748 li
cp
@
489.153 36.6458 mo
493.653 36.6458 li
493.653 32.1458 li
489.153 32.1458 li
cp
@
489.276 34.9508 mo
493.776 34.9508 li
493.776 30.4508 li
489.276 30.4508 li
cp
@
489.384 33.8208 mo
493.884 33.8208 li
493.884 29.3208 li
489.384 29.3208 li
cp
@
489.49 31.5608 mo
493.99 31.5608 li
493.99 27.0608 li
489.49 27.0608 li
cp
@
489.599 30.9968 mo
494.099 30.9968 li
494.099 26.4968 li
489.599 26.4968 li
cp
@
489.684 30.4318 mo
494.184 30.4318 li
494.184 25.9318 li
489.684 25.9318 li
cp
@
489.773 28.1718 mo
494.273 28.1718 li
494.273 23.6718 li
489.773 23.6718 li
cp
@
489.855 27.0418 mo
494.355 27.0418 li
494.355 22.5418 li
489.855 22.5418 li
cp
@
489.937 27.0418 mo
494.437 27.0418 li
494.437 22.5418 li
489.937 22.5418 li
cp
@
490.012 26.4768 mo
494.512 26.4768 li
494.512 21.9768 li
490.012 21.9768 li
cp
@
490.086 26.4768 mo
494.586 26.4768 li
494.586 21.9768 li
490.086 21.9768 li
cp
@
490.153 26.4768 mo
494.653 26.4768 li
494.653 21.9768 li
490.153 21.9768 li
cp
@
490.217 26.4768 mo
494.717 26.4768 li
494.717 21.9768 li
490.217 21.9768 li
cp
@
490.283 26.4768 mo
494.783 26.4768 li
494.783 21.9768 li
490.283 21.9768 li
cp
@
490.344 26.4768 mo
494.844 26.4768 li
494.844 21.9768 li
490.344 21.9768 li
cp
@
490.391 26.4768 mo
494.891 26.4768 li
494.891 21.9768 li
490.391 21.9768 li
cp
@
490.46 26.4768 mo
494.96 26.4768 li
494.96 21.9768 li
490.46 21.9768 li
cp
@
490.508 26.4768 mo
495.008 26.4768 li
495.008 21.9768 li
490.508 21.9768 li
cp
@
490.548 25.9128 mo
495.048 25.9128 li
495.048 21.4128 li
490.548 21.4128 li
cp
@
490.595 25.9128 mo
495.095 25.9128 li
495.095 21.4128 li
490.595 21.4128 li
cp
@
490.629 25.9128 mo
495.129 25.9128 li
495.129 21.4128 li
490.629 21.4128 li
cp
@
490.663 25.3478 mo
495.163 25.3478 li
495.163 20.8478 li
490.663 20.8478 li
cp
@
490.696 24.7828 mo
495.196 24.7828 li
495.196 20.2828 li
490.696 20.2828 li
cp
@
490.739 24.7828 mo
495.239 24.7828 li
495.239 20.2828 li
490.739 20.2828 li
cp
@
490.764 24.7828 mo
495.264 24.7828 li
495.264 20.2828 li
490.764 20.2828 li
cp
@
490.799 24.7828 mo
495.299 24.7828 li
495.299 20.2828 li
490.799 20.2828 li
cp
@
490.814 24.7828 mo
495.314 24.7828 li
495.314 20.2828 li
490.814 20.2828 li
cp
@
490.83 24.7828 mo
495.33 24.7828 li
495.33 20.2828 li
490.83 20.2828 li
cp
@
490.845 24.7828 mo
495.345 24.7828 li
495.345 20.2828 li
490.845 20.2828 li
cp
@
490.863 24.7828 mo
495.363 24.7828 li
495.363 20.2828 li
490.863 20.2828 li
cp
@
490.882 24.7828 mo
495.382 24.7828 li
495.382 20.2828 li
490.882 20.2828 li
cp
@
490.898 24.7828 mo
495.398 24.7828 li
495.398 20.2828 li
490.898 20.2828 li
cp
@
490.911 24.2178 mo
495.411 24.2178 li
495.411 19.7178 li
490.911 19.7178 li
cp
@
490.925 24.2178 mo
495.425 24.2178 li
495.425 19.7178 li
490.925 19.7178 li
cp
@
490.939 24.2178 mo
495.439 24.2178 li
495.439 19.7178 li
490.939 19.7178 li
cp
@
490.947 24.2178 mo
495.447 24.2178 li
495.447 19.7178 li
490.947 19.7178 li
cp
@
490.959 24.2178 mo
495.459 24.2178 li
495.459 19.7178 li
490.959 19.7178 li
cp
@
490.967 23.6528 mo
495.467 23.6528 li
495.467 19.1528 li
490.967 19.1528 li
cp
@
490.977 23.6528 mo
495.477 23.6528 li
495.477 19.1528 li
490.977 19.1528 li
cp
@
490.98 23.6528 mo
495.48 23.6528 li
495.48 19.1528 li
490.98 19.1528 li
cp
@
490.986 23.6528 mo
495.486 23.6528 li
495.486 19.1528 li
490.986 19.1528 li
cp
@
490.991 23.6528 mo
495.491 23.6528 li
495.491 19.1528 li
490.991 19.1528 li
cp
@
490.995 23.6528 mo
495.495 23.6528 li
495.495 19.1528 li
490.995 19.1528 li
cp
@
490.998 23.6528 mo
495.498 23.6528 li
495.498 19.1528 li
490.998 19.1528 li
cp
@
491.006 23.6528 mo
495.506 23.6528 li
495.506 19.1528 li
491.006 19.1528 li
cp
@
491.008 23.6528 mo
495.508 23.6528 li
495.508 19.1528 li
491.008 19.1528 li
cp
@
491.012 23.6528 mo
495.512 23.6528 li
495.512 19.1528 li
491.012 19.1528 li
cp
@
491.016 23.6528 mo
495.516 23.6528 li
495.516 19.1528 li
491.016 19.1528 li
cp
@
491.02 23.6528 mo
495.52 23.6528 li
495.52 19.1528 li
491.02 19.1528 li
cp
@
491.026 23.6528 mo
495.526 23.6528 li
495.526 19.1528 li
491.026 19.1528 li
cp
@
491.032 23.6528 mo
495.532 23.6528 li
495.532 19.1528 li
491.032 19.1528 li
cp
@
491.034 23.6528 mo
495.534 23.6528 li
495.534 19.1528 li
491.034 19.1528 li
cp
@
491.039 23.6528 mo
495.539 23.6528 li
495.539 19.1528 li
491.039 19.1528 li
cp
@
491.044 23.6528 mo
495.544 23.6528 li
495.544 19.1528 li
491.044 19.1528 li
cp
@
491.048 23.6528 mo
495.548 23.6528 li
495.548 19.1528 li
491.048 19.1528 li
cp
@
491.051 23.6528 mo
495.551 23.6528 li
495.551 19.1528 li
491.051 19.1528 li
cp
@
491.055 23.6528 mo
495.555 23.6528 li
495.555 19.1528 li
491.055 19.1528 li
cp
@
491.058 23.6528 mo
495.558 23.6528 li
495.558 19.1528 li
491.058 19.1528 li
cp
@
491.062 23.6528 mo
495.562 23.6528 li
495.562 19.1528 li
491.062 19.1528 li
cp
@
491.064 23.6528 mo
495.564 23.6528 li
495.564 19.1528 li
491.064 19.1528 li
cp
@
491.068 23.6528 mo
495.568 23.6528 li
495.568 19.1528 li
491.068 19.1528 li
cp
@
491.073 23.6528 mo
495.573 23.6528 li
495.573 19.1528 li
491.073 19.1528 li
cp
@
491.076 23.6528 mo
495.576 23.6528 li
495.576 19.1528 li
491.076 19.1528 li
cp
@
491.078 23.6528 mo
495.578 23.6528 li
495.578 19.1528 li
491.078 19.1528 li
cp
@
491.08 23.6528 mo
495.58 23.6528 li
495.58 19.1528 li
491.08 19.1528 li
cp
@
491.08 23.6528 mo
495.58 23.6528 li
495.58 19.1528 li
491.08 19.1528 li
cp
@
491.081 23.6528 mo
495.581 23.6528 li
495.581 19.1528 li
491.081 19.1528 li
cp
@
491.084 23.6528 mo
495.584 23.6528 li
495.584 19.1528 li
491.084 19.1528 li
cp
@
491.084 23.6528 mo
495.584 23.6528 li
495.584 19.1528 li
491.084 19.1528 li
cp
@
491.087 23.6528 mo
495.587 23.6528 li
495.587 19.1528 li
491.087 19.1528 li
cp
@
491.087 23.6528 mo
495.587 23.6528 li
495.587 19.1528 li
491.087 19.1528 li
cp
@
491.089 23.6528 mo
495.589 23.6528 li
495.589 19.1528 li
491.089 19.1528 li
cp
@
491.09 23.6528 mo
495.59 23.6528 li
495.59 19.1528 li
491.09 19.1528 li
cp
@
491.092 23.6528 mo
495.592 23.6528 li
495.592 19.1528 li
491.092 19.1528 li
cp
@
491.094 23.6528 mo
495.594 23.6528 li
495.594 19.1528 li
491.094 19.1528 li
cp
@
491.095 23.6528 mo
495.595 23.6528 li
495.595 19.1528 li
491.095 19.1528 li
cp
@
491.096 23.6528 mo
495.596 23.6528 li
495.596 19.1528 li
491.096 19.1528 li
cp
@
491.096 23.6528 mo
495.596 23.6528 li
495.596 19.1528 li
491.096 19.1528 li
cp
@
491.099 23.6528 mo
495.599 23.6528 li
495.599 19.1528 li
491.099 19.1528 li
cp
@
491.099 23.6528 mo
495.599 23.6528 li
495.599 19.1528 li
491.099 19.1528 li
cp
@
491.099 23.6528 mo
495.599 23.6528 li
495.599 19.1528 li
491.099 19.1528 li
cp
@
491.1 23.6528 mo
495.6 23.6528 li
495.6 19.1528 li
491.1 19.1528 li
cp
@
491.101 23.6528 mo
495.601 23.6528 li
495.601 19.1528 li
491.101 19.1528 li
cp
@
491.102 23.6528 mo
495.602 23.6528 li
495.602 19.1528 li
491.102 19.1528 li
cp
@
491.103 23.6528 mo
495.603 23.6528 li
495.603 19.1528 li
491.103 19.1528 li
cp
@
491.103 23.6528 mo
495.603 23.6528 li
495.603 19.1528 li
491.103 19.1528 li
cp
@
491.103 23.6528 mo
495.603 23.6528 li
495.603 19.1528 li
491.103 19.1528 li
cp
@
491.103 23.6528 mo
495.603 23.6528 li
495.603 19.1528 li
491.103 19.1528 li
cp
@
491.103 23.6528 mo
495.603 23.6528 li
495.603 19.1528 li
491.103 19.1528 li
cp
@
491.103 23.6528 mo
495.603 23.6528 li
495.603 19.1528 li
491.103 19.1528 li
cp
@
491.103 23.6528 mo
495.603 23.6528 li
495.603 19.1528 li
491.103 19.1528 li
cp
@
1 lj
240.08 372.773 mo
247.148 372.773 li
279.741 372.773 li
280.487 371.643 li
281.462 371.643 li
282.88 371.643 li
284.026 371.078 li
285.139 371.078 li
286.115 371.078 li
287.174 371.078 li
288.001 371.078 li
288.306 371.078 li
289.408 371.078 li
290.672 370.513 li
291.898 370.513 li
292.634 369.948 li
293.357 369.948 li
294.505 369.384 li
295.281 369.384 li
296.126 369.384 li
297.199 369.384 li
298.403 368.818 li
299.801 368.253 li
300.482 367.689 li
300.93 367.689 li
301.81 367.689 li
303.098 367.689 li
303.656 367.689 li
304.886 367.124 li
305.883 366.559 li
306.663 366.559 li
307.681 366.559 li
308.917 366.559 li
309.701 366.559 li
311.167 366.559 li
312.414 366.559 li
313.516 366.559 li
314.482 365.994 li
315.322 365.994 li
316.65 365.429 li
317.741 365.429 li
318.42 364.864 li
319.135 364.864 li
319.698 363.735 li
320.801 363.735 li
321.521 363.735 li
322.314 363.169 li
323.178 363.169 li
324.191 363.169 li
325.301 363.169 li
326.105 362.605 li
326.813 362.04 li
327.969 362.04 li
328.832 362.04 li
329.569 361.475 li
330.613 361.475 li
331.457 360.91 li
332.25 360.91 li
333.094 360.345 li
333.692 360.345 li
334.474 360.345 li
335.21 360.345 li
336.119 360.345 li
336.887 359.78 li
337.67 359.78 li
338.643 359.215 li
339.593 359.215 li
340.493 359.215 li
341.155 359.215 li
341.887 359.215 li
342.87 358.651 li
343.623 358.651 li
344.362 358.085 li
344.89 358.085 li
345.803 358.085 li
346.48 357.52 li
347.591 356.955 li
347.986 356.955 li
348.719 356.955 li
349.66 356.955 li
350.515 356.391 li
351.31 356.391 li
352.214 356.391 li
352.894 356.391 li
353.585 356.391 li
354.163 356.391 li
354.928 356.391 li
355.757 356.391 li
356.623 355.826 li
357.344 355.826 li
358.016 355.826 li
358.659 355.26 li
359.275 355.26 li
360.087 355.26 li
360.732 355.26 li
361.333 355.26 li
362.236 355.26 li
362.864 354.131 li
363.56 353.566 li
364.214 353.566 li
364.842 353.566 li
365.416 353.566 li
366.026 353.001 li
366.742 352.436 li
367.462 351.871 li
368.014 351.871 li
368.53 351.306 li
369.191 350.742 li
369.626 349.612 li
370.228 349.612 li
370.954 349.047 li
371.614 349.047 li
372.138 349.047 li
372.705 349.047 li
373.35 349.047 li
373.949 348.482 li
374.67 347.917 li
375.274 347.917 li
376.041 347.353 li
376.522 347.353 li
377.165 347.353 li
377.744 347.353 li
378.314 347.353 li
378.951 347.353 li
379.398 347.353 li
380.018 346.787 li
380.619 346.787 li
381.15 346.787 li
381.814 346.222 li
382.408 346.222 li
383.024 346.222 li
383.495 345.658 li
384.037 345.658 li
384.562 345.658 li
385.21 345.658 li
385.739 345.093 li
386.224 345.093 li
386.837 343.962 li
387.292 343.962 li
387.795 343.962 li
388.308 343.398 li
388.873 343.398 li
389.331 343.398 li
389.817 342.833 li
390.353 342.833 li
390.827 342.268 li
391.405 342.268 li
391.836 341.703 li
392.384 341.703 li
392.881 341.703 li
393.288 341.703 li
393.787 341.138 li
394.237 340.573 li
394.755 340.008 li
395.223 339.444 li
395.904 338.878 li
396.414 338.314 li
396.918 336.054 li
397.436 336.054 li
397.988 336.054 li
398.486 334.924 li
399.01 333.795 li
399.503 333.229 li
400.008 332.664 li
400.419 332.664 li
400.801 331.535 li
401.247 330.405 li
401.694 329.84 li
402.16 329.84 li
402.61 329.275 li
403.108 328.711 li
403.528 328.711 li
403.912 328.711 li
404.342 327.58 li
404.846 327.58 li
405.251 327.58 li
405.711 327.58 li
406.144 327.016 li
406.552 327.016 li
406.997 325.886 li
407.48 324.756 li
407.958 324.191 li
408.513 324.191 li
408.887 323.626 li
409.342 323.626 li
409.624 323.626 li
409.993 323.062 li
410.427 323.062 li
410.857 321.931 li
411.243 321.931 li
411.674 321.931 li
412.118 321.367 li
412.483 320.802 li
412.91 319.672 li
413.314 319.107 li
413.701 319.107 li
414.03 319.107 li
414.449 317.977 li
414.803 316.847 li
415.176 315.718 li
415.51 315.153 li
415.889 314.588 li
416.337 314.588 li
416.749 314.023 li
417.225 312.329 li
417.564 310.633 li
417.887 309.504 li
418.289 308.939 li
418.615 307.809 li
419.009 307.809 li
419.404 307.244 li
419.76 306.679 li
420.116 304.984 li
420.527 304.984 li
420.892 304.984 li
421.224 303.855 li
421.527 303.29 li
421.861 302.725 li
422.155 302.16 li
422.506 302.16 li
422.896 302.16 li
423.212 301.031 li
423.575 300.466 li
423.907 299.9 li
424.267 298.206 li
424.634 297.076 li
424.968 295.946 li
425.332 295.946 li
425.727 295.381 li
426.048 294.251 li
426.353 293.122 li
426.683 291.992 li
427.012 290.862 li
427.391 290.297 li
427.724 289.167 li
428.021 289.167 li
428.296 287.473 li
428.631 287.473 li
428.936 286.343 li
429.257 286.343 li
429.551 286.343 li
429.835 285.213 li
430.109 284.083 li
430.388 284.083 li
430.731 283.518 li
431.024 282.953 li
431.299 282.953 li
431.629 282.953 li
431.903 281.824 li
432.244 280.693 li
432.538 278.999 li
432.865 277.869 li
433.129 277.869 li
433.387 276.74 li
433.667 276.175 li
433.975 275.61 li
434.239 275.045 li
434.512 274.48 li
434.814 273.35 li
435.084 273.35 li
435.399 273.35 li
435.702 272.22 li
435.935 272.22 li
436.223 271.655 li
436.501 269.96 li
436.755 269.395 li
437.027 268.266 li
437.295 266.571 li
437.576 266.571 li
437.801 266.006 li
438.113 266.006 li
438.369 266.006 li
438.66 266.006 li
438.913 266.006 li
439.171 265.442 li
439.456 265.442 li
439.744 265.442 li
440.002 263.747 li
440.274 263.747 li
440.542 263.182 li
440.776 263.182 li
441.062 263.182 li
441.293 262.617 li
441.541 262.617 li
441.806 262.052 li
442.055 261.487 li
442.253 261.487 li
442.485 260.922 li
442.691 260.357 li
442.934 259.228 li
443.1 258.662 li
443.351 257.533 li
443.549 256.968 li
443.76 256.968 li
443.962 256.403 li
444.191 255.838 li
444.448 255.273 li
444.664 255.273 li
444.869 254.708 li
445.076 254.708 li
445.322 254.708 li
445.561 254.143 li
445.751 254.143 li
445.996 253.013 li
446.201 250.754 li
446.392 250.189 li
446.608 248.495 li
446.814 246.799 li
447.048 246.799 li
447.238 246.799 li
447.432 244.54 li
447.678 244.54 li
447.869 243.975 li
448.055 243.975 li
448.237 243.41 li
448.442 243.41 li
448.637 242.28 li
448.845 242.28 li
449.039 241.715 li
449.228 241.715 li
449.438 240.021 li
449.639 238.891 li
449.837 238.326 li
450.029 238.326 li
450.242 238.326 li
450.471 236.631 li
450.645 236.631 li
450.839 236.631 li
451.003 236.631 li
451.213 236.066 li
451.408 235.502 li
451.568 234.937 li
451.741 234.372 li
451.938 233.242 li
452.123 232.112 li
452.288 231.547 li
452.481 228.722 li
452.676 227.593 li
452.861 227.028 li
453.035 224.768 li
453.223 224.768 li
453.407 224.204 li
453.574 223.073 li
453.791 222.508 li
453.991 222.508 li
454.137 222.508 li
454.329 222.508 li
454.494 222.508 li
454.664 222.508 li
454.849 222.508 li
455.033 222.508 li
455.205 221.379 li
455.403 221.379 li
455.586 221.379 li
455.763 221.379 li
455.929 220.814 li
456.09 220.814 li
456.26 219.684 li
456.422 219.684 li
456.594 219.119 li
456.744 219.119 li
456.902 219.119 li
457.064 218.554 li
457.216 218.554 li
457.385 217.424 li
457.546 216.859 li
457.686 216.859 li
457.864 216.295 li
458.03 215.73 li
458.195 214.035 li
458.331 214.035 li
458.522 214.035 li
458.659 214.035 li
458.828 212.341 li
459.001 212.341 li
459.141 211.775 li
459.273 211.211 li
459.392 211.211 li
459.564 210.646 li
459.717 210.081 li
459.88 208.951 li
460.028 207.821 li
460.162 207.821 li
460.301 207.821 li
460.432 207.821 li
460.579 207.821 li
460.753 207.821 li
460.88 207.256 li
461.021 207.256 li
461.16 206.691 li
461.323 205.561 li
461.466 205.561 li
461.589 205.561 li
461.739 203.867 li
461.878 201.608 li
462.018 201.042 li
462.16 199.913 li
462.292 199.913 li
462.427 199.913 li
462.587 199.913 li
462.721 199.913 li
462.838 199.913 li
462.967 199.913 li
463.105 199.913 li
463.245 199.913 li
463.351 199.913 li
463.487 198.783 li
463.635 197.653 li
463.77 197.653 li
463.901 197.653 li
464.037 196.523 li
464.18 196.523 li
464.318 195.958 li
464.455 195.958 li
464.581 195.958 li
464.724 194.828 li
464.837 194.263 li
464.938 194.263 li
465.07 193.134 li
465.181 193.134 li
465.309 193.134 li
465.432 192.568 li
465.536 192.004 li
465.651 190.874 li
465.782 190.874 li
465.895 190.309 li
466.002 189.744 li
466.116 189.744 li
466.23 189.179 li
466.373 189.179 li
466.494 188.615 li
466.621 188.05 li
466.731 186.92 li
466.862 186.355 li
466.973 186.355 li
467.078 186.355 li
467.174 185.79 li
467.283 185.79 li
467.398 185.79 li
467.514 185.225 li
467.636 183.53 li
467.746 182.965 li
467.88 182.965 li
467.986 181.27 li
468.101 180.706 li
468.199 179.576 li
468.318 179.011 li
468.41 177.317 li
468.532 176.752 li
468.623 176.186 li
468.727 176.186 li
468.843 175.622 li
468.962 175.057 li
469.069 174.492 li
469.171 173.362 li
469.258 173.362 li
469.378 171.668 li
469.487 171.668 li
469.602 170.537 li
469.698 169.972 li
469.793 169.972 li
469.903 169.408 li
470.015 169.408 li
470.119 169.408 li
470.237 168.843 li
470.36 168.843 li
470.456 168.843 li
470.561 168.843 li
470.638 168.278 li
470.755 167.713 li
470.869 167.713 li
470.966 167.713 li
471.057 166.583 li
471.167 164.324 li
471.276 163.759 li
471.392 163.759 li
471.481 163.194 li
471.588 162.629 li
471.685 161.499 li
471.799 160.934 li
471.895 159.804 li
471.999 159.239 li
472.093 159.239 li
472.183 159.239 li
472.3 159.239 li
472.378 158.674 li
472.473 158.674 li
472.56 158.674 li
472.655 158.11 li
472.758 158.11 li
472.855 158.11 li
472.963 157.545 li
473.057 157.545 li
473.134 156.415 li
473.214 156.415 li
473.306 155.285 li
473.402 154.72 li
473.47 154.155 li
473.546 154.155 li
473.635 152.461 li
473.727 152.461 li
473.833 152.461 li
473.914 151.896 li
474.001 151.896 li
474.089 151.331 li
474.175 150.201 li
474.251 149.636 li
474.328 149.072 li
474.411 147.941 li
474.49 147.377 li
474.566 146.247 li
474.661 146.247 li
474.747 145.681 li
474.832 143.422 li
474.923 142.857 li
475.023 142.857 li
475.119 142.292 li
475.208 142.292 li
475.286 141.727 li
475.375 141.163 li
475.452 140.033 li
475.513 140.033 li
475.595 140.033 li
475.679 140.033 li
475.758 140.033 li
475.854 139.468 li
475.922 138.903 li
475.996 138.903 li
476.089 137.773 li
476.173 137.208 li
476.249 136.643 li
476.317 136.079 li
476.393 134.948 li
476.471 134.948 li
476.549 134.383 li
476.62 133.254 li
476.699 133.254 li
476.78 133.254 li
476.855 133.254 li
476.942 132.689 li
477.018 132.689 li
477.1 132.124 li
477.187 131.559 li
477.267 130.994 li
477.331 130.429 li
477.409 129.865 li
477.472 129.865 li
477.551 129.299 li
477.623 128.17 li
477.71 127.605 li
477.773 127.04 li
477.842 126.475 li
477.915 126.475 li
477.984 125.91 li
478.069 125.91 li
478.133 125.345 li
478.211 124.781 li
478.278 123.086 li
478.342 123.086 li
478.425 123.086 li
478.487 123.086 li
478.558 121.39 li
478.624 120.826 li
478.698 120.826 li
478.771 119.696 li
478.838 118.001 li
478.911 118.001 li
478.979 118.001 li
479.033 118.001 li
479.096 116.872 li
479.172 116.307 li
479.246 116.307 li
479.313 115.742 li
479.375 115.742 li
479.435 115.177 li
479.498 114.612 li
479.562 114.612 li
479.612 114.612 li
479.679 114.612 li
479.744 114.047 li
479.794 114.047 li
479.857 114.047 li
479.928 113.483 li
479.987 113.483 li
480.049 112.917 li
480.102 112.917 li
480.167 112.917 li
480.24 112.352 li
480.291 112.352 li
480.349 112.352 li
480.417 111.788 li
480.463 111.788 li
480.506 111.788 li
480.574 111.788 li
480.628 110.658 li
480.691 110.658 li
480.744 110.658 li
480.814 110.658 li
480.863 110.092 li
480.926 109.528 li
480.973 108.963 li
481.026 108.963 li
481.076 108.963 li
481.135 108.963 li
481.205 108.963 li
481.258 108.963 li
481.322 108.963 li
481.37 108.963 li
481.426 108.398 li
481.483 107.833 li
481.546 107.833 li
481.605 107.833 li
481.661 107.833 li
481.71 107.833 li
481.761 107.833 li
481.818 107.833 li
481.879 107.833 li
481.938 107.833 li
481.988 106.703 li
482.035 106.703 li
482.089 106.703 li
482.141 104.443 li
482.209 103.879 li
482.252 103.879 li
482.303 103.879 li
482.356 103.314 li
482.409 102.749 li
482.455 102.184 li
482.511 101.619 li
482.558 101.619 li
482.605 101.619 li
482.647 101.054 li
482.692 99.3588 li
482.742 98.7948 li
482.792 98.7948 li
482.847 98.7948 li
482.896 98.2298 li
482.936 97.6648 li
482.976 97.6648 li
483.016 97.6648 li
483.061 96.5358 li
483.103 95.4048 li
483.17 95.4048 li
483.228 94.8398 li
483.274 94.2758 li
483.319 94.2758 li
483.365 94.2758 li
483.412 93.1448 li
483.445 93.1448 li
483.498 92.5808 li
483.541 92.5808 li
483.595 92.0158 li
483.636 92.0158 li
483.68 92.0158 li
483.732 92.0158 li
483.773 92.0158 li
483.824 91.4508 li
483.876 91.4508 li
483.918 90.8858 li
483.969 90.8858 li
484.014 90.8858 li
484.047 90.8858 li
484.092 90.3208 li
484.142 90.3208 li
484.185 89.7558 li
484.227 89.7558 li
484.277 89.7558 li
484.316 89.1918 li
484.353 89.1918 li
484.417 89.1918 li
484.462 88.6268 li
484.493 88.6268 li
484.537 88.0608 li
484.571 88.0608 li
484.616 87.4968 li
484.655 87.4968 li
484.691 86.9318 li
484.732 86.3668 li
484.771 86.3668 li
484.809 86.3668 li
484.841 85.8018 li
484.88 85.2368 li
484.926 85.2368 li
484.972 85.2368 li
485.012 85.2368 li
485.044 84.6718 li
485.076 84.6718 li
485.128 84.1068 li
485.176 83.5428 li
485.215 83.5428 li
485.248 83.5428 li
485.291 82.4118 li
485.339 82.4118 li
485.378 82.4118 li
485.418 82.4118 li
485.447 81.8468 li
485.482 81.8468 li
485.514 81.8468 li
485.549 81.2828 li
485.582 81.2828 li
485.617 81.2828 li
485.652 81.2828 li
485.685 81.2828 li
485.726 80.1528 li
485.766 80.1528 li
485.799 80.1528 li
485.832 80.1528 li
485.862 80.1528 li
485.901 80.1528 li
485.94 79.5878 li
485.971 79.0228 li
486.016 79.0228 li
486.055 79.0228 li
486.092 79.0228 li
486.126 77.3288 li
486.164 77.3288 li
486.197 77.3288 li
486.23 76.7628 li
486.271 76.7628 li
486.298 76.7628 li
486.337 76.7628 li
486.364 76.7628 li
486.399 75.6338 li
486.433 75.6338 li
486.47 75.6338 li
486.503 75.0688 li
486.534 74.5038 li
486.568 73.9388 li
486.605 73.3738 li
486.641 72.8088 li
486.669 72.8088 li
486.703 72.8088 li
486.731 72.8088 li
486.767 72.8088 li
486.8 72.8088 li
486.839 72.2448 li
486.86 72.2448 li
486.895 71.1138 li
486.926 70.5488 li
486.956 70.5488 li
486.989 70.5488 li
487.017 69.9848 li
487.04 69.9848 li
487.073 69.9848 li
487.097 69.9848 li
487.132 69.4198 li
487.157 69.4198 li
487.186 69.4198 li
487.217 69.4198 li
487.248 69.4198 li
487.281 68.8538 li
487.307 68.8538 li
487.345 68.2898 li
487.375 68.2898 li
487.401 68.2898 li
487.433 68.2898 li
487.458 68.2898 li
487.49 68.2898 li
487.526 67.1598 li
487.559 67.1598 li
487.589 66.5948 li
487.608 66.5948 li
487.631 66.0298 li
487.658 65.4648 li
487.687 65.4648 li
487.717 64.3358 li
487.745 64.3358 li
487.767 64.3358 li
487.799 64.3358 li
487.828 64.3358 li
487.858 64.3358 li
487.886 64.3358 li
487.907 64.3358 li
487.931 64.3358 li
487.957 64.3358 li
487.992 64.3358 li
488.021 64.3358 li
488.047 64.3358 li
488.069 64.3358 li
488.101 64.3358 li
488.129 64.3358 li
488.155 63.7708 li
488.18 63.7708 li
488.206 63.7708 li
488.224 63.7708 li
488.253 63.7708 li
488.278 63.7708 li
488.295 63.2058 li
488.326 63.2058 li
488.346 63.2058 li
488.364 62.6408 li
488.396 62.6408 li
488.423 62.0758 li
488.444 61.5108 li
488.472 61.5108 li
488.49 61.5108 li
488.516 60.3808 li
488.543 59.8158 li
488.568 59.8158 li
488.589 59.2518 li
488.617 59.2518 li
488.651 59.2518 li
488.674 59.2518 li
488.704 58.6868 li
488.731 58.6868 li
488.747 58.6868 li
488.773 58.6868 li
488.801 57.5558 li
488.822 57.5558 li
488.849 57.5558 li
488.871 57.5558 li
488.887 57.5558 li
488.907 57.5558 li
488.93 56.9918 li
488.951 55.8618 li
488.966 55.2968 li
488.987 55.2968 li
489.008 54.1668 li
489.028 54.1668 li
489.052 54.1668 li
489.076 54.1668 li
489.092 54.1668 li
489.107 53.6018 li
489.128 53.6018 li
489.142 53.6018 li
489.165 53.6018 li
489.183 53.0378 li
489.197 52.4718 li
489.215 52.4718 li
489.234 51.9078 li
489.253 51.9078 li
489.276 51.3428 li
489.293 51.3428 li
489.316 51.3428 li
489.34 51.3428 li
489.356 51.3428 li
489.378 51.3428 li
489.399 51.3428 li
489.412 50.7778 li
489.437 50.2128 li
489.459 50.2128 li
489.476 49.6478 li
489.495 49.6478 li
489.514 49.0828 li
489.535 48.5178 li
489.548 48.5178 li
489.566 48.5178 li
489.587 48.5178 li
489.613 48.5178 li
489.628 48.5178 li
489.651 46.8228 li
489.67 46.8228 li
489.688 46.8228 li
489.703 45.6938 li
489.72 45.6938 li
489.736 45.6938 li
489.75 45.6938 li
489.773 44.5638 li
489.793 44.5638 li
489.816 44.5638 li
489.839 44.5638 li
489.851 44.5638 li
489.866 44.5638 li
489.891 44.5638 li
489.908 44.5638 li
489.93 44.5638 li
489.939 44.5638 li
489.964 44.5638 li
489.979 44.5638 li
489.997 43.9988 li
490.021 43.4338 li
490.036 43.4338 li
490.053 43.4338 li
490.076 43.4338 li
490.089 43.4338 li
490.108 43.4338 li
490.123 42.8688 li
490.142 42.8688 li
490.158 42.8688 li
490.175 42.8688 li
490.196 42.8688 li
490.21 42.3038 li
490.227 42.3038 li
490.248 42.3038 li
490.266 42.3038 li
490.28 41.7398 li
490.294 41.1738 li
490.318 41.1738 li
490.333 40.6088 li
490.349 40.6088 li
490.368 40.6088 li
490.384 40.6088 li
490.399 40.6088 li
490.417 40.6088 li
490.433 40.6088 li
490.444 40.6088 li
490.459 40.0448 li
490.471 40.0448 li
490.488 40.0448 li
490.5 40.0448 li
490.516 40.0448 li
490.528 40.0448 li
490.544 40.0448 li
490.56 40.0448 li
490.57 40.0448 li
490.585 40.0448 li
490.599 40.0448 li
490.612 40.0448 li
490.628 39.4798 li
490.641 38.9148 li
490.651 38.9148 li
490.666 38.9148 li
490.676 38.9148 li
490.691 38.9148 li
490.705 38.9148 li
490.717 38.9148 li
490.732 38.9148 li
490.745 38.9148 li
490.756 38.9148 li
490.766 38.9148 li
490.78 38.9148 li
490.792 38.9148 li
490.808 38.9148 li
490.819 38.9148 li
490.833 38.9148 li
490.845 38.9148 li
490.855 38.9148 li
490.867 38.9148 li
490.885 38.9148 li
490.895 38.9148 li
490.906 38.9148 li
490.919 38.9148 li
490.931 38.9148 li
490.944 38.9148 li
490.957 38.9148 li
490.969 38.3498 li
490.976 38.3498 li
490.992 37.7848 li
491.003 37.2198 li
491.016 37.2198 li
491.027 37.2198 li
491.038 37.2198 li
491.051 37.2198 li
491.065 36.6558 li
491.08 36.6558 li
491.089 36.6558 li
491.099 36.6558 li
491.109 36.0908 li
491.12 36.0908 li
491.128 36.0908 li
491.143 35.5248 li
491.155 35.5248 li
491.166 35.5248 li
491.18 35.5248 li
491.193 35.5248 li
491.204 35.5248 li
491.214 35.5248 li
491.229 35.5248 li
491.238 35.5248 li
491.251 35.5248 li
491.264 35.5248 li
491.276 35.5248 li
491.285 35.5248 li
491.293 35.5248 li
491.303 35.5248 li
491.314 35.5248 li
491.322 35.5248 li
491.333 35.5248 li
491.345 35.5248 li
491.355 35.5248 li
491.37 35.5248 li
491.374 34.9608 li
491.385 34.3958 li
491.401 34.3958 li
491.41 33.8308 li
491.423 33.2658 li
491.433 33.2658 li
491.439 33.2658 li
491.446 33.2658 li
491.456 33.2658 li
491.469 33.2658 li
491.48 33.2658 li
491.489 33.2658 li
491.498 32.7008 li
491.509 32.7008 li
491.52 32.7008 li
491.528 32.7008 li
491.545 32.7008 li
491.552 32.1358 li
491.558 32.1358 li
491.57 31.5708 li
491.582 31.5708 li
491.589 31.0058 li
491.6 31.0058 li
491.612 31.0058 li
491.62 31.0058 li
491.628 31.0058 li
491.637 31.0058 li
491.648 31.0058 li
491.656 29.8758 li
491.664 29.8758 li
491.674 29.8758 li
491.682 29.8758 li
491.689 29.8758 li
491.699 29.8758 li
491.71 29.8758 li
491.719 29.8758 li
491.73 29.8758 li
491.735 29.8758 li
491.745 29.8758 li
491.753 29.8758 li
491.761 29.8758 li
491.771 29.3108 li
491.783 29.3108 li
491.79 29.3108 li
491.795 29.3108 li
491.803 29.3108 li
491.811 29.3108 li
491.819 29.3108 li
491.826 29.3108 li
491.836 29.3108 li
491.843 29.3108 li
491.849 29.3108 li
491.855 29.3108 li
491.867 29.3108 li
491.876 28.7468 li
491.885 28.7468 li
491.891 28.7468 li
491.901 28.7468 li
491.908 28.7468 li
491.924 28.7468 li
491.932 28.7468 li
491.937 28.7468 li
491.944 28.7468 li
491.953 28.7468 li
491.962 28.7468 li
491.975 28.7468 li
491.983 28.7468 li
491.986 28.7468 li
491.99 28.7468 li
491.996 28.7468 li
492.004 28.7468 li
492.008 28.7468 li
492.021 28.7468 li
492.029 28.7468 li
492.037 28.7468 li
492.045 28.7468 li
492.051 28.7468 li
492.061 28.7468 li
492.07 28.7468 li
492.076 28.7468 li
492.082 28.7468 li
492.085 28.7468 li
492.096 28.7468 li
492.1 28.7468 li
492.108 28.7468 li
492.116 28.7468 li
492.124 28.7468 li
492.13 28.7468 li
492.137 28.7468 li
492.142 28.7468 li
492.149 28.7468 li
492.155 28.7468 li
492.16 28.7468 li
492.167 28.7468 li
492.17 28.7468 li
492.177 28.7468 li
492.185 28.7468 li
492.193 28.7468 li
492.201 28.7468 li
492.208 28.7468 li
492.214 28.7468 li
492.224 28.7468 li
492.234 28.1818 li
492.243 28.1818 li
492.251 28.1818 li
492.255 28.1818 li
492.26 28.1818 li
492.267 28.1818 li
492.278 28.1818 li
492.283 28.1818 li
492.289 28.1818 li
492.297 28.1818 li
492.305 28.1818 li
492.309 28.1818 li
492.318 28.1818 li
492.322 28.1818 li
492.328 28.1818 li
492.332 28.1818 li
492.335 28.1818 li
492.341 28.1818 li
492.347 28.1818 li
492.353 28.1818 li
492.36 28.1818 li
492.365 28.1818 li
492.367 28.1818 li
492.374 28.1818 li
492.38 28.1818 li
492.385 28.1818 li
492.389 28.1818 li
492.393 28.1818 li
492.398 28.1818 li
492.402 28.1818 li
492.407 28.1818 li
492.414 28.1818 li
492.42 28.1818 li
492.428 28.1818 li
492.435 28.1818 li
492.443 28.1818 li
492.449 28.1818 li
492.454 28.1818 li
492.461 28.1818 li
492.467 28.1818 li
492.474 28.1818 li
492.48 28.1818 li
492.484 28.1818 li
492.489 28.1818 li
492.495 28.1818 li
492.499 27.6168 li
492.504 27.6168 li
492.508 27.0518 li
492.513 27.0518 li
492.516 27.0518 li
492.521 27.0518 li
492.528 27.0518 li
492.531 27.0518 li
492.537 27.0518 li
492.542 26.4868 li
492.545 26.4868 li
492.547 26.4868 li
492.549 26.4868 li
492.553 26.4868 li
492.561 26.4868 li
492.565 26.4868 li
492.57 26.4868 li
492.574 26.4868 li
492.58 26.4868 li
492.586 26.4868 li
492.591 26.4868 li
492.592 26.4868 li
492.594 26.4868 li
492.6 26.4868 li
492.608 26.4868 li
492.614 26.4868 li
492.615 26.4868 li
492.62 26.4868 li
492.623 26.4868 li
492.628 26.4868 li
492.632 26.4868 li
492.635 26.4868 li
492.643 26.4868 li
492.647 26.4868 li
492.653 26.4868 li
492.655 26.4868 li
492.66 26.4868 li
492.662 26.4868 li
492.666 26.4868 li
492.669 26.4868 li
492.672 26.4868 li
492.674 26.4868 li
492.677 26.4868 li
492.68 26.4868 li
492.685 25.9218 li
492.688 25.9218 li
492.69 25.9218 li
492.693 25.9218 li
492.695 25.9218 li
492.699 25.9218 li
492.701 25.9218 li
492.706 25.9218 li
492.709 25.3578 li
492.714 25.3578 li
492.716 25.3578 li
492.719 25.3578 li
492.721 25.3578 li
492.728 25.3578 li
492.73 25.3578 li
492.734 25.3578 li
492.739 25.3578 li
492.741 25.3578 li
492.747 25.3578 li
492.753 25.3578 li
492.758 25.3578 li
492.761 25.3578 li
492.766 25.3578 li
492.77 25.3578 li
492.773 25.3578 li
492.777 25.3578 li
492.782 24.7918 li
492.787 24.2268 li
492.792 24.2268 li
492.794 24.2268 li
492.797 24.2268 li
492.801 24.2268 li
492.804 24.2268 li
492.808 24.2268 li
492.812 24.2268 li
492.814 24.2268 li
492.816 24.2268 li
492.818 24.2268 li
492.821 24.2268 li
492.824 24.2268 li
492.826 24.2268 li
492.829 24.2268 li
492.835 24.2268 li
492.837 23.6628 li
492.839 23.6628 li
492.842 23.6628 li
492.844 23.6628 li
492.849 23.6628 li
492.85 23.6628 li
492.853 23.6628 li
492.854 23.6628 li
492.858 23.6628 li
492.862 23.6628 li
492.864 23.6628 li
492.867 23.0978 li
492.87 23.0978 li
492.875 23.0978 li
492.878 23.0978 li
492.881 23.0978 li
492.883 23.0978 li
492.885 23.0978 li
492.887 23.0978 li
492.891 23.0978 li
492.892 23.0978 li
492.896 23.0978 li
492.899 23.0978 li
492.901 23.0978 li
492.904 23.0978 li
492.908 23.0978 li
492.913 23.0978 li
492.919 23.0978 li
492.922 23.0978 li
492.926 23.0978 li
492.928 23.0978 li
492.929 23.0978 li
492.932 23.0978 li
492.933 23.0978 li
492.936 23.0978 li
492.937 23.0978 li
492.94 23.0978 li
492.944 23.0978 li
492.946 22.5328 li
492.949 22.5328 li
492.953 22.5328 li
492.956 22.5328 li
492.961 22.5328 li
492.964 22.5328 li
492.965 22.5328 li
492.969 22.5328 li
492.971 22.5328 li
492.974 22.5328 li
492.976 22.5328 li
492.979 22.5328 li
492.98 22.5328 li
492.981 22.5328 li
492.983 22.5328 li
492.984 22.5328 li
492.989 22.5328 li
492.991 22.5328 li
492.993 22.5328 li
492.997 22.5328 li
492.999 22.5328 li
493.001 22.5328 li
493.005 22.5328 li
493.008 22.5328 li
493.011 22.5328 li
493.014 22.5328 li
493.017 22.5328 li
493.019 22.5328 li
493.021 22.5328 li
493.023 22.5328 li
493.026 22.5328 li
493.03 22.5328 li
493.032 22.5328 li
493.033 22.5328 li
493.035 22.5328 li
493.037 22.5328 li
493.04 22.5328 li
493.041 22.5328 li
493.045 22.5328 li
493.047 22.5328 li
493.049 22.5328 li
493.053 22.5328 li
493.054 22.5328 li
493.055 22.5328 li
493.058 22.5328 li
493.059 22.5328 li
493.06 22.5328 li
493.063 22.5328 li
493.065 22.5328 li
493.068 22.5328 li
493.069 22.5328 li
493.072 22.5328 li
493.073 22.5328 li
493.076 22.5328 li
493.078 22.5328 li
493.078 22.5328 li
493.082 22.5328 li
493.085 22.5328 li
493.087 22.5328 li
493.091 22.5328 li
493.094 22.5328 li
493.096 22.5328 li
493.099 22.5328 li
493.102 22.5328 li
493.103 22.5328 li
493.104 22.5328 li
493.106 22.5328 li
493.107 22.5328 li
493.108 22.5328 li
493.111 22.5328 li
493.114 22.5328 li
493.116 22.5328 li
493.117 22.5328 li
493.12 22.5328 li
493.121 22.5328 li
493.122 22.5328 li
493.123 22.5328 li
493.124 22.5328 li
493.126 22.5328 li
493.13 22.5328 li
493.131 22.5328 li
493.133 22.5328 li
493.135 22.5328 li
493.136 22.5328 li
493.137 22.5328 li
493.141 22.5328 li
493.143 22.5328 li
493.145 22.5328 li
493.148 22.5328 li
493.149 22.5328 li
493.151 22.5328 li
493.152 22.5328 li
493.153 22.5328 li
493.155 22.5328 li
493.156 22.5328 li
493.158 22.5328 li
493.16 22.5328 li
493.161 22.5328 li
493.162 22.5328 li
493.163 22.5328 li
493.164 22.5328 li
493.165 22.5328 li
493.169 22.5328 li
493.172 22.5328 li
493.172 22.5328 li
493.173 22.5328 li
493.174 22.5328 li
493.177 22.5328 li
493.178 22.5328 li
493.179 22.5328 li
493.181 22.5328 li
493.183 22.5328 li
493.185 22.5328 li
493.187 22.5328 li
493.189 22.5328 li
493.191 22.5328 li
493.193 22.5328 li
493.193 22.5328 li
493.195 22.5328 li
493.196 22.5328 li
493.196 21.9678 li
493.199 21.9678 li
493.201 21.9678 li
493.201 21.9678 li
493.203 21.9678 li
493.204 21.9678 li
493.207 21.9678 li
493.208 21.9678 li
493.209 21.9678 li
493.212 21.9678 li
493.214 21.9678 li
493.214 21.9678 li
493.215 21.9678 li
493.217 21.9678 li
493.218 21.9678 li
493.219 21.9678 li
493.221 21.9678 li
493.222 21.9678 li
493.224 21.9678 li
493.225 21.9678 li
493.226 21.9678 li
493.227 21.9678 li
493.228 21.9678 li
493.229 21.9678 li
493.232 21.9678 li
493.234 21.9678 li
493.235 21.9678 li
493.236 21.9678 li
493.237 21.9678 li
493.238 21.9678 li
493.239 21.9678 li
493.241 21.9678 li
493.242 21.9678 li
493.243 21.9678 li
493.245 21.9678 li
493.245 21.9678 li
493.246 21.9678 li
493.247 21.9678 li
493.249 21.9678 li
493.25 21.9678 li
493.251 21.9678 li
493.253 21.9678 li
493.253 21.9678 li
493.254 21.9678 li
493.255 21.9678 li
493.257 21.9678 li
493.258 21.9678 li
493.259 21.9678 li
493.263 21.9678 li
493.266 21.9678 li
493.266 21.9678 li
493.267 21.9678 li
493.268 21.9678 li
493.269 21.9678 li
493.271 21.9678 li
493.273 21.9678 li
493.274 21.9678 li
493.276 21.9678 li
493.276 21.9678 li
493.277 21.9678 li
493.28 21.9678 li
493.282 21.9678 li
493.282 21.4028 li
493.283 21.4028 li
493.284 21.4028 li
493.285 21.4028 li
493.287 21.4028 li
493.288 21.4028 li
493.289 21.4028 li
493.289 20.8378 li
493.29 20.8378 li
493.291 20.8378 li
493.292 20.8378 li
493.293 20.8378 li
493.294 20.8378 li
493.295 20.8378 li
493.297 20.8378 li
493.297 20.8378 li
493.298 20.8378 li
493.299 20.8378 li
493.301 20.8378 li
493.303 20.8378 li
493.304 20.8378 li
493.305 20.8378 li
493.307 20.8378 li
493.308 20.8378 li
493.309 20.8378 li
493.31 20.8378 li
493.312 20.8378 li
493.313 20.8378 li
493.315 20.8378 li
493.316 20.8378 li
493.318 20.8378 li
493.318 20.8378 li
493.319 20.8378 li
493.321 20.8378 li
493.322 20.8378 li
493.323 20.8378 li
493.324 20.8378 li
493.326 20.8378 li
493.328 20.8378 li
493.328 20.8378 li
493.329 20.8378 li
493.33 20.8378 li
493.331 20.8378 li
493.332 20.8378 li
493.333 20.8378 li
493.334 20.8378 li
493.335 20.8378 li
493.336 20.8378 li
493.337 20.8378 li
493.339 20.8378 li
493.339 20.8378 li
493.34 20.8378 li
493.341 20.8378 li
493.342 20.8378 li
493.343 20.8378 li
493.344 20.8378 li
493.346 20.8378 li
493.347 20.8378 li
493.349 20.8378 li
493.349 20.8378 li
493.35 20.8378 li
493.351 20.8378 li
493.352 20.8378 li
493.353 20.8378 li
1 /0 /CSD get_res sepcs
1 sep
@
0 lj
240.08 369.773 mo
240.08 375.773 li
@
252.424 369.773 mo
252.424 375.773 li
@
264.512 369.773 mo
264.512 375.773 li
@
277.548 369.773 mo
277.548 375.773 li
@
288.001 368.078 mo
288.001 374.078 li
@
297.199 366.383 mo
297.199 372.383 li
@
306.663 363.559 mo
306.663 369.559 li
@
317.741 362.429 mo
317.741 368.429 li
@
326.104 359.605 mo
326.104 365.605 li
@
334.474 357.345 mo
334.474 363.345 li
@
342.87 355.65 mo
342.87 361.65 li
@
350.515 353.391 mo
350.515 359.391 li
@
358.016 352.826 mo
358.016 358.826 li
@
364.842 350.566 mo
364.842 356.566 li
@
370.953 346.047 mo
370.953 352.047 li
@
377.165 344.352 mo
377.165 350.352 li
@
383.024 343.223 mo
383.024 349.223 li
@
388.308 340.398 mo
388.308 346.398 li
@
393.288 338.703 mo
393.288 344.703 li
@
398.486 331.924 mo
398.486 337.924 li
@
403.107 325.711 mo
403.107 331.711 li
@
407.481 321.756 mo
407.481 327.756 li
@
411.674 318.932 mo
411.674 324.931 li
@
415.51 312.153 mo
415.51 318.153 li
@
419.404 304.244 mo
419.404 310.244 li
@
422.897 299.16 mo
422.897 305.16 li
@
426.353 290.122 mo
426.353 296.122 li
@
429.551 283.343 mo
429.551 289.343 li
@
432.537 275.999 mo
432.537 281.999 li
@
435.399 270.35 mo
435.399 276.35 li
@
438.113 263.006 mo
438.113 269.006 li
@
440.776 260.182 mo
440.776 266.182 li
@
443.1 255.663 mo
443.1 261.663 li
@
445.322 251.708 mo
445.322 257.708 li
@
447.432 241.54 mo
447.432 247.54 li
@
449.439 237.021 mo
449.439 243.021 li
@
451.409 232.501 mo
451.409 238.501 li
@
453.223 221.768 mo
453.223 227.768 li
@
455.033 219.509 mo
455.033 225.509 li
@
456.744 216.119 mo
456.744 222.119 li
@
458.331 211.035 mo
458.331 217.035 li
@
459.88 205.951 mo
459.88 211.951 li
@
461.323 202.561 mo
461.323 208.561 li
@
462.721 196.913 mo
462.721 202.913 li
@
464.037 193.523 mo
464.037 199.523 li
@
465.309 190.134 mo
465.309 196.134 li
@
466.494 185.615 mo
466.494 191.615 li
@
467.636 180.53 mo
467.636 186.53 li
@
468.726 173.186 mo
468.726 179.186 li
@
469.794 166.973 mo
469.794 172.973 li
@
470.869 164.713 mo
470.869 170.713 li
@
471.895 156.804 mo
471.895 162.804 li
@
472.855 155.109 mo
472.855 161.109 li
@
473.727 149.461 mo
473.727 155.461 li
@
474.565 143.247 mo
474.565 149.247 li
@
475.452 137.033 mo
475.452 143.033 li
@
476.249 133.643 mo
476.249 139.643 li
@
477.018 129.689 mo
477.018 135.689 li
@
477.773 124.04 mo
477.773 130.04 li
@
478.487 120.086 mo
478.487 126.086 li
@
479.172 113.307 mo
479.172 119.307 li
@
479.794 111.047 mo
479.794 117.047 li
@
480.417 108.788 mo
480.417 114.788 li
@
480.973 105.963 mo
480.973 111.963 li
@
481.546 104.833 mo
481.546 110.833 li
@
482.089 103.703 mo
482.089 109.703 li
@
482.605 98.6188 mo
482.605 104.619 li
@
483.061 93.5348 mo
483.061 99.5348 li
@
483.541 89.5808 mo
483.541 95.5808 li
@
484.014 87.8858 mo
484.014 93.8858 li
@
484.462 85.6258 mo
484.462 91.6258 li
@
484.841 82.8018 mo
484.841 88.8018 li
@
485.249 80.5418 mo
485.249 86.5418 li
@
485.617 78.2828 mo
485.617 84.2828 li
@
485.972 76.0228 mo
485.972 82.0228 li
@
486.337 73.7628 mo
486.337 79.7628 li
@
486.669 69.8088 mo
486.669 75.8088 li
@
486.988 67.5498 mo
486.988 73.5498 li
@
487.281 65.8548 mo
487.281 71.8548 li
@
487.589 63.5948 mo
487.589 69.5948 li
@
487.858 61.3358 mo
487.858 67.3358 li
@
488.13 61.3358 mo
488.13 67.3358 li
@
488.364 59.6408 mo
488.364 65.6408 li
@
488.617 56.2508 mo
488.617 62.2508 li
@
488.871 54.5568 mo
488.871 60.5568 li
@
489.076 51.1668 mo
489.076 57.1668 li
@
489.254 48.9078 mo
489.254 54.9078 li
@
489.459 47.2128 mo
489.459 53.2128 li
@
489.651 43.8238 mo
489.651 49.8238 li
@
489.837 41.5638 mo
489.837 47.5638 li
@
490.022 40.4338 mo
490.022 46.4338 li
@
490.195 39.8688 mo
490.195 45.8688 li
@
490.368 37.6088 mo
490.368 43.6088 li
@
490.516 37.0448 mo
490.516 43.0448 li
@
490.651 35.9148 mo
490.651 41.9148 li
@
490.78 35.9148 mo
490.78 41.9148 li
@
490.906 35.9148 mo
490.906 41.9148 li
@
491.028 34.2198 mo
491.028 40.2198 li
@
491.143 32.5248 mo
491.143 38.5248 li
@
491.264 32.5248 mo
491.264 38.5248 li
@
491.368 32.5248 mo
491.368 38.5248 li
@
491.469 30.2658 mo
491.469 36.2658 li
@
491.57 28.5708 mo
491.57 34.5708 li
@
491.664 26.8758 mo
491.664 32.8758 li
@
491.753 26.8758 mo
491.753 32.8758 li
@
491.836 26.3108 mo
491.836 32.3108 li
@
491.923 25.7468 mo
491.923 31.7468 li
@
491.996 25.7468 mo
491.996 31.7468 li
@
492.076 25.7468 mo
492.076 31.7468 li
@
492.143 25.7468 mo
492.143 31.7468 li
@
492.209 25.7468 mo
492.209 31.7468 li
@
492.283 25.1818 mo
492.283 31.1818 li
@
492.341 25.1818 mo
492.341 31.1818 li
@
492.393 25.1818 mo
492.393 31.1818 li
@
492.454 25.1818 mo
492.454 31.1818 li
@
492.509 24.0518 mo
492.509 30.0518 li
@
492.549 23.4868 mo
492.549 29.4868 li
@
492.594 23.4868 mo
492.594 29.4868 li
@
492.643 23.4868 mo
492.643 29.4868 li
@
492.677 23.4868 mo
492.677 29.4868 li
@
492.709 22.3568 mo
492.709 28.3568 li
@
492.747 22.3568 mo
492.747 28.3568 li
@
492.792 21.2268 mo
492.792 27.2268 li
@
492.818 21.2268 mo
492.818 27.2268 li
@
492.849 20.6628 mo
492.849 26.6628 li
@
492.878 20.0978 mo
492.878 26.0978 li
@
492.904 20.0978 mo
492.904 26.0978 li
@
492.932 20.0978 mo
492.932 26.0978 li
@
492.956 19.5328 mo
492.956 25.5328 li
@
492.98 19.5328 mo
492.98 25.5328 li
@
493.005 19.5328 mo
493.005 25.5328 li
@
493.026 19.5328 mo
493.026 25.5328 li
@
493.047 19.5328 mo
493.047 25.5328 li
@
493.066 19.5328 mo
493.066 25.5328 li
@
493.081 19.5328 mo
493.081 25.5328 li
@
493.104 19.5328 mo
493.104 25.5328 li
@
493.122 19.5328 mo
493.122 25.5328 li
@
493.137 19.5328 mo
493.137 25.5328 li
@
493.156 19.5328 mo
493.156 25.5328 li
@
493.164 19.5328 mo
493.164 25.5328 li
@
493.174 19.5328 mo
493.174 25.5328 li
@
493.185 19.5328 mo
493.185 25.5328 li
@
493.196 19.5328 mo
493.196 25.5328 li
@
493.207 18.9678 mo
493.207 24.9678 li
@
493.215 18.9678 mo
493.215 24.9678 li
@
493.225 18.9678 mo
493.225 24.9678 li
@
493.235 18.9678 mo
493.235 24.9678 li
@
493.245 18.9678 mo
493.245 24.9678 li
@
493.253 18.9678 mo
493.253 24.9678 li
@
493.266 18.9678 mo
493.266 24.9678 li
@
493.276 18.9678 mo
493.276 24.9678 li
@
493.283 18.4028 mo
493.283 24.4028 li
@
493.287 18.4028 mo
493.287 24.4028 li
@
493.293 17.8378 mo
493.293 23.8378 li
@
493.298 17.8378 mo
493.298 23.8378 li
@
493.301 17.8378 mo
493.301 23.8378 li
@
493.305 17.8378 mo
493.305 23.8378 li
@
493.309 17.8378 mo
493.309 23.8378 li
@
493.313 17.8378 mo
493.313 23.8378 li
@
493.316 17.8378 mo
493.316 23.8378 li
@
493.321 17.8378 mo
493.321 23.8378 li
@
493.326 17.8378 mo
493.326 23.8378 li
@
493.328 17.8378 mo
493.328 23.8378 li
@
493.33 17.8378 mo
493.33 23.8378 li
@
493.332 17.8378 mo
493.332 23.8378 li
@
493.335 17.8378 mo
493.335 23.8378 li
@
493.337 17.8378 mo
493.337 23.8378 li
@
493.339 17.8378 mo
493.339 23.8378 li
@
493.34 17.8378 mo
493.34 23.8378 li
@
493.342 17.8378 mo
493.342 23.8378 li
@
493.343 17.8378 mo
493.343 23.8378 li
@
493.343 17.8378 mo
493.343 23.8378 li
@
493.343 17.8378 mo
493.343 23.8378 li
@
493.344 17.8378 mo
493.344 23.8378 li
@
493.344 17.8378 mo
493.344 23.8378 li
@
493.346 17.8378 mo
493.346 23.8378 li
@
493.346 17.8378 mo
493.346 23.8378 li
@
493.349 17.8378 mo
493.349 23.8378 li
@
493.349 17.8378 mo
493.349 23.8378 li
@
493.349 17.8378 mo
493.349 23.8378 li
@
493.35 17.8378 mo
493.35 23.8378 li
@
493.35 17.8378 mo
493.35 23.8378 li
@
493.351 17.8378 mo
493.351 23.8378 li
@
493.351 17.8378 mo
493.351 23.8378 li
@
493.351 17.8378 mo
493.351 23.8378 li
@
493.351 17.8378 mo
493.351 23.8378 li
@
493.351 17.8378 mo
493.351 23.8378 li
@
493.351 17.8378 mo
493.351 23.8378 li
@
493.351 17.8378 mo
493.351 23.8378 li
@
493.352 17.8378 mo
493.352 23.8378 li
@
493.352 17.8378 mo
493.352 23.8378 li
@
493.353 17.8378 mo
493.353 23.8378 li
@
493.353 17.8378 mo
493.353 23.8378 li
@
493.353 17.8378 mo
493.353 23.8378 li
@
493.353 17.8378 mo
493.353 23.8378 li
@
493.353 17.8378 mo
493.353 23.8378 li
@
493.353 17.8378 mo
493.353 23.8378 li
@
493.353 17.8378 mo
493.353 23.8378 li
@
493.353 17.8378 mo
493.353 23.8378 li
@
493.353 17.8378 mo
493.353 23.8378 li
@
493.353 17.8378 mo
493.353 23.8378 li
@
1 lj
47.1035 249.059 mo
47.1035 246.235 li
75.0435 246.235 li
75.0435 239.456 li
91.3865 239.456 li
91.3865 238.891 li
91.3865 238.326 li
91.3865 237.761 li
91.3865 237.197 li
91.3865 236.066 li
91.3865 233.806 li
91.3865 233.242 li
91.3865 232.677 li
102.983 232.112 li
102.983 230.982 li
102.983 229.852 li
111.977 229.852 li
119.326 229.288 li
119.326 227.593 li
119.326 226.463 li
119.326 225.898 li
125.539 225.898 li
125.539 225.333 li
130.922 224.768 li
130.922 224.204 li
130.922 223.639 li
130.922 222.508 li
130.922 221.944 li
130.922 220.814 li
135.67 220.814 li
135.67 219.119 li
135.67 218.554 li
135.67 217.99 li
139.917 217.424 li
143.758 217.424 li
147.266 217.424 li
150.492 216.859 li
150.492 216.295 li
150.492 215.165 li
150.492 214.6 li
153.479 214.035 li
156.26 213.47 li
158.862 212.906 li
161.305 212.906 li
163.61 212.906 li
165.789 212.341 li
167.856 211.775 li
167.856 210.081 li
169.823 210.081 li
169.823 208.951 li
171.698 208.951 li
171.698 207.821 li
173.49 207.821 li
173.49 207.256 li
175.205 206.691 li
178.432 206.126 li
178.432 205.561 li
178.432 204.997 li
179.953 204.997 li
179.953 204.432 li
181.419 204.432 li
181.419 202.737 li
184.2 202.172 li
184.2 201.042 li
185.521 199.913 li
185.521 199.348 li
188.042 199.348 li
189.245 198.783 li
190.414 198.218 li
192.653 198.218 li
193.729 197.653 li
194.776 197.653 li
195.796 197.653 li
195.796 197.088 li
196.791 197.088 li
198.711 197.088 li
198.711 196.523 li
199.638 196.523 li
201.43 196.523 li
203.145 195.958 li
203.976 194.828 li
204.791 193.699 li
207.139 192.568 li
208.633 192.568 li
208.633 191.439 li
210.773 190.874 li
211.462 190.874 li
212.806 189.744 li
214.106 189.179 li
214.742 187.484 li
216.588 187.484 li
218.925 186.92 li
219.489 186.92 li
221.135 186.92 li
222.195 186.92 li
222.716 185.79 li
223.735 185.79 li
224.237 185.79 li
225.702 185.225 li
225.702 184.661 li
225.702 183.53 li
227.578 183.53 li
228.033 183.53 li
228.928 183.53 li
229.369 182.965 li
229.805 182.965 li
230.237 182.965 li
230.662 182.965 li
231.916 182.965 li
233.528 182.965 li
234.311 182.965 li
235.457 182.401 li
236.572 181.835 li
236.937 181.835 li
237.657 181.835 li
239.402 181.835 li
240.414 181.27 li
242.046 181.27 li
243.306 181.27 li
244.527 180.706 li
245.419 180.141 li
245.419 179.576 li
246.293 179.011 li
246.865 179.011 li
247.148 178.446 li
247.985 178.446 li
248.26 177.881 li
249.074 177.881 li
250.655 177.881 li
251.675 177.881 li
252.176 177.317 li
252.424 177.317 li
253.642 176.186 li
255.746 175.057 li
256.423 175.057 li
257.309 175.057 li
258.176 175.057 li
259.024 174.492 li
259.855 173.927 li
261.27 173.362 li
262.057 173.362 li
263.209 172.797 li
263.772 172.797 li
264.694 172.232 li
265.596 172.232 li
265.951 171.103 li
266.653 171.103 li
266.999 169.972 li
267.17 169.408 li
268.187 169.408 li
269.014 167.148 li
269.665 166.583 li
270.305 166.018 li
270.935 165.453 li
271.4 165.453 li
272.767 164.888 li
273.653 163.759 li
274.946 163.759 li
276.199 161.499 li
277.148 161.499 li
277.148 160.934 li
277.68 160.37 li
278.465 160.37 li
279.489 159.804 li
280.364 158.674 li
281.341 158.11 li
281.582 158.11 li
282.058 157.545 li
283.685 157.545 li
284.026 157.545 li
284.919 157.545 li
285.685 156.979 li
286.436 156.979 li
287.382 156.415 li
288.811 156.415 li
290.093 156.415 li
290.767 155.85 li
291.712 155.285 li
291.991 154.72 li
292.543 154.72 li
292.997 153.59 li
293.625 153.025 li
294.592 152.461 li
295.024 151.896 li
295.452 151.331 li
296.294 151.331 li
296.872 150.766 li
297.442 150.766 li
298.323 150.766 li
298.874 150.201 li
299.494 149.636 li
300.181 149.636 li
301.152 149.636 li
301.665 149.636 li
302.459 149.636 li
303.238 149.636 li
304.276 149.636 li
304.751 149.072 li
305.487 148.506 li
305.949 148.506 li
306.598 147.941 li
307.492 147.941 li
307.931 147.941 li
308.303 147.941 li
309.221 147.941 li
309.821 147.377 li
310.528 146.812 li
311.167 146.247 li
312.022 145.117 li
312.803 145.117 li
313.516 143.987 li
313.948 143.422 li
314.428 142.857 li
314.851 142.857 li
315.683 142.857 li
316.347 142.857 li
316.951 142.857 li
317.446 142.292 li
318.13 141.727 li
318.755 141.727 li
319.324 141.727 li
319.605 141.727 li
320.391 140.598 li
320.892 140.033 li
321.521 139.468 li
322.314 138.338 li
322.748 138.338 li
323.476 137.773 li
324.358 136.643 li
325.098 136.643 li
325.504 136.643 li
325.985 134.948 li
326.5 134.383 li
327.241 134.383 li
327.702 134.383 li
328.421 133.819 li
329.276 133.254 li
329.896 133.254 li
330.613 133.254 li
331.283 132.689 li
331.873 132.124 li
332.556 132.124 li
333.227 132.124 li
333.986 132.124 li
334.603 132.124 li
335.178 132.124 li
335.746 132.124 li
336.305 132.124 li
337.099 131.559 li
337.7 130.994 li
338.556 130.429 li
339.164 130.429 li
339.508 129.865 li
340.13 129.865 li
340.853 129.299 li
341.645 129.299 li
342.501 128.734 li
343.287 127.04 li
343.854 124.781 li
344.765 124.216 li
345.362 124.216 li
345.998 124.216 li
346.504 123.65 li
347.216 123.65 li
347.708 122.521 li
348.605 121.39 li
349.438 121.39 li
349.991 121.39 li
350.645 121.39 li
351.394 121.39 li
351.922 120.826 li
352.401 120.261 li
353.302 120.261 li
353.805 119.696 li
354.617 119.696 li
355.219 119.131 li
355.832 119.131 li
356.342 118.567 li
357.013 118.567 li
357.563 118.567 li
358.249 118.001 li
358.677 118.001 li
359.222 118.001 li
359.898 117.436 li
360.512 117.436 li
361.201 116.872 li
361.746 116.307 li
362.3 116.307 li
362.991 116.307 li
363.685 115.742 li
364.475 115.742 li
364.964 115.742 li
365.551 115.742 li
366.129 115.177 li
366.815 115.177 li
367.118 113.483 li
367.519 112.352 li
368.335 111.788 li
368.862 111.788 li
369.395 110.658 li
369.975 109.528 li
370.586 109.528 li
371.201 109.528 li
371.768 109.528 li
372.239 109.528 li
372.892 109.528 li
373.473 109.528 li
374.082 109.528 li
374.611 109.528 li
375.109 109.528 li
375.647 108.963 li
376.179 108.963 li
376.692 108.963 li
377.489 108.963 li
377.974 108.398 li
378.433 108.398 li
378.94 107.833 li
379.419 107.833 li
380.029 107.833 li
380.588 107.833 li
381.232 106.703 li
381.704 106.703 li
382.33 106.703 li
382.858 106.703 li
383.428 105.009 li
384.056 105.009 li
384.628 104.443 li
385.246 104.443 li
385.694 104.443 li
386.198 103.879 li
386.837 103.314 li
387.441 103.314 li
388.035 103.314 li
388.486 101.619 li
389.074 101.619 li
389.505 99.9248 li
390.078 99.9248 li
390.635 99.9248 li
391.034 99.3588 li
391.437 99.3588 li
391.991 98.7948 li
392.438 98.7948 li
392.979 98.2298 li
393.468 98.2298 li
394.076 98.2298 li
394.493 98.2298 li
394.964 98.2298 li
395.494 98.2298 li
395.96 98.2298 li
396.421 98.2298 li
396.85 97.6648 li
397.226 97.6648 li
397.666 97.0998 li
398.128 97.0998 li
398.512 97.0998 li
398.965 95.9698 li
399.451 95.9698 li
399.983 95.4048 li
400.551 94.2758 li
401.08 94.2758 li
401.658 93.7098 li
402.101 93.7098 li
402.521 93.7098 li
403.096 93.7098 li
403.57 93.1448 li
404.078 93.1448 li
404.546 92.5808 li
405.01 92.5808 li
405.395 92.0158 li
405.799 92.0158 li
406.193 91.4508 li
406.632 90.8858 li
407.109 90.3208 li
407.602 90.3208 li
408.037 89.7558 li
408.487 89.7558 li
408.897 89.7558 li
409.307 89.7558 li
409.794 89.7558 li
410.235 88.6268 li
410.72 87.4968 li
411.253 86.9318 li
411.73 86.3668 li
412.128 85.8018 li
412.544 85.8018 li
412.98 85.2368 li
413.392 84.6718 li
413.864 84.6718 li
414.262 84.6718 li
414.698 83.5428 li
415.088 83.5428 li
415.515 82.4118 li
415.889 81.8468 li
416.294 81.8468 li
416.733 81.8468 li
417.076 81.8468 li
417.518 81.8468 li
417.928 81.8468 li
418.366 81.2828 li
418.747 81.2828 li
419.105 81.2828 li
419.53 80.7178 li
419.939 80.7178 li
420.301 80.1528 li
420.71 79.5878 li
421.047 79.5878 li
421.486 79.0228 li
421.868 79.0228 li
422.32 79.0228 li
422.705 77.8928 li
423.066 77.3288 li
423.419 77.3288 li
423.858 77.3288 li
424.218 77.3288 li
424.607 77.3288 li
424.975 77.3288 li
425.369 77.3288 li
425.72 77.3288 li
426.092 77.3288 li
426.476 77.3288 li
426.797 76.7628 li
427.162 76.7628 li
427.526 76.7628 li
427.881 76.7628 li
428.255 76.7628 li
428.641 76.1988 li
428.983 75.0688 li
429.374 75.0688 li
429.758 75.0688 li
430.112 75.0688 li
430.514 74.5038 li
430.894 74.5038 li
431.267 74.5038 li
431.669 74.5038 li
431.958 73.3738 li
432.287 72.8088 li
432.619 72.8088 li
433.008 72.8088 li
433.376 72.8088 li
433.725 72.8088 li
434.03 72.8088 li
434.321 72.2448 li
434.688 72.2448 li
435.036 72.2448 li
435.336 72.2448 li
435.728 71.6788 li
436.098 69.9848 li
436.434 69.4198 li
436.837 68.8538 li
437.182 68.8538 li
437.533 68.2898 li
437.86 68.2898 li
438.192 68.2898 li
438.467 68.2898 li
438.769 67.1598 li
439.096 67.1598 li
439.442 66.5948 li
439.78 66.5948 li
440.128 66.0298 li
440.446 66.0298 li
440.798 66.0298 li
441.167 65.4648 li
441.516 65.4648 li
441.878 64.3358 li
442.202 64.3358 li
442.527 64.3358 li
442.835 63.7708 li
443.164 63.7708 li
443.435 63.7708 li
443.747 63.2058 li
444.045 63.2058 li
444.342 62.6408 li
444.639 62.6408 li
444.951 62.6408 li
445.308 62.6408 li
445.61 62.6408 li
445.915 62.6408 li
446.251 62.0758 li
446.555 62.0758 li
446.846 62.0758 li
447.182 62.0758 li
447.516 62.0758 li
447.803 62.0758 li
448.083 61.5108 li
448.385 61.5108 li
448.687 61.5108 li
449.024 61.5108 li
449.291 61.5108 li
449.589 60.9468 li
449.876 60.3808 li
450.194 59.8158 li
450.486 59.8158 li
450.797 59.8158 li
451.061 59.2518 li
451.366 58.6868 li
451.619 58.6868 li
451.931 58.1218 li
452.158 58.1218 li
452.426 58.1218 li
452.688 58.1218 li
452.99 58.1218 li
453.257 58.1218 li
453.51 58.1218 li
453.746 58.1218 li
454.014 58.1218 li
454.248 58.1218 li
454.522 58.1218 li
454.804 56.9918 li
455.039 56.9918 li
455.306 56.9918 li
455.562 56.9918 li
455.795 56.9918 li
456.073 56.9918 li
456.339 56.9918 li
456.601 56.9918 li
456.851 56.9918 li
457.086 56.9918 li
457.345 56.4268 li
457.604 56.4268 li
457.867 56.4268 li
458.1 56.4268 li
458.346 56.4268 li
458.594 55.2968 li
458.867 55.2968 li
459.132 54.7318 li
459.372 54.7318 li
459.601 54.7318 li
459.801 54.7318 li
460.021 54.1668 li
460.261 54.1668 li
460.504 53.6018 li
460.723 53.6018 li
460.964 53.6018 li
461.177 53.6018 li
461.381 53.6018 li
461.607 53.0378 li
461.845 53.0378 li
462.089 53.0378 li
462.296 53.0378 li
462.523 51.9078 li
462.73 51.9078 li
462.97 51.9078 li
463.202 51.9078 li
463.414 51.9078 li
463.642 51.9078 li
463.852 51.9078 li
464.041 51.9078 li
464.257 51.9078 li
464.456 51.9078 li
464.682 51.9078 li
464.859 51.9078 li
465.063 51.9078 li
465.255 51.9078 li
465.45 51.9078 li
465.635 51.9078 li
465.86 51.3428 li
466.051 50.2128 li
466.257 50.2128 li
466.477 50.2128 li
466.658 50.2128 li
466.856 50.2128 li
467.036 50.2128 li
467.222 49.6478 li
467.423 49.0828 li
467.618 49.0828 li
467.806 49.0828 li
467.997 47.9538 li
468.164 47.9538 li
468.344 47.9538 li
468.523 47.3888 li
468.719 46.8228 li
468.914 46.2578 li
469.082 45.6938 li
469.291 45.1288 li
469.498 45.1288 li
469.655 45.1288 li
469.84 45.1288 li
470.001 45.1288 li
470.19 44.5638 li
470.365 44.5638 li
470.56 44.5638 li
470.744 44.5638 li
470.932 44.5638 li
471.102 44.5638 li
471.285 43.9988 li
471.464 43.9988 li
471.642 43.9988 li
471.822 42.8688 li
471.97 42.3038 li
472.129 42.3038 li
472.28 42.3038 li
472.44 41.7398 li
472.596 41.1738 li
472.745 40.6088 li
472.905 40.6088 li
473.069 40.6088 li
473.227 40.6088 li
473.381 40.0448 li
473.533 39.4798 li
473.688 39.4798 li
473.844 39.4798 li
474.013 38.9148 li
474.171 38.9148 li
474.308 38.3498 li
474.44 38.3498 li
474.589 38.3498 li
474.733 37.7848 li
474.883 37.7848 li
475.028 37.7848 li
475.186 37.7848 li
475.328 37.7848 li
475.469 37.7848 li
475.618 37.7848 li
475.746 37.7848 li
475.871 37.7848 li
475.996 37.2198 li
476.124 37.2198 li
476.247 37.2198 li
476.366 37.2198 li
476.477 37.2198 li
476.603 37.2198 li
476.72 37.2198 li
476.836 36.6558 li
476.964 36.6558 li
477.094 36.0908 li
477.221 36.0908 li
477.349 36.0908 li
477.502 36.0908 li
477.62 36.0908 li
477.758 35.5248 li
477.897 34.9608 li
478.02 34.9608 li
478.144 34.9608 li
478.288 34.9608 li
478.422 34.9608 li
478.553 34.9608 li
478.681 34.9608 li
478.814 34.3958 li
478.925 34.3958 li
479.059 34.3958 li
479.189 34.3958 li
479.318 34.3958 li
479.426 34.3958 li
479.524 34.3958 li
479.643 34.3958 li
479.759 34.3958 li
479.879 34.3958 li
479.98 34.3958 li
480.086 34.3958 li
480.191 34.3958 li
480.294 34.3958 li
480.412 34.3958 li
480.524 34.3958 li
480.637 34.3958 li
480.75 34.3958 li
480.857 34.3958 li
480.957 34.3958 li
481.081 34.3958 li
481.171 34.3958 li
481.266 33.8308 li
481.361 33.8308 li
481.456 33.8308 li
481.564 33.8308 li
481.675 33.8308 li
481.778 33.8308 li
481.876 33.8308 li
481.981 33.8308 li
482.09 33.8308 li
482.194 33.8308 li
482.291 33.8308 li
482.405 33.8308 li
482.498 33.8308 li
482.576 33.8308 li
482.689 33.8308 li
482.788 33.8308 li
482.885 33.8308 li
482.986 33.8308 li
483.068 33.2658 li
483.167 33.2658 li
483.263 33.2658 li
483.355 33.2658 li
483.433 33.2658 li
483.538 33.2658 li
483.615 33.2658 li
483.707 33.2658 li
483.794 32.7008 li
483.888 32.1358 li
483.952 32.1358 li
484.035 32.1358 li
484.116 32.1358 li
484.203 32.1358 li
484.289 32.1358 li
484.354 32.1358 li
484.435 32.1358 li
484.514 31.5708 li
484.59 31.5708 li
484.669 31.0058 li
484.742 31.0058 li
484.818 31.0058 li
484.895 31.0058 li
484.98 31.0058 li
485.05 30.4418 li
485.118 30.4418 li
485.201 30.4418 li
485.281 30.4418 li
485.366 30.4418 li
485.437 30.4418 li
485.506 30.4418 li
485.579 30.4418 li
485.657 30.4418 li
485.735 30.4418 li
485.818 30.4418 li
485.888 29.8758 li
485.955 29.8758 li
486.026 29.8758 li
486.09 29.8758 li
486.167 29.8758 li
486.235 29.8758 li
486.302 29.8758 li
486.372 29.8758 li
486.433 29.8758 li
486.488 29.8758 li
486.551 29.8758 li
486.625 29.8758 li
486.698 29.8758 li
486.749 29.8758 li
486.816 29.8758 li
486.88 29.3108 li
486.949 28.7468 li
487.01 28.7468 li
487.065 28.7468 li
487.128 28.7468 li
487.187 28.7468 li
487.239 28.7468 li
487.299 28.7468 li
487.353 28.7468 li
487.417 28.7468 li
487.467 28.7468 li
487.521 28.7468 li
487.595 28.7468 li
487.654 28.7468 li
487.703 28.7468 li
487.756 28.7468 li
487.803 28.7468 li
487.849 28.7468 li
487.907 28.7468 li
487.955 28.7468 li
488.013 28.7468 li
488.076 28.7468 li
488.128 28.1818 li
488.176 28.1818 li
488.224 28.1818 li
488.274 28.1818 li
488.311 28.1818 li
488.355 28.1818 li
488.407 28.1818 li
488.451 28.1818 li
488.495 28.1818 li
488.543 27.6168 li
488.599 27.6168 li
488.645 27.6168 li
488.691 27.6168 li
488.739 27.6168 li
488.779 27.6168 li
488.823 27.0518 li
488.863 26.4868 li
488.908 26.4868 li
488.951 26.4868 li
488.986 26.4868 li
489.028 26.4868 li
489.076 26.4868 li
489.11 26.4868 li
489.141 26.4868 li
489.181 26.4868 li
489.226 26.4868 li
489.269 26.4868 li
489.3 26.4868 li
489.34 26.4868 li
489.38 26.4868 li
489.424 26.4868 li
489.46 25.9218 li
489.496 25.9218 li
489.53 25.9218 li
489.572 25.9218 li
489.605 25.3578 li
489.646 25.3578 li
489.689 25.3578 li
489.72 25.3578 li
489.753 25.3578 li
489.787 25.3578 li
489.818 24.7918 li
489.862 24.7918 li
489.893 24.7918 li
489.932 24.7918 li
489.97 24.7918 li
490.01 24.7918 li
490.045 24.7918 li
490.091 24.7918 li
490.115 24.7918 li
490.152 24.7918 li
490.196 24.7918 li
490.225 24.7918 li
490.266 24.7918 li
490.301 24.7918 li
490.335 24.7918 li
490.364 24.7918 li
490.396 24.7918 li
490.443 24.7918 li
490.475 24.7918 li
490.509 24.7918 li
490.534 24.7918 li
490.568 24.7918 li
490.591 24.7918 li
490.623 24.7918 li
490.655 24.7918 li
490.676 24.7918 li
490.699 24.7918 li
490.726 24.7918 li
490.749 24.7918 li
490.778 24.7918 li
490.799 24.7918 li
490.833 24.7918 li
490.855 24.7918 li
490.88 24.7918 li
490.903 24.7918 li
490.929 24.7918 li
490.961 24.7918 li
490.988 24.7918 li
491.012 24.2268 li
491.037 24.2268 li
491.062 24.2268 li
491.083 24.2268 li
491.102 24.2268 li
491.12 24.2268 li
491.141 24.2268 li
491.167 24.2268 li
491.196 24.2268 li
491.221 24.2268 li
491.243 24.2268 li
491.269 24.2268 li
491.291 24.2268 li
491.308 24.2268 li
491.332 24.2268 li
491.351 24.2268 li
491.368 24.2268 li
491.386 23.6628 li
491.41 23.6628 li
491.429 23.6628 li
491.448 23.6628 li
491.475 23.6628 li
491.492 23.0978 li
491.512 23.0978 li
491.528 23.0978 li
491.549 23.0978 li
491.561 23.0978 li
491.58 23.0978 li
491.597 23.0978 li
491.618 23.0978 li
491.639 23.0978 li
491.654 23.0978 li
491.67 23.0978 li
491.695 23.0978 li
491.715 23.0978 li
491.73 23.0978 li
491.749 23.0978 li
491.761 23.0978 li
491.783 23.0978 li
491.797 23.0978 li
491.81 23.0978 li
491.828 23.0978 li
491.845 23.0978 li
491.855 23.0978 li
491.875 23.0978 li
491.894 23.0978 li
491.905 23.0978 li
491.924 23.0978 li
491.937 23.0978 li
491.951 23.0978 li
491.962 23.0978 li
491.978 23.0978 li
491.99 23.0978 li
492.001 23.0978 li
492.023 23.0978 li
492.033 23.0978 li
492.045 23.0978 li
492.056 23.0978 li
492.076 23.0978 li
492.09 23.0978 li
492.101 23.0978 li
492.12 23.0978 li
492.13 23.0978 li
492.151 23.0978 li
492.165 23.0978 li
492.177 23.0978 li
492.187 23.0978 li
492.198 23.0978 li
492.207 23.0978 li
492.221 23.0978 li
492.235 23.0978 li
492.248 23.0978 li
492.258 23.0978 li
492.272 23.0978 li
492.283 23.0978 li
492.294 23.0978 li
492.307 23.0978 li
492.318 23.0978 li
492.329 23.0978 li
492.341 23.0978 li
492.349 23.0978 li
492.355 23.0978 li
492.372 23.0978 li
492.38 23.0978 li
492.391 23.0978 li
492.401 23.0978 li
492.412 23.0978 li
492.424 23.0978 li
492.436 23.0978 li
492.444 23.0978 li
492.451 23.0978 li
492.464 23.0978 li
492.477 23.0978 li
492.481 23.0978 li
492.491 23.0978 li
492.5 23.0978 li
492.508 23.0978 li
492.516 22.5328 li
492.524 22.5328 li
492.533 22.5328 li
492.542 22.5328 li
492.548 22.5328 li
492.56 22.5328 li
492.571 22.5328 li
492.578 22.5328 li
492.584 22.5328 li
492.594 22.5328 li
492.6 22.5328 li
492.609 22.5328 li
492.616 22.5328 li
492.626 22.5328 li
492.632 22.5328 li
492.637 22.5328 li
492.647 22.5328 li
492.651 22.5328 li
492.66 22.5328 li
492.67 22.5328 li
492.681 22.5328 li
492.688 22.5328 li
492.698 22.5328 li
492.708 22.5328 li
492.717 22.5328 li
492.729 22.5328 li
492.737 22.5328 li
492.747 22.5328 li
492.754 22.5328 li
492.762 22.5328 li
492.767 22.5328 li
492.776 22.5328 li
492.779 22.5328 li
492.784 22.5328 li
492.794 22.5328 li
492.803 22.5328 li
492.806 22.5328 li
492.816 22.5328 li
492.821 22.5328 li
492.824 22.5328 li
492.828 22.5328 li
492.834 22.5328 li
492.842 22.5328 li
492.849 22.5328 li
492.853 22.5328 li
492.86 22.5328 li
492.866 22.5328 li
492.87 22.5328 li
492.878 22.5328 li
492.883 22.5328 li
492.887 22.5328 li
492.893 22.5328 li
492.899 22.5328 li
492.901 22.5328 li
492.91 22.5328 li
492.919 22.5328 li
492.923 22.5328 li
492.929 22.5328 li
492.937 22.5328 li
492.944 22.5328 li
492.949 22.5328 li
492.953 22.5328 li
492.958 22.5328 li
492.964 22.5328 li
492.968 22.5328 li
492.97 22.5328 li
492.974 22.5328 li
492.976 22.5328 li
492.981 22.5328 li
492.989 22.5328 li
492.993 22.5328 li
492.995 22.5328 li
492.999 22.5328 li
493.003 22.5328 li
493.004 22.5328 li
493.007 22.5328 li
493.01 22.5328 li
493.016 22.5328 li
493.019 21.9678 li
493.026 21.9678 li
493.026 21.9678 li
493.027 21.9678 li
493.032 21.9678 li
493.037 21.9678 li
493.041 21.9678 li
493.045 21.9678 li
493.047 21.9678 li
493.049 21.9678 li
493.053 21.9678 li
493.058 21.9678 li
493.064 21.9678 li
493.069 21.9678 li
493.073 21.9678 li
493.074 21.9678 li
493.078 21.9678 li
493.082 21.9678 li
493.085 21.9678 li
493.086 21.9678 li
493.089 21.9678 li
493.091 21.9678 li
493.099 21.4028 li
493.103 21.4028 li
493.104 21.4028 li
493.108 21.4028 li
493.113 21.4028 li
493.114 21.4028 li
493.115 21.4028 li
493.118 21.4028 li
493.12 21.4028 li
493.121 21.4028 li
493.125 21.4028 li
493.126 21.4028 li
493.13 21.4028 li
493.133 21.4028 li
493.134 21.4028 li
493.136 21.4028 li
493.139 21.4028 li
493.141 21.4028 li
493.142 21.4028 li
493.146 21.4028 li
493.148 21.4028 li
493.151 21.4028 li
493.153 20.8378 li
493.158 20.8378 li
493.16 20.8378 li
493.162 20.8378 li
493.163 20.8378 li
493.167 20.8378 li
493.17 20.8378 li
493.172 20.8378 li
493.174 20.8378 li
493.175 20.8378 li
493.178 20.8378 li
493.181 20.8378 li
493.184 20.8378 li
493.188 20.8378 li
493.193 20.8378 li
493.196 20.8378 li
493.199 20.8378 li
493.201 20.8378 li
493.201 20.8378 li
493.204 20.8378 li
493.205 20.8378 li
493.207 20.8378 li
493.208 20.8378 li
493.21 20.8378 li
493.212 20.8378 li
493.214 20.8378 li
493.216 20.8378 li
493.217 20.8378 li
493.22 20.8378 li
493.221 20.8378 li
493.224 20.8378 li
493.226 20.8378 li
493.227 20.8378 li
493.228 20.8378 li
493.23 20.8378 li
493.232 20.8378 li
493.233 20.8378 li
493.235 20.8378 li
493.236 20.8378 li
493.237 20.8378 li
493.238 20.8378 li
493.239 20.8378 li
493.24 20.8378 li
493.241 20.8378 li
493.243 20.8378 li
493.245 20.8378 li
493.245 20.8378 li
493.246 20.8378 li
493.248 20.8378 li
493.249 20.8378 li
493.251 20.8378 li
493.253 20.8378 li
493.253 20.8378 li
493.254 20.8378 li
493.255 20.8378 li
493.256 20.8378 li
493.258 20.8378 li
493.259 20.8378 li
493.262 20.8378 li
493.263 20.8378 li
493.266 20.8378 li
493.267 20.8378 li
493.27 20.8378 li
493.271 20.8378 li
493.272 20.8378 li
493.274 20.8378 li
493.276 20.8378 li
493.277 20.8378 li
493.278 20.8378 li
493.279 20.8378 li
493.28 20.8378 li
493.282 20.8378 li
493.284 20.8378 li
493.285 20.8378 li
493.287 20.8378 li
493.288 20.8378 li
493.289 20.8378 li
493.29 20.8378 li
493.292 20.8378 li
493.293 20.8378 li
493.294 20.8378 li
493.297 20.8378 li
493.298 20.8378 li
493.299 20.8378 li
493.301 20.8378 li
493.303 20.8378 li
493.304 20.8378 li
493.305 20.8378 li
493.307 20.8378 li
493.308 20.8378 li
493.31 20.8378 li
493.311 20.8378 li
493.312 20.8378 li
493.313 20.8378 li
493.314 20.8378 li
493.315 20.8378 li
493.316 20.8378 li
493.318 20.8378 li
493.319 20.8378 li
493.32 20.8378 li
493.321 20.8378 li
493.322 20.8378 li
493.324 20.8378 li
493.326 20.8378 li
493.326 20.8378 li
493.328 20.8378 li
493.33 20.8378 li
493.331 20.8378 li
493.332 20.8378 li
493.333 20.8378 li
493.334 20.8378 li
493.335 20.8378 li
493.336 20.8378 li
493.337 20.8378 li
493.339 20.8378 li
493.339 20.8378 li
493.34 20.8378 li
493.342 20.8378 li
493.343 20.8378 li
493.344 20.8378 li
493.345 20.8378 li
493.346 20.8378 li
493.347 20.8378 li
493.349 20.8378 li
493.349 20.8378 li
493.35 20.8378 li
493.351 20.8378 li
493.352 20.8378 li
493.353 20.8378 li
0 .990631 1 .000396735 cmyk
@
47.1035 371.078 mo
47.1035 371.078 li
75.0435 371.078 li
91.3865 370.513 li
91.3865 369.948 li
102.983 369.948 li
111.977 369.948 li
125.539 369.948 li
125.539 369.384 li
130.922 369.384 li
135.67 369.384 li
143.758 369.384 li
147.266 369.384 li
153.479 369.384 li
156.26 369.384 li
161.305 369.384 li
163.61 369.384 li
167.856 368.253 li
169.823 368.253 li
175.205 368.253 li
176.851 367.124 li
178.432 367.124 li
181.419 367.124 li
182.833 367.124 li
188.042 367.124 li
190.414 367.124 li
191.549 366.559 li
192.653 366.559 li
195.796 365.994 li
196.791 365.994 li
199.638 365.994 li
201.43 365.994 li
202.297 365.994 li
203.976 365.994 li
206.371 365.994 li
208.633 365.994 li
209.359 365.429 li
210.773 365.429 li
210.773 364.864 li
212.806 364.864 li
214.106 364.864 li
215.981 364.864 li
216.588 364.299 li
217.773 364.299 li
218.353 364.299 li
220.593 363.735 li
222.716 363.735 li
225.22 363.169 li
225.702 362.605 li
228.033 362.605 li
230.237 362.04 li
232.73 361.475 li
233.922 361.475 li
235.457 361.475 li
238.012 360.91 li
239.402 360.91 li
242.046 360.91 li
242.68 359.78 li
243.615 359.78 li
244.827 359.78 li
246.58 359.78 li
247.429 359.78 li
248.26 359.215 li
249.342 359.215 li
250.396 359.215 li
251.423 358.651 li
252.916 358.085 li
253.881 356.955 li
254.824 356.391 li
256.199 356.391 li
257.089 355.826 li
258.39 355.826 li
259.234 355.826 li
260.265 354.696 li
262.637 354.696 li
263.397 354.696 li
264.328 353.566 li
265.417 353.566 li
266.303 353.566 li
266.999 353.566 li
268.187 353.566 li
269.178 353.566 li
270.463 353.566 li
272.316 353.566 li
274.233 352.436 li
275.647 351.306 li
277.148 350.742 li
278.205 350.742 li
278.98 350.742 li
280.487 350.177 li
281.462 349.612 li
282.296 349.612 li
283.342 349.047 li
283.912 349.047 li
284.919 348.482 li
286.223 347.353 li
287.485 347.353 li
288.811 346.787 li
290.093 345.658 li
291.712 345.093 li
292.817 344.528 li
293.536 343.962 li
294.766 343.962 li
296.542 342.268 li
298.005 342.268 li
298.796 341.703 li
300.029 340.573 li
301.078 340.573 li
302.1 340.573 li
303.308 340.573 li
304.548 339.444 li
305.155 339.444 li
306.21 339.444 li
307.112 338.878 li
308.18 338.878 li
308.795 338.314 li
310.117 338.314 li
311.167 338.314 li
312.191 338.314 li
313.352 337.749 li
314.851 337.184 li
315.632 336.054 li
316.448 336.054 li
317.199 336.054 li
318.13 335.489 li
319.135 335.489 li
320.528 334.924 li
321.342 333.795 li
322.007 333.795 li
322.921 332.664 li
323.646 332.664 li
324.647 331.535 li
325.665 330.97 li
326.696 330.97 li
327.778 330.97 li
328.459 330.405 li
329.312 330.405 li
329.787 329.84 li
330.256 329.84 li
331.142 329.275 li
331.769 329.275 li
332.556 329.275 li
333.227 329.275 li
333.823 329.275 li
334.312 328.711 li
335.273 328.711 li
335.87 328.146 li
336.521 328.146 li
337.281 328.146 li
338.204 328.146 li
339.078 327.58 li
339.622 327.016 li
340.326 326.451 li
341.155 326.451 li
342.155 326.451 li
342.817 325.886 li
343.391 325.886 li
343.982 325.886 li
344.715 325.886 li
345.656 325.886 li
346.528 325.321 li
347.287 325.321 li
347.824 324.756 li
348.786 324.756 li
349.505 324.756 li
350.232 324.756 li
350.947 324.756 li
351.564 324.756 li
352.235 324.756 li
352.772 324.756 li
353.342 324.191 li
353.905 323.626 li
354.812 323.626 li
355.451 323.626 li
356.211 323.062 li
356.791 323.062 li
357.38 323.062 li
358.105 323.062 li
358.659 321.931 li
359.292 321.931 li
359.967 320.237 li
360.748 320.237 li
361.367 320.237 li
362.008 320.237 li
362.703 319.107 li
363.403 318.542 li
364.152 317.977 li
364.721 317.413 li
365.416 316.847 li
365.996 316.847 li
366.641 316.283 li
367.233 316.283 li
367.745 316.283 li
368.182 316.283 li
368.765 315.718 li
369.354 315.153 li
369.962 315.153 li
370.52 315.153 li
371.305 314.023 li
371.832 313.458 li
372.467 312.893 li
372.992 311.764 li
373.523 310.069 li
373.924 309.504 li
374.503 308.939 li
374.944 308.374 li
375.449 307.809 li
375.868 307.809 li
376.385 307.809 li
376.817 307.809 li
377.277 307.809 li
377.908 307.809 li
378.302 307.809 li
378.79 307.809 li
379.451 306.679 li
379.893 305.549 li
380.496 304.984 li
380.937 303.855 li
381.454 303.855 li
381.884 303.29 li
382.419 303.29 li
382.907 303.29 li
383.294 302.725 li
383.648 302.16 li
384.169 300.466 li
384.619 300.466 li
385.091 299.9 li
385.557 299.9 li
386.018 298.206 li
386.537 297.641 li
387.083 297.076 li
387.596 295.381 li
388.035 294.251 li
388.545 294.251 li
388.915 294.251 li
389.198 292.557 li
389.612 290.297 li
390.176 289.167 li
390.683 286.908 li
391.216 286.343 li
391.672 285.778 li
392.076 285.213 li
392.53 284.648 li
392.85 284.648 li
393.318 283.518 li
393.669 282.388 li
394.091 281.824 li
394.45 281.259 li
394.878 281.259 li
395.287 280.693 li
395.579 280.693 li
395.946 280.129 li
396.512 280.129 li
396.857 279.564 li
397.335 279.564 li
397.72 279.564 li
398.115 278.999 li
398.414 278.434 li
398.729 277.869 li
399.16 276.74 li
399.483 275.045 li
399.849 271.09 li
400.267 270.526 li
400.651 269.96 li
401.129 269.395 li
401.536 269.395 li
401.98 269.395 li
402.341 268.831 li
402.729 267.701 li
403.084 267.136 li
403.465 267.136 li
403.801 266.571 li
404.158 266.571 li
404.479 266.571 li
404.812 266.006 li
405.178 266.006 li
405.589 265.442 li
405.898 264.877 li
406.21 264.311 li
406.487 263.747 li
406.762 263.747 li
407.131 263.182 li
407.47 263.182 li
407.801 262.052 li
408.187 260.922 li
408.487 260.357 li
408.825 260.357 li
409.196 260.357 li
409.554 260.357 li
409.869 259.792 li
410.24 259.228 li
410.559 259.228 li
410.881 258.097 li
411.214 256.403 li
411.493 256.403 li
411.73 255.838 li
412.039 255.273 li
412.288 255.273 li
412.605 254.708 li
412.938 253.579 li
413.21 253.013 li
413.556 253.013 li
413.895 251.884 li
414.209 251.319 li
414.499 251.319 li
414.794 248.495 li
415.088 248.495 li
415.38 247.364 li
415.666 246.799 li
415.924 246.799 li
416.235 246.799 li
416.582 246.235 li
416.93 245.67 li
417.217 243.975 li
417.506 243.975 li
417.842 242.845 li
418.171 242.28 li
418.502 241.15 li
418.85 241.15 li
419.155 241.15 li
419.471 240.021 li
419.744 240.021 li
420.035 238.891 li
420.259 238.891 li
420.562 237.197 li
420.877 236.631 li
421.194 236.631 li
421.474 236.631 li
421.794 236.066 li
422.13 234.937 li
422.433 234.937 li
422.717 234.372 li
422.99 234.372 li
423.242 233.242 li
423.497 232.112 li
423.819 232.112 li
424.082 231.547 li
424.326 231.547 li
424.607 230.417 li
424.927 230.417 li
425.196 230.417 li
425.542 229.288 li
425.814 228.722 li
426.078 228.722 li
426.314 228.158 li
426.551 228.158 li
426.83 227.593 li
427.135 227.593 li
427.362 225.898 li
427.6 225.898 li
427.877 224.768 li
428.078 224.204 li
428.312 223.073 li
428.569 223.073 li
428.824 221.944 li
429.11 221.379 li
429.389 220.814 li
429.658 219.119 li
429.923 219.119 li
430.161 219.119 li
430.43 219.119 li
430.71 218.554 li
430.962 217.99 li
431.229 217.99 li
431.494 217.99 li
431.735 217.424 li
431.966 216.859 li
432.17 216.859 li
432.376 216.859 li
432.676 216.295 li
432.963 215.73 li
433.249 215.73 li
433.498 214.035 li
433.725 213.47 li
433.955 212.341 li
434.152 211.775 li
434.383 211.211 li
434.588 210.081 li
434.819 208.951 li
435.041 208.951 li
435.246 208.951 li
435.486 208.386 li
435.73 208.386 li
436.028 208.386 li
436.259 207.256 li
436.498 207.256 li
436.73 207.256 li
436.976 206.126 li
437.189 204.432 li
437.423 203.867 li
437.636 202.737 li
437.853 202.172 li
438.089 201.608 li
438.325 201.608 li
438.555 201.042 li
438.758 199.913 li
438.99 199.348 li
439.19 198.218 li
439.396 198.218 li
439.625 198.218 li
439.823 198.218 li
440.06 197.653 li
440.267 197.653 li
440.489 197.088 li
440.677 197.088 li
440.873 197.088 li
441.128 196.523 li
441.289 195.958 li
441.503 195.958 li
441.698 195.958 li
441.905 195.958 li
442.122 195.393 li
442.333 195.393 li
442.562 193.699 li
442.754 193.699 li
442.954 193.699 li
443.162 192.568 li
443.372 192.004 li
443.586 191.439 li
443.769 190.874 li
443.987 190.309 li
444.198 189.744 li
444.418 189.744 li
444.61 188.615 li
444.824 188.615 li
445.04 186.92 li
445.246 186.355 li
445.462 186.355 li
445.612 185.79 li
445.821 185.225 li
446.035 185.225 li
446.21 184.095 li
446.43 183.53 li
446.639 183.53 li
446.854 182.965 li
447.04 182.401 li
447.206 181.27 li
447.373 180.706 li
447.534 180.141 li
447.715 180.141 li
447.915 180.141 li
448.12 180.141 li
448.294 179.576 li
448.482 179.576 li
448.658 178.446 li
448.856 177.881 li
449.062 177.881 li
449.255 177.317 li
449.441 176.186 li
449.603 175.622 li
449.788 175.057 li
449.987 173.927 li
450.132 173.362 li
450.3 173.362 li
450.46 173.362 li
450.662 172.232 li
450.866 172.232 li
451.059 171.668 li
451.226 171.668 li
451.384 171.103 li
451.54 169.972 li
451.704 169.408 li
451.841 168.843 li
452.013 168.843 li
452.172 168.843 li
452.377 168.278 li
452.517 167.713 li
452.684 167.713 li
452.858 166.583 li
453.011 165.453 li
453.196 165.453 li
453.358 164.324 li
453.515 164.324 li
453.7 164.324 li
453.866 164.324 li
454.014 164.324 li
454.183 162.629 li
454.352 162.629 li
454.535 162.629 li
454.707 162.629 li
454.861 162.629 li
455.018 162.629 li
455.161 162.064 li
455.323 161.499 li
455.458 161.499 li
455.602 159.804 li
455.776 159.239 li
455.914 158.674 li
456.066 157.545 li
456.216 157.545 li
456.365 157.545 li
456.502 156.979 li
456.652 156.979 li
456.815 156.415 li
456.949 155.85 li
457.086 154.72 li
457.248 154.72 li
457.391 153.59 li
457.507 153.025 li
457.689 153.025 li
457.844 152.461 li
458.003 150.201 li
458.118 149.636 li
458.27 149.072 li
458.405 148.506 li
458.525 148.506 li
458.653 147.941 li
458.794 147.941 li
458.944 147.941 li
459.084 147.941 li
459.241 147.377 li
459.355 146.812 li
459.484 146.812 li
459.623 146.247 li
459.791 145.681 li
459.929 144.552 li
460.067 143.987 li
460.196 143.987 li
460.325 143.422 li
460.429 141.727 li
460.548 141.727 li
460.702 141.727 li
460.824 141.727 li
460.966 141.727 li
461.087 141.727 li
461.218 141.163 li
461.345 141.163 li
461.486 141.163 li
461.616 140.033 li
461.751 140.033 li
461.905 139.468 li
462.029 139.468 li
462.173 139.468 li
462.313 138.903 li
462.437 137.773 li
462.544 137.773 li
462.669 137.208 li
462.787 136.643 li
462.908 136.079 li
463.035 136.079 li
463.169 136.079 li
463.295 136.079 li
463.425 136.079 li
463.547 134.948 li
463.658 134.383 li
463.758 133.254 li
463.876 133.254 li
463.993 132.689 li
464.128 132.689 li
464.239 132.689 li
464.353 132.124 li
464.471 131.559 li
464.581 130.994 li
464.677 130.429 li
464.806 130.429 li
464.916 130.429 li
465.02 129.865 li
465.126 129.865 li
465.248 129.299 li
465.382 129.299 li
465.508 128.734 li
465.623 128.17 li
465.757 127.605 li
465.857 127.04 li
465.96 125.345 li
466.08 124.781 li
466.213 123.65 li
466.324 123.65 li
466.423 123.086 li
466.508 123.086 li
466.601 121.956 li
466.705 121.39 li
466.793 120.826 li
466.891 120.826 li
466.987 120.826 li
467.096 120.826 li
467.194 120.826 li
467.307 120.261 li
467.41 120.261 li
467.514 120.261 li
467.635 120.261 li
467.749 119.131 li
467.837 118.567 li
467.944 118.567 li
468.051 118.001 li
468.145 118.001 li
468.236 117.436 li
468.319 117.436 li
468.411 117.436 li
468.504 117.436 li
468.596 116.307 li
468.697 115.742 li
468.79 115.742 li
468.892 115.177 li
468.974 114.612 li
469.075 114.047 li
469.176 114.047 li
469.264 112.917 li
469.36 111.788 li
469.475 111.788 li
469.589 110.658 li
469.705 110.658 li
469.795 110.658 li
469.914 110.658 li
469.991 110.658 li
470.089 109.528 li
470.195 108.963 li
470.292 107.833 li
470.381 106.703 li
470.483 106.138 li
470.58 105.574 li
470.664 105.574 li
470.746 104.443 li
470.827 104.443 li
470.925 104.443 li
471.032 104.443 li
471.124 104.443 li
471.214 104.443 li
471.306 104.443 li
471.389 103.879 li
471.498 103.879 li
471.572 103.314 li
471.676 103.314 li
471.757 103.314 li
471.827 103.314 li
471.909 103.314 li
471.996 103.314 li
472.089 102.749 li
472.183 102.184 li
472.261 102.184 li
472.334 102.184 li
472.414 102.184 li
472.49 101.619 li
472.585 101.619 li
472.667 101.054 li
472.759 101.054 li
472.826 101.054 li
472.91 101.054 li
473.006 101.054 li
473.102 100.49 li
473.169 100.49 li
473.248 99.9248 li
473.335 99.9248 li
473.419 99.9248 li
473.494 99.3588 li
473.575 98.7948 li
473.653 97.6648 li
473.738 97.6648 li
473.819 97.6648 li
473.91 95.9698 li
473.983 95.9698 li
474.063 95.9698 li
474.133 95.4048 li
474.214 95.4048 li
474.287 95.4048 li
474.355 94.8398 li
474.43 94.8398 li
474.505 94.8398 li
474.582 94.8398 li
474.657 94.2758 li
474.74 93.7098 li
474.806 93.7098 li
474.883 93.7098 li
474.96 92.5808 li
475.031 92.5808 li
475.109 91.4508 li
475.19 90.8858 li
475.273 90.8858 li
475.337 89.7558 li
475.421 89.1918 li
475.498 89.1918 li
475.589 89.1918 li
475.667 89.1918 li
475.733 89.1918 li
475.816 89.1918 li
475.88 89.1918 li
475.945 89.1918 li
476.022 88.0608 li
476.095 87.4968 li
476.149 86.9318 li
476.224 86.3668 li
476.292 85.2368 li
476.37 84.6718 li
476.431 84.6718 li
476.498 84.1068 li
476.56 84.1068 li
476.615 84.1068 li
476.676 84.1068 li
476.744 84.1068 li
476.815 83.5428 li
476.879 83.5428 li
476.941 83.5428 li
477.016 83.5428 li
477.076 83.5428 li
477.132 82.9778 li
477.191 82.4118 li
477.252 81.2828 li
477.318 81.2828 li
477.387 81.2828 li
477.467 80.7178 li
477.523 80.7178 li
477.586 80.7178 li
477.65 80.7178 li
477.701 80.7178 li
477.754 80.1528 li
477.814 80.1528 li
477.872 80.1528 li
477.932 80.1528 li
477.989 80.1528 li
478.052 80.1528 li
478.132 80.1528 li
478.186 80.1528 li
478.25 80.1528 li
478.311 80.1528 li
478.371 79.0228 li
478.426 79.0228 li
478.48 79.0228 li
478.556 79.0228 li
478.633 78.4578 li
478.699 78.4578 li
478.761 77.8928 li
478.811 76.7628 li
478.853 76.7628 li
478.919 76.7628 li
478.974 76.7628 li
479.035 76.7628 li
479.101 76.1988 li
479.161 75.6338 li
479.212 75.6338 li
479.277 75.6338 li
479.335 75.6338 li
479.402 75.6338 li
479.456 75.0688 li
479.522 74.5038 li
479.573 73.9388 li
479.625 73.9388 li
479.683 73.9388 li
479.734 73.9388 li
479.795 73.9388 li
479.858 73.9388 li
479.907 73.3738 li
479.957 73.3738 li
480.007 73.3738 li
480.062 73.3738 li
480.118 73.3738 li
480.168 72.2448 li
480.228 71.6788 li
480.282 71.6788 li
480.344 71.1138 li
480.404 71.1138 li
480.451 71.1138 li
480.515 70.5488 li
480.583 70.5488 li
480.645 69.4198 li
480.698 68.8538 li
480.744 68.8538 li
480.789 68.8538 li
480.844 68.2898 li
480.9 68.2898 li
480.944 67.7248 li
480.994 67.7248 li
481.056 67.1598 li
481.109 67.1598 li
481.16 66.5948 li
481.203 66.0298 li
481.26 65.4648 li
481.303 64.8998 li
481.353 64.8998 li
481.406 64.8998 li
481.457 64.8998 li
481.504 64.8998 li
481.551 64.8998 li
481.6 64.8998 li
481.649 64.8998 li
481.711 64.8998 li
481.774 64.8998 li
481.817 64.8998 li
481.865 64.8998 li
481.912 64.8998 li
481.973 64.8998 li
482.028 64.8998 li
482.067 64.3358 li
482.114 63.7708 li
482.171 63.2058 li
482.22 62.6408 li
482.269 62.0758 li
482.307 61.5108 li
482.35 61.5108 li
482.394 60.9468 li
482.435 60.3808 li
482.492 60.3808 li
482.53 60.3808 li
482.569 59.8158 li
482.621 59.2518 li
482.655 58.6868 li
482.7 58.6868 li
482.746 58.1218 li
482.792 58.1218 li
482.827 58.1218 li
482.867 56.9918 li
482.921 56.9918 li
482.962 56.9918 li
483.01 56.9918 li
483.049 56.9918 li
483.092 56.9918 li
483.13 56.9918 li
483.173 56.4268 li
483.225 55.2968 li
483.258 55.2968 li
483.3 55.2968 li
483.344 55.2968 li
483.383 55.2968 li
483.41 55.2968 li
483.458 55.2968 li
483.502 55.2968 li
483.542 55.2968 li
483.582 55.2968 li
483.619 55.2968 li
483.659 55.2968 li
483.707 55.2968 li
483.749 55.2968 li
483.785 55.2968 li
483.827 55.2968 li
483.866 55.2968 li
483.907 54.7318 li
483.941 54.1668 li
483.974 54.1668 li
484.007 53.6018 li
484.046 53.6018 li
484.084 53.6018 li
484.128 53.6018 li
484.162 53.6018 li
484.196 53.6018 li
484.235 53.6018 li
484.283 53.0378 li
484.332 53.0378 li
484.378 53.0378 li
484.422 53.0378 li
484.474 53.0378 li
484.506 53.0378 li
484.545 51.3428 li
484.58 51.3428 li
484.621 51.3428 li
484.664 50.7778 li
484.701 50.7778 li
484.733 50.7778 li
484.754 50.7778 li
484.791 50.7778 li
484.828 50.7778 li
484.865 50.7778 li
484.897 50.7778 li
484.933 50.7778 li
484.965 50.2128 li
485.003 50.2128 li
485.032 50.2128 li
485.072 49.6478 li
485.115 49.6478 li
485.141 49.6478 li
485.162 49.6478 li
485.189 49.6478 li
485.217 49.6478 li
485.257 49.6478 li
485.297 49.6478 li
485.321 49.6478 li
485.359 49.0828 li
485.398 49.0828 li
485.429 49.0828 li
485.46 49.0828 li
485.486 49.0828 li
485.52 49.0828 li
485.556 49.0828 li
485.585 48.5178 li
485.609 47.9538 li
485.641 47.9538 li
485.669 47.9538 li
485.696 47.9538 li
485.731 47.9538 li
485.764 47.9538 li
485.797 47.9538 li
485.829 47.9538 li
485.856 47.9538 li
485.881 47.9538 li
485.912 47.9538 li
485.957 47.9538 li
485.98 47.9538 li
486.014 47.9538 li
486.047 47.3888 li
486.083 46.8228 li
486.115 46.8228 li
486.149 46.2578 li
486.177 46.2578 li
486.203 46.2578 li
486.226 46.2578 li
486.264 46.2578 li
486.292 46.2578 li
486.319 45.6938 li
486.355 45.6938 li
486.386 44.5638 li
486.42 44.5638 li
486.459 44.5638 li
486.482 43.9988 li
486.506 43.4338 li
486.542 43.4338 li
486.562 43.4338 li
486.587 43.4338 li
486.617 43.4338 li
486.649 43.4338 li
486.675 43.4338 li
486.71 43.4338 li
486.731 43.4338 li
486.764 42.8688 li
486.793 42.8688 li
486.824 42.8688 li
486.854 42.8688 li
486.885 42.8688 li
486.913 42.3038 li
486.935 41.7398 li
486.958 41.1738 li
486.987 41.1738 li
487.011 41.1738 li
487.039 40.6088 li
487.068 40.6088 li
487.094 40.6088 li
487.117 40.6088 li
487.144 40.6088 li
487.172 40.6088 li
487.205 40.6088 li
487.228 40.0448 li
487.253 38.9148 li
487.28 37.7848 li
487.299 37.7848 li
487.326 37.7848 li
487.339 37.7848 li
487.37 37.7848 li
487.397 37.7848 li
487.417 37.7848 li
487.448 37.7848 li
487.476 37.7848 li
487.508 37.7848 li
487.527 37.7848 li
487.547 37.7848 li
487.566 37.2198 li
487.589 37.2198 li
487.606 37.2198 li
487.636 37.2198 li
487.654 36.6558 li
487.676 36.6558 li
487.703 36.6558 li
487.722 36.6558 li
487.749 36.0908 li
487.769 36.0908 li
487.797 36.0908 li
487.821 35.5248 li
487.841 35.5248 li
487.867 35.5248 li
487.889 35.5248 li
487.907 35.5248 li
487.931 34.3958 li
487.954 34.3958 li
487.974 33.8308 li
488.003 33.8308 li
488.022 33.8308 li
488.044 33.2658 li
488.066 33.2658 li
488.089 32.7008 li
488.11 32.1358 li
488.128 32.1358 li
488.151 32.1358 li
488.17 32.1358 li
488.19 32.1358 li
488.212 32.1358 li
488.227 32.1358 li
488.246 32.1358 li
488.262 32.1358 li
488.287 32.1358 li
488.31 32.1358 li
488.333 32.1358 li
488.349 32.1358 li
488.376 32.1358 li
488.399 32.1358 li
488.416 32.1358 li
488.431 32.1358 li
488.453 32.1358 li
488.471 32.1358 li
488.492 32.1358 li
488.509 32.1358 li
488.528 32.1358 li
488.55 31.5708 li
488.568 31.5708 li
488.587 31.5708 li
488.606 31.5708 li
488.622 31.5708 li
488.643 31.5708 li
488.658 31.5708 li
488.683 31.5708 li
488.705 31.5708 li
488.725 31.5708 li
488.747 31.0058 li
488.761 31.0058 li
488.771 31.0058 li
488.785 31.0058 li
488.797 30.4418 li
488.811 30.4418 li
488.832 30.4418 li
488.849 30.4418 li
488.866 30.4418 li
488.884 30.4418 li
488.903 30.4418 li
488.916 29.8758 li
488.939 29.8758 li
488.96 29.8758 li
488.977 29.8758 li
488.998 29.8758 li
489.022 29.8758 li
489.038 29.8758 li
489.058 29.8758 li
489.073 29.8758 li
489.089 29.8758 li
489.101 29.8758 li
489.116 29.8758 li
489.137 29.3108 li
489.156 29.3108 li
489.17 29.3108 li
489.193 29.3108 li
489.214 29.3108 li
489.229 29.3108 li
489.249 29.3108 li
489.27 29.3108 li
489.285 29.3108 li
489.302 29.3108 li
489.318 29.3108 li
489.339 28.7468 li
489.358 28.7468 li
489.376 28.7468 li
489.396 28.7468 li
489.414 28.7468 li
489.434 28.7468 li
489.451 28.7468 li
489.469 28.7468 li
489.483 28.7468 li
489.498 28.7468 li
489.516 28.7468 li
489.535 28.7468 li
489.55 28.7468 li
489.565 28.1818 li
489.589 28.1818 li
489.61 28.1818 li
489.628 28.1818 li
489.642 28.1818 li
489.664 28.1818 li
489.682 28.1818 li
489.707 28.1818 li
489.729 28.1818 li
489.748 28.1818 li
489.767 27.6168 li
489.785 27.6168 li
489.802 27.6168 li
489.814 27.6168 li
489.83 27.6168 li
489.846 27.6168 li
489.862 27.6168 li
489.878 27.6168 li
489.892 27.6168 li
489.905 27.6168 li
489.923 27.6168 li
489.939 27.6168 li
489.956 27.6168 li
489.978 27.0518 li
489.992 27.0518 li
490.004 27.0518 li
490.018 26.4868 li
490.029 26.4868 li
490.04 26.4868 li
490.058 26.4868 li
490.076 26.4868 li
490.094 26.4868 li
490.114 26.4868 li
490.13 26.4868 li
490.148 26.4868 li
490.155 26.4868 li
490.167 26.4868 li
490.183 25.3578 li
490.201 25.3578 li
490.217 25.3578 li
490.234 25.3578 li
490.245 25.3578 li
490.257 25.3578 li
490.266 25.3578 li
490.284 25.3578 li
490.301 25.3578 li
490.311 25.3578 li
490.326 25.3578 li
490.336 25.3578 li
490.354 25.3578 li
490.363 24.7918 li
490.374 24.7918 li
490.391 24.7918 li
490.405 24.7918 li
490.413 24.7918 li
490.432 24.7918 li
490.448 24.7918 li
490.458 24.7918 li
490.475 24.7918 li
490.491 24.7918 li
490.51 24.7918 li
490.526 24.7918 li
490.543 24.7918 li
490.56 24.7918 li
490.569 24.7918 li
490.586 24.7918 li
490.599 24.7918 li
490.607 24.7918 li
490.615 24.7918 li
490.622 24.7918 li
490.639 24.7918 li
490.653 24.7918 li
490.664 24.7918 li
490.673 24.7918 li
490.682 24.7918 li
490.694 24.7918 li
490.71 24.7918 li
490.718 24.7918 li
490.731 24.7918 li
490.738 24.7918 li
490.748 24.7918 li
490.763 24.7918 li
490.778 24.7918 li
490.799 24.7918 li
490.809 24.7918 li
490.814 24.7918 li
490.826 24.7918 li
490.835 24.7918 li
490.853 24.7918 li
490.867 24.7918 li
490.873 24.7918 li
490.884 24.7918 li
490.894 24.7918 li
490.901 24.7918 li
490.922 24.7918 li
490.933 24.7918 li
490.949 24.7918 li
490.964 24.7918 li
490.974 24.7918 li
490.98 24.7918 li
490.989 24.7918 li
490.998 24.7918 li
491.008 24.7918 li
491.019 24.7918 li
491.027 24.7918 li
491.038 24.7918 li
491.047 24.7918 li
491.062 24.7918 li
491.072 24.7918 li
491.083 24.7918 li
491.094 24.7918 li
491.105 24.7918 li
491.113 24.7918 li
491.123 24.7918 li
491.138 24.7918 li
491.153 24.7918 li
491.161 24.7918 li
491.172 24.7918 li
491.187 24.7918 li
491.198 24.7918 li
491.205 24.7918 li
491.216 24.7918 li
491.228 24.7918 li
491.236 24.7918 li
491.246 24.7918 li
491.253 24.7918 li
491.264 24.7918 li
491.277 24.7918 li
491.288 24.7918 li
491.301 24.7918 li
491.31 24.7918 li
491.323 24.7918 li
491.332 24.7918 li
491.342 24.7918 li
491.352 24.7918 li
491.359 24.7918 li
491.37 24.7918 li
491.375 24.7918 li
491.384 24.7918 li
491.395 24.7918 li
491.401 24.7918 li
491.41 24.7918 li
491.415 24.7918 li
491.429 24.2268 li
491.441 24.2268 li
491.451 24.2268 li
491.458 24.2268 li
491.466 24.2268 li
491.478 24.2268 li
491.489 24.2268 li
491.497 24.2268 li
491.504 24.2268 li
491.51 24.2268 li
491.514 24.2268 li
491.524 24.2268 li
491.529 24.2268 li
491.533 24.2268 li
491.539 24.2268 li
491.55 24.2268 li
491.56 24.2268 li
491.568 24.2268 li
491.574 24.2268 li
491.581 24.2268 li
491.589 24.2268 li
491.596 24.2268 li
491.607 24.2268 li
491.616 24.2268 li
491.621 24.2268 li
491.633 24.2268 li
491.642 24.2268 li
491.648 24.2268 li
491.656 24.2268 li
491.661 24.2268 li
491.668 24.2268 li
491.674 24.2268 li
491.684 24.2268 li
491.693 24.2268 li
491.699 24.2268 li
491.709 24.2268 li
491.717 24.2268 li
491.719 24.2268 li
491.725 24.2268 li
491.735 24.2268 li
491.743 24.2268 li
491.751 24.2268 li
491.757 24.2268 li
491.766 24.2268 li
491.771 24.2268 li
491.78 24.2268 li
491.792 24.2268 li
491.803 24.2268 li
491.808 24.2268 li
491.815 23.6628 li
491.824 23.6628 li
491.833 23.6628 li
491.839 23.6628 li
491.849 23.6628 li
491.855 23.6628 li
491.864 23.6628 li
491.871 23.6628 li
491.878 23.6628 li
491.887 23.6628 li
491.894 23.6628 li
491.901 23.6628 li
491.908 23.6628 li
491.914 23.6628 li
491.922 23.6628 li
491.928 23.6628 li
491.935 23.6628 li
491.939 23.6628 li
491.944 23.6628 li
491.955 23.6628 li
491.961 23.6628 li
491.966 23.6628 li
491.971 23.6628 li
491.98 23.6628 li
491.987 23.6628 li
491.996 23.6628 li
492.001 23.6628 li
492.005 23.6628 li
492.017 23.6628 li
492.024 23.6628 li
492.032 23.6628 li
492.038 23.6628 li
492.045 23.6628 li
492.051 23.6628 li
492.058 23.6628 li
492.06 23.0978 li
492.068 23.0978 li
492.076 22.5328 li
492.082 22.5328 li
492.086 22.5328 li
492.091 21.9678 li
492.096 21.9678 li
492.107 21.9678 li
492.114 21.9678 li
492.122 21.9678 li
492.128 21.9678 li
492.137 21.4028 li
492.142 21.4028 li
492.147 21.4028 li
492.151 21.4028 li
492.159 21.4028 li
492.166 21.4028 li
492.169 21.4028 li
492.177 21.4028 li
492.184 21.4028 li
492.186 21.4028 li
492.193 21.4028 li
492.201 20.8378 li
492.207 20.8378 li
492.212 20.8378 li
492.221 20.8378 li
492.23 20.8378 li
492.238 20.8378 li
492.245 20.8378 li
492.253 20.8378 li
492.259 20.8378 li
492.263 20.8378 li
492.266 20.8378 li
492.276 20.8378 li
492.28 20.8378 li
492.288 20.8378 li
492.297 20.8378 li
492.299 20.8378 li
492.304 20.8378 li
492.311 20.8378 li
492.318 20.8378 li
492.326 20.8378 li
492.33 20.8378 li
492.335 20.8378 li
492.336 20.8378 li
492.34 20.8378 li
492.344 20.8378 li
492.352 20.8378 li
492.357 20.8378 li
492.362 20.8378 li
492.366 20.8378 li
492.371 20.8378 li
492.379 20.8378 li
492.385 20.8378 li
492.389 20.8378 li
492.396 20.8378 li
492.403 20.8378 li
492.407 20.8378 li
492.412 20.8378 li
492.419 20.8378 li
492.424 20.8378 li
492.427 20.8378 li
492.43 20.8378 li
492.433 20.8378 li
492.438 20.8378 li
492.444 20.8378 li
492.451 20.8378 li
492.457 20.8378 li
492.462 20.8378 li
492.469 20.8378 li
492.478 20.8378 li
492.481 20.8378 li
492.485 20.8378 li
492.488 20.8378 li
492.495 20.8378 li
492.503 20.8378 li
492.508 20.8378 li
492.513 20.8378 li
492.516 20.8378 li
492.521 20.8378 li
492.526 20.8378 li
492.532 20.8378 li
492.539 20.8378 li
492.542 20.8378 li
492.545 20.8378 li
492.551 20.8378 li
492.555 20.8378 li
492.557 20.8378 li
492.562 20.8378 li
492.57 20.8378 li
492.573 20.8378 li
492.579 20.8378 li
492.586 20.8378 li
492.594 20.8378 li
492.599 20.8378 li
492.605 20.8378 li
492.611 20.8378 li
492.615 20.8378 li
492.622 20.8378 li
492.626 20.8378 li
492.63 20.8378 li
492.635 20.8378 li
492.641 20.8378 li
492.646 20.8378 li
492.654 20.8378 li
492.662 20.8378 li
492.666 20.8378 li
492.672 20.8378 li
492.675 20.8378 li
492.68 20.8378 li
492.683 20.8378 li
492.693 20.8378 li
492.697 20.8378 li
492.703 20.8378 li
492.71 20.8378 li
492.711 20.8378 li
492.719 20.8378 li
492.724 20.8378 li
492.73 20.8378 li
492.734 20.8378 li
492.741 20.8378 li
492.748 20.8378 li
492.749 20.8378 li
492.75 20.8378 li
492.755 20.8378 li
492.758 20.8378 li
492.763 20.8378 li
492.768 20.8378 li
492.773 20.8378 li
492.776 20.8378 li
492.778 20.8378 li
492.783 20.8378 li
492.786 20.8378 li
492.789 20.8378 li
492.794 20.8378 li
492.797 20.8378 li
492.803 20.8378 li
492.806 20.8378 li
492.808 20.8378 li
492.812 20.8378 li
492.816 20.8378 li
492.821 20.8378 li
492.826 20.8378 li
492.828 20.8378 li
492.83 20.8378 li
492.835 20.8378 li
492.841 20.8378 li
492.844 20.8378 li
492.85 20.8378 li
492.854 20.8378 li
492.857 20.8378 li
492.86 20.8378 li
492.866 20.8378 li
492.872 20.8378 li
492.878 20.8378 li
492.883 20.8378 li
492.887 20.8378 li
492.889 20.8378 li
492.893 20.8378 li
492.896 20.8378 li
492.899 20.8378 li
492.905 20.8378 li
492.907 20.8378 li
492.91 20.8378 li
492.912 20.8378 li
492.914 20.8378 li
492.919 20.8378 li
492.923 20.8378 li
492.928 20.8378 li
492.932 20.8378 li
492.935 20.8378 li
492.939 20.8378 li
492.94 20.8378 li
492.944 20.8378 li
492.946 20.8378 li
492.948 20.8378 li
492.953 20.8378 li
492.956 20.8378 li
492.957 20.8378 li
492.962 20.8378 li
492.968 20.8378 li
492.969 20.8378 li
492.974 20.8378 li
492.977 20.8378 li
492.982 20.8378 li
492.987 20.8378 li
492.989 20.8378 li
492.993 20.8378 li
492.997 20.8378 li
493.001 20.8378 li
493.005 20.8378 li
493.01 20.8378 li
493.012 20.8378 li
493.018 20.8378 li
493.021 20.8378 li
493.026 20.8378 li
493.028 20.8378 li
493.031 20.8378 li
493.032 20.8378 li
493.034 20.8378 li
493.037 20.8378 li
493.039 20.8378 li
493.042 20.8378 li
493.047 20.8378 li
493.052 20.8378 li
493.056 20.8378 li
493.059 20.8378 li
493.061 20.8378 li
493.064 20.8378 li
493.068 20.8378 li
493.069 20.8378 li
493.074 20.8378 li
493.076 20.8378 li
493.079 20.8378 li
493.082 20.8378 li
493.085 20.8378 li
493.087 20.8378 li
493.091 20.8378 li
493.092 20.8378 li
493.096 20.8378 li
493.099 20.8378 li
493.099 20.8378 li
493.103 20.8378 li
493.105 20.8378 li
493.106 20.8378 li
493.109 20.8378 li
493.111 20.8378 li
493.115 20.8378 li
493.117 20.8378 li
493.118 20.8378 li
493.121 20.8378 li
493.123 20.8378 li
493.125 20.8378 li
493.129 20.8378 li
493.133 20.8378 li
493.135 20.8378 li
493.137 20.8378 li
493.141 20.8378 li
493.144 20.8378 li
493.147 20.8378 li
493.149 20.8378 li
493.151 20.8378 li
493.153 20.8378 li
493.155 20.8378 li
493.157 20.8378 li
493.159 20.8378 li
493.16 20.8378 li
493.162 20.8378 li
493.164 20.8378 li
493.165 20.8378 li
493.169 20.8378 li
493.172 20.8378 li
493.172 20.8378 li
493.177 20.8378 li
493.179 20.8378 li
493.181 20.8378 li
493.185 20.8378 li
493.187 20.8378 li
493.188 20.8378 li
493.189 20.8378 li
493.193 20.8378 li
493.195 20.8378 li
493.196 20.8378 li
493.199 20.8378 li
493.201 20.8378 li
493.204 20.8378 li
493.206 20.8378 li
493.208 20.8378 li
493.212 20.8378 li
493.215 20.8378 li
493.217 20.8378 li
493.218 20.8378 li
493.219 20.8378 li
493.221 20.8378 li
493.222 20.8378 li
493.224 20.8378 li
493.225 20.8378 li
493.226 20.8378 li
493.229 20.8378 li
493.232 20.8378 li
493.234 20.8378 li
493.235 20.8378 li
493.237 20.8378 li
493.239 20.8378 li
493.24 20.8378 li
493.242 20.8378 li
493.245 20.8378 li
493.246 20.8378 li
493.247 20.8378 li
493.249 20.8378 li
493.25 20.8378 li
493.251 20.8378 li
493.253 20.8378 li
493.255 20.8378 li
493.256 20.8378 li
493.257 20.8378 li
493.258 20.8378 li
493.259 20.8378 li
493.262 20.8378 li
493.263 20.8378 li
493.266 20.8378 li
493.266 20.8378 li
493.267 20.8378 li
493.269 20.8378 li
493.27 20.8378 li
493.272 20.8378 li
493.274 20.8378 li
493.276 20.8378 li
493.278 20.8378 li
493.279 20.8378 li
493.28 20.8378 li
493.282 20.8378 li
493.283 20.8378 li
493.285 20.8378 li
493.286 20.8378 li
493.287 20.8378 li
493.289 20.8378 li
493.292 20.8378 li
493.293 20.8378 li
493.294 20.8378 li
493.295 20.8378 li
493.297 20.8378 li
493.298 20.8378 li
493.3 20.8378 li
493.301 20.8378 li
493.302 20.8378 li
493.303 20.8378 li
493.305 20.8378 li
493.306 20.8378 li
493.307 20.8378 li
493.309 20.8378 li
493.31 20.8378 li
493.311 20.8378 li
493.312 20.8378 li
493.313 20.8378 li
493.314 20.8378 li
493.315 20.8378 li
493.316 20.8378 li
493.318 20.8378 li
493.318 20.8378 li
493.319 20.8378 li
493.32 20.8378 li
493.321 20.8378 li
493.322 20.8378 li
493.323 20.8378 li
493.324 20.8378 li
493.326 20.8378 li
493.326 20.8378 li
493.328 20.8378 li
493.329 20.8378 li
493.33 20.8378 li
493.331 20.8378 li
493.332 20.8378 li
493.333 20.8378 li
493.334 20.8378 li
493.335 20.8378 li
493.336 20.8378 li
493.337 20.8378 li
493.339 20.8378 li
493.339 20.8378 li
493.34 20.8378 li
493.341 20.8378 li
493.342 20.8378 li
493.343 20.8378 li
493.345 20.8378 li
493.346 20.8378 li
493.347 20.8378 li
493.349 20.8378 li
493.349 20.8378 li
493.35 20.8378 li
493.351 20.8378 li
493.352 20.8378 li
493.353 20.8378 li
.895628 .7673 0 0 cmyk
@
0 lj
47.1035 368.078 mo
47.1035 374.078 li
44.1035 371.078 mo
50.1035 371.078 li
44.9824 368.957 mo
49.2246 373.199 li
44.9824 373.199 mo
49.2246 368.957 li
@
102.982 366.948 mo
102.982 372.948 li
99.9825 369.948 mo
105.982 369.948 li
100.861 367.827 mo
105.103 372.069 li
100.861 372.069 mo
105.103 367.827 li
@
135.67 366.383 mo
135.67 372.383 li
132.67 369.383 mo
138.67 369.383 li
133.549 367.262 mo
137.791 371.505 li
133.549 371.505 mo
137.791 367.262 li
@
161.305 366.383 mo
161.305 372.383 li
158.305 369.383 mo
164.305 369.383 li
159.185 367.262 mo
163.426 371.505 li
159.185 371.505 mo
163.426 367.262 li
@
178.432 364.124 mo
178.432 370.124 li
175.432 367.124 mo
181.432 367.124 li
176.311 365.003 mo
180.553 369.245 li
176.311 369.245 mo
180.553 365.003 li
@
199.638 362.994 mo
199.638 368.994 li
196.638 365.994 mo
202.638 365.994 li
197.517 363.873 mo
201.759 368.115 li
197.517 368.115 mo
201.759 363.873 li
@
210.773 361.864 mo
210.773 367.864 li
207.773 364.864 mo
213.773 364.864 li
208.652 362.743 mo
212.894 366.985 li
208.652 366.985 mo
212.894 362.743 li
@
225.22 360.169 mo
225.22 366.169 li
222.22 363.169 mo
228.22 363.169 li
223.099 361.048 mo
227.341 365.29 li
223.099 365.29 mo
227.341 361.048 li
@
242.681 356.78 mo
242.681 362.78 li
239.681 359.78 mo
245.681 359.78 li
240.56 357.659 mo
244.802 361.901 li
240.56 361.901 mo
244.802 357.659 li
@
253.881 353.955 mo
253.881 359.955 li
250.881 356.955 mo
256.881 356.955 li
251.76 354.835 mo
256.002 359.077 li
251.76 359.077 mo
256.002 354.835 li
@
265.417 350.566 mo
265.417 356.566 li
262.417 353.566 mo
268.417 353.566 li
263.297 351.445 mo
267.539 355.687 li
263.297 355.687 mo
267.539 351.445 li
@
278.205 347.742 mo
278.205 353.742 li
275.205 350.742 mo
281.205 350.742 li
276.084 348.621 mo
280.326 352.863 li
276.084 352.863 mo
280.326 348.621 li
@
288.811 343.787 mo
288.811 349.787 li
285.811 346.787 mo
291.811 346.787 li
286.69 344.666 mo
290.932 348.909 li
286.69 348.909 mo
290.932 344.666 li
@
301.078 337.573 mo
301.078 343.573 li
298.078 340.573 mo
304.078 340.573 li
298.957 338.452 mo
303.199 342.694 li
298.957 342.694 mo
303.199 338.452 li
@
311.167 335.314 mo
311.167 341.314 li
308.167 338.314 mo
314.167 338.314 li
309.046 336.193 mo
313.288 340.435 li
309.046 340.435 mo
313.288 336.193 li
@
321.342 330.794 mo
321.342 336.794 li
318.342 333.794 mo
324.342 333.794 li
319.221 331.673 mo
323.463 335.915 li
319.221 335.915 mo
323.463 331.673 li
@
329.787 326.84 mo
329.787 332.84 li
326.787 329.84 mo
332.787 329.84 li
327.666 327.719 mo
331.908 331.961 li
327.666 331.961 mo
331.908 327.719 li
@
336.521 325.146 mo
336.521 331.146 li
333.521 328.146 mo
339.521 328.146 li
334.399 326.025 mo
338.642 330.266 li
334.399 330.266 mo
338.642 326.025 li
@
343.982 322.886 mo
343.982 328.886 li
340.982 325.886 mo
346.982 325.886 li
341.861 323.765 mo
346.103 328.007 li
341.861 328.007 mo
346.103 323.765 li
@
351.564 321.756 mo
351.564 327.756 li
348.564 324.756 mo
354.564 324.756 li
349.443 322.635 mo
353.685 326.877 li
349.443 326.877 mo
353.685 322.635 li
@
358.106 320.061 mo
358.106 326.061 li
355.106 323.061 mo
361.106 323.061 li
355.985 320.94 mo
360.227 325.182 li
355.985 325.182 mo
360.227 320.94 li
@
364.72 314.413 mo
364.72 320.413 li
361.72 317.413 mo
367.72 317.413 li
362.599 315.292 mo
366.841 319.534 li
362.599 319.534 mo
366.841 315.292 li
@
370.52 312.153 mo
370.52 318.153 li
367.52 315.153 mo
373.52 315.153 li
368.399 313.032 mo
372.641 317.274 li
368.399 317.274 mo
372.641 313.032 li
@
375.868 304.809 mo
375.868 310.809 li
372.868 307.809 mo
378.868 307.809 li
373.747 305.688 mo
377.989 309.93 li
373.747 309.93 mo
377.989 305.688 li
@
380.937 300.855 mo
380.937 306.855 li
377.937 303.855 mo
383.937 303.855 li
378.816 301.734 mo
383.058 305.976 li
378.816 305.976 mo
383.058 301.734 li
@
385.557 296.9 mo
385.557 302.9 li
382.557 299.9 mo
388.557 299.9 li
383.436 297.779 mo
387.678 302.022 li
383.436 302.022 mo
387.678 297.779 li
@
390.175 286.167 mo
390.175 292.167 li
387.175 289.167 mo
393.175 289.167 li
388.054 287.046 mo
392.296 291.288 li
388.054 291.288 mo
392.296 287.046 li
@
394.45 278.259 mo
394.45 284.259 li
391.45 281.259 mo
397.45 281.259 li
392.329 279.138 mo
396.571 283.38 li
392.329 283.38 mo
396.571 279.138 li
@
398.414 275.434 mo
398.414 281.434 li
395.414 278.434 mo
401.414 278.434 li
396.292 276.313 mo
400.535 280.555 li
396.292 280.555 mo
400.535 276.313 li
@
402.341 265.831 mo
402.341 271.831 li
399.341 268.831 mo
405.341 268.831 li
400.22 266.71 mo
404.462 270.952 li
400.22 270.952 mo
404.462 266.71 li
@
405.898 261.876 mo
405.898 267.876 li
402.898 264.876 mo
408.898 264.876 li
403.777 262.756 mo
408.019 266.997 li
403.777 266.997 mo
408.019 262.756 li
@
409.196 257.357 mo
409.196 263.357 li
406.196 260.357 mo
412.196 260.357 li
407.075 258.236 mo
411.317 262.478 li
407.075 262.478 mo
411.317 258.236 li
@
412.287 252.273 mo
412.287 258.273 li
409.287 255.273 mo
415.287 255.273 li
410.166 253.152 mo
414.408 257.394 li
410.166 257.394 mo
414.408 253.152 li
@
415.38 244.365 mo
415.38 250.365 li
412.38 247.365 mo
418.38 247.365 li
413.259 245.243 mo
417.501 249.485 li
413.259 249.485 mo
417.501 245.243 li
@
418.503 238.15 mo
418.503 244.15 li
415.503 241.15 mo
421.503 241.15 li
416.382 239.029 mo
420.623 243.272 li
416.382 243.272 mo
420.623 239.029 li
@
421.475 233.631 mo
421.475 239.631 li
418.475 236.631 mo
424.475 236.631 li
419.354 234.51 mo
423.596 238.752 li
419.354 238.752 mo
423.596 234.51 li
@
424.326 228.547 mo
424.326 234.547 li
421.326 231.547 mo
427.326 231.547 li
422.205 229.426 mo
426.447 233.668 li
422.205 233.668 mo
426.447 229.426 li
@
427.135 224.593 mo
427.135 230.593 li
424.135 227.593 mo
430.135 227.593 li
425.014 225.472 mo
429.257 229.714 li
425.014 229.714 mo
429.257 225.472 li
@
429.658 216.119 mo
429.658 222.119 li
426.658 219.119 mo
432.658 219.119 li
427.537 216.998 mo
431.779 221.24 li
427.537 221.24 mo
431.779 216.998 li
@
432.17 213.859 mo
432.17 219.859 li
429.17 216.859 mo
435.17 216.859 li
430.049 214.739 mo
434.291 218.981 li
430.049 218.981 mo
434.291 214.739 li
@
434.588 207.081 mo
434.588 213.081 li
431.588 210.081 mo
437.588 210.081 li
432.467 207.96 mo
436.709 212.202 li
432.467 212.202 mo
436.709 207.96 li
@
436.976 203.126 mo
436.976 209.126 li
433.976 206.126 mo
439.976 206.126 li
434.855 204.006 mo
439.098 208.247 li
434.855 208.247 mo
439.098 204.006 li
@
439.19 195.218 mo
439.19 201.218 li
436.19 198.218 mo
442.19 198.218 li
437.069 196.097 mo
441.311 200.339 li
437.069 200.339 mo
441.311 196.097 li
@
441.289 192.958 mo
441.289 198.958 li
438.289 195.958 mo
444.289 195.958 li
439.167 193.837 mo
443.41 198.079 li
439.167 198.079 mo
443.41 193.837 li
@
443.372 189.004 mo
443.372 195.004 li
440.372 192.004 mo
446.372 192.004 li
441.251 189.883 mo
445.493 194.125 li
441.251 194.125 mo
445.493 189.883 li
@
445.462 183.355 mo
445.462 189.355 li
442.462 186.355 mo
448.462 186.355 li
443.341 184.234 mo
447.583 188.476 li
443.341 188.476 mo
447.583 184.234 li
@
447.373 177.706 mo
447.373 183.706 li
444.373 180.706 mo
450.373 180.706 li
445.252 178.585 mo
449.494 182.827 li
445.252 182.827 mo
449.494 178.585 li
@
449.255 174.317 mo
449.255 180.317 li
446.255 177.317 mo
452.255 177.317 li
447.134 175.195 mo
451.376 179.437 li
447.134 179.437 mo
451.376 175.195 li
@
451.059 168.667 mo
451.059 174.667 li
448.059 171.667 mo
454.059 171.667 li
448.938 169.546 mo
453.18 173.788 li
448.938 173.788 mo
453.18 169.546 li
@
452.684 164.713 mo
452.684 170.713 li
449.684 167.713 mo
455.684 167.713 li
450.563 165.592 mo
454.805 169.834 li
450.563 169.834 mo
454.805 165.592 li
@
454.352 159.629 mo
454.352 165.629 li
451.352 162.629 mo
457.352 162.629 li
452.231 160.508 mo
456.473 164.75 li
452.231 164.75 mo
456.473 160.508 li
@
455.914 155.674 mo
455.914 161.674 li
452.914 158.674 mo
458.914 158.674 li
453.793 156.554 mo
458.035 160.795 li
453.793 160.795 mo
458.035 156.554 li
@
457.391 150.59 mo
457.391 156.59 li
454.391 153.59 mo
460.391 153.59 li
455.269 151.469 mo
459.511 155.711 li
455.269 155.711 mo
459.511 151.469 li
@
458.794 144.942 mo
458.794 150.942 li
455.794 147.942 mo
461.794 147.942 li
456.673 145.82 mo
460.915 150.062 li
456.673 150.062 mo
460.915 145.82 li
@
460.196 140.987 mo
460.196 146.987 li
457.196 143.987 mo
463.196 143.987 li
458.074 141.866 mo
462.316 146.108 li
458.074 146.108 mo
462.316 141.866 li
@
461.487 138.163 mo
461.487 144.163 li
458.487 141.163 mo
464.487 141.163 li
459.366 139.042 mo
463.608 143.284 li
459.366 143.284 mo
463.608 139.042 li
@
462.787 133.643 mo
462.787 139.643 li
459.787 136.643 mo
465.787 136.643 li
460.666 134.522 mo
464.908 138.764 li
460.666 138.764 mo
464.908 134.522 li
@
463.992 129.689 mo
463.992 135.689 li
460.992 132.689 mo
466.992 132.689 li
461.871 130.568 mo
466.114 134.81 li
461.871 134.81 mo
466.114 130.568 li
@
465.126 126.865 mo
465.126 132.865 li
462.126 129.865 mo
468.126 129.865 li
463.005 127.743 mo
467.247 131.985 li
463.005 131.985 mo
467.247 127.743 li
@
466.324 120.65 mo
466.324 126.65 li
463.324 123.65 mo
469.324 123.65 li
464.203 121.529 mo
468.445 125.772 li
464.203 125.772 mo
468.445 121.529 li
@
467.307 117.261 mo
467.307 123.261 li
464.307 120.261 mo
470.307 120.261 li
465.186 118.14 mo
469.428 122.382 li
465.186 122.382 mo
469.428 118.14 li
@
468.319 114.436 mo
468.319 120.436 li
465.319 117.436 mo
471.319 117.436 li
466.198 115.316 mo
470.44 119.558 li
466.198 119.558 mo
470.44 115.316 li
@
469.264 109.917 mo
469.264 115.917 li
466.264 112.917 mo
472.264 112.917 li
467.142 110.796 mo
471.385 115.038 li
467.142 115.038 mo
471.385 110.796 li
@
470.292 104.833 mo
470.292 110.833 li
467.292 107.833 mo
473.292 107.833 li
468.171 105.712 mo
472.413 109.954 li
468.171 109.954 mo
472.413 105.712 li
@
471.214 101.444 mo
471.214 107.444 li
468.214 104.444 mo
474.214 104.444 li
469.093 102.323 mo
473.335 106.565 li
469.093 106.565 mo
473.335 102.323 li
@
472.089 99.7488 mo
472.089 105.749 li
469.089 102.749 mo
475.089 102.749 li
469.968 100.628 mo
474.21 104.87 li
469.968 104.87 mo
474.21 100.628 li
@
472.91 98.0538 mo
472.91 104.054 li
469.91 101.054 mo
475.91 101.054 li
470.789 98.9328 mo
475.032 103.175 li
470.789 103.175 mo
475.032 98.9328 li
@
473.738 94.6648 mo
473.738 100.665 li
470.738 97.6648 mo
476.738 97.6648 li
471.617 95.5438 mo
475.859 99.7858 li
471.617 99.7858 mo
475.859 95.5438 li
@
474.505 91.8398 mo
474.505 97.8398 li
471.505 94.8398 mo
477.505 94.8398 li
472.384 92.7188 mo
476.626 96.9608 li
472.384 96.9608 mo
476.626 92.7188 li
@
475.273 87.8858 mo
475.273 93.8858 li
472.273 90.8858 mo
478.273 90.8858 li
473.151 88.7648 mo
477.394 93.0068 li
473.151 93.0068 mo
477.394 88.7648 li
@
476.022 85.0608 mo
476.022 91.0608 li
473.022 88.0608 mo
479.022 88.0608 li
473.901 85.9408 mo
478.143 90.1828 li
473.901 90.1828 mo
478.143 85.9408 li
@
476.676 81.1068 mo
476.676 87.1068 li
473.676 84.1068 mo
479.676 84.1068 li
474.555 81.9858 mo
478.797 86.2278 li
474.555 86.2278 mo
478.797 81.9858 li
@
477.318 78.2828 mo
477.318 84.2828 li
474.318 81.2828 mo
480.318 81.2828 li
475.197 79.1618 mo
479.439 83.4038 li
475.197 83.4038 mo
479.439 79.1618 li
@
477.932 77.1528 mo
477.932 83.1528 li
474.932 80.1528 mo
480.932 80.1528 li
475.811 78.0318 mo
480.053 82.2738 li
475.811 82.2738 mo
480.053 78.0318 li
@
478.556 76.0228 mo
478.556 82.0228 li
475.556 79.0228 mo
481.556 79.0228 li
476.435 76.9018 mo
480.677 81.1438 li
476.435 81.1438 mo
480.677 76.9018 li
@
479.161 72.6338 mo
479.161 78.6338 li
476.161 75.6338 mo
482.161 75.6338 li
477.04 73.5128 mo
481.282 77.7548 li
477.04 77.7548 mo
481.282 73.5128 li
@
479.733 70.9388 mo
479.733 76.9388 li
476.733 73.9388 mo
482.733 73.9388 li
477.613 71.8178 mo
481.855 76.0598 li
477.613 76.0598 mo
481.855 71.8178 li
@
480.282 68.6788 mo
480.282 74.6788 li
477.282 71.6788 mo
483.282 71.6788 li
478.161 69.5578 mo
482.403 73.7998 li
478.161 73.7998 mo
482.403 69.5578 li
@
480.844 65.2898 mo
480.844 71.2898 li
477.844 68.2898 mo
483.844 68.2898 li
478.723 66.1688 mo
482.966 70.4108 li
478.723 70.4108 mo
482.966 66.1688 li
@
481.353 61.8998 mo
481.353 67.8998 li
478.353 64.8998 mo
484.353 64.8998 li
479.232 62.7788 mo
483.474 67.0218 li
479.232 67.0218 mo
483.474 62.7788 li
@
481.865 61.8998 mo
481.865 67.8998 li
478.865 64.8998 mo
484.865 64.8998 li
479.744 62.7788 mo
483.986 67.0218 li
479.744 67.0218 mo
483.986 62.7788 li
@
482.349 58.5108 mo
482.349 64.5108 li
479.349 61.5108 mo
485.349 61.5108 li
480.229 59.3898 mo
484.471 63.6318 li
480.229 63.6318 mo
484.471 59.3898 li
@
482.792 55.1218 mo
482.792 61.1218 li
479.792 58.1218 mo
485.792 58.1218 li
480.671 55.9998 mo
484.913 60.2428 li
480.671 60.2428 mo
484.913 55.9998 li
@
483.225 52.2968 mo
483.225 58.2968 li
480.225 55.2968 mo
486.225 55.2968 li
481.104 53.1758 mo
485.346 57.4178 li
481.104 57.4178 mo
485.346 53.1758 li
@
483.619 52.2968 mo
483.619 58.2968 li
480.619 55.2968 mo
486.62 55.2968 li
481.498 53.1758 mo
485.74 57.4178 li
481.498 57.4178 mo
485.74 53.1758 li
@
484.007 50.6018 mo
484.007 56.6018 li
481.007 53.6018 mo
487.007 53.6018 li
481.886 51.4808 mo
486.128 55.7238 li
481.886 55.7238 mo
486.128 51.4808 li
@
484.422 50.0378 mo
484.422 56.0378 li
481.421 53.0378 mo
487.422 53.0378 li
482.3 50.9168 mo
486.542 55.1588 li
482.3 55.1588 mo
486.542 50.9168 li
@
484.791 47.7778 mo
484.791 53.7778 li
481.791 50.7778 mo
487.791 50.7778 li
482.67 48.6568 mo
486.912 52.8988 li
482.67 52.8988 mo
486.912 48.6568 li
@
485.141 46.6478 mo
485.141 52.6478 li
482.14 49.6478 mo
488.141 49.6478 li
483.019 47.5268 mo
487.261 51.7688 li
483.019 51.7688 mo
487.261 47.5268 li
@
485.46 46.0828 mo
485.46 52.0828 li
482.46 49.0828 mo
488.46 49.0828 li
483.339 46.9618 mo
487.581 51.2038 li
483.339 51.2038 mo
487.581 46.9618 li
@
485.764 44.9528 mo
485.764 50.9528 li
482.764 47.9528 mo
488.764 47.9528 li
483.643 45.8328 mo
487.885 50.0738 li
483.643 50.0738 mo
487.885 45.8328 li
@
486.083 43.8238 mo
486.083 49.8238 li
483.083 46.8238 mo
489.083 46.8238 li
483.962 44.7018 mo
488.204 48.9448 li
483.962 48.9448 mo
488.204 44.7018 li
@
486.386 41.5638 mo
486.386 47.5638 li
483.386 44.5638 mo
489.386 44.5638 li
484.266 42.4428 mo
488.507 46.6848 li
484.266 46.6848 mo
488.507 42.4428 li
@
486.675 40.4338 mo
486.675 46.4338 li
483.675 43.4338 mo
489.675 43.4338 li
484.554 41.3128 mo
488.797 45.5548 li
484.554 45.5548 mo
488.797 41.3128 li
@
486.958 38.1738 mo
486.958 44.1738 li
483.958 41.1738 mo
489.958 41.1738 li
484.837 39.0538 mo
489.079 43.2948 li
484.837 43.2948 mo
489.079 39.0538 li
@
487.228 37.0448 mo
487.228 43.0448 li
484.228 40.0448 mo
490.228 40.0448 li
485.107 37.9238 mo
489.349 42.1658 li
485.107 42.1658 mo
489.349 37.9238 li
@
487.476 34.7848 mo
487.476 40.7848 li
484.476 37.7848 mo
490.476 37.7848 li
485.355 35.6638 mo
489.597 39.9058 li
485.355 39.9058 mo
489.597 35.6638 li
@
487.701 33.6548 mo
487.701 39.6548 li
484.701 36.6548 mo
490.701 36.6548 li
485.581 34.5338 mo
489.823 38.7758 li
485.581 38.7758 mo
489.823 34.5338 li
@
487.931 31.3958 mo
487.931 37.3958 li
484.931 34.3958 mo
490.931 34.3958 li
485.81 32.2748 mo
490.052 36.5168 li
485.81 36.5168 mo
490.052 32.2748 li
@
488.151 29.1358 mo
488.151 35.1358 li
485.151 32.1358 mo
491.151 32.1358 li
486.03 30.0148 mo
490.272 34.2568 li
486.03 34.2568 mo
490.272 30.0148 li
@
488.349 29.1358 mo
488.349 35.1358 li
485.349 32.1358 mo
491.349 32.1358 li
486.228 30.0148 mo
490.471 34.2568 li
486.228 34.2568 mo
490.471 30.0148 li
@
488.55 28.5708 mo
488.55 34.5708 li
485.55 31.5708 mo
491.55 31.5708 li
486.429 29.4498 mo
490.672 33.6918 li
486.429 33.6918 mo
490.672 29.4498 li
@
488.747 28.0058 mo
488.747 34.0058 li
485.747 31.0058 mo
491.747 31.0058 li
486.626 28.8848 mo
490.868 33.1268 li
486.626 33.1268 mo
490.868 28.8848 li
@
488.902 27.4418 mo
488.902 33.4418 li
485.902 30.4418 mo
491.902 30.4418 li
486.781 28.3198 mo
491.023 32.5618 li
486.781 32.5618 mo
491.023 28.3198 li
@
489.089 26.8758 mo
489.089 32.8758 li
486.089 29.8758 mo
492.089 29.8758 li
486.967 27.7558 mo
491.209 31.9968 li
486.967 31.9968 mo
491.209 27.7558 li
@
489.27 26.3108 mo
489.27 32.3108 li
486.27 29.3108 mo
492.27 29.3108 li
487.149 27.1908 mo
491.391 31.4328 li
487.149 31.4328 mo
491.391 27.1908 li
@
489.453 25.7468 mo
489.453 31.7468 li
486.453 28.7468 mo
492.453 28.7468 li
487.331 26.6248 mo
491.573 30.8678 li
487.331 30.8678 mo
491.573 26.6248 li
@
489.628 25.1818 mo
489.628 31.1818 li
486.628 28.1818 mo
492.628 28.1818 li
487.507 26.0608 mo
491.749 30.3028 li
487.507 30.3028 mo
491.749 26.0608 li
@
489.814 24.6168 mo
489.814 30.6168 li
486.814 27.6168 mo
492.814 27.6168 li
487.693 25.4958 mo
491.935 29.7378 li
487.693 29.7378 mo
491.935 25.4958 li
@
489.978 24.0518 mo
489.978 30.0518 li
486.978 27.0518 mo
492.978 27.0518 li
487.857 24.9308 mo
492.099 29.1728 li
487.857 29.1728 mo
492.099 24.9308 li
@
490.13 23.4868 mo
490.13 29.4868 li
487.13 26.4868 mo
493.13 26.4868 li
488.009 24.3658 mo
492.251 28.6078 li
488.009 28.6078 mo
492.251 24.3658 li
@
490.264 22.3568 mo
490.264 28.3568 li
487.264 25.3568 mo
493.264 25.3568 li
488.143 23.2358 mo
492.385 27.4778 li
488.143 27.4778 mo
492.385 23.2358 li
@
490.405 21.7918 mo
490.405 27.7918 li
487.405 24.7918 mo
493.405 24.7918 li
488.284 22.6708 mo
492.526 26.9128 li
488.284 26.9128 mo
492.526 22.6708 li
@
490.56 21.7918 mo
490.56 27.7918 li
487.56 24.7918 mo
493.56 24.7918 li
488.439 22.6708 mo
492.681 26.9128 li
488.439 26.9128 mo
492.681 22.6708 li
@
490.673 21.7918 mo
490.673 27.7918 li
487.673 24.7918 mo
493.673 24.7918 li
488.552 22.6708 mo
492.794 26.9128 li
488.552 26.9128 mo
492.794 22.6708 li
@
490.798 21.7918 mo
490.798 27.7918 li
487.798 24.7918 mo
493.798 24.7918 li
488.677 22.6708 mo
492.919 26.9128 li
488.677 26.9128 mo
492.919 22.6708 li
@
490.901 21.7918 mo
490.901 27.7918 li
487.901 24.7918 mo
493.901 24.7918 li
488.78 22.6708 mo
493.022 26.9128 li
488.78 26.9128 mo
493.022 22.6708 li
@
491.019 21.7918 mo
491.019 27.7918 li
488.019 24.7918 mo
494.019 24.7918 li
488.898 22.6708 mo
493.141 26.9128 li
488.898 26.9128 mo
493.141 22.6708 li
@
491.123 21.7918 mo
491.123 27.7918 li
488.123 24.7918 mo
494.123 24.7918 li
489.001 22.6708 mo
493.245 26.9128 li
489.001 26.9128 mo
493.245 22.6708 li
@
491.236 21.7918 mo
491.236 27.7918 li
488.236 24.7918 mo
494.236 24.7918 li
489.115 22.6708 mo
493.357 26.9128 li
489.115 26.9128 mo
493.357 22.6708 li
@
491.341 21.7918 mo
491.341 27.7918 li
488.341 24.7918 mo
494.341 24.7918 li
489.22 22.6708 mo
493.462 26.9128 li
489.22 26.9128 mo
493.462 22.6708 li
@
491.43 21.2268 mo
491.43 27.2268 li
488.43 24.2268 mo
494.43 24.2268 li
489.308 22.1058 mo
493.551 26.3488 li
489.308 26.3488 mo
493.551 22.1058 li
@
491.514 21.2268 mo
491.514 27.2268 li
488.514 24.2268 mo
494.514 24.2268 li
489.393 22.1058 mo
493.635 26.3488 li
489.393 26.3488 mo
493.635 22.1058 li
@
491.589 21.2268 mo
491.589 27.2268 li
488.589 24.2268 mo
494.589 24.2268 li
489.468 22.1058 mo
493.71 26.3488 li
489.468 26.3488 mo
493.71 22.1058 li
@
491.667 21.2268 mo
491.667 27.2268 li
488.667 24.2268 mo
494.667 24.2268 li
489.547 22.1058 mo
493.789 26.3488 li
489.547 26.3488 mo
493.789 22.1058 li
@
491.743 21.2268 mo
491.743 27.2268 li
488.743 24.2268 mo
494.743 24.2268 li
489.622 22.1058 mo
493.864 26.3488 li
489.622 26.3488 mo
493.864 22.1058 li
@
491.824 20.6628 mo
491.824 26.6628 li
488.824 23.6628 mo
494.824 23.6628 li
489.703 21.5418 mo
493.945 25.7838 li
489.703 25.7838 mo
493.945 21.5418 li
@
491.901 20.6628 mo
491.901 26.6628 li
488.901 23.6628 mo
494.901 23.6628 li
489.78 21.5418 mo
494.022 25.7838 li
489.78 25.7838 mo
494.022 21.5418 li
@
491.967 20.6628 mo
491.967 26.6628 li
488.967 23.6628 mo
494.967 23.6628 li
489.846 21.5418 mo
494.089 25.7838 li
489.846 25.7838 mo
494.089 21.5418 li
@
492.039 20.6628 mo
492.039 26.6628 li
489.039 23.6628 mo
495.039 23.6628 li
489.917 21.5418 mo
494.16 25.7838 li
489.917 25.7838 mo
494.16 21.5418 li
@
492.096 18.9678 mo
492.096 24.9678 li
489.096 21.9678 mo
495.096 21.9678 li
489.975 19.8468 mo
494.217 24.0888 li
489.975 24.0888 mo
494.217 19.8468 li
@
492.166 18.4028 mo
492.166 24.4028 li
489.166 21.4028 mo
495.166 21.4028 li
490.044 19.2818 mo
494.287 23.5238 li
490.044 23.5238 mo
494.287 19.2818 li
@
492.23 17.8378 mo
492.23 23.8378 li
489.23 20.8378 mo
495.23 20.8378 li
490.109 18.7168 mo
494.351 22.9588 li
490.109 22.9588 mo
494.351 18.7168 li
@
492.297 17.8378 mo
492.297 23.8378 li
489.297 20.8378 mo
495.297 20.8378 li
490.174 18.7168 mo
494.417 22.9588 li
490.174 22.9588 mo
494.417 18.7168 li
@
492.344 17.8378 mo
492.344 23.8378 li
489.344 20.8378 mo
495.344 20.8378 li
490.224 18.7168 mo
494.465 22.9588 li
490.224 22.9588 mo
494.465 18.7168 li
@
492.403 17.8378 mo
492.403 23.8378 li
489.403 20.8378 mo
495.403 20.8378 li
490.282 18.7168 mo
494.523 22.9588 li
490.282 22.9588 mo
494.523 18.7168 li
@
492.453 17.8378 mo
492.453 23.8378 li
489.453 20.8378 mo
495.453 20.8378 li
490.331 18.7168 mo
494.573 22.9588 li
490.331 22.9588 mo
494.573 18.7168 li
@
492.508 17.8378 mo
492.508 23.8378 li
489.508 20.8378 mo
495.508 20.8378 li
490.387 18.7168 mo
494.628 22.9588 li
490.387 22.9588 mo
494.628 18.7168 li
@
492.555 17.8378 mo
492.555 23.8378 li
489.555 20.8378 mo
495.555 20.8378 li
490.434 18.7168 mo
494.676 22.9588 li
490.434 22.9588 mo
494.676 18.7168 li
@
492.611 17.8378 mo
492.611 23.8378 li
489.611 20.8378 mo
495.611 20.8378 li
490.49 18.7168 mo
494.732 22.9588 li
490.49 22.9588 mo
494.732 18.7168 li
@
492.666 17.8378 mo
492.666 23.8378 li
489.666 20.8378 mo
495.666 20.8378 li
490.545 18.7168 mo
494.787 22.9588 li
490.545 22.9588 mo
494.787 18.7168 li
@
492.719 17.8378 mo
492.719 23.8378 li
489.719 20.8378 mo
495.719 20.8378 li
490.599 18.7168 mo
494.84 22.9588 li
490.599 22.9588 mo
494.84 18.7168 li
@
492.763 17.8378 mo
492.763 23.8378 li
489.763 20.8378 mo
495.763 20.8378 li
490.642 18.7168 mo
494.884 22.9588 li
490.642 22.9588 mo
494.884 18.7168 li
@
492.798 17.8378 mo
492.798 23.8378 li
489.798 20.8378 mo
495.798 20.8378 li
490.676 18.7168 mo
494.918 22.9588 li
490.676 22.9588 mo
494.918 18.7168 li
@
492.835 17.8378 mo
492.835 23.8378 li
489.835 20.8378 mo
495.835 20.8378 li
490.714 18.7168 mo
494.957 22.9588 li
490.714 22.9588 mo
494.957 18.7168 li
@
492.883 17.8378 mo
492.883 23.8378 li
489.883 20.8378 mo
495.883 20.8378 li
490.762 18.7168 mo
495.004 22.9588 li
490.762 22.9588 mo
495.004 18.7168 li
@
492.912 17.8378 mo
492.912 23.8378 li
489.912 20.8378 mo
495.912 20.8378 li
490.791 18.7168 mo
495.033 22.9588 li
490.791 22.9588 mo
495.033 18.7168 li
@
492.946 17.8378 mo
492.946 23.8378 li
489.946 20.8378 mo
495.946 20.8378 li
490.826 18.7168 mo
495.068 22.9588 li
490.826 22.9588 mo
495.068 18.7168 li
@
492.982 17.8378 mo
492.982 23.8378 li
489.982 20.8378 mo
495.982 20.8378 li
490.861 18.7168 mo
495.103 22.9588 li
490.861 22.9588 mo
495.103 18.7168 li
@
493.021 17.8378 mo
493.021 23.8378 li
490.021 20.8378 mo
496.021 20.8378 li
490.901 18.7168 mo
495.142 22.9588 li
490.901 22.9588 mo
495.142 18.7168 li
@
493.047 17.8378 mo
493.047 23.8378 li
490.047 20.8378 mo
496.047 20.8378 li
490.926 18.7168 mo
495.168 22.9588 li
490.926 22.9588 mo
495.168 18.7168 li
@
493.079 17.8378 mo
493.079 23.8378 li
490.079 20.8378 mo
496.079 20.8378 li
490.958 18.7168 mo
495.201 22.9588 li
490.958 22.9588 mo
495.201 18.7168 li
@
493.103 17.8378 mo
493.103 23.8378 li
490.103 20.8378 mo
496.103 20.8378 li
490.982 18.7168 mo
495.224 22.9588 li
490.982 22.9588 mo
495.224 18.7168 li
@
493.123 17.8378 mo
493.123 23.8378 li
490.123 20.8378 mo
496.123 20.8378 li
491.003 18.7168 mo
495.245 22.9588 li
491.003 22.9588 mo
495.245 18.7168 li
@
493.151 17.8378 mo
493.151 23.8378 li
490.151 20.8378 mo
496.151 20.8378 li
491.029 18.7168 mo
495.271 22.9588 li
491.029 22.9588 mo
495.271 18.7168 li
@
493.172 17.8378 mo
493.172 23.8378 li
490.172 20.8378 mo
496.172 20.8378 li
491.05 18.7168 mo
495.292 22.9588 li
491.05 22.9588 mo
495.292 18.7168 li
@
493.19 17.8378 mo
493.19 23.8378 li
490.19 20.8378 mo
496.19 20.8378 li
491.069 18.7168 mo
495.311 22.9588 li
491.069 22.9588 mo
495.311 18.7168 li
@
493.206 17.8378 mo
493.206 23.8378 li
490.206 20.8378 mo
496.206 20.8378 li
491.085 18.7168 mo
495.328 22.9588 li
491.085 22.9588 mo
495.328 18.7168 li
@
493.224 17.8378 mo
493.224 23.8378 li
490.224 20.8378 mo
496.224 20.8378 li
491.103 18.7168 mo
495.345 22.9588 li
491.103 22.9588 mo
495.345 18.7168 li
@
493.237 17.8378 mo
493.237 23.8378 li
490.237 20.8378 mo
496.237 20.8378 li
491.116 18.7168 mo
495.358 22.9588 li
491.116 22.9588 mo
495.358 18.7168 li
@
493.249 17.8378 mo
493.249 23.8378 li
490.249 20.8378 mo
496.249 20.8378 li
491.128 18.7168 mo
495.37 22.9588 li
491.128 22.9588 mo
495.37 18.7168 li
@
493.26 17.8378 mo
493.26 23.8378 li
490.26 20.8378 mo
496.26 20.8378 li
491.139 18.7168 mo
495.38 22.9588 li
491.139 22.9588 mo
495.38 18.7168 li
@
493.269 17.8378 mo
493.269 23.8378 li
490.269 20.8378 mo
496.269 20.8378 li
491.148 18.7168 mo
495.391 22.9588 li
491.148 22.9588 mo
495.391 18.7168 li
@
493.278 17.8378 mo
493.278 23.8378 li
490.278 20.8378 mo
496.278 20.8378 li
491.157 18.7168 mo
495.399 22.9588 li
491.157 22.9588 mo
495.399 18.7168 li
@
493.286 17.8378 mo
493.286 23.8378 li
490.286 20.8378 mo
496.286 20.8378 li
491.165 18.7168 mo
495.407 22.9588 li
491.165 22.9588 mo
495.407 18.7168 li
@
493.289 17.8378 mo
493.289 23.8378 li
490.289 20.8378 mo
496.289 20.8378 li
491.168 18.7168 mo
495.41 22.9588 li
491.168 22.9588 mo
495.41 18.7168 li
@
493.3 17.8378 mo
493.3 23.8378 li
490.3 20.8378 mo
496.3 20.8378 li
491.179 18.7168 mo
495.422 22.9588 li
491.179 22.9588 mo
495.422 18.7168 li
@
493.303 17.8378 mo
493.303 23.8378 li
490.303 20.8378 mo
496.303 20.8378 li
491.182 18.7168 mo
495.424 22.9588 li
491.182 22.9588 mo
495.424 18.7168 li
@
493.309 17.8378 mo
493.309 23.8378 li
490.309 20.8378 mo
496.309 20.8378 li
491.188 18.7168 mo
495.43 22.9588 li
491.188 22.9588 mo
495.43 18.7168 li
@
493.314 17.8378 mo
493.314 23.8378 li
490.314 20.8378 mo
496.314 20.8378 li
491.193 18.7168 mo
495.435 22.9588 li
491.193 22.9588 mo
495.435 18.7168 li
@
493.318 17.8378 mo
493.318 23.8378 li
490.318 20.8378 mo
496.318 20.8378 li
491.196 18.7168 mo
495.438 22.9588 li
491.196 22.9588 mo
495.438 18.7168 li
@
493.32 17.8378 mo
493.32 23.8378 li
490.32 20.8378 mo
496.32 20.8378 li
491.199 18.7168 mo
495.441 22.9588 li
491.199 22.9588 mo
495.441 18.7168 li
@
493.322 17.8378 mo
493.322 23.8378 li
490.322 20.8378 mo
496.322 20.8378 li
491.201 18.7168 mo
495.443 22.9588 li
491.201 22.9588 mo
495.443 18.7168 li
@
493.326 17.8378 mo
493.326 23.8378 li
490.326 20.8378 mo
496.326 20.8378 li
491.205 18.7168 mo
495.446 22.9588 li
491.205 22.9588 mo
495.446 18.7168 li
@
493.329 17.8378 mo
493.329 23.8378 li
490.329 20.8378 mo
496.329 20.8378 li
491.208 18.7168 mo
495.451 22.9588 li
491.208 22.9588 mo
495.451 18.7168 li
@
493.331 17.8378 mo
493.331 23.8378 li
490.331 20.8378 mo
496.331 20.8378 li
491.21 18.7168 mo
495.453 22.9588 li
491.21 22.9588 mo
495.453 18.7168 li
@
493.333 17.8378 mo
493.333 23.8378 li
490.333 20.8378 mo
496.333 20.8378 li
491.212 18.7168 mo
495.455 22.9588 li
491.212 22.9588 mo
495.455 18.7168 li
@
493.335 17.8378 mo
493.335 23.8378 li
490.335 20.8378 mo
496.335 20.8378 li
491.214 18.7168 mo
495.457 22.9588 li
491.214 22.9588 mo
495.457 18.7168 li
@
493.337 17.8378 mo
493.337 23.8378 li
490.337 20.8378 mo
496.337 20.8378 li
491.216 18.7168 mo
495.458 22.9588 li
491.216 22.9588 mo
495.458 18.7168 li
@
493.339 17.8378 mo
493.339 23.8378 li
490.339 20.8378 mo
496.339 20.8378 li
491.217 18.7168 mo
495.46 22.9588 li
491.217 22.9588 mo
495.46 18.7168 li
@
493.341 17.8378 mo
493.341 23.8378 li
490.341 20.8378 mo
496.341 20.8378 li
491.219 18.7168 mo
495.462 22.9588 li
491.219 22.9588 mo
495.462 18.7168 li
@
493.343 17.8378 mo
493.343 23.8378 li
490.343 20.8378 mo
496.343 20.8378 li
491.222 18.7168 mo
495.464 22.9588 li
491.222 22.9588 mo
495.464 18.7168 li
@
493.344 17.8378 mo
493.344 23.8378 li
490.344 20.8378 mo
496.344 20.8378 li
491.224 18.7168 mo
495.465 22.9588 li
491.224 22.9588 mo
495.465 18.7168 li
@
493.345 17.8378 mo
493.345 23.8378 li
490.345 20.8378 mo
496.345 20.8378 li
491.224 18.7168 mo
495.466 22.9588 li
491.224 22.9588 mo
495.466 18.7168 li
@
493.346 17.8378 mo
493.346 23.8378 li
490.346 20.8378 mo
496.346 20.8378 li
491.224 18.7168 mo
495.467 22.9588 li
491.224 22.9588 mo
495.467 18.7168 li
@
493.346 17.8378 mo
493.346 23.8378 li
490.346 20.8378 mo
496.346 20.8378 li
491.225 18.7168 mo
495.467 22.9588 li
491.225 22.9588 mo
495.467 18.7168 li
@
493.347 17.8378 mo
493.347 23.8378 li
490.347 20.8378 mo
496.347 20.8378 li
491.226 18.7168 mo
495.468 22.9588 li
491.226 22.9588 mo
495.468 18.7168 li
@
493.347 17.8378 mo
493.347 23.8378 li
490.347 20.8378 mo
496.347 20.8378 li
491.226 18.7168 mo
495.468 22.9588 li
491.226 22.9588 mo
495.468 18.7168 li
@
493.349 17.8378 mo
493.349 23.8378 li
490.349 20.8378 mo
496.349 20.8378 li
491.226 18.7168 mo
495.468 22.9588 li
491.226 22.9588 mo
495.468 18.7168 li
@
493.349 17.8378 mo
493.349 23.8378 li
490.349 20.8378 mo
496.349 20.8378 li
491.228 18.7168 mo
495.47 22.9588 li
491.228 22.9588 mo
495.47 18.7168 li
@
493.35 17.8378 mo
493.35 23.8378 li
490.35 20.8378 mo
496.35 20.8378 li
491.229 18.7168 mo
495.471 22.9588 li
491.229 22.9588 mo
495.471 18.7168 li
@
493.35 17.8378 mo
493.35 23.8378 li
490.35 20.8378 mo
496.35 20.8378 li
491.229 18.7168 mo
495.471 22.9588 li
491.229 22.9588 mo
495.471 18.7168 li
@
493.351 17.8378 mo
493.351 23.8378 li
490.351 20.8378 mo
496.351 20.8378 li
491.23 18.7168 mo
495.471 22.9588 li
491.23 22.9588 mo
495.471 18.7168 li
@
493.352 17.8378 mo
493.352 23.8378 li
490.352 20.8378 mo
496.352 20.8378 li
491.231 18.7168 mo
495.474 22.9588 li
491.231 22.9588 mo
495.474 18.7168 li
@
493.353 17.8378 mo
493.353 23.8378 li
490.353 20.8378 mo
496.353 20.8378 li
491.232 18.7168 mo
495.474 22.9588 li
491.232 22.9588 mo
495.474 18.7168 li
@
493.353 17.8378 mo
493.353 23.8378 li
490.353 20.8378 mo
496.353 20.8378 li
491.232 18.7168 mo
495.474 22.9588 li
491.232 22.9588 mo
495.474 18.7168 li
@
493.353 17.8378 mo
493.353 23.8378 li
490.353 20.8378 mo
496.353 20.8378 li
491.232 18.7168 mo
495.474 22.9588 li
491.232 22.9588 mo
495.474 18.7168 li
@
493.353 17.8378 mo
493.353 23.8378 li
490.353 20.8378 mo
496.353 20.8378 li
491.232 18.7168 mo
495.474 22.9588 li
491.232 22.9588 mo
495.474 18.7168 li
@
493.353 17.8378 mo
493.353 23.8378 li
490.353 20.8378 mo
496.353 20.8378 li
491.232 18.7168 mo
495.474 22.9588 li
491.232 22.9588 mo
495.474 18.7168 li
@
57.6035 359.088 mo
480.603 359.088 li
480.603 223.338 li
57.6035 223.338 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DGOFTG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/C <1C60D8A8C9B6079FE1CE316282F0E84E7EAE56817E527B1A2FBA7D6E6E3E
84761CC128BB54A99A2A93B5D172E1531D29A45A5EC52E28A860DB78AEF5044D
D841ADA187A0971E5C6028FECC99F95A89CDEF60FF9739318C6CDCFD940AFB97
77EC1EB041B6AC82C7B827BCFC6CB4C10A94B6280806B13F83> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/T <1C60D8A8C9B7D8BE6A40C97BBF661CB0B8222F950E511FEAA4C1C13E5F94
78F30E1367384EBB0E379956ACFD> |-
/V <1C60D8A8C9B64EDF88209F74DE48C31924050FF0040AA5A034E0BA481252
B18875F38C0C76ED1A659C37AD61> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DGOFTG+Helvetica /Encoding get
dup 37 /percent put
dup 58 /colon put
dup 59 /semicolon put
dup 67 /C put
dup 69 /E put
dup 84 /T put
dup 86 /V put
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/DGOFTG+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/.notdef /E /F /G 10{/.notdef}rp /R /.notdef /T 
/.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 
/.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t /u 
138{/.notdef}rp]
DGOFTG+Helvetica nf
DGOFTG+Helvetica*1 [21.8482 0 0 -21.8482 0 0 ]msf
92.8535 245.838 mo
(TCCV [18]; EER: 18.41%)
[13.3491 15.7744 15.7744 14.5729 6.07381 6.07379 12.1476 12.1476 6.07381 6.07381 6.07379 14.5729 
14.5729 15.7744 6.07379 6.07379 12.1476 12.1476 6.07379 12.1476 12.1476 0 ]xsh
1 lj
60.6035 237.963 mo
90.6035 237.963 li
.517266 0 .125643 0 cmyk
@
75.6035 235.463 mo
76.9845 235.463 78.1035 236.582 78.1035 237.963 cv
78.1035 239.344 76.9845 240.463 75.6035 240.463 cv
74.2225 240.463 73.1035 239.344 73.1035 237.963 cv
73.1035 236.582 74.2225 235.463 75.6035 235.463 cv
cp
75.6035 234.463 mo
73.6705 234.463 72.1031 236.03 72.1031 237.963 cv
72.1031 239.896 73.6705 241.463 75.6035 241.463 cv
77.5365 241.463 79.1035 239.896 79.1035 237.963 cv
79.1035 236.03 77.5365 234.463 75.6035 234.463 cv
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DGOFTG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/N <1C60D8A8C9B6079F1E49523970A7CE614BC1CB2AC135B49A6B33564AFCCA
E69F17C685A8629597666C835EDDD27239AEF884B91696774A2A> |-
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B
61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1
E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36
DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B
7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-
/f <1C60D8A8C9B854D08882A1CDE4CC8CF82C721397EF3C1B7F275F9E0F93B7
3057EE87F13D1A76347F24278F0AAB6C40024DD0CC30E14D035B17B8421125C0
8D6E5ECF0FD989FD11DB950870FC66> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DGOFTG+Helvetica /Encoding get
dup 78 /N put
dup 83 /S put
dup 102 /f put
pop
%ADOEndSubsetFont
/DGOFTG+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/.notdef /E /F /G 6{/.notdef}rp /N 3{/.notdef}rp /R 
/S /T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 
3{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n /.notdef /p 2{/.notdef}rp 
/s /t /u 138{/.notdef}rp]
DGOFTG+Helvetica nf
DGOFTG+Helvetica*1 [21.8482 0 0 -21.8482 0 0 ]msf
92.8535 272.463 mo
(EfficientNetV2-S [17]; EER: 48.72%)
[14.5729 6.07381 6.07379 4.8503 10.9241 4.85031 12.1476 12.1476 6.07381 15.7744 12.1476 6.07379 
14.5729 12.1476 7.2753 14.5729 6.07379 6.07379 12.1476 12.1476 6.07379 6.07379 6.07379 14.5729 
14.5729 15.7744 6.07379 6.07379 12.1476 12.1476 6.07379 12.1476 12.1476 0 ]xsh
60.6035 264.588 mo
90.6035 264.588 li
.265019 .809232 0 0 cmyk
@
0 lj
73.3535 266.838 mo
77.8535 266.838 li
77.8535 262.338 li
73.3535 262.338 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DGOFTG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/K <1C60D8A8C9B64EDF88209F74DE48C33B4B0B93D0D9C0FD0B4C3ED394623E
3A80B45D329FC06BB55248F78872AA55981B9FC8E5ADA631A9747A6CEB10FCCD
65D75EFC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DGOFTG+Helvetica /Encoding get
dup 75 /K put
pop
%ADOEndSubsetFont
/DGOFTG+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/.notdef /E /F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 
3{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e 
/f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /.notdef 
/p 2{/.notdef}rp /s /t /u 138{/.notdef}rp]
DGOFTG+Helvetica nf
DGOFTG+Helvetica*1 [21.8482 0 0 -21.8482 0 0 ]msf
92.8535 299.088 mo
(FKNet [3]; EER: 49.24%)
[13.3491 14.5729 15.7744 12.1476 6.07379 6.07379 6.07381 12.1476 6.07379 6.07379 6.07381 14.5729 
14.5729 15.7744 6.07379 6.07379 12.1476 12.1476 6.07379 12.1476 12.1476 0 ]xsh
1 lj
60.6035 291.213 mo
90.6035 291.213 li
@
0 lj
75.6035 288.213 mo
75.6035 294.213 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DGOFTG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E2
2FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D216
1CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361
A4431D76AF6F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DGOFTG+Helvetica /Encoding get
dup 79 /O put
dup 114 /r put
pop
%ADOEndSubsetFont
/DGOFTG+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/.notdef /E /F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 
/O 2{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp 
/bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef 
/e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/.notdef /p /.notdef /r /s /t /u 138{/.notdef}rp]
DGOFTG+Helvetica nf
DGOFTG+Helvetica*1 [21.8482 0 0 -21.8482 0 0 ]msf
92.8535 325.713 mo
(Ours; E)sh
166.919 325.713 mo
(ER: 16.65%)
[14.5729 15.7744 6.07381 6.07381 12.1476 12.1476 6.07379 12.1476 12.1476 0 ]xsh
1 lj
60.6035 317.838 mo
90.6035 317.838 li
0 .990631 1 .000396735 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
DGOFTG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/v <1C60D8A8C9B7A73DC54C6E6FD58E3FF02EC0039EA78A08B0B838392D2447
0C9B580A1092E3692A4C20563FB5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DGOFTG+Helvetica /Encoding get
dup 68 /D put
dup 111 /o put
dup 118 /v put
pop
%ADOEndSubsetFont
/DGOFTG+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/D /E /F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 
/O 2{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp 
/bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef 
/e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /s /t /u /v 
137{/.notdef}rp]
DGOFTG+Helvetica nf
DGOFTG+Helvetica*1 [21.8482 0 0 -21.8482 0 0 ]msf
92.8535 352.338 mo
(DefConvNet [45]; EER: 39.31%)
[15.7744 12.1476 6.07379 15.7744 12.1476 12.1476 10.9241 15.7744 12.1476 6.07379 6.07381 6.07379 
12.1476 12.1476 6.07382 6.07379 6.07379 14.5729 14.5729 15.7744 6.07382 6.07379 12.1476 12.1476 
6.07379 12.1476 12.1476 0 ]xsh
60.6035 344.463 mo
90.6035 344.463 li
.895628 .7673 0 0 cmyk
@
0 lj
75.6035 341.463 mo
75.6035 347.463 li
72.6035 344.463 mo
78.6035 344.463 li
73.4825 342.342 mo
77.7244 346.584 li
73.4825 346.584 mo
77.7244 342.342 li
@
57.6035 359.088 mo
480.603 359.088 li
480.603 223.338 li
57.6035 223.338 li
cp
1 /0 /CSD get_res sepcs
.851074 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/DGOFTH+Helvetica-Bold*1 uf
/DGOFTH+Helvetica-Bold uf
/JAAAAA+Helvetica-Bold uf
/DGOFTG+Helvetica*1 uf
/DGOFTG+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
