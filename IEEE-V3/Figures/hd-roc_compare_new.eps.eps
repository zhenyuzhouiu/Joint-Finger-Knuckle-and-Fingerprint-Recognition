%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: hd-roc_compare_new.eps-27650.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/14/2022, 5:29:53 PM
%%BoundingBox: -1 0 404 292
%%HiResBoundingBox: 0 0 403.1918 291.0281
%%CropBox: 0 0 403.1918 291.0281
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1014 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-14T17:28:50+08:00"
   xmp:CreateDate="2022-08-14T17:28:50+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.9.0.1467703 \(R2020b\). Operating System: Linux)"
   xmpMM:DocumentID="uuid:014bed95-1e0f-11ed-0000-baaa1be0c465"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/zhenyuzhou/Desktop/finger-knuckle/deep-learning/codekevin/fknet/test/version-2/hd/hd-roc_compare_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -291.028 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 291.028 li
403.192 291.028 li
403.192 0 li
cp
clp
-15.355 291.028 mo
434.645 291.028 li
434.645 -2.97192 li
-15.355 -2.97192 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
-15.355 291.028 mo
434.645 291.028 li
434.645 -2.97192 li
-15.355 -2.97192 li
cp
f
43.145 251.278 mo
391.895 251.278 li
391.895 18.7781 li
43.145 18.7781 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
43.52 251.278 mo
43.52 18.7781 li
1 /0 /CSD get_res sepcs
.224609 sep
@
64.4938 251.278 mo
64.4938 18.7781 li
@
76.763 251.278 mo
76.763 18.7781 li
@
85.468 251.278 mo
85.468 18.7781 li
@
92.22 251.278 mo
92.22 18.7781 li
@
97.738 251.278 mo
97.738 18.7781 li
@
102.402 251.278 mo
102.402 18.7781 li
@
106.443 251.278 mo
106.443 18.7781 li
@
110.007 251.278 mo
110.007 18.7781 li
@
113.195 251.278 mo
113.195 18.7781 li
@
134.17 251.278 mo
134.17 18.7781 li
@
146.438 251.278 mo
146.438 18.7781 li
@
155.143 251.278 mo
155.143 18.7781 li
@
161.895 251.278 mo
161.895 18.7781 li
@
167.413 251.278 mo
167.413 18.7781 li
@
172.077 251.278 mo
172.077 18.7781 li
@
176.118 251.278 mo
176.118 18.7781 li
@
179.682 251.278 mo
179.682 18.7781 li
@
182.87 251.278 mo
182.87 18.7781 li
@
203.845 251.278 mo
203.845 18.7781 li
@
216.113 251.278 mo
216.113 18.7781 li
@
224.818 251.278 mo
224.818 18.7781 li
@
231.57 251.278 mo
231.57 18.7781 li
@
237.088 251.278 mo
237.088 18.7781 li
@
241.752 251.278 mo
241.752 18.7781 li
@
245.793 251.278 mo
245.793 18.7781 li
@
249.357 251.278 mo
249.357 18.7781 li
@
273.52 251.278 mo
273.52 18.7781 li
@
285.789 251.278 mo
285.789 18.7781 li
@
294.493 251.278 mo
294.493 18.7781 li
@
301.245 251.278 mo
301.245 18.7781 li
@
306.763 251.278 mo
306.763 18.7781 li
@
311.427 251.278 mo
311.427 18.7781 li
@
315.468 251.278 mo
315.468 18.7781 li
@
319.032 251.278 mo
319.032 18.7781 li
@
322.22 251.278 mo
322.22 18.7781 li
@
343.195 251.278 mo
343.195 18.7781 li
@
355.464 251.278 mo
355.464 18.7781 li
@
364.168 251.278 mo
364.168 18.7781 li
@
370.92 251.278 mo
370.92 18.7781 li
@
376.438 251.278 mo
376.438 18.7781 li
@
381.102 251.278 mo
381.102 18.7781 li
@
385.143 251.278 mo
385.143 18.7781 li
@
388.707 251.278 mo
388.707 18.7781 li
@
1 lj
[] 0 dsh
113.195 251.278 mo
113.195 18.7781 li
1 /0 /CSD get_res sepcs
.126953 sep
@
252.545 251.278 mo
252.545 18.7781 li
@
391.895 251.278 mo
391.895 18.7781 li
@
391.895 251.278 mo
43.145 251.278 li
@
391.895 218.064 mo
43.145 218.064 li
@
391.895 184.85 mo
43.145 184.85 li
@
391.895 151.635 mo
43.145 151.635 li
@
391.895 118.421 mo
43.145 118.421 li
@
391.895 85.2061 mo
43.145 85.2061 li
@
391.895 51.9921 mo
43.145 51.9921 li
@
391.895 18.7781 mo
43.145 18.7781 li
@
2 lc
43.145 251.278 mo
391.895 251.278 li
1 /0 /CSD get_res sepcs
.851074 sep
@
43.145 18.7781 mo
391.895 18.7781 li
@
113.195 251.278 mo
113.195 247.791 li
@
252.545 251.278 mo
252.545 247.791 li
@
391.895 251.278 mo
391.895 247.791 li
@
113.195 18.7781 mo
113.195 22.2651 li
@
252.545 18.7781 mo
252.545 22.2651 li
@
391.895 18.7781 mo
391.895 22.2651 li
@
43.52 251.278 mo
43.52 249.534 li
@
64.4938 251.278 mo
64.4938 249.534 li
@
76.763 251.278 mo
76.763 249.534 li
@
85.468 251.278 mo
85.468 249.534 li
@
92.22 251.278 mo
92.22 249.534 li
@
97.738 251.278 mo
97.738 249.534 li
@
102.402 251.278 mo
102.402 249.534 li
@
106.443 251.278 mo
106.443 249.534 li
@
110.007 251.278 mo
110.007 249.534 li
@
113.195 251.278 mo
113.195 249.534 li
@
113.195 251.278 mo
113.195 249.534 li
@
134.17 251.278 mo
134.17 249.534 li
@
146.438 251.278 mo
146.438 249.534 li
@
155.143 251.278 mo
155.143 249.534 li
@
161.895 251.278 mo
161.895 249.534 li
@
167.413 251.278 mo
167.413 249.534 li
@
172.077 251.278 mo
172.077 249.534 li
@
176.118 251.278 mo
176.118 249.534 li
@
179.682 251.278 mo
179.682 249.534 li
@
182.87 251.278 mo
182.87 249.534 li
@
203.845 251.278 mo
203.845 249.534 li
@
216.113 251.278 mo
216.113 249.534 li
@
224.818 251.278 mo
224.818 249.534 li
@
231.57 251.278 mo
231.57 249.534 li
@
237.088 251.278 mo
237.088 249.534 li
@
241.752 251.278 mo
241.752 249.534 li
@
245.793 251.278 mo
245.793 249.534 li
@
249.357 251.278 mo
249.357 249.534 li
@
252.545 251.278 mo
252.545 249.534 li
@
273.52 251.278 mo
273.52 249.534 li
@
285.789 251.278 mo
285.789 249.534 li
@
294.493 251.278 mo
294.493 249.534 li
@
301.245 251.278 mo
301.245 249.534 li
@
306.763 251.278 mo
306.763 249.534 li
@
311.427 251.278 mo
311.427 249.534 li
@
315.468 251.278 mo
315.468 249.534 li
@
319.032 251.278 mo
319.032 249.534 li
@
322.22 251.278 mo
322.22 249.534 li
@
343.195 251.278 mo
343.195 249.534 li
@
355.464 251.278 mo
355.464 249.534 li
@
364.168 251.278 mo
364.168 249.534 li
@
370.92 251.278 mo
370.92 249.534 li
@
376.438 251.278 mo
376.438 249.534 li
@
381.102 251.278 mo
381.102 249.534 li
@
385.143 251.278 mo
385.143 249.534 li
@
388.707 251.278 mo
388.707 249.534 li
@
391.895 251.278 mo
391.895 249.534 li
@
43.52 18.7781 mo
43.52 20.5221 li
@
64.4938 18.7781 mo
64.4938 20.5221 li
@
76.763 18.7781 mo
76.763 20.5221 li
@
85.468 18.7781 mo
85.468 20.5221 li
@
92.22 18.7781 mo
92.22 20.5221 li
@
97.738 18.7781 mo
97.738 20.5221 li
@
102.402 18.7781 mo
102.402 20.5221 li
@
106.443 18.7781 mo
106.443 20.5221 li
@
110.007 18.7781 mo
110.007 20.5221 li
@
113.195 18.7781 mo
113.195 20.5221 li
@
113.195 18.7781 mo
113.195 20.5221 li
@
134.17 18.7781 mo
134.17 20.5221 li
@
146.438 18.7781 mo
146.438 20.5221 li
@
155.143 18.7781 mo
155.143 20.5221 li
@
161.895 18.7781 mo
161.895 20.5221 li
@
167.413 18.7781 mo
167.413 20.5221 li
@
172.077 18.7781 mo
172.077 20.5221 li
@
176.118 18.7781 mo
176.118 20.5221 li
@
179.682 18.7781 mo
179.682 20.5221 li
@
182.87 18.7781 mo
182.87 20.5221 li
@
203.845 18.7781 mo
203.845 20.5221 li
@
216.113 18.7781 mo
216.113 20.5221 li
@
224.818 18.7781 mo
224.818 20.5221 li
@
231.57 18.7781 mo
231.57 20.5221 li
@
237.088 18.7781 mo
237.088 20.5221 li
@
241.752 18.7781 mo
241.752 20.5221 li
@
245.793 18.7781 mo
245.793 20.5221 li
@
249.357 18.7781 mo
249.357 20.5221 li
@
252.545 18.7781 mo
252.545 20.5221 li
@
273.52 18.7781 mo
273.52 20.5221 li
@
285.789 18.7781 mo
285.789 20.5221 li
@
294.493 18.7781 mo
294.493 20.5221 li
@
301.245 18.7781 mo
301.245 20.5221 li
@
306.763 18.7781 mo
306.763 20.5221 li
@
311.427 18.7781 mo
311.427 20.5221 li
@
315.468 18.7781 mo
315.468 20.5221 li
@
319.032 18.7781 mo
319.032 20.5221 li
@
322.22 18.7781 mo
322.22 20.5221 li
@
343.195 18.7781 mo
343.195 20.5221 li
@
355.464 18.7781 mo
355.464 20.5221 li
@
364.168 18.7781 mo
364.168 20.5221 li
@
370.92 18.7781 mo
370.92 20.5221 li
@
376.438 18.7781 mo
376.438 20.5221 li
@
381.102 18.7781 mo
381.102 20.5221 li
@
385.143 18.7781 mo
385.143 20.5221 li
@
388.707 18.7781 mo
388.707 20.5221 li
@
391.895 18.7781 mo
391.895 20.5221 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BRZMMU+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/BRZMMU+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/.notdef /four 12{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t 139{/.notdef}rp]
BRZMMU+Helvetica nf
BRZMMU+Helvetica*1 [12 0 0 -12 0 0 ]msf
100.145 270.778 mo
(10)
[6.672 0 ]xsh
BRZMMU+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
115.895 264.778 mo
(-4)
[3.19673 0 ]xsh
BRZMMU+Helvetica*1 [12 0 0 -12 0 0 ]msf
239.645 270.778 mo
(10)
[6.672 0 ]xsh
BRZMMU+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
255.395 264.778 mo
(-2)
[3.19672 0 ]xsh
BRZMMU+Helvetica*1 [12 0 0 -12 0 0 ]msf
380.645 270.778 mo
(10)
[6.672 0 ]xsh
BRZMMU+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
396.395 264.778 mo
(0)sh
BRZMMU+Helvetica*1 [13.2 0 0 -13.2 0 0 ]msf
142.145 287.428 mo
(Fal)sh
160.48 287.428 mo
(se Acceptance R)sh
260.259 287.428 mo
(ate)sh
43.145 251.278 mo
43.145 18.7781 li
@
391.895 251.278 mo
391.895 18.7781 li
@
43.145 251.278 mo
46.6325 251.278 li
@
43.145 218.064 mo
46.6325 218.064 li
@
43.145 184.85 mo
46.6325 184.85 li
@
43.145 151.635 mo
46.6325 151.635 li
@
43.145 118.421 mo
46.6325 118.421 li
@
43.145 85.2061 mo
46.6325 85.2061 li
@
43.145 51.9921 mo
46.6325 51.9921 li
@
43.145 18.7781 mo
46.6325 18.7781 li
@
391.895 251.278 mo
388.408 251.278 li
@
391.895 218.064 mo
388.408 218.064 li
@
391.895 184.85 mo
388.408 184.85 li
@
391.895 151.635 mo
388.408 151.635 li
@
391.895 118.421 mo
388.408 118.421 li
@
391.895 85.2061 mo
388.408 85.2061 li
@
391.895 51.9921 mo
388.408 51.9921 li
@
391.895 18.7781 mo
388.408 18.7781 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
BRZMMU+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/three <1C60D8A8C9B7EF32A838F0ACFF5B8449798AA87BFBD53D82B03D3CB3
518057514FD9A1F8F21B3AE039400F5467F12744C48D673848B82F0788F59EE7
19F1EC6F8AD25ABC3F1070D64809594FC2EE6F6A3F6097FBEF7DF6B8E5897699
5550DA77ACEEFB2D0884A5CA5B72902611A09DA2AE5529EE1EF6102D305D5B77
D26CBF63E1168518DB43AEC0EBF32497358C4B2A8BF7DA85CDEC78661D96CDFF
C73DA426D2C4> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BRZMMU+Helvetica /Encoding get
dup 46 /period put
dup 51 /three put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/BRZMMU+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /three /four /five /six /seven /eight /nine 
7{/.notdef}rp /A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
BRZMMU+Helvetica nf
BRZMMU+Helvetica*1 [12 0 0 -12 0 0 ]msf
19.245 255.403 mo
(0.3)sh
19.245 222.189 mo
(0.4)sh
19.245 188.974 mo
(0.5)sh
19.245 155.76 mo
(0.6)sh
19.245 122.546 mo
(0.7)sh
19.245 89.3314 mo
(0.8)sh
19.245 56.1173 mo
(0.9)sh
30.495 22.9028 mo
(1)sh
BRZMMU+Helvetica*1 [0 -13.2 -13.2 0 0 0 ]msf
12.495 220.903 mo
(Genuine Acceptance Rate)
[-10.2696 -7.3392 -7.3392 -7.33919 -2.9304 -7.3392 -7.33919 -3.6696 -8.8045 -6.59999 -6.59999 -7.3392 
-7.3392 -3.66959 -7.3392 -7.3392 -6.60001 -7.33919 -3.6696 -9.5304 -7.3392 -3.6696 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BRZMMV+Helvetica-Bold /JAAAAA+Helvetica-Bold findfont ct_VMDictPut
/BRZMMV+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
BRZMMV+Helvetica-Bold nf
BRZMMV+Helvetica-Bold*1 [13.2 0 0 -13.2 0 0 ]msf
87.395 12.5531 mo
(Receiver Operating Characteristics)
[9.5304 7.3392 7.3392 7.3392 3.6696 7.3392 7.33919 5.1349 3.6696 10.2696 8.06511 7.33919 
5.1349 7.3392 4.39549 3.6696 8.06509 8.06509 3.66962 9.5304 8.06509 7.3392 5.13489 7.3392 
7.3392 4.39551 7.33917 5.13492 3.66959 7.3392 4.39551 3.66959 7.3392 0 ]xsh
0 lc
43.1036 127.826 mo
81.9059 112.076 li
112.363 103.33 li
147.105 94.4671 li
182.404 91.3171 li
217.502 87.1191 li
252.616 78.7231 li
287.379 62.5121 li
322.217 39.5371 li
357.058 23.5591 li
391.894 18.7781 li
@
0 lj
81.9055 109.076 mo
81.9055 115.076 li
@
112.363 100.33 mo
112.363 106.33 li
@
147.104 91.4661 mo
147.104 97.4661 li
@
182.404 88.3171 mo
182.404 94.3171 li
@
217.502 84.1191 mo
217.502 90.1191 li
@
252.616 75.7221 mo
252.616 81.7221 li
@
287.38 59.5121 mo
287.38 65.5121 li
@
322.217 36.5371 mo
322.217 42.5371 li
@
357.058 20.5601 mo
357.058 26.5601 li
@
391.894 15.7781 mo
391.894 21.7781 li
@
1 lj
43.1036 242.349 mo
44.6212 240.595 li
44.6212 229.283 li
46.0286 224.851 li
52.2259 220.536 li
54.3884 216.571 li
54.3884 212.606 li
56.4063 209.691 li
56.4063 204.442 li
58.2981 198.844 li
58.2981 194.412 li
59.2016 191.846 li
62.5669 188.814 li
63.3528 185.666 li
63.3528 183.683 li
63.3528 179.485 li
64.8665 177.035 li
64.8665 173.654 li
67.0032 170.388 li
68.9989 167.006 li
68.9989 162.808 li
68.9989 160.592 li
68.9989 157.21 li
71.4712 154.527 li
71.4712 151.146 li
72.0583 148.346 li
72.6348 146.714 li
72.6348 144.614 li
73.7555 142.165 li
74.8364 140.299 li
76.3888 136.451 li
76.3888 134.702 li
76.3888 133.185 li
76.8884 130.27 li
78.8106 126.421 li
81.4821 124.555 li
82.3227 122.922 li
82.3227 120.473 li
83.1411 117.674 li
84.713 114.876 li
87.632 113.126 li
88.32 111.843 li
89.322 110.677 li
89.65 108.111 li
89.65 105.429 li
91.234 103.913 li
93.609 101.347 li
94.73 99.3651 li
96.854 96.9151 li
97.614 95.6331 li
98.598 95.1661 li
100.247 93.7671 li
102.027 92.1341 li
103.912 91.2011 li
105.107 89.9191 li
106.068 88.7521 li
107.545 87.9351 li
107.902 85.9531 li
109.632 84.2031 li
110.132 83.1541 li
111.898 81.7551 li
113.861 80.8221 li
114.152 79.7721 li
114.152 78.7231 li
114.583 77.0901 li
116.114 76.3901 li
117.7 76.0401 li
118.463 74.8731 li
119.084 73.7071 li
121.221 72.7741 li
123.001 72.1921 li
123.643 70.4421 li
125.39 69.2761 li
126.179 68.1091 li
126.757 67.0601 li
128.065 66.0111 li
128.788 64.6111 li
130.774 64.1451 li
132.481 63.5611 li
134.02 62.6281 li
135.127 61.2291 li
135.7 60.5291 li
137.02 59.8291 li
138.155 59.4801 li
139.997 59.0131 li
140.847 58.3141 li
141.792 57.2641 li
142.593 56.9141 li
143.541 56.0971 li
144.511 55.5141 li
145.504 54.8151 li
146.663 54.3481 li
147.588 53.9981 li
148.063 52.3651 li
148.672 52.3651 li
149.312 51.5491 li
150.511 51.3161 li
151.369 50.8491 li
152.613 50.6161 li
153.652 50.0331 li
155.181 49.6831 li
157.063 49.2171 li
158.567 48.7501 li
159.584 48.2841 li
160.724 48.0511 li
162.561 47.3511 li
163.653 46.8841 li
164.652 46.6511 li
165.379 46.1851 li
166.297 46.0671 li
167.414 45.4851 li
168.418 45.1351 li
169.109 44.6681 li
169.692 44.3191 li
170.914 44.3191 li
171.572 43.8521 li
172.45 43.3851 li
173.281 42.6861 li
174.567 42.1031 li
175.781 41.7531 li
176.638 41.6371 li
177.47 41.2861 li
178.402 40.8201 li
179.458 40.7031 li
180.348 39.7711 li
181.402 39.3041 li
182.661 39.1871 li
183.579 39.0711 li
184.344 38.7211 li
185.324 38.6041 li
186.234 38.4871 li
187.207 38.1381 li
188.1 37.5541 li
188.894 37.4381 li
189.668 37.3211 li
190.873 37.0881 li
191.71 36.9711 li
192.644 36.6211 li
193.707 36.5051 li
194.47 36.2721 li
195.433 36.2721 li
196.327 36.1551 li
197.158 35.9211 li
198.103 35.6881 li
199.055 35.3391 li
199.806 34.9891 li
200.582 34.7551 li
201.282 34.5221 li
202.045 34.4061 li
202.866 34.0551 li
203.635 33.5891 li
204.569 33.5891 li
205.339 33.5891 li
206.118 33.2391 li
206.885 33.1231 li
207.83 33.0061 li
208.612 32.8891 li
209.468 32.7731 li
210.349 32.4231 li
211.292 32.3071 li
211.996 32.1891 li
212.818 32.0731 li
213.559 32.0731 li
214.483 32.0731 li
215.322 31.8401 li
215.979 31.4901 li
216.702 31.4901 li
217.535 31.3731 li
218.277 31.0231 li
218.987 31.0231 li
219.721 30.9071 li
220.519 30.9071 li
221.083 30.7901 li
221.842 30.4401 li
222.696 30.2071 li
223.471 29.8571 li
224.147 29.8571 li
224.786 29.7411 li
225.466 29.5081 li
226.218 29.3901 li
226.846 29.3901 li
227.529 29.2741 li
228.325 29.2741 li
229.036 29.2741 li
229.711 29.1571 li
230.47 29.1571 li
231.15 28.9241 li
231.792 28.9241 li
232.49 28.9241 li
233.227 28.8081 li
233.931 28.6911 li
234.563 28.6911 li
235.24 28.5741 li
235.84 28.4581 li
236.434 28.4581 li
237.104 28.4581 li
237.793 28.4581 li
238.395 28.2241 li
239.018 28.2241 li
239.615 28.2241 li
240.295 28.2241 li
240.955 28.2241 li
241.608 28.2241 li
242.282 28.2241 li
242.903 28.2241 li
243.455 28.2241 li
244.056 27.9911 li
244.681 27.8751 li
245.285 27.8751 li
245.887 27.8751 li
246.49 27.8751 li
247.083 27.8751 li
247.663 27.8751 li
248.259 27.8751 li
248.837 27.8751 li
249.353 27.7581 li
249.932 27.4081 li
250.534 27.4081 li
251.128 27.291 li
251.695 27.291 li
252.265 27.1751 li
252.847 27.0581 li
253.418 26.942 li
253.963 26.5921 li
254.565 26.5921 li
255.101 26.5921 li
255.646 26.4751 li
256.156 26.4751 li
256.705 26.3581 li
257.242 26.3581 li
257.774 26.3581 li
258.349 26.3581 li
258.898 26.3581 li
259.42 26.3581 li
259.993 26.3581 li
260.511 26.3581 li
261.031 26.1251 li
261.578 26.1251 li
262.108 26.1251 li
262.661 26.0091 li
263.181 25.8921 li
263.68 25.8921 li
264.216 25.8921 li
264.683 25.7761 li
265.198 25.7761 li
265.678 25.6581 li
266.199 25.5421 li
266.767 25.5421 li
267.272 25.5421 li
267.813 25.5421 li
268.294 25.4251 li
268.797 25.3091 li
269.268 24.9591 li
269.738 24.9591 li
270.25 24.9591 li
270.712 24.8421 li
271.209 24.8421 li
271.72 24.8421 li
272.225 24.7261 li
272.678 24.7261 li
273.163 24.7261 li
273.69 24.7261 li
274.183 24.7261 li
274.654 24.7261 li
275.116 24.6091 li
275.606 24.6091 li
276.06 24.4921 li
276.503 24.4921 li
276.921 24.3761 li
277.39 24.2591 li
277.875 24.2591 li
278.303 24.2591 li
278.751 24.1431 li
279.205 24.1431 li
279.645 24.0261 li
280.095 24.0261 li
280.517 24.0261 li
280.946 24.0261 li
281.39 24.0261 li
281.831 24.0261 li
282.275 24.0261 li
282.703 24.0261 li
283.144 23.9101 li
283.579 23.7921 li
284.015 23.7921 li
284.443 23.7921 li
284.867 23.6761 li
285.277 23.6761 li
285.691 23.6761 li
286.066 23.4431 li
286.449 23.4431 li
286.851 23.4431 li
287.236 23.4431 li
287.662 23.3261 li
288.069 23.3261 li
288.491 23.3261 li
288.884 23.2101 li
289.288 23.2101 li
289.669 23.2101 li
290.086 23.2101 li
290.494 23.2101 li
290.901 23.2101 li
291.306 23.2101 li
291.698 23.093 li
292.137 23.093 li
292.552 23.093 li
292.95 23.093 li
293.352 23.093 li
293.736 23.093 li
294.126 23.093 li
294.495 23.093 li
294.889 23.093 li
295.274 23.093 li
295.648 23.093 li
296.043 23.093 li
296.43 23.093 li
296.793 22.8601 li
297.186 22.8601 li
297.552 22.8601 li
297.927 22.8601 li
298.301 22.8601 li
298.651 22.7431 li
299.02 22.7431 li
299.379 22.7431 li
299.741 22.7431 li
300.12 22.7431 li
300.463 22.7431 li
300.838 22.7431 li
301.174 22.7431 li
301.543 22.7431 li
301.89 22.7431 li
302.233 22.7431 li
302.591 22.7431 li
302.95 22.7431 li
303.295 22.7431 li
303.648 22.7431 li
303.996 22.7431 li
304.34 22.7431 li
304.685 22.7431 li
305.025 22.7431 li
305.377 22.7431 li
305.709 22.7431 li
306.077 22.7431 li
306.421 22.7431 li
306.768 22.7431 li
307.075 22.7431 li
307.421 22.6261 li
307.747 22.6261 li
308.077 22.5101 li
308.397 22.5101 li
308.731 22.5101 li
309.046 22.5101 li
309.36 22.5101 li
309.691 22.5101 li
309.991 22.5101 li
310.327 22.5101 li
310.669 22.5101 li
310.996 22.5101 li
311.32 22.5101 li
311.654 22.3931 li
311.997 22.3931 li
312.318 22.3931 li
312.647 22.3931 li
312.963 22.3931 li
313.292 22.3931 li
313.616 22.3931 li
313.947 22.3931 li
314.268 22.3931 li
314.584 22.3931 li
314.88 22.3931 li
315.192 22.3931 li
315.495 22.3931 li
315.817 22.3931 li
316.137 22.3931 li
316.45 22.3931 li
316.755 22.3931 li
317.061 22.3931 li
317.368 22.1601 li
317.681 22.1601 li
317.983 22.1601 li
318.299 22.1601 li
318.593 22.0441 li
318.905 22.0441 li
319.21 22.0441 li
319.522 22.0441 li
319.823 22.0441 li
320.134 22.0441 li
320.426 21.9261 li
320.717 21.9261 li
321.006 21.9261 li
321.296 21.9261 li
321.594 21.9261 li
321.895 21.9261 li
322.177 21.9261 li
322.458 21.9261 li
322.743 21.9261 li
323.047 21.9261 li
323.34 21.8101 li
323.622 21.8101 li
323.909 21.8101 li
324.189 21.8101 li
324.473 21.8101 li
324.759 21.8101 li
325.045 21.8101 li
325.324 21.8101 li
325.6 21.8101 li
325.875 21.8101 li
326.162 21.8101 li
326.432 21.8101 li
326.718 21.8101 li
326.992 21.8101 li
327.265 21.8101 li
327.529 21.8101 li
327.811 21.6931 li
328.086 21.6931 li
328.354 21.6931 li
328.616 21.6931 li
328.881 21.6931 li
329.153 21.4601 li
329.422 21.4601 li
329.686 21.4601 li
329.958 21.4601 li
330.222 21.4601 li
330.496 21.4601 li
330.759 21.4601 li
331.016 21.4601 li
331.281 21.3441 li
331.533 21.3441 li
331.777 21.3441 li
332.034 21.2271 li
332.294 21.2271 li
332.545 21.2271 li
332.791 21.2271 li
333.04 21.2271 li
333.295 21.2271 li
333.554 21.2271 li
333.815 21.2271 li
334.064 21.2271 li
334.312 21.2271 li
334.557 21.2271 li
334.809 21.2271 li
335.063 21.2271 li
335.318 21.2271 li
335.581 21.2271 li
335.828 21.2271 li
336.074 21.2271 li
336.321 21.2271 li
336.575 21.2271 li
336.831 21.2271 li
337.077 21.1101 li
337.332 21.1101 li
337.57 21.1101 li
337.806 21.1101 li
338.044 21.1101 li
338.284 20.994 li
338.52 20.994 li
338.753 20.994 li
338.985 20.8771 li
339.217 20.8771 li
339.455 20.8771 li
339.695 20.8771 li
339.924 20.8771 li
340.151 20.8771 li
340.393 20.8771 li
340.631 20.8771 li
340.865 20.8771 li
341.095 20.8771 li
341.318 20.8771 li
341.548 20.8771 li
341.774 20.8771 li
341.996 20.7601 li
342.212 20.6441 li
342.442 20.6441 li
342.665 20.6441 li
342.892 20.6441 li
343.118 20.4111 li
343.343 20.4111 li
343.561 20.4111 li
343.79 20.4111 li
343.995 20.4111 li
344.216 20.4111 li
344.436 20.4111 li
344.661 20.4111 li
344.884 20.4111 li
345.112 20.4111 li
345.332 20.4111 li
345.547 20.4111 li
345.763 20.4111 li
345.975 20.4111 li
346.193 20.4111 li
346.403 20.4111 li
346.618 20.2941 li
346.831 20.2941 li
347.036 20.2941 li
347.246 20.1781 li
347.463 20.1781 li
347.67 20.1781 li
347.877 20.1781 li
348.084 20.1781 li
348.295 20.1781 li
348.501 20.1781 li
348.713 20.1781 li
348.922 20.1781 li
349.123 20.1781 li
349.324 20.1781 li
349.527 20.0601 li
349.738 20.0601 li
349.947 20.0601 li
350.15 20.0601 li
350.348 20.0601 li
350.555 20.0601 li
350.748 20.0601 li
350.951 20.0601 li
351.15 20.0601 li
351.342 20.0601 li
351.534 20.0601 li
351.735 20.0601 li
351.931 20.0601 li
352.122 20.0601 li
352.315 20.0601 li
352.503 20.0601 li
352.694 20.0601 li
352.888 20.0601 li
353.079 20.0601 li
353.271 20.0601 li
353.458 20.0601 li
353.647 20.0601 li
353.83 20.0601 li
354.022 20.0601 li
354.209 20.0601 li
354.401 20.0601 li
354.586 20.0601 li
354.781 20.0601 li
354.968 20.0601 li
355.157 20.0601 li
355.341 20.0601 li
355.52 20.0601 li
355.706 20.0601 li
355.888 20.0601 li
356.076 20.0601 li
356.262 20.0601 li
356.44 20.0601 li
356.614 20.0601 li
356.797 20.0601 li
356.978 20.0601 li
357.154 20.0601 li
357.334 19.9441 li
357.508 19.9441 li
357.683 19.9441 li
357.855 19.9441 li
358.027 19.9441 li
358.204 19.9441 li
358.375 19.9441 li
358.546 19.9441 li
358.717 19.9441 li
358.888 19.9441 li
359.061 19.9441 li
359.229 19.9441 li
359.401 19.9441 li
359.573 19.9441 li
359.738 19.9441 li
359.907 19.9441 li
360.066 19.9441 li
360.234 19.9441 li
360.401 19.9441 li
360.566 19.8271 li
360.73 19.8271 li
360.893 19.8271 li
361.055 19.8271 li
361.216 19.7111 li
361.375 19.7111 li
361.54 19.7111 li
361.7 19.7111 li
361.863 19.7111 li
362.016 19.5941 li
362.175 19.5941 li
362.332 19.5941 li
362.487 19.5941 li
362.641 19.5941 li
362.8 19.5941 li
362.952 19.5941 li
363.106 19.5941 li
363.261 19.5941 li
363.414 19.5941 li
363.565 19.5941 li
363.72 19.5941 li
363.87 19.5941 li
364.024 19.5941 li
364.169 19.5941 li
364.318 19.5941 li
364.468 19.5941 li
364.618 19.5941 li
364.766 19.5941 li
364.913 19.5941 li
365.061 19.5941 li
365.207 19.5941 li
365.356 19.5941 li
365.498 19.5941 li
365.638 19.5941 li
365.782 19.4781 li
365.923 19.4781 li
366.069 19.3611 li
366.211 19.3611 li
366.351 19.3611 li
366.494 19.3611 li
366.64 19.3611 li
366.784 19.3611 li
366.929 19.3611 li
367.068 19.3611 li
367.204 19.3611 li
367.341 19.3611 li
367.483 19.3611 li
367.612 19.3611 li
367.745 19.3611 li
367.879 19.3611 li
368.012 19.3611 li
368.15 19.3611 li
368.284 19.3611 li
368.415 19.3611 li
368.545 19.3611 li
368.678 19.244 li
368.809 19.244 li
368.943 19.244 li
369.074 19.244 li
369.204 19.244 li
369.335 19.244 li
369.465 19.244 li
369.59 19.244 li
369.715 19.244 li
369.841 19.244 li
369.969 19.244 li
370.093 19.244 li
370.218 19.244 li
370.344 19.244 li
370.465 19.244 li
370.588 19.244 li
370.711 19.244 li
370.836 19.244 li
370.956 19.244 li
371.078 19.244 li
371.199 19.244 li
371.321 19.244 li
371.44 19.244 li
371.559 19.244 li
371.679 19.244 li
371.792 19.244 li
371.908 19.244 li
372.027 19.244 li
372.14 19.244 li
372.252 19.244 li
372.367 19.244 li
372.483 19.244 li
372.595 19.244 li
372.707 19.244 li
372.821 19.244 li
372.931 19.244 li
373.044 19.244 li
373.153 19.244 li
373.263 19.244 li
373.372 19.244 li
373.48 19.244 li
373.591 19.244 li
373.701 19.244 li
373.811 19.244 li
373.918 19.244 li
374.022 19.244 li
374.126 19.244 li
374.232 19.244 li
374.338 19.244 li
374.44 19.244 li
374.544 19.244 li
374.642 19.244 li
374.743 19.244 li
374.847 19.244 li
374.95 19.244 li
375.049 19.244 li
375.15 19.244 li
375.253 19.244 li
375.355 19.244 li
375.459 19.244 li
375.557 19.244 li
375.655 19.244 li
375.751 19.244 li
375.847 19.244 li
375.946 19.244 li
376.04 19.244 li
376.134 19.244 li
376.23 19.244 li
376.323 19.244 li
376.419 19.244 li
376.513 19.244 li
376.609 19.1281 li
376.703 19.1281 li
376.797 19.1281 li
376.891 19.1281 li
376.981 19.1281 li
377.073 19.1281 li
377.165 19.1281 li
377.257 19.1281 li
377.348 19.1281 li
377.436 19.1281 li
377.525 19.1281 li
377.612 19.1281 li
377.7 19.1281 li
377.789 19.1281 li
377.878 19.1281 li
377.968 19.1281 li
378.053 19.1281 li
378.141 19.1281 li
378.225 19.1281 li
378.311 19.1281 li
378.399 19.1281 li
378.484 19.1281 li
378.571 19.1281 li
378.657 19.1281 li
378.738 19.1281 li
378.819 19.1281 li
378.903 19.1281 li
378.982 19.1281 li
379.066 19.1281 li
379.147 19.1281 li
379.23 19.1281 li
379.309 19.1281 li
379.39 19.1281 li
379.47 19.1281 li
379.548 19.1281 li
379.626 19.1281 li
379.704 19.1281 li
379.782 19.1281 li
379.858 19.1281 li
379.936 19.1281 li
380.011 19.1281 li
380.088 19.1281 li
380.163 19.1281 li
380.238 19.1281 li
380.31 19.1281 li
380.385 19.1281 li
380.46 19.1281 li
380.533 19.1281 li
380.609 19.1281 li
380.683 19.1281 li
380.752 19.1281 li
380.823 19.1281 li
380.895 19.1281 li
380.965 19.1281 li
381.036 19.1281 li
381.107 19.1281 li
381.175 19.1281 li
381.244 19.1281 li
381.313 19.1281 li
381.383 19.1281 li
381.45 19.1281 li
381.519 19.1281 li
381.588 19.1281 li
381.657 19.1281 li
381.724 19.1281 li
381.789 19.1281 li
381.856 19.1281 li
381.923 19.1281 li
381.99 19.1281 li
382.054 19.1281 li
382.121 19.1281 li
382.185 19.1281 li
382.249 19.1281 li
382.313 19.1281 li
382.377 19.1281 li
382.44 19.1281 li
382.504 19.1281 li
382.566 19.1281 li
382.629 19.1281 li
382.69 19.1281 li
382.756 19.1281 li
382.816 19.1281 li
382.875 19.1281 li
382.936 19.1281 li
382.997 19.1281 li
383.054 19.1281 li
383.113 19.1281 li
383.172 19.1281 li
383.233 19.1281 li
383.29 19.1281 li
383.349 19.1281 li
383.404 19.1281 li
383.461 19.1281 li
383.516 19.1281 li
383.572 19.1281 li
383.63 19.1281 li
383.684 19.1281 li
383.738 19.1281 li
383.791 19.1281 li
383.847 19.1281 li
383.903 19.1281 li
383.956 19.1281 li
384.008 19.1281 li
384.062 19.1281 li
384.115 19.1281 li
384.169 19.1281 li
384.222 19.0111 li
384.275 19.0111 li
384.326 19.0111 li
384.378 19.0111 li
384.431 19.0111 li
384.481 19.0111 li
384.533 19.0111 li
384.586 19.0111 li
384.635 19.0111 li
384.684 19.0111 li
384.735 19.0111 li
384.783 19.0111 li
384.831 19.0111 li
384.88 18.8951 li
384.929 18.8951 li
384.977 18.8951 li
385.026 18.8951 li
385.072 18.8951 li
385.12 18.8951 li
385.167 18.8951 li
385.213 18.8951 li
385.261 18.8951 li
385.309 18.8951 li
385.356 18.7781 li
385.404 18.7781 li
385.451 18.7781 li
385.497 18.7781 li
385.542 18.7781 li
385.586 18.7781 li
385.629 18.7781 li
385.673 18.7781 li
385.715 18.7781 li
385.758 18.7781 li
385.8 18.7781 li
385.844 18.7781 li
385.888 18.7781 li
385.93 18.7781 li
385.975 18.7781 li
386.016 18.7781 li
386.056 18.7781 li
386.097 18.7781 li
386.138 18.7781 li
386.179 18.7781 li
386.22 18.7781 li
386.259 18.7781 li
386.299 18.7781 li
386.339 18.7781 li
386.379 18.7781 li
386.418 18.7781 li
386.458 18.7781 li
386.497 18.7781 li
386.535 18.7781 li
386.574 18.7781 li
386.612 18.7781 li
386.651 18.7781 li
386.688 18.7781 li
386.725 18.7781 li
386.761 18.7781 li
386.799 18.7781 li
386.835 18.7781 li
386.871 18.7781 li
386.906 18.7781 li
386.943 18.7781 li
386.979 18.7781 li
387.016 18.7781 li
387.049 18.7781 li
387.086 18.7781 li
387.12 18.7781 li
387.156 18.7781 li
387.189 18.7781 li
387.223 18.7781 li
387.259 18.7781 li
387.292 18.7781 li
387.326 18.7781 li
387.36 18.7781 li
387.393 18.7781 li
387.425 18.7781 li
387.458 18.7781 li
387.491 18.7781 li
387.523 18.7781 li
387.556 18.7781 li
387.588 18.7781 li
387.618 18.7781 li
387.649 18.7781 li
387.683 18.7781 li
387.714 18.7781 li
387.745 18.7781 li
387.776 18.7781 li
387.807 18.7781 li
387.838 18.7781 li
387.868 18.7781 li
387.898 18.7781 li
387.93 18.7781 li
387.959 18.7781 li
387.99 18.7781 li
388.02 18.7781 li
388.049 18.7781 li
388.077 18.7781 li
388.107 18.7781 li
388.134 18.7781 li
388.164 18.7781 li
388.191 18.7781 li
388.221 18.7781 li
388.248 18.7781 li
388.274 18.7781 li
388.3 18.7781 li
388.328 18.7781 li
388.355 18.7781 li
388.382 18.7781 li
388.409 18.7781 li
388.434 18.7781 li
388.461 18.7781 li
388.487 18.7781 li
388.514 18.7781 li
388.54 18.7781 li
388.565 18.7781 li
388.591 18.7781 li
388.617 18.7781 li
388.641 18.7781 li
388.667 18.7781 li
388.691 18.7781 li
388.715 18.7781 li
388.741 18.7781 li
388.764 18.7781 li
388.788 18.7781 li
388.812 18.7781 li
388.835 18.7781 li
388.858 18.7781 li
388.881 18.7781 li
388.905 18.7781 li
388.927 18.7781 li
388.95 18.7781 li
388.974 18.7781 li
388.995 18.7781 li
389.018 18.7781 li
389.041 18.7781 li
389.062 18.7781 li
389.086 18.7781 li
389.108 18.7781 li
389.129 18.7781 li
389.151 18.7781 li
389.172 18.7781 li
389.193 18.7781 li
389.215 18.7781 li
389.235 18.7781 li
389.255 18.7781 li
389.276 18.7781 li
389.296 18.7781 li
389.317 18.7781 li
389.338 18.7781 li
389.358 18.7781 li
389.378 18.7781 li
389.397 18.7781 li
389.416 18.7781 li
389.434 18.7781 li
389.453 18.7781 li
389.472 18.7781 li
389.492 18.7781 li
389.511 18.7781 li
389.53 18.7781 li
389.549 18.7781 li
389.568 18.7781 li
389.586 18.7781 li
389.604 18.7781 li
389.623 18.7781 li
389.641 18.7781 li
389.659 18.7781 li
389.675 18.7781 li
389.691 18.7781 li
389.709 18.7781 li
389.726 18.7781 li
389.743 18.7781 li
389.76 18.7781 li
389.776 18.7781 li
389.793 18.7781 li
389.809 18.7781 li
389.827 18.7781 li
389.842 18.7781 li
389.859 18.7781 li
389.875 18.7781 li
389.893 18.7781 li
389.907 18.7781 li
389.923 18.7781 li
389.938 18.7781 li
389.955 18.7781 li
389.971 18.7781 li
389.987 18.7781 li
390.003 18.7781 li
390.018 18.7781 li
390.032 18.7781 li
390.046 18.7781 li
390.061 18.7781 li
390.075 18.7781 li
390.091 18.7781 li
390.106 18.7781 li
390.12 18.7781 li
390.134 18.7781 li
390.149 18.7781 li
390.163 18.7781 li
390.177 18.7781 li
390.19 18.7781 li
390.204 18.7781 li
390.218 18.7781 li
390.231 18.7781 li
390.245 18.7781 li
390.259 18.7781 li
390.273 18.7781 li
390.286 18.7781 li
390.3 18.7781 li
390.313 18.7781 li
390.326 18.7781 li
390.339 18.7781 li
390.352 18.7781 li
390.365 18.7781 li
390.378 18.7781 li
390.39 18.7781 li
390.402 18.7781 li
390.415 18.7781 li
390.427 18.7781 li
390.439 18.7781 li
390.452 18.7781 li
390.464 18.7781 li
390.476 18.7781 li
390.487 18.7781 li
390.5 18.7781 li
390.511 18.7781 li
390.523 18.7781 li
390.534 18.7781 li
390.545 18.7781 li
390.556 18.7781 li
390.568 18.7781 li
390.579 18.7781 li
390.591 18.7781 li
390.602 18.7781 li
390.613 18.7781 li
390.623 18.7781 li
390.634 18.7781 li
390.644 18.7781 li
390.654 18.7781 li
390.665 18.7781 li
390.675 18.7781 li
390.685 18.7781 li
390.696 18.7781 li
390.706 18.7781 li
390.715 18.7781 li
390.725 18.7781 li
390.736 18.7781 li
390.745 18.7781 li
390.754 18.7781 li
390.764 18.7781 li
390.772 18.7781 li
390.782 18.7781 li
390.791 18.7781 li
390.8 18.7781 li
390.81 18.7781 li
390.819 18.7781 li
390.828 18.7781 li
390.837 18.7781 li
390.845 18.7781 li
390.855 18.7781 li
390.864 18.7781 li
390.872 18.7781 li
390.882 18.7781 li
390.89 18.7781 li
390.898 18.7781 li
390.906 18.7781 li
390.915 18.7781 li
390.924 18.7781 li
390.932 18.7781 li
390.94 18.7781 li
390.948 18.7781 li
390.956 18.7781 li
390.963 18.7781 li
390.972 18.7781 li
390.98 18.7781 li
390.988 18.7781 li
390.996 18.7781 li
391.003 18.7781 li
391.011 18.7781 li
391.018 18.7781 li
391.026 18.7781 li
391.034 18.7781 li
391.041 18.7781 li
391.049 18.7781 li
391.057 18.7781 li
391.063 18.7781 li
391.07 18.7781 li
391.077 18.7781 li
391.084 18.7781 li
391.091 18.7781 li
391.099 18.7781 li
391.106 18.7781 li
391.113 18.7781 li
391.12 18.7781 li
391.127 18.7781 li
391.133 18.7781 li
391.14 18.7781 li
391.146 18.7781 li
391.152 18.7781 li
391.159 18.7781 li
391.165 18.7781 li
391.172 18.7781 li
391.178 18.7781 li
391.184 18.7781 li
391.19 18.7781 li
391.196 18.7781 li
391.202 18.7781 li
391.209 18.7781 li
391.216 18.7781 li
391.221 18.7781 li
391.227 18.7781 li
391.233 18.7781 li
391.239 18.7781 li
391.244 18.7781 li
391.249 18.7781 li
391.255 18.7781 li
391.262 18.7781 li
391.266 18.7781 li
391.272 18.7781 li
391.278 18.7781 li
391.283 18.7781 li
391.288 18.7781 li
391.293 18.7781 li
391.299 18.7781 li
391.303 18.7781 li
391.309 18.7781 li
391.315 18.7781 li
391.32 18.7781 li
391.326 18.7781 li
391.331 18.7781 li
391.336 18.7781 li
391.34 18.7781 li
391.345 18.7781 li
391.35 18.7781 li
391.355 18.7781 li
391.359 18.7781 li
391.364 18.7781 li
391.369 18.7781 li
391.374 18.7781 li
391.378 18.7781 li
391.383 18.7781 li
391.387 18.7781 li
391.392 18.7781 li
391.397 18.7781 li
391.402 18.7781 li
391.406 18.7781 li
391.411 18.7781 li
391.414 18.7781 li
391.419 18.7781 li
391.422 18.7781 li
391.427 18.7781 li
391.431 18.7781 li
391.434 18.7781 li
391.438 18.7781 li
391.443 18.7781 li
391.447 18.7781 li
391.45 18.7781 li
391.455 18.7781 li
391.459 18.7781 li
391.463 18.7781 li
391.466 18.7781 li
391.47 18.7781 li
391.474 18.7781 li
391.478 18.7781 li
391.482 18.7781 li
391.486 18.7781 li
391.488 18.7781 li
391.492 18.7781 li
391.495 18.7781 li
391.499 18.7781 li
391.503 18.7781 li
391.506 18.7781 li
391.509 18.7781 li
391.513 18.7781 li
391.517 18.7781 li
391.521 18.7781 li
391.525 18.7781 li
391.527 18.7781 li
391.531 18.7781 li
391.534 18.7781 li
391.537 18.7781 li
391.541 18.7781 li
391.544 18.7781 li
391.547 18.7781 li
391.55 18.7781 li
391.554 18.7781 li
391.557 18.7781 li
391.56 18.7781 li
391.563 18.7781 li
391.566 18.7781 li
391.569 18.7781 li
391.572 18.7781 li
391.575 18.7781 li
391.579 18.7781 li
391.581 18.7781 li
391.584 18.7781 li
391.588 18.7781 li
391.591 18.7781 li
391.593 18.7781 li
391.596 18.7781 li
391.599 18.7781 li
391.601 18.7781 li
391.604 18.7781 li
391.607 18.7781 li
391.61 18.7781 li
391.612 18.7781 li
391.615 18.7781 li
391.618 18.7781 li
391.62 18.7781 li
391.623 18.7781 li
391.625 18.7781 li
391.627 18.7781 li
391.63 18.7781 li
391.633 18.7781 li
391.635 18.7781 li
391.638 18.7781 li
391.64 18.7781 li
391.642 18.7781 li
391.645 18.7781 li
391.647 18.7781 li
391.65 18.7781 li
391.652 18.7781 li
391.654 18.7781 li
391.656 18.7781 li
391.658 18.7781 li
391.66 18.7781 li
391.663 18.7781 li
391.665 18.7781 li
391.667 18.7781 li
391.669 18.7781 li
391.672 18.7781 li
391.674 18.7781 li
391.676 18.7781 li
391.678 18.7781 li
391.681 18.7781 li
391.682 18.7781 li
391.684 18.7781 li
391.686 18.7781 li
391.688 18.7781 li
391.69 18.7781 li
391.692 18.7781 li
391.694 18.7781 li
391.696 18.7781 li
391.698 18.7781 li
391.699 18.7781 li
391.702 18.7781 li
391.703 18.7781 li
391.705 18.7781 li
391.708 18.7781 li
391.709 18.7781 li
391.711 18.7781 li
391.713 18.7781 li
391.714 18.7781 li
391.716 18.7781 li
391.718 18.7781 li
391.72 18.7781 li
391.722 18.7781 li
391.723 18.7781 li
391.725 18.7781 li
391.727 18.7781 li
391.729 18.7781 li
391.731 18.7781 li
391.732 18.7781 li
391.734 18.7781 li
391.735 18.7781 li
391.737 18.7781 li
391.738 18.7781 li
391.74 18.7781 li
391.741 18.7781 li
391.742 18.7781 li
391.744 18.7781 li
391.745 18.7781 li
391.747 18.7781 li
391.748 18.7781 li
391.75 18.7781 li
391.751 18.7781 li
391.752 18.7781 li
391.754 18.7781 li
391.756 18.7781 li
391.757 18.7781 li
391.758 18.7781 li
391.759 18.7781 li
391.761 18.7781 li
391.762 18.7781 li
391.764 18.7781 li
391.765 18.7781 li
391.766 18.7781 li
391.768 18.7781 li
391.769 18.7781 li
391.77 18.7781 li
391.772 18.7781 li
391.774 18.7781 li
391.776 18.7781 li
391.777 18.7781 li
391.779 18.7781 li
391.781 18.7781 li
391.782 18.7781 li
391.783 18.7781 li
391.784 18.7781 li
391.785 18.7781 li
391.786 18.7781 li
391.787 18.7781 li
391.788 18.7781 li
391.789 18.7781 li
391.791 18.7781 li
391.792 18.7781 li
391.794 18.7781 li
391.795 18.7781 li
391.796 18.7781 li
391.797 18.7781 li
391.798 18.7781 li
391.8 18.7781 li
391.801 18.7781 li
391.802 18.7781 li
391.804 18.7781 li
391.805 18.7781 li
391.806 18.7781 li
391.807 18.7781 li
391.808 18.7781 li
391.809 18.7781 li
391.81 18.7781 li
391.811 18.7781 li
391.812 18.7781 li
391.813 18.7781 li
391.814 18.7781 li
391.815 18.7781 li
391.816 18.7781 li
391.817 18.7781 li
391.818 18.7781 li
391.819 18.7781 li
391.82 18.7781 li
391.821 18.7781 li
391.822 18.7781 li
391.823 18.7781 li
391.824 18.7781 li
391.825 18.7781 li
391.826 18.7781 li
391.827 18.7781 li
391.828 18.7781 li
391.829 18.7781 li
391.83 18.7781 li
391.831 18.7781 li
391.832 18.7781 li
391.833 18.7781 li
391.834 18.7781 li
391.835 18.7781 li
391.836 18.7781 li
391.837 18.7781 li
391.838 18.7781 li
391.839 18.7781 li
391.84 18.7781 li
391.841 18.7781 li
391.842 18.7781 li
391.843 18.7781 li
391.844 18.7781 li
391.845 18.7781 li
391.846 18.7781 li
391.847 18.7781 li
391.848 18.7781 li
391.849 18.7781 li
391.85 18.7781 li
391.851 18.7781 li
391.852 18.7781 li
391.853 18.7781 li
391.854 18.7781 li
391.855 18.7781 li
391.856 18.7781 li
391.857 18.7781 li
391.858 18.7781 li
391.859 18.7781 li
391.86 18.7781 li
391.861 18.7781 li
391.862 18.7781 li
391.863 18.7781 li
391.864 18.7781 li
391.865 18.7781 li
391.866 18.7781 li
391.867 18.7781 li
391.868 18.7781 li
391.869 18.7781 li
391.87 18.7781 li
391.871 18.7781 li
391.872 18.7781 li
391.873 18.7781 li
391.874 18.7781 li
391.875 18.7781 li
391.876 18.7781 li
391.877 18.7781 li
391.878 18.7781 li
391.879 18.7781 li
391.88 18.7781 li
391.881 18.7781 li
391.882 18.7781 li
391.883 18.7781 li
391.884 18.7781 li
391.885 18.7781 li
391.886 18.7781 li
391.887 18.7781 li
391.888 18.7781 li
391.889 18.7781 li
391.89 18.7781 li
391.891 18.7781 li
391.892 18.7781 li
391.893 18.7781 li
391.894 18.7781 li
391.895 18.7781 li
/1 
[/DeviceCMYK] /CSA add_res
.265019 .809232 0 0 cmyk
@
0 lj
42.3716 235.148 mo
46.8716 235.148 li
46.8716 230.648 li
42.3716 230.648 li
cp
@
56.9516 194.097 mo
61.4516 194.097 li
61.4516 189.597 li
56.9516 189.597 li
cp
@
66.7493 162.842 mo
71.2493 162.842 li
71.2493 158.342 li
66.7493 158.342 li
cp
@
74.1384 136.951 mo
78.6384 136.951 li
78.6384 132.451 li
74.1384 132.451 li
cp
@
86.07 114.093 mo
90.57 114.093 li
90.57 109.593 li
86.07 109.593 li
cp
@
97.997 96.0171 mo
102.497 96.0171 li
102.497 91.5171 li
97.997 91.5171 li
cp
@
111.611 83.0711 mo
116.111 83.0711 li
116.111 78.5711 li
111.611 78.5711 li
cp
@
121.393 72.6921 mo
125.893 72.6921 li
125.893 68.1921 li
121.393 68.1921 li
cp
@
133.45 62.7791 mo
137.95 62.7791 li
137.95 58.2791 li
133.45 58.2791 li
cp
@
144.413 56.5981 mo
148.913 56.5981 li
148.913 52.0981 li
144.413 52.0981 li
cp
@
154.812 51.4671 mo
159.312 51.4671 li
159.312 46.9671 li
154.812 46.9671 li
cp
@
166.168 47.3851 mo
170.668 47.3851 li
170.668 42.8851 li
166.168 42.8851 li
cp
@
175.22 43.5361 mo
179.72 43.5361 li
179.72 39.0361 li
175.22 39.0361 li
cp
@
184.957 40.3871 mo
189.457 40.3871 li
189.457 35.8871 li
184.957 35.8871 li
cp
@
194.077 38.4051 mo
198.577 38.4051 li
198.577 33.9051 li
194.077 33.9051 li
cp
@
202.319 35.8391 mo
206.819 35.8391 li
206.819 31.3391 li
202.319 31.3391 li
cp
@
210.568 34.3231 mo
215.068 34.3231 li
215.068 29.8231 li
210.568 29.8231 li
cp
@
218.27 33.1571 mo
222.77 33.1571 li
222.77 28.6571 li
218.27 28.6571 li
cp
@
225.28 31.5241 mo
229.78 31.5241 li
229.78 27.0241 li
225.28 27.0241 li
cp
@
232.313 30.9411 mo
236.813 30.9411 li
236.813 26.4411 li
232.313 26.4411 li
cp
@
238.705 30.4741 mo
243.205 30.4741 li
243.205 25.9741 li
238.705 25.9741 li
cp
@
244.833 30.1241 mo
249.333 30.1241 li
249.333 25.6241 li
244.833 25.6241 li
cp
@
250.597 29.3081 mo
255.097 29.3081 li
255.097 24.8081 li
250.597 24.8081 li
cp
@
256.099 28.6081 mo
260.599 28.6081 li
260.599 24.1081 li
256.099 24.1081 li
cp
@
261.431 28.1421 mo
265.931 28.1421 li
265.931 23.6421 li
261.431 23.6421 li
cp
@
266.547 27.5591 mo
271.047 27.5591 li
271.047 23.0591 li
266.547 23.0591 li
cp
@
271.44 26.9761 mo
275.94 26.9761 li
275.94 22.4761 li
271.44 22.4761 li
cp
@
276.053 26.5091 mo
280.553 26.5091 li
280.553 22.0091 li
276.053 22.0091 li
cp
@
280.453 26.2761 mo
284.953 26.2761 li
284.953 21.7761 li
280.453 21.7761 li
cp
@
284.601 25.6931 mo
289.101 25.6931 li
289.101 21.1931 li
284.601 21.1931 li
cp
@
288.651 25.4601 mo
293.151 25.4601 li
293.151 20.9601 li
288.651 20.9601 li
cp
@
292.64 25.343 mo
297.14 25.343 li
297.14 20.843 li
292.64 20.843 li
cp
@
296.402 24.9931 mo
300.902 24.9931 li
300.902 20.4931 li
296.402 20.4931 li
cp
@
299.983 24.9931 mo
304.483 24.9931 li
304.483 20.4931 li
299.983 20.4931 li
cp
@
303.459 24.9931 mo
307.959 24.9931 li
307.959 20.4931 li
303.459 20.4931 li
cp
@
306.797 24.7601 mo
311.297 24.7601 li
311.297 20.2601 li
306.797 20.2601 li
cp
@
310.068 24.6431 mo
314.568 24.6431 li
314.568 20.1431 li
310.068 20.1431 li
cp
@
313.245 24.6431 mo
317.745 24.6431 li
317.745 20.1431 li
313.245 20.1431 li
cp
@
316.343 24.2941 mo
320.843 24.2941 li
320.843 19.7941 li
316.343 19.7941 li
cp
@
319.344 24.1771 mo
323.844 24.1771 li
323.844 19.6771 li
319.344 19.6771 li
cp
@
322.223 24.0601 mo
326.723 24.0601 li
326.723 19.5601 li
322.223 19.5601 li
cp
@
325.015 24.0601 mo
329.515 24.0601 li
329.515 19.5601 li
325.015 19.5601 li
cp
@
327.708 23.7101 mo
332.208 23.7101 li
332.208 19.2101 li
327.708 19.2101 li
cp
@
330.295 23.4771 mo
334.795 23.4771 li
334.795 18.9771 li
330.295 18.9771 li
cp
@
332.813 23.4771 mo
337.313 23.4771 li
337.313 18.9771 li
332.813 18.9771 li
cp
@
335.32 23.3601 mo
339.82 23.3601 li
339.82 18.8601 li
335.32 18.8601 li
cp
@
337.674 23.1271 mo
342.174 23.1271 li
342.174 18.6271 li
337.674 18.6271 li
cp
@
339.962 22.8941 mo
344.462 22.8941 li
344.462 18.3941 li
339.962 18.3941 li
cp
@
342.187 22.6611 mo
346.687 22.6611 li
346.687 18.1611 li
342.187 18.1611 li
cp
@
344.368 22.5441 mo
348.868 22.5441 li
348.868 18.0441 li
344.368 18.0441 li
cp
@
346.463 22.4281 mo
350.963 22.4281 li
350.963 17.9281 li
346.463 17.9281 li
cp
@
348.498 22.3111 mo
352.998 22.3111 li
352.998 17.8111 li
348.498 17.8111 li
cp
@
350.444 22.3111 mo
354.944 22.3111 li
354.944 17.8111 li
350.444 17.8111 li
cp
@
352.335 22.3111 mo
356.835 22.3111 li
356.835 17.8111 li
352.335 17.8111 li
cp
@
354.191 22.3111 mo
358.691 22.3111 li
358.691 17.8111 li
354.191 17.8111 li
cp
@
355.955 22.1941 mo
360.455 22.1941 li
360.455 17.6941 li
355.955 17.6941 li
cp
@
357.657 22.1941 mo
362.157 22.1941 li
362.157 17.6941 li
357.657 17.6941 li
cp
@
359.29 21.9611 mo
363.79 21.9611 li
363.79 17.4611 li
359.29 17.4611 li
cp
@
360.856 21.8441 mo
365.356 21.8441 li
365.356 17.3441 li
360.856 17.3441 li
cp
@
362.368 21.8441 mo
366.868 21.8441 li
366.868 17.3441 li
362.368 17.3441 li
cp
@
363.818 21.6111 mo
368.318 21.6111 li
368.318 17.1111 li
363.818 17.1111 li
cp
@
365.233 21.6111 mo
369.733 21.6111 li
369.733 17.1111 li
365.233 17.1111 li
cp
@
366.559 21.494 mo
371.059 21.494 li
371.059 16.994 li
366.559 16.994 li
cp
@
367.842 21.494 mo
372.342 21.494 li
372.342 16.994 li
367.842 16.994 li
cp
@
369.071 21.494 mo
373.571 21.494 li
373.571 16.994 li
369.071 16.994 li
cp
@
370.233 21.494 mo
374.733 21.494 li
374.733 16.994 li
370.233 16.994 li
cp
@
371.34 21.494 mo
375.84 21.494 li
375.84 16.994 li
371.34 16.994 li
cp
@
372.392 21.494 mo
376.892 21.494 li
376.892 16.994 li
372.392 16.994 li
cp
@
373.405 21.494 mo
377.905 21.494 li
377.905 16.994 li
373.405 16.994 li
cp
@
374.359 21.3781 mo
378.859 21.3781 li
378.859 16.8781 li
374.359 16.8781 li
cp
@
375.275 21.3781 mo
379.775 21.3781 li
379.775 16.8781 li
375.275 16.8781 li
cp
@
376.149 21.3781 mo
380.649 21.3781 li
380.649 16.8781 li
376.149 16.8781 li
cp
@
376.98 21.3781 mo
381.48 21.3781 li
381.48 16.8781 li
376.98 16.8781 li
cp
@
377.761 21.3781 mo
382.261 21.3781 li
382.261 16.8781 li
377.761 16.8781 li
cp
@
378.502 21.3781 mo
383.002 21.3781 li
383.002 16.8781 li
378.502 16.8781 li
cp
@
379.2 21.3781 mo
383.7 21.3781 li
383.7 16.8781 li
379.2 16.8781 li
cp
@
379.871 21.3781 mo
384.371 21.3781 li
384.371 16.8781 li
379.871 16.8781 li
cp
@
380.506 21.3781 mo
385.006 21.3781 li
385.006 16.8781 li
380.506 16.8781 li
cp
@
381.099 21.3781 mo
385.599 21.3781 li
385.599 16.8781 li
381.099 16.8781 li
cp
@
381.653 21.3781 mo
386.153 21.3781 li
386.153 16.8781 li
381.653 16.8781 li
cp
@
382.181 21.2611 mo
386.681 21.2611 li
386.681 16.7611 li
382.181 16.7611 li
cp
@
382.679 21.1451 mo
387.179 21.1451 li
387.179 16.6451 li
382.679 16.6451 li
cp
@
383.154 21.0281 mo
387.654 21.0281 li
387.654 16.5281 li
383.154 16.5281 li
cp
@
383.594 21.0281 mo
388.094 21.0281 li
388.094 16.5281 li
383.594 16.5281 li
cp
@
384.009 21.0281 mo
388.509 21.0281 li
388.509 16.5281 li
384.009 16.5281 li
cp
@
384.401 21.0281 mo
388.901 21.0281 li
388.901 16.5281 li
384.401 16.5281 li
cp
@
384.765 21.0281 mo
389.265 21.0281 li
389.265 16.5281 li
384.765 16.5281 li
cp
@
385.11 21.0281 mo
389.61 21.0281 li
389.61 16.5281 li
385.11 16.5281 li
cp
@
385.433 21.0281 mo
389.933 21.0281 li
389.933 16.5281 li
385.433 16.5281 li
cp
@
385.74 21.0281 mo
390.24 21.0281 li
390.24 16.5281 li
385.74 16.5281 li
cp
@
386.024 21.0281 mo
390.524 21.0281 li
390.524 16.5281 li
386.024 16.5281 li
cp
@
386.29 21.0281 mo
390.79 21.0281 li
390.79 16.5281 li
386.29 16.5281 li
cp
@
386.538 21.0281 mo
391.038 21.0281 li
391.038 16.5281 li
386.538 16.5281 li
cp
@
386.768 21.0281 mo
391.268 21.0281 li
391.268 16.5281 li
386.768 16.5281 li
cp
@
386.985 21.0281 mo
391.485 21.0281 li
391.485 16.5281 li
386.985 16.5281 li
cp
@
387.184 21.0281 mo
391.684 21.0281 li
391.684 16.5281 li
387.184 16.5281 li
cp
@
387.373 21.0281 mo
391.873 21.0281 li
391.873 16.5281 li
387.373 16.5281 li
cp
@
387.543 21.0281 mo
392.043 21.0281 li
392.043 16.5281 li
387.543 16.5281 li
cp
@
387.705 21.0281 mo
392.205 21.0281 li
392.205 16.5281 li
387.705 16.5281 li
cp
@
387.855 21.0281 mo
392.355 21.0281 li
392.355 16.5281 li
387.855 16.5281 li
cp
@
387.995 21.0281 mo
392.495 21.0281 li
392.495 16.5281 li
387.995 16.5281 li
cp
@
388.127 21.0281 mo
392.627 21.0281 li
392.627 16.5281 li
388.127 16.5281 li
cp
@
388.25 21.0281 mo
392.75 21.0281 li
392.75 16.5281 li
388.25 16.5281 li
cp
@
388.363 21.0281 mo
392.863 21.0281 li
392.863 16.5281 li
388.363 16.5281 li
cp
@
388.465 21.0281 mo
392.965 21.0281 li
392.965 16.5281 li
388.465 16.5281 li
cp
@
388.559 21.0281 mo
393.059 21.0281 li
393.059 16.5281 li
388.559 16.5281 li
cp
@
388.648 21.0281 mo
393.148 21.0281 li
393.148 16.5281 li
388.648 16.5281 li
cp
@
388.73 21.0281 mo
393.23 21.0281 li
393.23 16.5281 li
388.73 16.5281 li
cp
@
388.806 21.0281 mo
393.306 21.0281 li
393.306 16.5281 li
388.806 16.5281 li
cp
@
388.877 21.0281 mo
393.377 21.0281 li
393.377 16.5281 li
388.877 16.5281 li
cp
@
388.94 21.0281 mo
393.44 21.0281 li
393.44 16.5281 li
388.94 16.5281 li
cp
@
389 21.0281 mo
393.5 21.0281 li
393.5 16.5281 li
389 16.5281 li
cp
@
389.054 21.0281 mo
393.554 21.0281 li
393.554 16.5281 li
389.054 16.5281 li
cp
@
389.105 21.0281 mo
393.605 21.0281 li
393.605 16.5281 li
389.105 16.5281 li
cp
@
389.151 21.0281 mo
393.651 21.0281 li
393.651 16.5281 li
389.151 16.5281 li
cp
@
389.193 21.0281 mo
393.693 21.0281 li
393.693 16.5281 li
389.193 16.5281 li
cp
@
389.232 21.0281 mo
393.732 21.0281 li
393.732 16.5281 li
389.232 16.5281 li
cp
@
389.267 21.0281 mo
393.767 21.0281 li
393.767 16.5281 li
389.267 16.5281 li
cp
@
389.3 21.0281 mo
393.8 21.0281 li
393.8 16.5281 li
389.3 16.5281 li
cp
@
389.331 21.0281 mo
393.831 21.0281 li
393.831 16.5281 li
389.331 16.5281 li
cp
@
389.36 21.0281 mo
393.86 21.0281 li
393.86 16.5281 li
389.36 16.5281 li
cp
@
389.385 21.0281 mo
393.885 21.0281 li
393.885 16.5281 li
389.385 16.5281 li
cp
@
389.408 21.0281 mo
393.908 21.0281 li
393.908 16.5281 li
389.408 16.5281 li
cp
@
389.43 21.0281 mo
393.93 21.0281 li
393.93 16.5281 li
389.43 16.5281 li
cp
@
389.449 21.0281 mo
393.949 21.0281 li
393.949 16.5281 li
389.449 16.5281 li
cp
@
389.468 21.0281 mo
393.968 21.0281 li
393.968 16.5281 li
389.468 16.5281 li
cp
@
389.485 21.0281 mo
393.985 21.0281 li
393.985 16.5281 li
389.485 16.5281 li
cp
@
389.5 21.0281 mo
394 21.0281 li
394 16.5281 li
389.5 16.5281 li
cp
@
389.513 21.0281 mo
394.013 21.0281 li
394.013 16.5281 li
389.513 16.5281 li
cp
@
389.525 21.0281 mo
394.025 21.0281 li
394.025 16.5281 li
389.525 16.5281 li
cp
@
389.536 21.0281 mo
394.036 21.0281 li
394.036 16.5281 li
389.536 16.5281 li
cp
@
389.547 21.0281 mo
394.047 21.0281 li
394.047 16.5281 li
389.547 16.5281 li
cp
@
389.556 21.0281 mo
394.056 21.0281 li
394.056 16.5281 li
389.556 16.5281 li
cp
@
389.564 21.0281 mo
394.064 21.0281 li
394.064 16.5281 li
389.564 16.5281 li
cp
@
389.572 21.0281 mo
394.072 21.0281 li
394.072 16.5281 li
389.572 16.5281 li
cp
@
389.579 21.0281 mo
394.079 21.0281 li
394.079 16.5281 li
389.579 16.5281 li
cp
@
389.585 21.0281 mo
394.085 21.0281 li
394.085 16.5281 li
389.585 16.5281 li
cp
@
389.591 21.0281 mo
394.091 21.0281 li
394.091 16.5281 li
389.591 16.5281 li
cp
@
389.597 21.0281 mo
394.097 21.0281 li
394.097 16.5281 li
389.597 16.5281 li
cp
@
389.602 21.0281 mo
394.102 21.0281 li
394.102 16.5281 li
389.602 16.5281 li
cp
@
389.606 21.0281 mo
394.106 21.0281 li
394.106 16.5281 li
389.606 16.5281 li
cp
@
389.61 21.0281 mo
394.11 21.0281 li
394.11 16.5281 li
389.61 16.5281 li
cp
@
389.614 21.0281 mo
394.114 21.0281 li
394.114 16.5281 li
389.614 16.5281 li
cp
@
389.616 21.0281 mo
394.116 21.0281 li
394.116 16.5281 li
389.616 16.5281 li
cp
@
389.619 21.0281 mo
394.119 21.0281 li
394.119 16.5281 li
389.619 16.5281 li
cp
@
389.622 21.0281 mo
394.122 21.0281 li
394.122 16.5281 li
389.622 16.5281 li
cp
@
389.624 21.0281 mo
394.124 21.0281 li
394.124 16.5281 li
389.624 16.5281 li
cp
@
389.627 21.0281 mo
394.127 21.0281 li
394.127 16.5281 li
389.627 16.5281 li
cp
@
389.629 21.0281 mo
394.129 21.0281 li
394.129 16.5281 li
389.629 16.5281 li
cp
@
389.631 21.0281 mo
394.131 21.0281 li
394.131 16.5281 li
389.631 16.5281 li
cp
@
389.632 21.0281 mo
394.132 21.0281 li
394.132 16.5281 li
389.632 16.5281 li
cp
@
389.634 21.0281 mo
394.134 21.0281 li
394.134 16.5281 li
389.634 16.5281 li
cp
@
389.635 21.0281 mo
394.135 21.0281 li
394.135 16.5281 li
389.635 16.5281 li
cp
@
389.636 21.0281 mo
394.136 21.0281 li
394.136 16.5281 li
389.636 16.5281 li
cp
@
389.637 21.0281 mo
394.137 21.0281 li
394.137 16.5281 li
389.637 16.5281 li
cp
@
389.638 21.0281 mo
394.138 21.0281 li
394.138 16.5281 li
389.638 16.5281 li
cp
@
389.638 21.0281 mo
394.138 21.0281 li
394.138 16.5281 li
389.638 16.5281 li
cp
@
389.639 21.0281 mo
394.139 21.0281 li
394.139 16.5281 li
389.639 16.5281 li
cp
@
389.64 21.0281 mo
394.14 21.0281 li
394.14 16.5281 li
389.64 16.5281 li
cp
@
389.64 21.0281 mo
394.14 21.0281 li
394.14 16.5281 li
389.64 16.5281 li
cp
@
389.641 21.0281 mo
394.141 21.0281 li
394.141 16.5281 li
389.641 16.5281 li
cp
@
389.641 21.0281 mo
394.141 21.0281 li
394.141 16.5281 li
389.641 16.5281 li
cp
@
389.642 21.0281 mo
394.142 21.0281 li
394.142 16.5281 li
389.642 16.5281 li
cp
@
389.642 21.0281 mo
394.142 21.0281 li
394.142 16.5281 li
389.642 16.5281 li
cp
@
389.642 21.0281 mo
394.142 21.0281 li
394.142 16.5281 li
389.642 16.5281 li
cp
@
389.643 21.0281 mo
394.143 21.0281 li
394.143 16.5281 li
389.643 16.5281 li
cp
@
389.643 21.0281 mo
394.143 21.0281 li
394.143 16.5281 li
389.643 16.5281 li
cp
@
389.643 21.0281 mo
394.143 21.0281 li
394.143 16.5281 li
389.643 16.5281 li
cp
@
389.643 21.0281 mo
394.143 21.0281 li
394.143 16.5281 li
389.643 16.5281 li
cp
@
389.644 21.0281 mo
394.144 21.0281 li
394.144 16.5281 li
389.644 16.5281 li
cp
@
389.644 21.0281 mo
394.144 21.0281 li
394.144 16.5281 li
389.644 16.5281 li
cp
@
389.644 21.0281 mo
394.144 21.0281 li
394.144 16.5281 li
389.644 16.5281 li
cp
@
389.644 21.0281 mo
394.144 21.0281 li
394.144 16.5281 li
389.644 16.5281 li
cp
@
389.644 21.0281 mo
394.144 21.0281 li
394.144 16.5281 li
389.644 16.5281 li
cp
@
389.644 21.0281 mo
394.144 21.0281 li
394.144 16.5281 li
389.644 16.5281 li
cp
@
389.644 21.0281 mo
394.144 21.0281 li
394.144 16.5281 li
389.644 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
389.645 21.0281 mo
394.145 21.0281 li
394.145 16.5281 li
389.645 16.5281 li
cp
@
1 lj
43.1036 103.703 mo
43.145 103.68 li
43.145 99.5981 li
44.6212 97.8481 li
44.6212 96.9151 li
44.6212 96.0991 li
44.6212 95.2831 li
44.6212 94.9331 li
44.6212 93.7671 li
47.3743 92.0171 li
47.3743 91.0851 li
47.3743 90.1521 li
49.8973 89.3351 li
49.8973 88.4021 li
49.8973 87.2361 li
51.0837 85.9531 li
51.0837 85.1371 li
52.2259 84.3211 li
54.3884 83.7371 li
54.3884 82.4551 li
54.3884 81.7551 li
54.3884 80.9381 li
54.3884 79.7721 li
55.4141 78.8391 li
56.4063 77.5561 li
56.4063 76.7391 li
56.4063 75.8071 li
56.4063 74.9901 li
56.4063 74.4071 li
56.4063 73.9401 li
56.4063 73.8241 li
56.4063 73.0081 li
56.4063 72.8911 li
56.4063 72.4251 li
56.4063 72.1921 li
56.4063 71.4921 li
56.4063 70.3261 li
56.4063 69.6261 li
56.4063 69.3921 li
56.4063 68.9261 li
56.4063 67.6431 li
56.4063 67.1761 li
56.4063 67.0601 li
56.4063 66.2441 li
58.2981 65.5441 li
58.2981 65.0781 li
58.2981 64.6111 li
58.2981 63.6781 li
58.2981 62.9781 li
58.2981 62.3951 li
60.0786 62.1621 li
60.0786 61.6951 li
60.0786 60.9961 li
60.0786 60.2961 li
60.0786 59.8291 li
60.0786 59.3631 li
60.0786 59.0131 li
60.0786 58.5471 li
60.0786 57.8471 li
60.0786 57.7301 li
61.7598 57.1471 li
63.3528 56.7971 li
63.3528 55.9811 li
64.1196 55.5141 li
64.1196 55.1641 li
65.5954 54.8151 li
67.0032 54.3481 li
67.6837 54.1151 li
68.9989 53.6481 li
68.9989 53.5321 li
68.9989 52.9491 li
68.9989 52.5981 li
68.9989 52.2491 li
68.9989 51.8991 li
70.2606 51.8991 li
70.2606 51.4321 li
72.0583 50.6161 li
72.0583 50.3831 li
73.2005 50.1501 li
73.2005 50.0331 li
74.3009 49.5661 li
74.3009 48.9831 li
74.3009 48.5171 li
75.3626 48.0511 li
75.3626 47.5841 li
75.3626 47.2341 li
75.3626 46.8841 li
75.3626 46.5341 li
75.8794 46.3011 li
76.3888 45.9511 li
77.3809 45.9511 li
77.3809 45.6011 li
78.3411 45.2511 li
78.3411 45.1351 li
78.3411 44.7851 li
78.3411 44.5521 li
78.3411 44.4351 li
79.2723 44.3191 li
79.2723 43.2691 li
79.2723 42.9191 li
79.2723 42.4531 li
79.2723 42.3361 li
80.1755 41.9861 li
81.0532 41.7531 li
82.7345 41.5191 li
83.1411 41.2861 li
83.1411 41.1701 li
83.9368 41.0531 li
85.841 40.4701 li
86.208 40.1201 li
86.57 40.1201 li
86.57 39.8871 li
86.928 39.6531 li
86.928 39.5371 li
86.928 39.1871 li
87.632 38.6041 li
87.632 38.1381 li
87.978 38.1381 li
87.978 38.0211 li
87.978 37.7871 li
89.322 37.7871 li
89.974 37.5541 li
90.61 37.0881 li
90.61 36.9711 li
91.234 36.7381 li
91.234 36.1551 li
91.845 36.0391 li
92.445 35.9211 li
93.033 35.4551 li
94.174 35.3391 li
94.453 35.2221 li
95.811 35.1051 li
96.075 34.9891 li
96.597 34.9891 li
97.614 34.9891 li
98.598 34.7551 li
98.598 34.6391 li
99.551 34.6391 li
99.785 34.6391 li
99.785 34.2891 li
100.017 34.0551 li
100.247 33.7061 li
101.15 33.5891 li
101.592 33.3561 li
102.243 33.2391 li
102.669 33.1231 li
104.316 32.8891 li
105.302 32.7731 li
105.878 32.7731 li
106.256 32.7731 li
106.63 32.6561 li
107.181 32.4231 li
108.08 32.4231 li
109.293 32.4231 li
109.966 32.4231 li
110.297 32.3071 li
110.297 32.1891 li
110.297 32.0731 li
110.786 32.0731 li
111.742 31.9561 li
113.271 31.8401 li
114.152 31.7231 li
114.583 31.6071 li
115.149 31.6071 li
115.704 31.4901 li
115.704 31.3731 li
116.518 31.2571 li
116.652 31.2571 li
117.571 31.2571 li
117.571 31.0231 li
117.956 30.9071 li
118.337 30.7901 li
118.837 30.7901 li
119.084 30.6741 li
119.084 30.4401 li
119.451 30.4401 li
119.933 30.4401 li
120.525 30.3231 li
121.676 30.0901 li
122.456 29.9741 li
123.109 29.9741 li
123.643 29.8571 li
124.168 29.7411 li
124.683 29.7411 li
125.688 29.7411 li
126.179 29.6241 li
126.565 29.5081 li
126.852 29.5081 li
127.231 29.5081 li
127.697 29.5081 li
128.965 29.3901 li
129.493 29.3901 li
129.84 29.2741 li
130.438 29.2741 li
131.106 29.2741 li
131.841 29.1571 li
132.082 29.1571 li
132.559 29.041 li
132.716 29.041 li
133.566 28.9241 li
134.17 28.9241 li
135.054 28.9241 li
135.415 28.9241 li
136.402 28.9241 li
137.359 28.8081 li
137.693 28.8081 li
138.155 28.5741 li
138.674 28.5741 li
139.936 28.3411 li
140.727 28.2241 li
141.85 28.2241 li
142.875 28.2241 li
143.65 28.2241 li
144.458 28.2241 li
145.555 28.2241 li
146.164 28.2241 li
146.958 28.1081 li
147.492 28.1081 li
147.827 28.1081 li
148.299 28.1081 li
149.131 28.1081 li
150.072 27.8751 li
150.772 27.8751 li
151.748 27.8751 li
152.328 27.7581 li
153.494 27.7581 li
154.311 27.6421 li
154.995 27.6421 li
155.7 27.6421 li
156.064 27.6421 li
157.411 27.6421 li
157.96 27.6421 li
158.8 27.5241 li
159.26 27.5241 li
159.841 27.5241 li
160.191 27.5241 li
161.186 27.5241 li
161.941 27.5241 li
162.737 27.5241 li
163.341 27.5241 li
164.073 27.4081 li
164.977 27.4081 li
165.697 27.4081 li
166.401 27.4081 li
166.987 27.4081 li
167.488 27.291 li
168.297 27.291 li
169.038 27.291 li
169.899 27.291 li
170.691 27.291 li
171.42 27.1751 li
172.111 27.1751 li
172.868 27.1751 li
173.425 27.1751 li
173.971 27.0581 li
174.645 27.0581 li
175.381 27.0581 li
176.175 26.942 li
176.784 26.942 li
177.542 26.942 li
178.212 26.942 li
178.833 26.8251 li
179.374 26.8251 li
180.202 26.8251 li
181.086 26.7081 li
181.837 26.7081 li
182.419 26.7081 li
183.316 26.7081 li
184.058 26.7081 li
184.613 26.7081 li
185.158 26.5921 li
185.816 26.5921 li
186.407 26.5921 li
187.272 26.5921 li
188.1 26.3581 li
188.722 26.3581 li
189.537 26.2421 li
190.13 26.1251 li
190.724 26.1251 li
191.181 26.1251 li
191.943 26.1251 li
192.676 26.0091 li
193.339 26.0091 li
194.091 26.0091 li
194.895 26.0091 li
195.59 26.0091 li
196.231 26.0091 li
196.906 25.8921 li
197.602 25.8921 li
198.184 25.8921 li
198.993 25.8921 li
199.713 25.8921 li
200.432 25.8921 li
201.078 25.8921 li
201.79 25.7761 li
202.384 25.7761 li
202.989 25.7761 li
203.71 25.7761 li
204.415 25.7761 li
205.068 25.6581 li
205.819 25.6581 li
206.484 25.5421 li
207.12 25.5421 li
207.731 25.5421 li
208.42 25.5421 li
209.131 25.5421 li
209.745 25.4251 li
210.343 25.4251 li
211.157 25.3091 li
211.779 25.3091 li
212.308 25.3091 li
213.034 25.192 li
213.829 25.192 li
214.366 25.192 li
214.941 25.192 li
215.592 25.0761 li
216.264 25.0761 li
216.916 25.0761 li
217.516 24.9591 li
218.086 24.9591 li
218.687 24.9591 li
219.186 24.8421 li
219.871 24.8421 li
220.506 24.7261 li
221.184 24.7261 li
221.764 24.6091 li
222.358 24.6091 li
222.987 24.3761 li
223.666 24.2591 li
224.322 24.1431 li
224.801 24.1431 li
225.323 24.1431 li
225.834 24.1431 li
226.434 24.1431 li
227.083 24.0261 li
227.764 23.9101 li
228.458 23.9101 li
229.02 23.7921 li
229.596 23.7921 li
230.196 23.7921 li
230.748 23.7921 li
231.332 23.7921 li
231.931 23.7921 li
232.499 23.7921 li
233.047 23.7921 li
233.687 23.7921 li
234.266 23.7921 li
234.793 23.6761 li
235.402 23.6761 li
235.902 23.6761 li
236.485 23.6761 li
236.961 23.5591 li
237.553 23.5591 li
238.084 23.5591 li
238.573 23.5591 li
239.211 23.5591 li
239.866 23.5591 li
240.447 23.5591 li
241.025 23.4431 li
241.536 23.4431 li
242.209 23.4431 li
242.833 23.4431 li
243.374 23.4431 li
243.967 23.4431 li
244.504 23.4431 li
245.06 23.4431 li
245.67 23.4431 li
246.281 23.4431 li
246.806 23.4431 li
247.361 23.3261 li
247.928 23.2101 li
248.453 23.2101 li
248.992 23.2101 li
249.52 23.2101 li
250.054 23.2101 li
250.569 23.2101 li
251.114 23.2101 li
251.699 23.2101 li
252.31 23.2101 li
252.838 23.2101 li
253.418 23.2101 li
253.936 23.2101 li
254.436 23.2101 li
255.009 23.2101 li
255.572 23.2101 li
256.136 23.2101 li
256.609 23.2101 li
257.134 23.2101 li
257.661 23.2101 li
258.145 23.2101 li
258.71 23.2101 li
259.256 23.2101 li
259.787 23.2101 li
260.346 23.2101 li
260.806 23.2101 li
261.26 23.2101 li
261.76 23.2101 li
262.263 23.2101 li
262.777 23.2101 li
263.275 23.2101 li
263.733 23.2101 li
264.263 23.2101 li
264.706 23.2101 li
265.193 23.2101 li
265.638 23.2101 li
266.13 23.2101 li
266.576 23.2101 li
267.078 23.2101 li
267.564 23.2101 li
268.064 23.2101 li
268.543 23.2101 li
269.056 23.2101 li
269.519 23.2101 li
270.02 23.093 li
270.459 23.093 li
270.877 23.093 li
271.384 23.093 li
271.852 23.093 li
272.308 23.093 li
272.778 23.093 li
273.266 23.093 li
273.706 23.093 li
274.197 23.093 li
274.641 23.093 li
275.118 23.093 li
275.597 23.093 li
276.024 23.093 li
276.508 23.093 li
276.971 23.093 li
277.491 23.093 li
277.935 23.093 li
278.358 23.093 li
278.838 23.093 li
279.333 23.093 li
279.763 23.093 li
280.282 23.093 li
280.762 23.093 li
281.229 23.093 li
281.668 23.093 li
282.131 23.093 li
282.624 23.093 li
283.063 23.093 li
283.53 23.093 li
284.003 23.093 li
284.43 23.093 li
284.863 23.093 li
285.293 23.093 li
285.701 23.093 li
286.165 23.093 li
286.611 23.093 li
287.061 23.093 li
287.528 23.093 li
287.976 23.093 li
288.402 23.093 li
288.844 23.093 li
289.26 23.093 li
289.726 23.093 li
290.147 23.093 li
290.607 23.093 li
291.047 23.093 li
291.477 23.093 li
291.898 23.093 li
292.316 23.093 li
292.742 23.093 li
293.149 23.093 li
293.564 22.9761 li
293.947 22.9761 li
294.36 22.9761 li
294.768 22.9761 li
295.168 22.8601 li
295.587 22.8601 li
295.989 22.8601 li
296.404 22.8601 li
296.833 22.8601 li
297.259 22.8601 li
297.649 22.8601 li
298.054 22.8601 li
298.45 22.8601 li
298.84 22.8601 li
299.262 22.8601 li
299.666 22.8601 li
300.052 22.8601 li
300.432 22.8601 li
300.831 22.8601 li
301.239 22.8601 li
301.623 22.8601 li
302.002 22.8601 li
302.418 22.8601 li
302.801 22.8601 li
303.18 22.8601 li
303.569 22.8601 li
303.949 22.8601 li
304.325 22.8601 li
304.716 22.8601 li
305.096 22.8601 li
305.481 22.8601 li
305.878 22.8601 li
306.236 22.8601 li
306.611 22.8601 li
306.966 22.8601 li
307.336 22.8601 li
307.699 22.8601 li
308.077 22.8601 li
308.443 22.7431 li
308.85 22.7431 li
309.213 22.7431 li
309.588 22.7431 li
309.965 22.5101 li
310.327 22.5101 li
310.704 22.5101 li
311.049 22.5101 li
311.422 22.5101 li
311.768 22.5101 li
312.118 22.5101 li
312.464 22.5101 li
312.813 22.5101 li
313.173 22.5101 li
313.514 22.5101 li
313.857 22.5101 li
314.195 22.3931 li
314.556 22.3931 li
314.908 22.3931 li
315.266 22.3931 li
315.632 22.3931 li
315.986 22.3931 li
316.312 22.2771 li
316.652 22.2771 li
316.975 22.2771 li
317.313 22.2771 li
317.666 22.2771 li
317.991 22.2771 li
318.332 22.2771 li
318.66 22.2771 li
319.001 22.2771 li
319.336 22.2771 li
319.684 22.2771 li
320.027 22.2771 li
320.356 22.2771 li
320.688 22.2771 li
321.033 22.2771 li
321.374 22.2771 li
321.692 22.2771 li
322.017 22.2771 li
322.345 22.2771 li
322.668 22.2771 li
322.995 22.2771 li
323.312 22.2771 li
323.619 22.2771 li
323.956 22.2771 li
324.269 22.2771 li
324.6 22.2771 li
324.913 22.2771 li
325.216 22.2771 li
325.522 22.2771 li
325.827 22.2771 li
326.134 22.2771 li
326.454 22.2771 li
326.756 22.2771 li
327.077 22.2771 li
327.384 22.2771 li
327.684 22.2771 li
327.994 22.2771 li
328.291 22.2771 li
328.58 22.2771 li
328.881 22.2771 li
329.17 22.2771 li
329.479 22.2771 li
329.767 22.2771 li
330.061 22.2771 li
330.369 22.2771 li
330.654 22.2771 li
330.931 22.2771 li
331.216 22.2771 li
331.488 22.2771 li
331.792 22.2771 li
332.082 22.2771 li
332.377 22.2771 li
332.659 22.2771 li
332.941 22.2771 li
333.223 22.1601 li
333.507 22.1601 li
333.783 22.1601 li
334.061 22.1601 li
334.342 22.1601 li
334.619 22.1601 li
334.9 22.1601 li
335.167 22.1601 li
335.449 22.1601 li
335.715 22.1601 li
335.987 22.1601 li
336.261 22.1601 li
336.529 22.1601 li
336.808 22.1601 li
337.078 21.9261 li
337.358 21.9261 li
337.629 21.9261 li
337.895 21.8101 li
338.157 21.8101 li
338.431 21.8101 li
338.696 21.8101 li
338.948 21.8101 li
339.209 21.8101 li
339.472 21.8101 li
339.727 21.8101 li
339.985 21.8101 li
340.252 21.8101 li
340.507 21.8101 li
340.764 21.8101 li
341.016 21.8101 li
341.27 21.8101 li
341.518 21.8101 li
341.771 21.8101 li
342.012 21.8101 li
342.258 21.8101 li
342.499 21.6931 li
342.739 21.6931 li
342.993 21.6931 li
343.241 21.6931 li
343.484 21.6931 li
343.724 21.6931 li
343.968 21.6931 li
344.208 21.6931 li
344.45 21.6931 li
344.693 21.6931 li
344.932 21.6931 li
345.18 21.6931 li
345.414 21.6931 li
345.647 21.6931 li
345.885 21.5771 li
346.12 21.5771 li
346.351 21.5771 li
346.584 21.5771 li
346.82 21.5771 li
347.053 21.5771 li
347.289 21.5771 li
347.516 21.5771 li
347.739 21.5771 li
347.968 21.5771 li
348.187 21.5771 li
348.406 21.5771 li
348.632 21.5771 li
348.857 21.5771 li
349.076 21.5771 li
349.298 21.5771 li
349.525 21.5771 li
349.747 21.5771 li
349.966 21.5771 li
350.183 21.5771 li
350.421 21.5771 li
350.64 21.5771 li
350.859 21.5771 li
351.079 21.5771 li
351.295 21.5771 li
351.517 21.5771 li
351.729 21.4601 li
351.944 21.4601 li
352.158 21.4601 li
352.373 21.4601 li
352.578 21.4601 li
352.788 21.4601 li
353.004 21.4601 li
353.204 21.4601 li
353.412 21.4601 li
353.614 21.3441 li
353.815 21.3441 li
354.017 21.3441 li
354.217 21.3441 li
354.42 21.3441 li
354.627 21.3441 li
354.831 21.3441 li
355.034 21.3441 li
355.236 21.3441 li
355.434 21.3441 li
355.625 21.3441 li
355.826 21.3441 li
356.022 21.3441 li
356.219 21.3441 li
356.409 21.3441 li
356.608 21.3441 li
356.799 21.3441 li
356.991 21.3441 li
357.175 21.3441 li
357.359 21.3441 li
357.547 21.3441 li
357.731 21.3441 li
357.916 21.3441 li
358.102 21.2271 li
358.291 21.2271 li
358.472 21.2271 li
358.649 21.2271 li
358.831 21.2271 li
359.016 21.2271 li
359.202 21.2271 li
359.39 21.2271 li
359.574 21.2271 li
359.753 21.1101 li
359.931 21.1101 li
360.112 21.1101 li
360.285 21.1101 li
360.461 21.1101 li
360.639 21.1101 li
360.809 21.1101 li
360.985 21.1101 li
361.159 21.1101 li
361.331 21.1101 li
361.5 21.1101 li
361.67 21.1101 li
361.842 21.1101 li
362.011 21.1101 li
362.178 21.1101 li
362.341 21.1101 li
362.511 21.1101 li
362.679 20.994 li
362.847 20.994 li
363.012 20.994 li
363.179 20.994 li
363.34 20.994 li
363.502 20.994 li
363.665 20.994 li
363.827 20.994 li
363.984 20.994 li
364.148 20.994 li
364.308 20.994 li
364.468 20.994 li
364.625 20.8771 li
364.784 20.8771 li
364.944 20.8771 li
365.099 20.8771 li
365.257 20.8771 li
365.414 20.8771 li
365.562 20.8771 li
365.717 20.8771 li
365.866 20.8771 li
366.018 20.8771 li
366.171 20.8771 li
366.32 20.8771 li
366.472 20.8771 li
366.62 20.8771 li
366.771 20.8771 li
366.921 20.8771 li
367.07 20.8771 li
367.218 20.8771 li
367.363 20.8771 li
367.505 20.8771 li
367.647 20.8771 li
367.791 20.8771 li
367.936 20.8771 li
368.076 20.8771 li
368.218 20.8771 li
368.363 20.8771 li
368.5 20.8771 li
368.64 20.8771 li
368.783 20.8771 li
368.92 20.7601 li
369.053 20.7601 li
369.187 20.7601 li
369.322 20.7601 li
369.46 20.7601 li
369.597 20.7601 li
369.729 20.7601 li
369.86 20.7601 li
369.992 20.7601 li
370.125 20.7601 li
370.259 20.7601 li
370.391 20.7601 li
370.521 20.7601 li
370.652 20.7601 li
370.777 20.7601 li
370.914 20.7601 li
371.038 20.7601 li
371.165 20.7601 li
371.291 20.7601 li
371.413 20.7601 li
371.541 20.7601 li
371.665 20.7601 li
371.792 20.7601 li
371.916 20.7601 li
372.043 20.6441 li
372.168 20.6441 li
372.291 20.6441 li
372.417 20.6441 li
372.536 20.6441 li
372.657 20.6441 li
372.78 20.6441 li
372.899 20.6441 li
373.021 20.6441 li
373.138 20.6441 li
373.255 20.6441 li
373.374 20.6441 li
373.494 20.6441 li
373.609 20.6441 li
373.726 20.6441 li
373.845 20.5271 li
373.959 20.5271 li
374.071 20.5271 li
374.182 20.5271 li
374.29 20.5271 li
374.403 20.5271 li
374.508 20.5271 li
374.62 20.5271 li
374.727 20.5271 li
374.838 20.5271 li
374.948 20.5271 li
375.054 20.5271 li
375.164 20.5271 li
375.277 20.5271 li
375.384 20.5271 li
375.491 20.5271 li
375.596 20.5271 li
375.702 20.5271 li
375.804 20.5271 li
375.911 20.5271 li
376.015 20.5271 li
376.12 20.5271 li
376.221 20.5271 li
376.324 20.5271 li
376.426 20.5271 li
376.527 20.5271 li
376.629 20.5271 li
376.731 20.5271 li
376.831 20.5271 li
376.932 20.5271 li
377.027 20.4111 li
377.125 20.4111 li
377.224 20.4111 li
377.32 20.4111 li
377.418 20.4111 li
377.512 20.4111 li
377.611 20.4111 li
377.706 20.4111 li
377.803 20.4111 li
377.899 20.4111 li
377.988 20.4111 li
378.081 20.4111 li
378.171 20.4111 li
378.264 20.4111 li
378.355 20.4111 li
378.448 20.4111 li
378.538 20.2941 li
378.627 20.2941 li
378.712 20.2941 li
378.8 20.2941 li
378.889 20.2941 li
378.975 20.2941 li
379.065 20.2941 li
379.154 20.2941 li
379.24 20.2941 li
379.324 20.2941 li
379.409 20.2941 li
379.496 20.2941 li
379.579 20.2941 li
379.662 20.2941 li
379.747 20.2941 li
379.833 20.2941 li
379.916 20.2941 li
379.996 20.2941 li
380.079 20.2941 li
380.159 20.2941 li
380.24 20.2941 li
380.322 20.2941 li
380.404 20.2941 li
380.484 20.2941 li
380.565 20.2941 li
380.647 20.2941 li
380.726 20.2941 li
380.804 20.2941 li
380.881 20.2941 li
380.958 20.2941 li
381.036 20.2941 li
381.112 20.2941 li
381.186 20.2941 li
381.262 20.2941 li
381.34 20.2941 li
381.415 20.2941 li
381.491 20.2941 li
381.565 20.2941 li
381.64 20.2941 li
381.711 20.2941 li
381.781 20.2941 li
381.854 20.2941 li
381.926 20.2941 li
381.994 20.2941 li
382.066 20.2941 li
382.137 20.2941 li
382.209 20.2941 li
382.279 20.2941 li
382.349 20.2941 li
382.417 20.2941 li
382.486 20.2941 li
382.557 20.2941 li
382.624 20.2941 li
382.69 20.2941 li
382.758 20.2941 li
382.826 20.2941 li
382.892 20.2941 li
382.956 20.2941 li
383.02 20.2941 li
383.086 20.2941 li
383.149 20.2941 li
383.214 20.2941 li
383.278 20.2941 li
383.342 20.2941 li
383.406 20.1781 li
383.47 20.1781 li
383.532 20.1781 li
383.594 20.1781 li
383.655 20.1781 li
383.718 20.1781 li
383.779 20.1781 li
383.839 20.1781 li
383.899 20.1781 li
383.958 20.1781 li
384.017 20.0601 li
384.079 20.0601 li
384.137 20.0601 li
384.195 19.9441 li
384.252 19.8271 li
384.31 19.8271 li
384.366 19.8271 li
384.424 19.8271 li
384.483 19.8271 li
384.54 19.8271 li
384.597 19.8271 li
384.654 19.8271 li
384.709 19.8271 li
384.764 19.8271 li
384.82 19.8271 li
384.874 19.8271 li
384.926 19.7111 li
384.98 19.7111 li
385.033 19.7111 li
385.085 19.7111 li
385.137 19.7111 li
385.189 19.7111 li
385.241 19.7111 li
385.292 19.7111 li
385.343 19.7111 li
385.395 19.7111 li
385.447 19.7111 li
385.497 19.7111 li
385.549 19.7111 li
385.598 19.7111 li
385.647 19.7111 li
385.696 19.7111 li
385.745 19.7111 li
385.794 19.7111 li
385.841 19.7111 li
385.886 19.4781 li
385.936 19.4781 li
385.982 19.4781 li
386.03 19.4781 li
386.078 19.4781 li
386.124 19.4781 li
386.17 19.4781 li
386.215 19.4781 li
386.26 19.4781 li
386.304 19.4781 li
386.35 19.4781 li
386.395 19.4781 li
386.44 19.4781 li
386.482 19.4781 li
386.524 19.4781 li
386.566 19.3611 li
386.608 19.3611 li
386.652 19.3611 li
386.695 19.3611 li
386.737 19.3611 li
386.779 19.3611 li
386.821 19.3611 li
386.862 19.3611 li
386.904 19.3611 li
386.946 19.3611 li
386.986 19.3611 li
387.027 19.3611 li
387.066 19.3611 li
387.106 19.3611 li
387.146 19.3611 li
387.184 19.3611 li
387.222 19.3611 li
387.26 19.3611 li
387.3 19.3611 li
387.338 19.3611 li
387.375 19.3611 li
387.412 19.3611 li
387.45 19.3611 li
387.486 19.3611 li
387.523 19.3611 li
387.56 19.3611 li
387.595 19.3611 li
387.631 19.3611 li
387.666 19.3611 li
387.701 19.3611 li
387.737 19.3611 li
387.772 19.3611 li
387.806 19.3611 li
387.841 19.3611 li
387.874 19.3611 li
387.909 19.3611 li
387.942 19.3611 li
387.975 19.3611 li
388.007 19.3611 li
388.04 19.3611 li
388.075 19.3611 li
388.108 19.3611 li
388.14 19.3611 li
388.172 19.3611 li
388.204 19.3611 li
388.234 19.3611 li
388.266 19.3611 li
388.297 19.3611 li
388.328 19.3611 li
388.359 19.3611 li
388.391 19.3611 li
388.422 19.244 li
388.452 19.244 li
388.483 19.244 li
388.513 19.244 li
388.543 19.244 li
388.572 19.244 li
388.602 19.244 li
388.629 19.244 li
388.658 19.244 li
388.685 19.244 li
388.713 19.244 li
388.741 19.244 li
388.768 19.244 li
388.796 19.244 li
388.825 19.1281 li
388.851 19.1281 li
388.878 19.1281 li
388.903 19.1281 li
388.93 19.1281 li
388.956 19.1281 li
388.982 19.0111 li
389.008 19.0111 li
389.034 19.0111 li
389.059 19.0111 li
389.085 19.0111 li
389.11 19.0111 li
389.135 19.0111 li
389.16 19.0111 li
389.184 19.0111 li
389.208 19.0111 li
389.232 19.0111 li
389.255 19.0111 li
389.28 19.0111 li
389.304 19.0111 li
389.327 19.0111 li
389.352 19.0111 li
389.375 19.0111 li
389.397 19.0111 li
389.42 19.0111 li
389.443 19.0111 li
389.465 19.0111 li
389.487 19.0111 li
389.509 19.0111 li
389.53 19.0111 li
389.551 19.0111 li
389.572 19.0111 li
389.593 19.0111 li
389.614 19.0111 li
389.635 19.0111 li
389.656 19.0111 li
389.676 19.0111 li
389.697 19.0111 li
389.718 19.0111 li
389.738 19.0111 li
389.758 19.0111 li
389.777 19.0111 li
389.797 19.0111 li
389.816 19.0111 li
389.836 19.0111 li
389.856 19.0111 li
389.876 19.0111 li
389.895 19.0111 li
389.915 19.0111 li
389.934 19.0111 li
389.953 19.0111 li
389.971 19.0111 li
389.99 19.0111 li
390.007 19.0111 li
390.025 19.0111 li
390.044 19.0111 li
390.063 19.0111 li
390.081 19.0111 li
390.097 19.0111 li
390.115 19.0111 li
390.131 19.0111 li
390.148 19.0111 li
390.165 19.0111 li
390.181 19.0111 li
390.197 19.0111 li
390.213 19.0111 li
390.229 19.0111 li
390.246 19.0111 li
390.261 19.0111 li
390.277 19.0111 li
390.293 19.0111 li
390.308 19.0111 li
390.323 19.0111 li
390.337 19.0111 li
390.352 19.0111 li
390.368 19.0111 li
390.383 19.0111 li
390.397 19.0111 li
390.411 19.0111 li
390.427 19.0111 li
390.441 19.0111 li
390.454 19.0111 li
390.467 19.0111 li
390.481 19.0111 li
390.495 19.0111 li
390.509 19.0111 li
390.522 19.0111 li
390.537 19.0111 li
390.549 19.0111 li
390.563 19.0111 li
390.576 19.0111 li
390.588 19.0111 li
390.601 19.0111 li
390.614 19.0111 li
390.627 19.0111 li
390.64 19.0111 li
390.652 18.8951 li
390.664 18.8951 li
390.676 18.8951 li
390.688 18.8951 li
390.701 18.8951 li
390.712 18.8951 li
390.725 18.8951 li
390.738 18.8951 li
390.75 18.8951 li
390.761 18.8951 li
390.773 18.8951 li
390.784 18.8951 li
390.796 18.8951 li
390.808 18.8951 li
390.819 18.8951 li
390.83 18.8951 li
390.841 18.8951 li
390.852 18.8951 li
390.862 18.8951 li
390.874 18.8951 li
390.883 18.8951 li
390.894 18.8951 li
390.904 18.8951 li
390.915 18.8951 li
390.925 18.8951 li
390.936 18.8951 li
390.946 18.8951 li
390.957 18.8951 li
390.966 18.8951 li
390.976 18.8951 li
390.986 18.8951 li
390.995 18.8951 li
391.005 18.8951 li
391.014 18.8951 li
391.024 18.8951 li
391.033 18.8951 li
391.041 18.8951 li
391.051 18.8951 li
391.061 18.8951 li
391.069 18.8951 li
391.078 18.8951 li
391.086 18.8951 li
391.096 18.8951 li
391.104 18.8951 li
391.113 18.8951 li
391.121 18.8951 li
391.129 18.8951 li
391.138 18.8951 li
391.145 18.8951 li
391.152 18.8951 li
391.161 18.8951 li
391.169 18.8951 li
391.177 18.8951 li
391.185 18.8951 li
391.191 18.8951 li
391.198 18.8951 li
391.206 18.8951 li
391.213 18.8951 li
391.221 18.8951 li
391.228 18.8951 li
391.236 18.8951 li
391.243 18.8951 li
391.251 18.8951 li
391.257 18.8951 li
391.263 18.8951 li
391.27 18.8951 li
391.277 18.8951 li
391.284 18.8951 li
391.29 18.8951 li
391.297 18.8951 li
391.302 18.8951 li
391.309 18.8951 li
391.315 18.8951 li
391.322 18.8951 li
391.328 18.8951 li
391.334 18.8951 li
391.34 18.8951 li
391.345 18.8951 li
391.351 18.8951 li
391.356 18.8951 li
391.363 18.8951 li
391.368 18.8951 li
391.375 18.8951 li
391.381 18.8951 li
391.386 18.8951 li
391.392 18.8951 li
391.397 18.8951 li
391.402 18.8951 li
391.408 18.8951 li
391.413 18.8951 li
391.419 18.8951 li
391.425 18.8951 li
391.43 18.8951 li
391.435 18.8951 li
391.44 18.8951 li
391.446 18.8951 li
391.45 18.8951 li
391.455 18.8951 li
391.46 18.8951 li
391.465 18.8951 li
391.47 18.8951 li
391.475 18.8951 li
391.48 18.8951 li
391.485 18.8951 li
391.49 18.8951 li
391.495 18.8951 li
391.499 18.8951 li
391.503 18.8951 li
391.507 18.8951 li
391.512 18.8951 li
391.516 18.8951 li
391.52 18.8951 li
391.525 18.8951 li
391.529 18.8951 li
391.534 18.8951 li
391.538 18.8951 li
391.543 18.8951 li
391.546 18.8951 li
391.55 18.8951 li
391.554 18.8951 li
391.558 18.8951 li
391.562 18.8951 li
391.566 18.8951 li
391.57 18.8951 li
391.573 18.8951 li
391.577 18.8951 li
391.581 18.8951 li
391.584 18.8951 li
391.588 18.8951 li
391.591 18.8951 li
391.594 18.8951 li
391.598 18.8951 li
391.601 18.8951 li
391.605 18.8951 li
391.609 18.8951 li
391.611 18.8951 li
391.615 18.8951 li
391.619 18.8951 li
391.622 18.8951 li
391.625 18.8951 li
391.628 18.8951 li
391.631 18.8951 li
391.634 18.8951 li
391.637 18.8951 li
391.641 18.8951 li
391.643 18.8951 li
391.646 18.8951 li
391.649 18.8951 li
391.652 18.8951 li
391.655 18.8951 li
391.658 18.8951 li
391.661 18.8951 li
391.664 18.8951 li
391.667 18.8951 li
391.669 18.8951 li
391.672 18.8951 li
391.675 18.8951 li
391.678 18.8951 li
391.681 18.8951 li
391.684 18.8951 li
391.686 18.8951 li
391.689 18.8951 li
391.691 18.8951 li
391.693 18.8951 li
391.695 18.8951 li
391.699 18.8951 li
391.701 18.8951 li
391.703 18.8951 li
391.705 18.8951 li
391.708 18.8951 li
391.71 18.8951 li
391.712 18.8951 li
391.713 18.8951 li
391.716 18.8951 li
391.719 18.8951 li
391.721 18.8951 li
391.723 18.8951 li
391.725 18.8951 li
391.728 18.8951 li
391.729 18.8951 li
391.731 18.8951 li
391.734 18.8951 li
391.735 18.8951 li
391.738 18.8951 li
391.74 18.8951 li
391.741 18.8951 li
391.743 18.8951 li
391.745 18.8951 li
391.747 18.8951 li
391.749 18.8951 li
391.75 18.8951 li
391.752 18.8951 li
391.753 18.8951 li
391.756 18.8951 li
391.757 18.8951 li
391.759 18.8951 li
391.761 18.8951 li
391.762 18.8951 li
391.765 18.8951 li
391.766 18.8951 li
391.768 18.8951 li
391.769 18.8951 li
391.77 18.8951 li
391.773 18.8951 li
391.774 18.8951 li
391.776 18.8951 li
391.777 18.8951 li
391.779 18.8951 li
391.78 18.8951 li
391.782 18.8951 li
391.783 18.8951 li
391.785 18.8951 li
391.786 18.8951 li
391.787 18.8951 li
391.788 18.8951 li
391.79 18.8951 li
391.791 18.8951 li
391.793 18.8951 li
391.794 18.8951 li
391.795 18.8951 li
391.796 18.8951 li
391.797 18.8951 li
391.798 18.8951 li
391.8 18.8951 li
391.801 18.8951 li
391.802 18.8951 li
391.804 18.8951 li
391.805 18.8951 li
391.806 18.8951 li
391.807 18.8951 li
391.808 18.8951 li
391.809 18.8951 li
391.81 18.8951 li
391.812 18.8951 li
391.813 18.8951 li
391.814 18.8951 li
391.815 18.8951 li
391.816 18.8951 li
391.817 18.8951 li
391.818 18.8951 li
391.819 18.8951 li
391.821 18.8951 li
391.822 18.8951 li
391.823 18.8951 li
391.825 18.8951 li
391.826 18.8951 li
391.827 18.8951 li
391.828 18.8951 li
391.829 18.8951 li
391.831 18.8951 li
391.832 18.8951 li
391.833 18.8951 li
391.834 18.8951 li
391.835 18.8951 li
391.836 18.8951 li
391.837 18.8951 li
391.838 18.8951 li
391.839 18.8951 li
391.84 18.8951 li
391.841 18.8951 li
391.842 18.8951 li
391.843 18.8951 li
391.844 18.8951 li
391.845 18.8951 li
391.846 18.8951 li
391.847 18.8951 li
391.848 18.8951 li
391.849 18.8951 li
391.85 18.8951 li
391.851 18.8951 li
391.852 18.8951 li
391.853 18.8951 li
391.854 18.8951 li
391.855 18.8951 li
391.856 18.8951 li
391.857 18.8951 li
391.858 18.7781 li
391.859 18.7781 li
391.86 18.7781 li
391.861 18.7781 li
391.862 18.7781 li
391.863 18.7781 li
391.864 18.7781 li
391.865 18.7781 li
391.866 18.7781 li
391.867 18.7781 li
391.868 18.7781 li
391.869 18.7781 li
391.87 18.7781 li
391.871 18.7781 li
391.872 18.7781 li
391.873 18.7781 li
391.874 18.7781 li
391.875 18.7781 li
391.876 18.7781 li
391.877 18.7781 li
391.878 18.7781 li
391.879 18.7781 li
391.88 18.7781 li
391.881 18.7781 li
391.882 18.7781 li
391.883 18.7781 li
391.884 18.7781 li
391.885 18.7781 li
391.886 18.7781 li
391.887 18.7781 li
391.888 18.7781 li
391.889 18.7781 li
391.89 18.7781 li
391.891 18.7781 li
391.892 18.7781 li
391.893 18.7781 li
391.894 18.7781 li
391.895 18.7781 li
0 .990631 1 .000396735 cmyk
@
43.1036 243.831 mo
43.145 243.744 li
43.145 239.429 li
46.0286 238.146 li
46.0286 237.213 li
47.3743 235.347 li
47.3743 231.615 li
47.3743 229.283 li
51.0837 227.301 li
51.0837 225.318 li
53.3263 223.102 li
55.4141 221.469 li
55.4141 220.07 li
56.4063 218.437 li
58.2981 215.987 li
58.2981 213.888 li
58.2981 211.79 li
59.2016 210.39 li
62.5669 208.291 li
64.1196 207.707 li
67.6837 206.541 li
70.8716 204.209 li
71.4712 201.76 li
71.4712 199.544 li
71.4712 197.211 li
73.7555 196.395 li
75.8794 194.179 li
77.8649 192.313 li
78.3411 190.214 li
82.3227 188.115 li
82.7345 187.415 li
85.093 185.666 li
85.093 183.683 li
86.57 182.984 li
87.978 181.584 li
88.657 180.301 li
92.147 178.552 li
92.74 176.219 li
94.453 174.12 li
94.453 172.837 li
97.11 171.904 li
97.614 170.505 li
98.355 169.571 li
99.785 167.123 li
100.702 165.957 li
100.927 163.973 li
101.372 162.808 li
103.089 160.476 li
104.714 159.076 li
105.495 157.443 li
106.999 156.51 li
108.08 154.527 li
109.8 152.894 li
111.898 151.612 li
113.567 149.979 li
114.44 147.88 li
115.288 146.364 li
116.785 145.43 li
117.441 144.381 li
118.463 143.448 li
119.451 141.932 li
120.759 140.649 li
122.566 139.833 li
123.643 138.434 li
124.271 137.151 li
125.59 135.168 li
126.469 133.652 li
128.608 131.669 li
129.754 130.153 li
130.183 128.987 li
131.517 128.054 li
132.716 127.238 li
133.795 126.305 li
134.615 124.788 li
135.913 123.855 li
136.678 122.339 li
137.759 120.94 li
138.994 119.074 li
140.607 118.024 li
141.907 117.791 li
143.154 116.508 li
143.759 114.876 li
144.985 113.01 li
146.114 112.194 li
147.154 111.727 li
148.579 110.444 li
148.993 109.161 li
149.538 107.878 li
150.598 107.762 li
151.79 107.412 li
153.256 106.478 li
153.886 105.429 li
154.92 104.379 li
155.59 103.446 li
156.603 102.28 li
157.721 101.347 li
158.601 99.9481 li
159.649 98.6651 li
160.63 97.9651 li
161.491 97.0321 li
162.327 96.2151 li
163.624 95.5161 li
164.46 94.5831 li
165.565 93.3001 li
166.683 92.4831 li
167.538 91.3171 li
168.706 91.0851 li
169.945 90.0351 li
171.069 89.3351 li
172.174 88.0531 li
172.951 86.8861 li
174.011 85.8361 li
175.112 84.9031 li
176.118 83.9701 li
176.948 82.4551 li
177.949 81.9881 li
178.952 81.1711 li
180.087 79.7721 li
181.165 78.8391 li
182.084 78.2561 li
183.198 78.0231 li
184.029 77.2061 li
185.283 76.7391 li
186.327 76.1571 li
187.465 76.1571 li
188.213 75.2241 li
189.09 74.8731 li
190.282 74.1741 li
191.441 73.2411 li
192.525 72.8911 li
193.413 72.5411 li
194.613 72.3081 li
195.452 71.8411 li
196.461 71.3751 li
197.501 70.9081 li
198.364 70.2081 li
199.204 69.8591 li
200.206 68.9261 li
201.306 68.2261 li
202.391 67.8761 li
203.477 67.6431 li
204.386 66.9441 li
205.396 66.4771 li
206.271 65.6601 li
207.248 65.0781 li
208.116 64.2611 li
209.081 63.5611 li
209.868 63.0951 li
210.916 62.3951 li
212.013 61.6951 li
213.012 61.2291 li
213.871 60.5291 li
214.755 60.4131 li
215.779 60.0621 li
216.794 59.3631 li
217.573 58.8961 li
218.392 57.9631 li
219.316 57.8471 li
220.186 57.4971 li
221.104 57.2641 li
221.958 56.9141 li
222.852 56.7971 li
223.693 56.5641 li
224.58 56.3301 li
225.517 56.0971 li
226.388 55.6311 li
227.193 55.0481 li
227.981 54.6981 li
228.732 54.1151 li
229.558 53.7651 li
230.395 53.6481 li
231.329 53.5321 li
232.129 53.2981 li
232.945 52.8321 li
233.787 52.7151 li
234.514 52.7151 li
235.404 52.0161 li
236.215 51.5491 li
237.059 51.1991 li
237.919 50.8491 li
238.751 50.3831 li
239.546 50.0331 li
240.322 49.6831 li
241.138 49.6831 li
241.86 48.9831 li
242.62 48.5171 li
243.431 47.5841 li
244.249 47.4671 li
245.051 47.2341 li
245.848 47.1171 li
246.675 47.0011 li
247.393 46.8841 li
248.199 46.5341 li
248.992 45.4851 li
249.755 45.0181 li
250.441 44.9011 li
251.274 44.9011 li
252.009 44.7851 li
252.691 44.0851 li
253.429 43.6191 li
254.165 43.5021 li
254.895 43.2691 li
255.571 42.9191 li
256.278 42.5691 li
256.97 42.1031 li
257.695 41.5191 li
258.432 41.4031 li
259.108 41.4031 li
259.817 41.1701 li
260.481 41.0531 li
261.133 40.7031 li
261.825 40.4701 li
262.454 40.3531 li
263.207 40.0041 li
263.83 39.7711 li
264.469 39.4201 li
265.133 39.3041 li
265.785 39.1871 li
266.484 38.9541 li
267.174 38.7211 li
267.768 38.1381 li
268.438 37.9051 li
269.061 37.7871 li
269.702 37.5541 li
270.327 37.4381 li
270.906 37.4381 li
271.566 37.3211 li
272.232 37.0881 li
272.859 37.0881 li
273.5 37.0881 li
274.123 36.9711 li
274.724 36.6211 li
275.361 36.6211 li
275.947 36.6211 li
276.565 36.3881 li
277.168 36.2721 li
277.767 36.1551 li
278.329 36.1551 li
278.9 36.0391 li
279.504 35.9211 li
280.061 35.5721 li
280.645 35.3391 li
281.231 35.3391 li
281.82 34.9891 li
282.352 34.7551 li
282.938 34.7551 li
283.496 34.4061 li
284.061 34.4061 li
284.616 34.1731 li
285.15 33.9391 li
285.67 33.8221 li
286.217 33.7061 li
286.777 33.4731 li
287.336 33.3561 li
287.859 33.2391 li
288.424 33.0061 li
288.948 32.8891 li
289.491 32.7731 li
290.059 32.5401 li
290.598 32.4231 li
291.091 32.4231 li
291.595 32.3071 li
292.103 32.1891 li
292.639 31.8401 li
293.142 31.6071 li
293.678 31.6071 li
294.199 31.6071 li
294.709 31.3731 li
295.209 31.2571 li
295.711 31.2571 li
296.217 31.0231 li
296.714 30.9071 li
297.197 30.7901 li
297.68 30.7901 li
298.14 30.4401 li
298.633 30.4401 li
299.109 29.9741 li
299.606 29.9741 li
300.097 29.8571 li
300.595 29.8571 li
301.075 29.8571 li
301.558 29.7411 li
302 29.6241 li
302.475 29.6241 li
302.93 29.6241 li
303.38 29.6241 li
303.855 29.5081 li
304.316 29.2741 li
304.774 28.8081 li
305.233 28.8081 li
305.66 28.8081 li
306.127 28.6911 li
306.574 28.6911 li
307.006 28.6911 li
307.444 28.5741 li
307.877 28.5741 li
308.309 28.4581 li
308.739 28.4581 li
309.156 28.4581 li
309.58 28.1081 li
310.01 28.1081 li
310.424 28.1081 li
310.869 28.1081 li
311.285 27.8751 li
311.688 27.8751 li
312.091 27.7581 li
312.495 27.7581 li
312.907 27.7581 li
313.302 27.5241 li
313.705 27.5241 li
314.11 27.5241 li
314.514 27.5241 li
314.908 27.5241 li
315.301 27.4081 li
315.709 27.0581 li
316.123 26.942 li
316.525 26.942 li
316.918 26.7081 li
317.315 26.5921 li
317.704 26.5921 li
318.094 26.5921 li
318.479 26.5921 li
318.864 26.5921 li
319.235 26.4751 li
319.611 26.3581 li
319.988 26.1251 li
320.366 26.0091 li
320.743 25.8921 li
321.095 25.8921 li
321.454 25.8921 li
321.82 25.7761 li
322.183 25.7761 li
322.533 25.7761 li
322.875 25.7761 li
323.236 25.7761 li
323.595 25.7761 li
323.952 25.7761 li
324.303 25.3091 li
324.639 25.3091 li
324.987 25.3091 li
325.319 25.0761 li
325.649 25.0761 li
325.986 25.0761 li
326.332 24.8421 li
326.685 24.7261 li
327.01 24.6091 li
327.345 24.6091 li
327.686 24.6091 li
328.013 24.6091 li
328.346 24.6091 li
328.674 24.6091 li
329.002 24.6091 li
329.317 24.4921 li
329.64 24.4921 li
329.957 24.4921 li
330.264 24.4921 li
330.588 24.4921 li
330.905 24.3761 li
331.222 24.2591 li
331.535 24.2591 li
331.846 24.2591 li
332.161 24.2591 li
332.472 24.2591 li
332.78 24.2591 li
333.075 24.1431 li
333.381 24.1431 li
333.688 24.1431 li
333.997 23.9101 li
334.299 23.9101 li
334.591 23.7921 li
334.881 23.7921 li
335.183 23.7921 li
335.479 23.6761 li
335.764 23.6761 li
336.055 23.6761 li
336.346 23.6761 li
336.628 23.6761 li
336.915 23.6761 li
337.2 23.6761 li
337.483 23.6761 li
337.755 23.6761 li
338.042 23.6761 li
338.311 23.6761 li
338.587 23.6761 li
338.859 23.6761 li
339.136 23.6761 li
339.399 23.6761 li
339.667 23.6761 li
339.938 23.6761 li
340.196 23.5591 li
340.456 23.5591 li
340.726 23.5591 li
340.992 23.5591 li
341.25 23.5591 li
341.524 23.5591 li
341.784 23.5591 li
342.034 23.5591 li
342.3 23.5591 li
342.554 23.5591 li
342.811 23.5591 li
343.063 23.5591 li
343.315 23.4431 li
343.558 23.4431 li
343.802 23.3261 li
344.043 23.3261 li
344.292 23.2101 li
344.54 23.2101 li
344.792 23.2101 li
345.034 23.2101 li
345.274 23.2101 li
345.52 23.093 li
345.763 23.093 li
346.001 23.093 li
346.241 23.093 li
346.475 23.093 li
346.72 23.093 li
346.953 23.093 li
347.175 23.093 li
347.418 23.093 li
347.645 23.093 li
347.872 23.093 li
348.102 23.093 li
348.33 23.093 li
348.553 23.093 li
348.772 23.093 li
348.991 23.093 li
349.21 23.093 li
349.431 23.093 li
349.65 23.093 li
349.882 23.093 li
350.106 23.093 li
350.325 23.093 li
350.537 23.093 li
350.753 23.093 li
350.961 22.9761 li
351.186 22.9761 li
351.398 22.8601 li
351.609 22.8601 li
351.815 22.8601 li
352.021 22.8601 li
352.222 22.7431 li
352.43 22.7431 li
352.635 22.6261 li
352.834 22.6261 li
353.037 22.6261 li
353.24 22.6261 li
353.441 22.6261 li
353.638 22.5101 li
353.838 22.5101 li
354.036 22.5101 li
354.232 22.5101 li
354.434 22.5101 li
354.634 22.5101 li
354.833 22.3931 li
355.027 22.3931 li
355.219 22.2771 li
355.411 22.2771 li
355.604 22.2771 li
355.793 22.2771 li
355.984 22.2771 li
356.172 22.2771 li
356.356 22.2771 li
356.538 22.2771 li
356.727 22.2771 li
356.911 22.2771 li
357.097 22.0441 li
357.279 22.0441 li
357.467 22.0441 li
357.65 22.0441 li
357.828 21.9261 li
358.002 21.9261 li
358.183 21.9261 li
358.359 21.9261 li
358.535 21.9261 li
358.711 21.8101 li
358.888 21.8101 li
359.06 21.6931 li
359.234 21.6931 li
359.403 21.6931 li
359.572 21.6931 li
359.745 21.6931 li
359.917 21.6931 li
360.083 21.6931 li
360.252 21.6931 li
360.419 21.6931 li
360.588 21.6931 li
360.754 21.6931 li
360.916 21.6931 li
361.086 21.6931 li
361.252 21.6931 li
361.413 21.5771 li
361.578 21.5771 li
361.743 21.5771 li
361.903 21.5771 li
362.065 21.5771 li
362.226 21.3441 li
362.388 21.2271 li
362.555 21.1101 li
362.713 21.1101 li
362.873 21.1101 li
363.034 21.1101 li
363.188 21.1101 li
363.341 21.1101 li
363.495 21.1101 li
363.656 21.1101 li
363.808 20.994 li
363.96 20.8771 li
364.116 20.8771 li
364.265 20.8771 li
364.414 20.8771 li
364.566 20.8771 li
364.72 20.7601 li
364.873 20.6441 li
365.022 20.5271 li
365.168 20.4111 li
365.316 20.2941 li
365.46 20.2941 li
365.603 20.2941 li
365.749 20.1781 li
365.893 20.0601 li
366.035 20.0601 li
366.177 20.0601 li
366.321 20.0601 li
366.462 20.0601 li
366.603 20.0601 li
366.745 20.0601 li
366.884 19.9441 li
367.02 19.9441 li
367.154 19.9441 li
367.296 19.9441 li
367.434 19.9441 li
367.569 19.9441 li
367.703 19.9441 li
367.839 19.9441 li
367.976 19.9441 li
368.107 19.9441 li
368.236 19.9441 li
368.368 19.9441 li
368.496 19.9441 li
368.627 19.9441 li
368.755 19.9441 li
368.886 19.9441 li
369.016 19.9441 li
369.141 19.9441 li
369.268 19.9441 li
369.393 19.9441 li
369.52 19.9441 li
369.65 19.9441 li
369.778 19.9441 li
369.907 19.9441 li
370.033 19.9441 li
370.16 19.9441 li
370.281 19.8271 li
370.405 19.7111 li
370.519 19.7111 li
370.641 19.7111 li
370.765 19.7111 li
370.883 19.7111 li
370.998 19.7111 li
371.119 19.7111 li
371.237 19.7111 li
371.352 19.7111 li
371.468 19.7111 li
371.585 19.7111 li
371.705 19.7111 li
371.826 19.7111 li
371.937 19.7111 li
372.054 19.7111 li
372.167 19.7111 li
372.281 19.7111 li
372.393 19.7111 li
372.508 19.7111 li
372.622 19.7111 li
372.736 19.7111 li
372.847 19.7111 li
372.959 19.7111 li
373.068 19.7111 li
373.179 19.7111 li
373.29 19.7111 li
373.398 19.7111 li
373.504 19.7111 li
373.611 19.7111 li
373.72 19.7111 li
373.826 19.7111 li
373.933 19.7111 li
374.037 19.7111 li
374.139 19.7111 li
374.244 19.7111 li
374.343 19.7111 li
374.445 19.7111 li
374.546 19.7111 li
374.65 19.7111 li
374.753 19.7111 li
374.854 19.7111 li
374.954 19.7111 li
375.056 19.7111 li
375.152 19.7111 li
375.25 19.7111 li
375.351 19.7111 li
375.446 19.7111 li
375.544 19.7111 li
375.642 19.7111 li
375.738 19.5941 li
375.834 19.5941 li
375.927 19.5941 li
376.018 19.5941 li
376.111 19.5941 li
376.205 19.5941 li
376.297 19.5941 li
376.393 19.5941 li
376.484 19.5941 li
376.576 19.5941 li
376.668 19.5941 li
376.759 19.5941 li
376.85 19.5941 li
376.939 19.5941 li
377.027 19.5941 li
377.115 19.5941 li
377.204 19.5941 li
377.288 19.5941 li
377.379 19.5941 li
377.464 19.5941 li
377.55 19.5941 li
377.637 19.5941 li
377.722 19.5941 li
377.806 19.5941 li
377.891 19.5941 li
377.976 19.5941 li
378.061 19.5941 li
378.148 19.5941 li
378.23 19.5941 li
378.315 19.5941 li
378.4 19.5941 li
378.482 19.5941 li
378.562 19.5941 li
378.645 19.5941 li
378.727 19.5941 li
378.807 19.5941 li
378.886 19.5941 li
378.968 19.5941 li
379.045 19.5941 li
379.124 19.5941 li
379.204 19.5941 li
379.28 19.5941 li
379.357 19.5941 li
379.436 19.5941 li
379.516 19.5941 li
379.592 19.5941 li
379.667 19.4781 li
379.742 19.4781 li
379.818 19.4781 li
379.895 19.3611 li
379.97 19.3611 li
380.045 19.3611 li
380.117 19.3611 li
380.188 19.3611 li
380.26 19.3611 li
380.334 19.3611 li
380.406 19.3611 li
380.481 19.3611 li
380.554 19.3611 li
380.626 19.3611 li
380.695 19.3611 li
380.766 19.3611 li
380.838 19.3611 li
380.91 19.3611 li
380.983 19.3611 li
381.049 19.3611 li
381.118 19.3611 li
381.185 19.3611 li
381.254 19.3611 li
381.322 19.3611 li
381.387 19.3611 li
381.454 19.3611 li
381.521 19.3611 li
381.587 19.3611 li
381.655 19.3611 li
381.721 19.3611 li
381.786 19.3611 li
381.852 19.3611 li
381.916 19.3611 li
381.981 19.3611 li
382.047 19.3611 li
382.108 19.3611 li
382.171 19.3611 li
382.235 19.3611 li
382.297 19.3611 li
382.361 19.3611 li
382.422 19.3611 li
382.483 19.3611 li
382.543 19.3611 li
382.604 19.3611 li
382.663 19.3611 li
382.724 19.3611 li
382.783 19.3611 li
382.843 19.244 li
382.902 19.244 li
382.96 19.244 li
383.019 19.244 li
383.077 19.244 li
383.134 19.244 li
383.19 19.244 li
383.247 19.244 li
383.304 19.244 li
383.361 19.244 li
383.416 19.244 li
383.472 19.244 li
383.528 19.244 li
383.583 19.244 li
383.637 19.244 li
383.69 19.244 li
383.745 19.244 li
383.801 19.1281 li
383.853 19.1281 li
383.909 19.1281 li
383.961 19.1281 li
384.015 19.1281 li
384.066 19.1281 li
384.121 19.1281 li
384.176 19.1281 li
384.227 19.1281 li
384.277 19.1281 li
384.325 19.1281 li
384.377 19.1281 li
384.428 19.1281 li
384.48 19.1281 li
384.529 19.1281 li
384.578 19.1281 li
384.628 19.1281 li
384.676 19.1281 li
384.726 19.1281 li
384.773 19.1281 li
384.822 19.1281 li
384.87 19.1281 li
384.919 19.1281 li
384.966 19.1281 li
385.014 19.1281 li
385.061 19.0111 li
385.109 19.0111 li
385.157 19.0111 li
385.2 19.0111 li
385.249 19.0111 li
385.293 19.0111 li
385.338 19.0111 li
385.385 19.0111 li
385.429 19.0111 li
385.473 19.0111 li
385.518 19.0111 li
385.563 19.0111 li
385.606 19.0111 li
385.65 19.0111 li
385.695 19.0111 li
385.738 19.0111 li
385.78 19.0111 li
385.823 19.0111 li
385.865 19.0111 li
385.909 19.0111 li
385.95 19.0111 li
385.992 19.0111 li
386.032 19.0111 li
386.072 19.0111 li
386.115 19.0111 li
386.154 19.0111 li
386.194 19.0111 li
386.234 19.0111 li
386.272 19.0111 li
386.313 19.0111 li
386.351 19.0111 li
386.389 19.0111 li
386.427 19.0111 li
386.466 19.0111 li
386.505 19.0111 li
386.542 19.0111 li
386.581 19.0111 li
386.62 19.0111 li
386.656 19.0111 li
386.693 19.0111 li
386.73 19.0111 li
386.766 19.0111 li
386.802 19.0111 li
386.84 19.0111 li
386.875 19.0111 li
386.911 19.0111 li
386.945 19.0111 li
386.979 19.0111 li
387.013 19.0111 li
387.047 19.0111 li
387.081 19.0111 li
387.115 19.0111 li
387.151 19.0111 li
387.184 18.8951 li
387.216 18.8951 li
387.25 18.8951 li
387.283 18.8951 li
387.315 18.8951 li
387.349 18.8951 li
387.381 18.8951 li
387.413 18.8951 li
387.445 18.8951 li
387.476 18.8951 li
387.508 18.8951 li
387.54 18.8951 li
387.57 18.8951 li
387.602 18.8951 li
387.632 18.8951 li
387.663 18.8951 li
387.693 18.8951 li
387.724 18.8951 li
387.754 18.8951 li
387.784 18.8951 li
387.813 18.8951 li
387.843 18.8951 li
387.873 18.8951 li
387.902 18.8951 li
387.933 18.8951 li
387.961 18.8951 li
387.989 18.8951 li
388.018 18.8951 li
388.045 18.8951 li
388.074 18.8951 li
388.103 18.8951 li
388.13 18.8951 li
388.158 18.8951 li
388.186 18.8951 li
388.213 18.8951 li
388.24 18.8951 li
388.266 18.8951 li
388.293 18.8951 li
388.32 18.8951 li
388.346 18.8951 li
388.373 18.8951 li
388.4 18.8951 li
388.426 18.8951 li
388.452 18.8951 li
388.477 18.8951 li
388.5 18.8951 li
388.526 18.8951 li
388.552 18.8951 li
388.576 18.8951 li
388.601 18.8951 li
388.627 18.8951 li
388.652 18.8951 li
388.675 18.8951 li
388.699 18.8951 li
388.723 18.8951 li
388.746 18.8951 li
388.769 18.8951 li
388.793 18.8951 li
388.817 18.8951 li
388.84 18.8951 li
388.861 18.8951 li
388.884 18.8951 li
388.907 18.8951 li
388.93 18.8951 li
388.952 18.8951 li
388.974 18.8951 li
388.996 18.8951 li
389.018 18.8951 li
389.04 18.8951 li
389.063 18.8951 li
389.086 18.8951 li
389.109 18.8951 li
389.13 18.8951 li
389.152 18.8951 li
389.172 18.8951 li
389.193 18.8951 li
389.213 18.8951 li
389.232 18.8951 li
389.253 18.8951 li
389.275 18.8951 li
389.294 18.8951 li
389.314 18.8951 li
389.333 18.8951 li
389.352 18.8951 li
389.372 18.8951 li
389.391 18.8951 li
389.412 18.8951 li
389.43 18.8951 li
389.449 18.8951 li
389.468 18.8951 li
389.485 18.8951 li
389.504 18.8951 li
389.522 18.8951 li
389.54 18.8951 li
389.559 18.8951 li
389.577 18.8951 li
389.595 18.8951 li
389.612 18.8951 li
389.63 18.8951 li
389.647 18.8951 li
389.665 18.8951 li
389.683 18.8951 li
389.702 18.8951 li
389.718 18.7781 li
389.735 18.7781 li
389.753 18.7781 li
389.77 18.7781 li
389.786 18.7781 li
389.802 18.7781 li
389.819 18.7781 li
389.835 18.7781 li
389.85 18.7781 li
389.866 18.7781 li
389.884 18.7781 li
389.898 18.7781 li
389.915 18.7781 li
389.932 18.7781 li
389.947 18.7781 li
389.963 18.7781 li
389.978 18.7781 li
389.992 18.7781 li
390.008 18.7781 li
390.023 18.7781 li
390.038 18.7781 li
390.052 18.7781 li
390.066 18.7781 li
390.081 18.7781 li
390.095 18.7781 li
390.109 18.7781 li
390.124 18.7781 li
390.138 18.7781 li
390.151 18.7781 li
390.165 18.7781 li
390.18 18.7781 li
390.193 18.7781 li
390.207 18.7781 li
390.22 18.7781 li
390.233 18.7781 li
390.247 18.7781 li
390.26 18.7781 li
390.273 18.7781 li
390.286 18.7781 li
390.299 18.7781 li
390.313 18.7781 li
390.325 18.7781 li
390.337 18.7781 li
390.349 18.7781 li
390.361 18.7781 li
390.374 18.7781 li
390.386 18.7781 li
390.398 18.7781 li
390.411 18.7781 li
390.422 18.7781 li
390.435 18.7781 li
390.446 18.7781 li
390.458 18.7781 li
390.469 18.7781 li
390.481 18.7781 li
390.493 18.7781 li
390.504 18.7781 li
390.514 18.7781 li
390.525 18.7781 li
390.537 18.7781 li
390.547 18.7781 li
390.558 18.7781 li
390.568 18.7781 li
390.579 18.7781 li
390.588 18.7781 li
390.6 18.7781 li
390.609 18.7781 li
390.619 18.7781 li
390.631 18.7781 li
390.64 18.7781 li
390.65 18.7781 li
390.66 18.7781 li
390.67 18.7781 li
390.68 18.7781 li
390.689 18.7781 li
390.7 18.7781 li
390.709 18.7781 li
390.718 18.7781 li
390.728 18.7781 li
390.737 18.7781 li
390.747 18.7781 li
390.756 18.7781 li
390.765 18.7781 li
390.775 18.7781 li
390.782 18.7781 li
390.791 18.7781 li
390.799 18.7781 li
390.808 18.7781 li
390.816 18.7781 li
390.825 18.7781 li
390.834 18.7781 li
390.843 18.7781 li
390.852 18.7781 li
390.861 18.7781 li
390.869 18.7781 li
390.877 18.7781 li
390.885 18.7781 li
390.892 18.7781 li
390.9 18.7781 li
390.908 18.7781 li
390.916 18.7781 li
390.924 18.7781 li
390.932 18.7781 li
390.94 18.7781 li
390.948 18.7781 li
390.956 18.7781 li
390.963 18.7781 li
390.971 18.7781 li
390.979 18.7781 li
390.986 18.7781 li
390.993 18.7781 li
391 18.7781 li
391.008 18.7781 li
391.015 18.7781 li
391.022 18.7781 li
391.029 18.7781 li
391.036 18.7781 li
391.043 18.7781 li
391.05 18.7781 li
391.056 18.7781 li
391.063 18.7781 li
391.069 18.7781 li
391.075 18.7781 li
391.082 18.7781 li
391.088 18.7781 li
391.094 18.7781 li
391.1 18.7781 li
391.105 18.7781 li
391.112 18.7781 li
391.118 18.7781 li
391.124 18.7781 li
391.129 18.7781 li
391.135 18.7781 li
391.142 18.7781 li
391.148 18.7781 li
391.155 18.7781 li
391.161 18.7781 li
391.166 18.7781 li
391.171 18.7781 li
391.178 18.7781 li
391.184 18.7781 li
391.189 18.7781 li
391.195 18.7781 li
391.2 18.7781 li
391.206 18.7781 li
391.212 18.7781 li
391.217 18.7781 li
391.222 18.7781 li
391.228 18.7781 li
391.234 18.7781 li
391.24 18.7781 li
391.245 18.7781 li
391.25 18.7781 li
391.255 18.7781 li
391.26 18.7781 li
391.266 18.7781 li
391.271 18.7781 li
391.275 18.7781 li
391.281 18.7781 li
391.286 18.7781 li
391.291 18.7781 li
391.296 18.7781 li
391.3 18.7781 li
391.306 18.7781 li
391.311 18.7781 li
391.316 18.7781 li
391.32 18.7781 li
391.325 18.7781 li
391.329 18.7781 li
391.334 18.7781 li
391.338 18.7781 li
391.343 18.7781 li
391.347 18.7781 li
391.352 18.7781 li
391.356 18.7781 li
391.362 18.7781 li
391.366 18.7781 li
391.37 18.7781 li
391.375 18.7781 li
391.379 18.7781 li
391.383 18.7781 li
391.387 18.7781 li
391.391 18.7781 li
391.395 18.7781 li
391.399 18.7781 li
391.404 18.7781 li
391.407 18.7781 li
391.411 18.7781 li
391.415 18.7781 li
391.418 18.7781 li
391.422 18.7781 li
391.425 18.7781 li
391.43 18.7781 li
391.433 18.7781 li
391.437 18.7781 li
391.44 18.7781 li
391.444 18.7781 li
391.448 18.7781 li
391.452 18.7781 li
391.456 18.7781 li
391.459 18.7781 li
391.462 18.7781 li
391.465 18.7781 li
391.469 18.7781 li
391.473 18.7781 li
391.476 18.7781 li
391.479 18.7781 li
391.482 18.7781 li
391.486 18.7781 li
391.488 18.7781 li
391.492 18.7781 li
391.495 18.7781 li
391.498 18.7781 li
391.501 18.7781 li
391.505 18.7781 li
391.508 18.7781 li
391.511 18.7781 li
391.515 18.7781 li
391.517 18.7781 li
391.52 18.7781 li
391.523 18.7781 li
391.527 18.7781 li
391.53 18.7781 li
391.533 18.7781 li
391.536 18.7781 li
391.538 18.7781 li
391.541 18.7781 li
391.544 18.7781 li
391.547 18.7781 li
391.55 18.7781 li
391.553 18.7781 li
391.555 18.7781 li
391.558 18.7781 li
391.561 18.7781 li
391.563 18.7781 li
391.566 18.7781 li
391.57 18.7781 li
391.572 18.7781 li
391.575 18.7781 li
391.577 18.7781 li
391.579 18.7781 li
391.582 18.7781 li
391.584 18.7781 li
391.587 18.7781 li
391.589 18.7781 li
391.591 18.7781 li
391.594 18.7781 li
391.597 18.7781 li
391.6 18.7781 li
391.602 18.7781 li
391.604 18.7781 li
391.606 18.7781 li
391.609 18.7781 li
391.611 18.7781 li
391.613 18.7781 li
391.615 18.7781 li
391.618 18.7781 li
391.62 18.7781 li
391.622 18.7781 li
391.624 18.7781 li
391.627 18.7781 li
391.629 18.7781 li
391.63 18.7781 li
391.633 18.7781 li
391.635 18.7781 li
391.637 18.7781 li
391.639 18.7781 li
391.641 18.7781 li
391.644 18.7781 li
391.646 18.7781 li
391.648 18.7781 li
391.65 18.7781 li
391.652 18.7781 li
391.654 18.7781 li
391.656 18.7781 li
391.658 18.7781 li
391.66 18.7781 li
391.662 18.7781 li
391.664 18.7781 li
391.665 18.7781 li
391.668 18.7781 li
391.67 18.7781 li
391.672 18.7781 li
391.674 18.7781 li
391.675 18.7781 li
391.677 18.7781 li
391.678 18.7781 li
391.68 18.7781 li
391.682 18.7781 li
391.684 18.7781 li
391.685 18.7781 li
391.686 18.7781 li
391.689 18.7781 li
391.69 18.7781 li
391.693 18.7781 li
391.694 18.7781 li
391.695 18.7781 li
391.697 18.7781 li
391.699 18.7781 li
391.701 18.7781 li
391.702 18.7781 li
391.703 18.7781 li
391.705 18.7781 li
391.707 18.7781 li
391.708 18.7781 li
391.71 18.7781 li
391.711 18.7781 li
391.713 18.7781 li
391.714 18.7781 li
391.716 18.7781 li
391.717 18.7781 li
391.72 18.7781 li
391.722 18.7781 li
391.723 18.7781 li
391.724 18.7781 li
391.725 18.7781 li
391.727 18.7781 li
391.729 18.7781 li
391.73 18.7781 li
391.731 18.7781 li
391.732 18.7781 li
391.734 18.7781 li
391.735 18.7781 li
391.736 18.7781 li
391.738 18.7781 li
391.74 18.7781 li
391.741 18.7781 li
391.742 18.7781 li
391.743 18.7781 li
391.744 18.7781 li
391.746 18.7781 li
391.747 18.7781 li
391.748 18.7781 li
391.749 18.7781 li
391.75 18.7781 li
391.752 18.7781 li
391.754 18.7781 li
391.755 18.7781 li
391.756 18.7781 li
391.758 18.7781 li
391.759 18.7781 li
391.761 18.7781 li
391.762 18.7781 li
391.764 18.7781 li
391.765 18.7781 li
391.766 18.7781 li
391.767 18.7781 li
391.768 18.7781 li
391.769 18.7781 li
391.77 18.7781 li
391.771 18.7781 li
391.772 18.7781 li
391.773 18.7781 li
391.774 18.7781 li
391.775 18.7781 li
391.776 18.7781 li
391.777 18.7781 li
391.778 18.7781 li
391.779 18.7781 li
391.781 18.7781 li
391.782 18.7781 li
391.783 18.7781 li
391.785 18.7781 li
391.786 18.7781 li
391.788 18.7781 li
391.789 18.7781 li
391.79 18.7781 li
391.791 18.7781 li
391.792 18.7781 li
391.793 18.7781 li
391.794 18.7781 li
391.795 18.7781 li
391.796 18.7781 li
391.797 18.7781 li
391.798 18.7781 li
391.799 18.7781 li
391.8 18.7781 li
391.801 18.7781 li
391.802 18.7781 li
391.803 18.7781 li
391.804 18.7781 li
391.805 18.7781 li
391.806 18.7781 li
391.807 18.7781 li
391.808 18.7781 li
391.809 18.7781 li
391.81 18.7781 li
391.811 18.7781 li
391.812 18.7781 li
391.813 18.7781 li
391.814 18.7781 li
391.815 18.7781 li
391.816 18.7781 li
391.817 18.7781 li
391.818 18.7781 li
391.819 18.7781 li
391.82 18.7781 li
391.821 18.7781 li
391.822 18.7781 li
391.823 18.7781 li
391.824 18.7781 li
391.825 18.7781 li
391.826 18.7781 li
391.827 18.7781 li
391.828 18.7781 li
391.829 18.7781 li
391.83 18.7781 li
391.831 18.7781 li
391.832 18.7781 li
391.833 18.7781 li
391.834 18.7781 li
391.835 18.7781 li
391.836 18.7781 li
391.837 18.7781 li
391.838 18.7781 li
391.839 18.7781 li
391.84 18.7781 li
391.841 18.7781 li
391.842 18.7781 li
391.843 18.7781 li
391.844 18.7781 li
391.845 18.7781 li
391.846 18.7781 li
391.847 18.7781 li
391.848 18.7781 li
391.849 18.7781 li
391.85 18.7781 li
391.851 18.7781 li
391.852 18.7781 li
391.853 18.7781 li
391.854 18.7781 li
391.855 18.7781 li
391.856 18.7781 li
391.857 18.7781 li
391.858 18.7781 li
391.859 18.7781 li
391.86 18.7781 li
391.861 18.7781 li
391.862 18.7781 li
391.863 18.7781 li
391.864 18.7781 li
391.865 18.7781 li
391.866 18.7781 li
391.867 18.7781 li
391.868 18.7781 li
391.869 18.7781 li
391.87 18.7781 li
391.871 18.7781 li
391.872 18.7781 li
391.873 18.7781 li
391.874 18.7781 li
391.875 18.7781 li
391.876 18.7781 li
391.877 18.7781 li
391.878 18.7781 li
391.879 18.7781 li
391.88 18.7781 li
391.881 18.7781 li
391.882 18.7781 li
391.883 18.7781 li
391.884 18.7781 li
391.885 18.7781 li
391.886 18.7781 li
391.887 18.7781 li
391.888 18.7781 li
391.889 18.7781 li
391.89 18.7781 li
391.891 18.7781 li
391.892 18.7781 li
391.893 18.7781 li
391.894 18.7781 li
391.895 18.7781 li
.895628 .7673 0 0 cmyk
@
0 lj
43.145 239.112 mo
43.145 245.112 li
40.145 242.112 mo
46.145 242.112 li
41.0239 239.991 mo
45.2661 244.232 li
41.0239 244.232 mo
45.2661 239.991 li
@
55.4141 218.469 mo
55.4141 224.469 li
52.4141 221.469 mo
58.4141 221.469 li
53.293 219.348 mo
57.5352 223.59 li
53.293 223.59 mo
57.5352 219.348 li
@
70.8716 201.209 mo
70.8716 207.209 li
67.8716 204.209 mo
73.8716 204.209 li
68.7505 202.088 mo
72.9927 206.33 li
68.7505 206.33 mo
72.9927 202.088 li
@
85.093 182.666 mo
85.093 188.666 li
82.0934 185.666 mo
88.093 185.666 li
82.9727 183.545 mo
87.215 187.787 li
82.9727 187.787 mo
87.215 183.545 li
@
97.614 167.505 mo
97.614 173.505 li
94.614 170.505 mo
100.614 170.505 li
95.493 168.384 mo
99.735 172.626 li
95.493 172.626 mo
99.735 168.384 li
@
108.08 151.527 mo
108.08 157.527 li
105.08 154.527 mo
111.08 154.527 li
105.959 152.407 mo
110.201 156.648 li
105.959 156.648 mo
110.201 152.407 li
@
120.759 137.649 mo
120.759 143.649 li
117.759 140.649 mo
123.759 140.649 li
118.638 138.528 mo
122.88 142.77 li
118.638 142.77 mo
122.88 138.528 li
@
132.716 124.237 mo
132.716 130.237 li
129.716 127.237 mo
135.716 127.237 li
130.595 125.117 mo
134.837 129.358 li
130.595 129.358 mo
134.837 125.117 li
@
143.759 111.876 mo
143.759 117.876 li
140.759 114.876 mo
146.759 114.876 li
141.638 112.755 mo
145.88 116.996 li
141.638 116.996 mo
145.88 112.755 li
@
153.886 102.429 mo
153.886 108.429 li
150.886 105.429 mo
156.886 105.429 li
151.765 103.308 mo
156.007 107.55 li
151.765 107.55 mo
156.007 103.308 li
@
163.625 92.5161 mo
163.625 98.5161 li
160.625 95.5161 mo
166.625 95.5161 li
161.504 93.3951 mo
165.746 97.6371 li
161.504 97.6371 mo
165.746 93.3951 li
@
174.011 82.8361 mo
174.011 88.8361 li
171.011 85.8361 mo
177.011 85.8361 li
171.89 83.7151 mo
176.132 87.9571 li
171.89 87.9571 mo
176.132 83.7151 li
@
184.029 74.2061 mo
184.029 80.2061 li
181.029 77.2061 mo
187.029 77.2061 li
181.908 75.0851 mo
186.15 79.3271 li
181.908 79.3271 mo
186.15 75.0851 li
@
194.613 69.3081 mo
194.613 75.3081 li
191.613 72.3081 mo
197.613 72.3081 li
192.491 70.1871 mo
196.734 74.4291 li
192.491 74.4291 mo
196.734 70.1871 li
@
204.386 63.9431 mo
204.386 69.9431 li
201.386 66.9431 mo
207.386 66.9431 li
202.265 64.8231 mo
206.507 69.0641 li
202.265 69.0641 mo
206.507 64.8231 li
@
213.872 57.5291 mo
213.872 63.5291 li
210.872 60.5291 mo
216.872 60.5291 li
211.75 58.4081 mo
215.993 62.6501 li
211.75 62.6501 mo
215.993 58.4081 li
@
222.852 53.7971 mo
222.852 59.7971 li
219.852 56.7971 mo
225.852 56.7971 li
220.731 54.6761 mo
224.973 58.9181 li
220.731 58.9181 mo
224.973 54.6761 li
@
231.329 50.5321 mo
231.329 56.5321 li
228.329 53.5321 mo
234.329 53.5321 li
229.208 51.4111 mo
233.45 55.6531 li
229.208 55.6531 mo
233.45 51.4111 li
@
239.546 47.0331 mo
239.546 53.0331 li
236.546 50.0331 mo
242.546 50.0331 li
237.425 47.9121 mo
241.667 52.1541 li
237.425 52.1541 mo
241.667 47.9121 li
@
247.393 43.8841 mo
247.393 49.8841 li
244.393 46.8841 mo
250.393 46.8841 li
245.272 44.7631 mo
249.514 49.0051 li
245.272 49.0051 mo
249.514 44.7631 li
@
254.895 40.2691 mo
254.895 46.2691 li
251.895 43.2691 mo
257.895 43.2691 li
252.775 41.1481 mo
257.016 45.3901 li
252.775 45.3901 mo
257.016 41.1481 li
@
261.825 37.4701 mo
261.825 43.4701 li
258.825 40.4701 mo
264.825 40.4701 li
259.704 38.3491 mo
263.946 42.5911 li
259.704 42.5911 mo
263.946 38.3491 li
@
268.439 34.9041 mo
268.439 40.9041 li
265.439 37.9041 mo
271.439 37.9041 li
266.318 35.7831 mo
270.559 40.0251 li
266.318 40.0251 mo
270.559 35.7831 li
@
274.724 33.6211 mo
274.724 39.6211 li
271.724 36.6211 mo
277.724 36.6211 li
272.603 34.5001 mo
276.845 38.7421 li
272.603 38.7421 mo
276.845 34.5001 li
@
280.645 32.3391 mo
280.645 38.3391 li
277.645 35.3391 mo
283.645 35.3391 li
278.525 33.2171 mo
282.766 37.4601 li
278.525 37.4601 mo
282.766 33.2171 li
@
286.217 30.7061 mo
286.217 36.7061 li
283.217 33.7061 mo
289.217 33.7061 li
284.096 31.5851 mo
288.338 35.8271 li
284.096 35.8271 mo
288.338 31.5851 li
@
291.595 29.3061 mo
291.595 35.3061 li
288.595 32.3061 mo
294.595 32.3061 li
289.475 30.1851 mo
293.716 34.4271 li
289.475 34.4271 mo
293.716 30.1851 li
@
296.714 27.9071 mo
296.714 33.9071 li
293.714 30.9071 mo
299.714 30.9071 li
294.593 28.7861 mo
298.835 33.0281 li
294.593 33.0281 mo
298.835 28.7861 li
@
301.558 26.7401 mo
301.558 32.7401 li
298.558 29.7401 mo
304.558 29.7401 li
299.436 27.619 mo
303.679 31.8621 li
299.436 31.8621 mo
303.679 27.619 li
@
306.127 25.6911 mo
306.127 31.6911 li
303.127 28.6911 mo
309.127 28.6911 li
304.006 26.5701 mo
308.248 30.8121 li
304.006 30.8121 mo
308.248 26.5701 li
@
310.424 25.1081 mo
310.424 31.1081 li
307.424 28.1081 mo
313.424 28.1081 li
308.303 25.9871 mo
312.545 30.2291 li
308.303 30.2291 mo
312.545 25.9871 li
@
314.513 24.5251 mo
314.513 30.5251 li
311.513 27.5251 mo
317.513 27.5251 li
312.392 25.4041 mo
316.634 29.6461 li
312.392 29.6461 mo
316.634 25.4041 li
@
318.479 23.5921 mo
318.479 29.5921 li
315.479 26.5921 mo
321.479 26.5921 li
316.358 24.4711 mo
320.6 28.7131 li
316.358 28.7131 mo
320.6 24.4711 li
@
322.183 22.7751 mo
322.183 28.7751 li
319.183 25.7751 mo
325.183 25.7751 li
320.062 23.6551 mo
324.304 27.8961 li
320.062 27.8961 mo
324.304 23.6551 li
@
325.649 22.0761 mo
325.649 28.0761 li
322.649 25.0761 mo
328.649 25.0761 li
323.528 22.9551 mo
327.77 27.1971 li
323.528 27.1971 mo
327.77 22.9551 li
@
329.002 21.6091 mo
329.002 27.6091 li
326.002 24.6091 mo
332.002 24.6091 li
326.881 22.4881 mo
331.123 26.7301 li
326.881 26.7301 mo
331.123 22.4881 li
@
332.161 21.2591 mo
332.161 27.2591 li
329.161 24.2591 mo
335.161 24.2591 li
330.04 22.1381 mo
334.283 26.3801 li
330.04 26.3801 mo
334.283 22.1381 li
@
335.183 20.7931 mo
335.183 26.7931 li
332.183 23.7931 mo
338.183 23.7931 li
333.062 21.6721 mo
337.304 25.9141 li
333.062 25.9141 mo
337.304 21.6721 li
@
338.042 20.6761 mo
338.042 26.6761 li
335.042 23.6761 mo
341.042 23.6761 li
335.921 21.5551 mo
340.163 25.7971 li
335.921 25.7971 mo
340.163 21.5551 li
@
340.726 20.5601 mo
340.726 26.5601 li
337.726 23.5601 mo
343.726 23.5601 li
338.605 21.4391 mo
342.847 25.6811 li
338.605 25.6811 mo
342.847 21.4391 li
@
343.315 20.4431 mo
343.315 26.4431 li
340.315 23.4431 mo
346.315 23.4431 li
341.194 21.3221 mo
345.436 25.5641 li
341.194 25.5641 mo
345.436 21.3221 li
@
345.763 20.093 mo
345.763 26.093 li
342.763 23.093 mo
348.763 23.093 li
343.642 20.9721 mo
347.884 25.2141 li
343.642 25.2141 mo
347.884 20.9721 li
@
348.103 20.093 mo
348.103 26.093 li
345.103 23.093 mo
351.103 23.093 li
345.982 20.9721 mo
350.224 25.2141 li
345.982 25.2141 mo
350.224 20.9721 li
@
350.325 20.093 mo
350.325 26.093 li
347.325 23.093 mo
353.325 23.093 li
348.204 20.9721 mo
352.446 25.2141 li
348.204 25.2141 mo
352.446 20.9721 li
@
352.43 19.7431 mo
352.43 25.7431 li
349.43 22.7431 mo
355.43 22.7431 li
350.309 20.6221 mo
354.551 24.8641 li
350.309 24.8641 mo
354.551 20.6221 li
@
354.434 19.5101 mo
354.434 25.5101 li
351.434 22.5101 mo
357.434 22.5101 li
352.313 20.3891 mo
356.555 24.6311 li
352.313 24.6311 mo
356.555 20.3891 li
@
356.356 19.2771 mo
356.356 25.2771 li
353.356 22.2771 mo
359.356 22.2771 li
354.235 20.1561 mo
358.477 24.3981 li
354.235 24.3981 mo
358.477 20.1561 li
@
358.183 18.9271 mo
358.183 24.9271 li
355.183 21.9271 mo
361.183 21.9271 li
356.062 19.8061 mo
360.304 24.0481 li
356.062 24.0481 mo
360.304 19.8061 li
@
359.917 18.6941 mo
359.917 24.6941 li
356.917 21.6941 mo
362.917 21.6941 li
357.796 19.5731 mo
362.038 23.8151 li
357.796 23.8151 mo
362.038 19.5731 li
@
361.578 18.5771 mo
361.578 24.5771 li
358.578 21.5771 mo
364.578 21.5771 li
359.457 19.4561 mo
363.699 23.6981 li
359.457 23.6981 mo
363.699 19.4561 li
@
363.188 18.1101 mo
363.188 24.1101 li
360.188 21.1101 mo
366.188 21.1101 li
361.067 18.9891 mo
365.309 23.2321 li
361.067 23.2321 mo
365.309 18.9891 li
@
364.72 17.7601 mo
364.72 23.7601 li
361.72 20.7601 mo
367.72 20.7601 li
362.599 18.6401 mo
366.841 22.8821 li
362.599 22.8821 mo
366.841 18.6401 li
@
366.177 17.0611 mo
366.177 23.0611 li
363.177 20.0611 mo
369.177 20.0611 li
364.056 17.9401 mo
368.299 22.1821 li
364.056 22.1821 mo
368.299 17.9401 li
@
367.569 16.9441 mo
367.569 22.9441 li
364.569 19.9441 mo
370.569 19.9441 li
365.448 17.8231 mo
369.69 22.0651 li
365.448 22.0651 mo
369.69 17.8231 li
@
368.886 16.9441 mo
368.886 22.9441 li
365.886 19.9441 mo
371.886 19.9441 li
366.765 17.8231 mo
371.007 22.0651 li
366.765 22.0651 mo
371.007 17.8231 li
@
370.16 16.9441 mo
370.16 22.9441 li
367.16 19.9441 mo
373.16 19.9441 li
368.039 17.8231 mo
372.281 22.0651 li
368.039 22.0651 mo
372.281 17.8231 li
@
371.352 16.7111 mo
371.352 22.7111 li
368.352 19.7111 mo
374.352 19.7111 li
369.231 17.5901 mo
373.473 21.8321 li
369.231 21.8321 mo
373.473 17.5901 li
@
372.509 16.7111 mo
372.509 22.7111 li
369.509 19.7111 mo
375.509 19.7111 li
370.388 17.5901 mo
374.629 21.8321 li
370.388 21.8321 mo
374.629 17.5901 li
@
373.612 16.7111 mo
373.612 22.7111 li
370.612 19.7111 mo
376.612 19.7111 li
371.491 17.5901 mo
375.733 21.8321 li
371.491 21.8321 mo
375.733 17.5901 li
@
374.649 16.7111 mo
374.649 22.7111 li
371.649 19.7111 mo
377.649 19.7111 li
372.528 17.5901 mo
376.77 21.8321 li
372.528 21.8321 mo
376.77 17.5901 li
@
375.641 16.7111 mo
375.641 22.7111 li
372.641 19.7111 mo
378.641 19.7111 li
373.52 17.5901 mo
377.763 21.8321 li
373.52 21.8321 mo
377.763 17.5901 li
@
376.577 16.5941 mo
376.577 22.5941 li
373.577 19.5941 mo
379.577 19.5941 li
374.456 17.4731 mo
378.697 21.7151 li
374.456 21.7151 mo
378.697 17.4731 li
@
377.464 16.5941 mo
377.464 22.5941 li
374.464 19.5941 mo
380.464 19.5941 li
375.343 17.4731 mo
379.585 21.7151 li
375.343 21.7151 mo
379.585 17.4731 li
@
378.315 16.5941 mo
378.315 22.5941 li
375.315 19.5941 mo
381.315 19.5941 li
376.193 17.4731 mo
380.436 21.7151 li
376.193 21.7151 mo
380.436 17.4731 li
@
379.124 16.5941 mo
379.124 22.5941 li
376.124 19.5941 mo
382.124 19.5941 li
377.003 17.4731 mo
381.245 21.7151 li
377.003 21.7151 mo
381.245 17.4731 li
@
379.895 16.3611 mo
379.895 22.3611 li
376.895 19.3611 mo
382.895 19.3611 li
377.774 17.2401 mo
382.016 21.4821 li
377.774 21.4821 mo
382.016 17.2401 li
@
380.626 16.3611 mo
380.626 22.3611 li
377.626 19.3611 mo
383.626 19.3611 li
378.505 17.2401 mo
382.747 21.4821 li
378.505 21.4821 mo
382.747 17.2401 li
@
381.322 16.3611 mo
381.322 22.3611 li
378.322 19.3611 mo
384.322 19.3611 li
379.2 17.2401 mo
383.443 21.4821 li
379.2 21.4821 mo
383.443 17.2401 li
@
381.982 16.3611 mo
381.982 22.3611 li
378.982 19.3611 mo
384.982 19.3611 li
379.861 17.2401 mo
384.103 21.4821 li
379.861 21.4821 mo
384.103 17.2401 li
@
382.604 16.3611 mo
382.604 22.3611 li
379.604 19.3611 mo
385.604 19.3611 li
380.483 17.2401 mo
384.725 21.4821 li
380.483 21.4821 mo
384.725 17.2401 li
@
383.191 16.244 mo
383.191 22.244 li
380.191 19.244 mo
386.191 19.244 li
381.07 17.1231 mo
385.312 21.3651 li
381.07 21.3651 mo
385.312 17.1231 li
@
383.745 16.244 mo
383.745 22.244 li
380.745 19.244 mo
386.745 19.244 li
381.624 17.1231 mo
385.866 21.3651 li
381.624 21.3651 mo
385.866 17.1231 li
@
384.277 16.1281 mo
384.277 22.1281 li
381.277 19.1281 mo
387.277 19.1281 li
382.156 17.0071 mo
386.398 21.2491 li
382.156 21.2491 mo
386.398 17.0071 li
@
384.773 16.1281 mo
384.773 22.1281 li
381.773 19.1281 mo
387.773 19.1281 li
382.652 17.0071 mo
386.894 21.2491 li
382.652 21.2491 mo
386.894 17.0071 li
@
385.248 16.0111 mo
385.248 22.0111 li
382.248 19.0111 mo
388.248 19.0111 li
383.127 16.8901 mo
387.369 21.1321 li
383.127 21.1321 mo
387.369 16.8901 li
@
385.695 16.0111 mo
385.695 22.0111 li
382.695 19.0111 mo
388.695 19.0111 li
383.574 16.8901 mo
387.815 21.1321 li
383.574 21.1321 mo
387.815 16.8901 li
@
386.115 16.0111 mo
386.115 22.0111 li
383.115 19.0111 mo
389.115 19.0111 li
383.994 16.8901 mo
388.236 21.1321 li
383.994 21.1321 mo
388.236 16.8901 li
@
386.504 16.0111 mo
386.504 22.0111 li
383.504 19.0111 mo
389.504 19.0111 li
384.383 16.8901 mo
388.625 21.1321 li
384.383 21.1321 mo
388.625 16.8901 li
@
386.875 16.0111 mo
386.875 22.0111 li
383.875 19.0111 mo
389.875 19.0111 li
384.754 16.8901 mo
388.996 21.1321 li
384.754 21.1321 mo
388.996 16.8901 li
@
387.216 15.8951 mo
387.216 21.8951 li
384.216 18.8951 mo
390.216 18.8951 li
385.095 16.7741 mo
389.338 21.0151 li
385.095 21.0151 mo
389.338 16.7741 li
@
387.54 15.8951 mo
387.54 21.8951 li
384.54 18.8951 mo
390.54 18.8951 li
385.419 16.7741 mo
389.661 21.0151 li
385.419 21.0151 mo
389.661 16.7741 li
@
387.843 15.8951 mo
387.843 21.8951 li
384.843 18.8951 mo
390.843 18.8951 li
385.722 16.7741 mo
389.964 21.0151 li
385.722 21.0151 mo
389.964 16.7741 li
@
388.13 15.8951 mo
388.13 21.8951 li
385.13 18.8951 mo
391.13 18.8951 li
386.009 16.7741 mo
390.251 21.0151 li
386.009 21.0151 mo
390.251 16.7741 li
@
388.4 15.8951 mo
388.4 21.8951 li
385.4 18.8951 mo
391.4 18.8951 li
386.279 16.7741 mo
390.521 21.0151 li
386.279 21.0151 mo
390.521 16.7741 li
@
388.652 15.8951 mo
388.652 21.8951 li
385.652 18.8951 mo
391.652 18.8951 li
386.531 16.7741 mo
390.773 21.0151 li
386.531 21.0151 mo
390.773 16.7741 li
@
388.884 15.8951 mo
388.884 21.8951 li
385.884 18.8951 mo
391.884 18.8951 li
386.763 16.7741 mo
391.006 21.0151 li
386.763 21.0151 mo
391.006 16.7741 li
@
389.109 15.8951 mo
389.109 21.8951 li
386.109 18.8951 mo
392.109 18.8951 li
386.988 16.7741 mo
391.23 21.0151 li
386.988 21.0151 mo
391.23 16.7741 li
@
389.314 15.8951 mo
389.314 21.8951 li
386.314 18.8951 mo
392.314 18.8951 li
387.193 16.7741 mo
391.435 21.0151 li
387.193 21.0151 mo
391.435 16.7741 li
@
389.504 15.8951 mo
389.504 21.8951 li
386.504 18.8951 mo
392.504 18.8951 li
387.383 16.7741 mo
391.625 21.0151 li
387.383 21.0151 mo
391.625 16.7741 li
@
389.684 15.8951 mo
389.684 21.8951 li
386.684 18.8951 mo
392.684 18.8951 li
387.563 16.7741 mo
391.805 21.0151 li
387.563 21.0151 mo
391.805 16.7741 li
@
389.85 15.7781 mo
389.85 21.7781 li
386.85 18.7781 mo
392.85 18.7781 li
387.729 16.6571 mo
391.972 20.8991 li
387.729 20.8991 mo
391.972 16.6571 li
@
390.008 15.7781 mo
390.008 21.7781 li
387.008 18.7781 mo
393.008 18.7781 li
387.887 16.6571 mo
392.129 20.8991 li
387.887 20.8991 mo
392.129 16.6571 li
@
390.152 15.7781 mo
390.152 21.7781 li
387.152 18.7781 mo
393.152 18.7781 li
388.031 16.6571 mo
392.273 20.8991 li
388.031 20.8991 mo
392.273 16.6571 li
@
390.286 15.7781 mo
390.286 21.7781 li
387.286 18.7781 mo
393.286 18.7781 li
388.165 16.6571 mo
392.407 20.8991 li
388.165 20.8991 mo
392.407 16.6571 li
@
390.41 15.7781 mo
390.41 21.7781 li
387.41 18.7781 mo
393.41 18.7781 li
388.29 16.6571 mo
392.531 20.8991 li
388.29 20.8991 mo
392.531 16.6571 li
@
390.525 15.7781 mo
390.525 21.7781 li
387.525 18.7781 mo
393.525 18.7781 li
388.404 16.6571 mo
392.646 20.8991 li
388.404 20.8991 mo
392.646 16.6571 li
@
390.631 15.7781 mo
390.631 21.7781 li
387.631 18.7781 mo
393.631 18.7781 li
388.509 16.6571 mo
392.751 20.8991 li
388.509 20.8991 mo
392.751 16.6571 li
@
390.728 15.7781 mo
390.728 21.7781 li
387.728 18.7781 mo
393.728 18.7781 li
388.607 16.6571 mo
392.849 20.8991 li
388.607 20.8991 mo
392.849 16.6571 li
@
390.817 15.7781 mo
390.817 21.7781 li
387.817 18.7781 mo
393.817 18.7781 li
388.696 16.6571 mo
392.938 20.8991 li
388.696 20.8991 mo
392.938 16.6571 li
@
390.9 15.7781 mo
390.9 21.7781 li
387.9 18.7781 mo
393.9 18.7781 li
388.779 16.6571 mo
393.021 20.8991 li
388.779 20.8991 mo
393.021 16.6571 li
@
390.979 15.7781 mo
390.979 21.7781 li
387.979 18.7781 mo
393.979 18.7781 li
388.858 16.6571 mo
393.1 20.8991 li
388.858 20.8991 mo
393.1 16.6571 li
@
391.05 15.7781 mo
391.05 21.7781 li
388.05 18.7781 mo
394.05 18.7781 li
388.929 16.6571 mo
393.17 20.8991 li
388.929 20.8991 mo
393.17 16.6571 li
@
391.112 15.7781 mo
391.112 21.7781 li
388.112 18.7781 mo
394.112 18.7781 li
388.991 16.6571 mo
393.233 20.8991 li
388.991 20.8991 mo
393.233 16.6571 li
@
391.172 15.7781 mo
391.172 21.7781 li
388.172 18.7781 mo
394.172 18.7781 li
389.05 16.6571 mo
393.293 20.8991 li
389.05 20.8991 mo
393.293 16.6571 li
@
391.228 15.7781 mo
391.228 21.7781 li
388.228 18.7781 mo
394.228 18.7781 li
389.108 16.6571 mo
393.349 20.8991 li
389.108 20.8991 mo
393.349 16.6571 li
@
391.281 15.7781 mo
391.281 21.7781 li
388.281 18.7781 mo
394.281 18.7781 li
389.16 16.6571 mo
393.402 20.8991 li
389.16 20.8991 mo
393.402 16.6571 li
@
391.33 15.7781 mo
391.33 21.7781 li
388.33 18.7781 mo
394.33 18.7781 li
389.209 16.6571 mo
393.451 20.8991 li
389.209 20.8991 mo
393.451 16.6571 li
@
391.375 15.7781 mo
391.375 21.7781 li
388.375 18.7781 mo
394.375 18.7781 li
389.254 16.6571 mo
393.495 20.8991 li
389.254 20.8991 mo
393.495 16.6571 li
@
391.415 15.7781 mo
391.415 21.7781 li
388.415 18.7781 mo
394.415 18.7781 li
389.294 16.6571 mo
393.536 20.8991 li
389.294 20.8991 mo
393.536 16.6571 li
@
391.452 15.7781 mo
391.452 21.7781 li
388.452 18.7781 mo
394.452 18.7781 li
389.331 16.6571 mo
393.573 20.8991 li
389.331 20.8991 mo
393.573 16.6571 li
@
391.485 15.7781 mo
391.485 21.7781 li
388.485 18.7781 mo
394.485 18.7781 li
389.364 16.6571 mo
393.606 20.8991 li
389.364 20.8991 mo
393.606 16.6571 li
@
391.517 15.7781 mo
391.517 21.7781 li
388.517 18.7781 mo
394.517 18.7781 li
389.396 16.6571 mo
393.638 20.8991 li
389.396 20.8991 mo
393.638 16.6571 li
@
391.547 15.7781 mo
391.547 21.7781 li
388.547 18.7781 mo
394.547 18.7781 li
389.426 16.6571 mo
393.668 20.8991 li
389.426 20.8991 mo
393.668 16.6571 li
@
391.575 15.7781 mo
391.575 21.7781 li
388.575 18.7781 mo
394.575 18.7781 li
389.454 16.6571 mo
393.695 20.8991 li
389.454 20.8991 mo
393.695 16.6571 li
@
391.599 15.7781 mo
391.599 21.7781 li
388.599 18.7781 mo
394.599 18.7781 li
389.478 16.6571 mo
393.72 20.8991 li
389.478 20.8991 mo
393.72 16.6571 li
@
391.622 15.7781 mo
391.622 21.7781 li
388.622 18.7781 mo
394.622 18.7781 li
389.501 16.6571 mo
393.743 20.8991 li
389.501 20.8991 mo
393.743 16.6571 li
@
391.644 15.7781 mo
391.644 21.7781 li
388.644 18.7781 mo
394.644 18.7781 li
389.523 16.6571 mo
393.765 20.8991 li
389.523 20.8991 mo
393.765 16.6571 li
@
391.664 15.7781 mo
391.664 21.7781 li
388.664 18.7781 mo
394.664 18.7781 li
389.543 16.6571 mo
393.785 20.8991 li
389.543 20.8991 mo
393.785 16.6571 li
@
391.682 15.7781 mo
391.682 21.7781 li
388.682 18.7781 mo
394.682 18.7781 li
389.561 16.6571 mo
393.803 20.8991 li
389.561 20.8991 mo
393.803 16.6571 li
@
391.699 15.7781 mo
391.699 21.7781 li
388.699 18.7781 mo
394.699 18.7781 li
389.578 16.6571 mo
393.82 20.8991 li
389.578 20.8991 mo
393.82 16.6571 li
@
391.715 15.7781 mo
391.715 21.7781 li
388.715 18.7781 mo
394.715 18.7781 li
389.593 16.6571 mo
393.836 20.8991 li
389.593 20.8991 mo
393.836 16.6571 li
@
391.728 15.7781 mo
391.728 21.7781 li
388.728 18.7781 mo
394.728 18.7781 li
389.608 16.6571 mo
393.849 20.8991 li
389.608 20.8991 mo
393.849 16.6571 li
@
391.741 15.7781 mo
391.741 21.7781 li
388.741 18.7781 mo
394.741 18.7781 li
389.62 16.6571 mo
393.862 20.8991 li
389.62 20.8991 mo
393.862 16.6571 li
@
391.753 15.7781 mo
391.753 21.7781 li
388.753 18.7781 mo
394.753 18.7781 li
389.632 16.6571 mo
393.874 20.8991 li
389.632 20.8991 mo
393.874 16.6571 li
@
391.764 15.7781 mo
391.764 21.7781 li
388.764 18.7781 mo
394.764 18.7781 li
389.643 16.6571 mo
393.884 20.8991 li
389.643 20.8991 mo
393.884 16.6571 li
@
391.774 15.7781 mo
391.774 21.7781 li
388.774 18.7781 mo
394.774 18.7781 li
389.653 16.6571 mo
393.895 20.8991 li
389.653 20.8991 mo
393.895 16.6571 li
@
391.784 15.7781 mo
391.784 21.7781 li
388.784 18.7781 mo
394.784 18.7781 li
389.663 16.6571 mo
393.904 20.8991 li
389.663 20.8991 mo
393.904 16.6571 li
@
391.793 15.7781 mo
391.793 21.7781 li
388.793 18.7781 mo
394.793 18.7781 li
389.672 16.6571 mo
393.914 20.8991 li
389.672 20.8991 mo
393.914 16.6571 li
@
391.8 15.7781 mo
391.8 21.7781 li
388.8 18.7781 mo
394.8 18.7781 li
389.68 16.6571 mo
393.922 20.8991 li
389.68 20.8991 mo
393.922 16.6571 li
@
391.808 15.7781 mo
391.808 21.7781 li
388.808 18.7781 mo
394.808 18.7781 li
389.687 16.6571 mo
393.929 20.8991 li
389.687 20.8991 mo
393.929 16.6571 li
@
391.815 15.7781 mo
391.815 21.7781 li
388.815 18.7781 mo
394.815 18.7781 li
389.693 16.6571 mo
393.936 20.8991 li
389.693 20.8991 mo
393.936 16.6571 li
@
391.821 15.7781 mo
391.821 21.7781 li
388.821 18.7781 mo
394.821 18.7781 li
389.7 16.6571 mo
393.942 20.8991 li
389.7 20.8991 mo
393.942 16.6571 li
@
391.827 15.7781 mo
391.827 21.7781 li
388.827 18.7781 mo
394.827 18.7781 li
389.706 16.6571 mo
393.948 20.8991 li
389.706 20.8991 mo
393.948 16.6571 li
@
391.832 15.7781 mo
391.832 21.7781 li
388.832 18.7781 mo
394.832 18.7781 li
389.711 16.6571 mo
393.953 20.8991 li
389.711 20.8991 mo
393.953 16.6571 li
@
391.837 15.7781 mo
391.837 21.7781 li
388.837 18.7781 mo
394.837 18.7781 li
389.716 16.6571 mo
393.958 20.8991 li
389.716 20.8991 mo
393.958 16.6571 li
@
391.841 15.7781 mo
391.841 21.7781 li
388.841 18.7781 mo
394.841 18.7781 li
389.72 16.6571 mo
393.962 20.8991 li
389.72 20.8991 mo
393.962 16.6571 li
@
391.846 15.7781 mo
391.846 21.7781 li
388.846 18.7781 mo
394.846 18.7781 li
389.725 16.6571 mo
393.967 20.8991 li
389.725 20.8991 mo
393.967 16.6571 li
@
391.85 15.7781 mo
391.85 21.7781 li
388.85 18.7781 mo
394.85 18.7781 li
389.729 16.6571 mo
393.972 20.8991 li
389.729 20.8991 mo
393.972 16.6571 li
@
391.854 15.7781 mo
391.854 21.7781 li
388.854 18.7781 mo
394.854 18.7781 li
389.733 16.6571 mo
393.975 20.8991 li
389.733 20.8991 mo
393.975 16.6571 li
@
391.858 15.7781 mo
391.858 21.7781 li
388.858 18.7781 mo
394.858 18.7781 li
389.737 16.6571 mo
393.979 20.8991 li
389.737 20.8991 mo
393.979 16.6571 li
@
391.861 15.7781 mo
391.861 21.7781 li
388.861 18.7781 mo
394.861 18.7781 li
389.74 16.6571 mo
393.982 20.8991 li
389.74 20.8991 mo
393.982 16.6571 li
@
391.864 15.7781 mo
391.864 21.7781 li
388.864 18.7781 mo
394.864 18.7781 li
389.743 16.6571 mo
393.984 20.8991 li
389.743 20.8991 mo
393.984 16.6571 li
@
391.866 15.7781 mo
391.866 21.7781 li
388.866 18.7781 mo
394.866 18.7781 li
389.745 16.6571 mo
393.987 20.8991 li
389.745 20.8991 mo
393.987 16.6571 li
@
391.868 15.7781 mo
391.868 21.7781 li
388.868 18.7781 mo
394.868 18.7781 li
389.747 16.6571 mo
393.99 20.8991 li
389.747 20.8991 mo
393.99 16.6571 li
@
391.871 15.7781 mo
391.871 21.7781 li
388.871 18.7781 mo
394.871 18.7781 li
389.75 16.6571 mo
393.992 20.8991 li
389.75 20.8991 mo
393.992 16.6571 li
@
391.873 15.7781 mo
391.873 21.7781 li
388.873 18.7781 mo
394.873 18.7781 li
389.752 16.6571 mo
393.994 20.8991 li
389.752 20.8991 mo
393.994 16.6571 li
@
391.875 15.7781 mo
391.875 21.7781 li
388.875 18.7781 mo
394.875 18.7781 li
389.754 16.6571 mo
393.996 20.8991 li
389.754 20.8991 mo
393.996 16.6571 li
@
391.877 15.7781 mo
391.877 21.7781 li
388.877 18.7781 mo
394.877 18.7781 li
389.756 16.6571 mo
393.999 20.8991 li
389.756 20.8991 mo
393.999 16.6571 li
@
391.879 15.7781 mo
391.879 21.7781 li
388.879 18.7781 mo
394.879 18.7781 li
389.758 16.6571 mo
394 20.8991 li
389.758 20.8991 mo
394 16.6571 li
@
391.881 15.7781 mo
391.881 21.7781 li
388.881 18.7781 mo
394.881 18.7781 li
389.76 16.6571 mo
394.002 20.8991 li
389.76 20.8991 mo
394.002 16.6571 li
@
391.882 15.7781 mo
391.882 21.7781 li
388.882 18.7781 mo
394.882 18.7781 li
389.761 16.6571 mo
394.003 20.8991 li
389.761 20.8991 mo
394.003 16.6571 li
@
391.883 15.7781 mo
391.883 21.7781 li
388.883 18.7781 mo
394.883 18.7781 li
389.762 16.6571 mo
394.004 20.8991 li
389.762 20.8991 mo
394.004 16.6571 li
@
391.885 15.7781 mo
391.885 21.7781 li
388.885 18.7781 mo
394.885 18.7781 li
389.764 16.6571 mo
394.006 20.8991 li
389.764 20.8991 mo
394.006 16.6571 li
@
391.886 15.7781 mo
391.886 21.7781 li
388.886 18.7781 mo
394.886 18.7781 li
389.765 16.6571 mo
394.007 20.8991 li
389.765 20.8991 mo
394.007 16.6571 li
@
391.886 15.7781 mo
391.886 21.7781 li
388.886 18.7781 mo
394.886 18.7781 li
389.765 16.6571 mo
394.008 20.8991 li
389.765 20.8991 mo
394.008 16.6571 li
@
391.887 15.7781 mo
391.887 21.7781 li
388.887 18.7781 mo
394.887 18.7781 li
389.766 16.6571 mo
394.008 20.8991 li
389.766 20.8991 mo
394.008 16.6571 li
@
391.888 15.7781 mo
391.888 21.7781 li
388.888 18.7781 mo
394.888 18.7781 li
389.767 16.6571 mo
394.009 20.8991 li
389.767 20.8991 mo
394.009 16.6571 li
@
391.889 15.7781 mo
391.889 21.7781 li
388.889 18.7781 mo
394.889 18.7781 li
389.768 16.6571 mo
394.01 20.8991 li
389.768 20.8991 mo
394.01 16.6571 li
@
391.89 15.7781 mo
391.89 21.7781 li
388.89 18.7781 mo
394.89 18.7781 li
389.768 16.6571 mo
394.011 20.8991 li
389.768 20.8991 mo
394.011 16.6571 li
@
391.89 15.7781 mo
391.89 21.7781 li
388.89 18.7781 mo
394.89 18.7781 li
389.769 16.6571 mo
394.011 20.8991 li
389.769 20.8991 mo
394.011 16.6571 li
@
391.891 15.7781 mo
391.891 21.7781 li
388.891 18.7781 mo
394.891 18.7781 li
389.77 16.6571 mo
394.011 20.8991 li
389.77 20.8991 mo
394.011 16.6571 li
@
391.891 15.7781 mo
391.891 21.7781 li
388.891 18.7781 mo
394.891 18.7781 li
389.77 16.6571 mo
394.012 20.8991 li
389.77 20.8991 mo
394.012 16.6571 li
@
391.892 15.7781 mo
391.892 21.7781 li
388.892 18.7781 mo
394.892 18.7781 li
389.771 16.6571 mo
394.013 20.8991 li
389.771 20.8991 mo
394.013 16.6571 li
@
391.892 15.7781 mo
391.892 21.7781 li
388.892 18.7781 mo
394.892 18.7781 li
389.771 16.6571 mo
394.013 20.8991 li
389.771 20.8991 mo
394.013 16.6571 li
@
391.893 15.7781 mo
391.893 21.7781 li
388.893 18.7781 mo
394.893 18.7781 li
389.772 16.6571 mo
394.014 20.8991 li
389.772 20.8991 mo
394.014 16.6571 li
@
391.893 15.7781 mo
391.893 21.7781 li
388.893 18.7781 mo
394.893 18.7781 li
389.772 16.6571 mo
394.014 20.8991 li
389.772 20.8991 mo
394.014 16.6571 li
@
391.893 15.7781 mo
391.893 21.7781 li
388.893 18.7781 mo
394.893 18.7781 li
389.772 16.6571 mo
394.014 20.8991 li
389.772 20.8991 mo
394.014 16.6571 li
@
391.893 15.7781 mo
391.893 21.7781 li
388.893 18.7781 mo
394.893 18.7781 li
389.772 16.6571 mo
394.015 20.8991 li
389.772 20.8991 mo
394.015 16.6571 li
@
391.894 15.7781 mo
391.894 21.7781 li
388.894 18.7781 mo
394.894 18.7781 li
389.773 16.6571 mo
394.015 20.8991 li
389.773 20.8991 mo
394.015 16.6571 li
@
391.894 15.7781 mo
391.894 21.7781 li
388.894 18.7781 mo
394.894 18.7781 li
389.773 16.6571 mo
394.015 20.8991 li
389.773 20.8991 mo
394.015 16.6571 li
@
391.894 15.7781 mo
391.894 21.7781 li
388.894 18.7781 mo
394.894 18.7781 li
389.773 16.6571 mo
394.015 20.8991 li
389.773 20.8991 mo
394.015 16.6571 li
@
391.894 15.7781 mo
391.894 21.7781 li
388.894 18.7781 mo
394.894 18.7781 li
389.773 16.6571 mo
394.015 20.8991 li
389.773 20.8991 mo
394.015 16.6571 li
@
391.894 15.7781 mo
391.894 21.7781 li
388.894 18.7781 mo
394.894 18.7781 li
389.773 16.6571 mo
394.015 20.8991 li
389.773 20.8991 mo
394.015 16.6571 li
@
391.894 15.7781 mo
391.894 21.7781 li
388.894 18.7781 mo
394.894 18.7781 li
389.774 16.6571 mo
394.015 20.8991 li
389.774 20.8991 mo
394.015 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
391.895 15.7781 mo
391.895 21.7781 li
388.895 18.7781 mo
394.895 18.7781 li
389.774 16.6571 mo
394.016 20.8991 li
389.774 20.8991 mo
394.016 16.6571 li
@
64.145 245.278 mo
385.895 245.278 li
385.895 157.528 li
64.145 157.528 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
BRZMMU+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/K <1C60D8A8C9B64EDF88209F74DE48C33B4B0B93D0D9C0FD0B4C3ED394623E
3A80B45D329FC06BB55248F78872AA55981B9FC8E5ADA631A9747A6CEB10FCCD
65D75EFC> |-
/N <1C60D8A8C9B6079F1E49523970A7CE614BC1CB2AC135B49A6B33564AFCCA
E69F17C685A8629597666C835EDDD27239AEF884B91696774A2A> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BRZMMU+Helvetica /Encoding get
dup 37 /percent put
dup 58 /colon put
dup 59 /semicolon put
dup 69 /E put
dup 75 /K put
dup 78 /N put
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/BRZMMU+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 3{/.notdef}rp /R 
8{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c 
/.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/.notdef /p 2{/.notdef}rp /s /t /u 138{/.notdef}rp]
BRZMMU+Helvetica nf
BRZMMU+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
99.395 175.477 mo
(FKNet[3]; EER: 7.7%)
[10.387 11.3393 12.2741 9.45212 4.72604 4.72606 9.4521 4.72606 4.72606 4.72604 11.3393 11.3393 
12.2741 4.72604 4.72607 9.4521 4.72604 9.45213 0 ]xsh
1 lj
67.145 169.477 mo
97.145 169.477 li
@
0 lj
82.145 166.477 mo
82.145 172.477 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
BRZMMU+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B
61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1
E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36
DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B
7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-
/V <1C60D8A8C9B64EDF88209F74DE48C31924050FF0040AA5A034E0BA481252
B18875F38C0C76ED1A659C37AD61> |-
/f <1C60D8A8C9B854D08882A1CDE4CC8CF82C721397EF3C1B7F275F9E0F93B7
3057EE87F13D1A76347F24278F0AAB6C40024DD0CC30E14D035B17B8421125C0
8D6E5ECF0FD989FD11DB950870FC66> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BRZMMU+Helvetica /Encoding get
dup 83 /S put
dup 86 /V put
dup 102 /f put
pop
%ADOEndSubsetFont
/BRZMMU+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 3{/.notdef}rp /R 
/S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /.notdef /n /.notdef /p 2{/.notdef}rp /s 
/t /u 138{/.notdef}rp]
BRZMMU+Helvetica nf
BRZMMU+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
99.395 196.761 mo
(EfficientNetV2-S[17]; EER: 1.82%)
[11.3393 4.72604 4.72606 3.77405 8.50011 3.77405 9.4521 9.4521 4.72606 12.2741 9.4521 4.72606 
11.3393 9.4521 5.66095 11.3393 4.72604 9.4521 9.45213 4.72601 4.72607 4.72604 11.3393 11.3393 
12.2741 4.72607 4.72604 9.45212 4.72604 9.45212 9.45209 0 ]xsh
1 lj
67.145 190.761 mo
97.145 190.761 li
.265019 .809232 0 0 cmyk
@
0 lj
79.895 193.011 mo
84.395 193.011 li
84.395 188.511 li
79.895 188.511 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
BRZMMU+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E2
2FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D216
1CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361
A4431D76AF6F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BRZMMU+Helvetica /Encoding get
dup 79 /O put
dup 114 /r put
pop
%ADOEndSubsetFont
/BRZMMU+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N /O 2{/.notdef}rp 
/R /S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 
3{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n /.notdef /p /.notdef 
/r /s /t /u 138{/.notdef}rp]
BRZMMU+Helvetica nf
BRZMMU+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
99.395 218.045 mo
(Ours; E)sh
157.026 218.045 mo
(ER: 1.33%)
[11.3392 12.2742 4.72604 4.72606 9.4521 4.72606 9.4521 9.45212 0 ]xsh
1 lj
67.145 212.045 mo
97.145 212.045 li
0 .990631 1 .000396735 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
BRZMMU+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B6079FE1CE316282F0E84E7EAE56817E527B1A2FBA7D6E6E3E
84761CC128BB54A99A2A93B5D172E1531D29A45A5EC52E28A860DB78AEF5044D
D841ADA187A0971E5C6028FECC99F95A89CDEF60FF9739318C6CDCFD940AFB97
77EC1EB041B6AC82C7B827BCFC6CB4C10A94B6280806B13F83> |-
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/v <1C60D8A8C9B7A73DC54C6E6FD58E3FF02EC0039EA78A08B0B838392D2447
0C9B580A1092E3692A4C20563FB5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BRZMMU+Helvetica /Encoding get
dup 67 /C put
dup 68 /D put
dup 111 /o put
dup 118 /v put
pop
%ADOEndSubsetFont
/BRZMMU+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/D /E /F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 
/O 2{/.notdef}rp /R /S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e 
/f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /s /t /u /v 137{/.notdef}rp]
BRZMMU+Helvetica nf
BRZMMU+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
99.395 239.329 mo
(DefConvNet; 3.88%)
[12.2741 9.45211 4.72604 12.2742 9.4521 9.45212 8.50009 12.2741 9.45212 4.72604 4.72606 4.72606 
9.4521 4.72606 9.4521 9.4521 0 ]xsh
67.145 233.329 mo
97.145 233.329 li
.895628 .7673 0 0 cmyk
@
0 lj
82.145 230.329 mo
82.145 236.329 li
79.145 233.329 mo
85.145 233.329 li
80.0239 231.208 mo
84.2661 235.45 li
80.0239 235.45 mo
84.2661 231.208 li
@
64.145 245.278 mo
385.895 245.278 li
385.895 157.528 li
64.145 157.528 li
cp
1 /0 /CSD get_res sepcs
.851074 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/BRZMMV+Helvetica-Bold*1 uf
/BRZMMV+Helvetica-Bold uf
/JAAAAA+Helvetica-Bold uf
/BRZMMU+Helvetica*1 uf
/BRZMMU+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
