%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 2dof3d-roc_compare_new.eps-78171.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ZhenyuZHOU
%%CreationDate: 8/16/2022, 10:52:05 AM
%%BoundingBox: 0 0 410 293
%%HiResBoundingBox: 0 0 409.1357 292.0188
%%CropBox: 0 0 409.1357 292.0188
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1022 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 9.53.3"
   xmp:ModifyDate="2022-08-16T10:51:39+08:00"
   xmp:CreateDate="2022-08-16T10:51:39+08:00"
   xmp:CreatorTool="(MATLAB, The Mathworks, Inc. Version 9.9.0.1467703 \(R2020b\). Operating System: Linux)"
   xmpMM:DocumentID="uuid:d9bd6de6-1f69-11ed-0000-8329e3a2e89d"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/zhenyuzhou/Desktop/finger-knuckle/deep-learning/codekevin/fknet/test/version-2/2dof3d/2dof3d-roc_compare_new.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -292.019 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 292.019 li
409.136 292.019 li
409.136 0 li
cp
clp
-9.90643 292.019 mo
440.094 292.019 li
440.094 -1.98129 li
-9.90643 -1.98129 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
-9.90643 292.019 mo
440.094 292.019 li
440.094 -1.98129 li
-9.90643 -1.98129 li
cp
f
48.5936 252.269 mo
397.344 252.269 li
397.344 19.7687 li
48.5936 19.7687 li
cp
f
.99975 lw
0 lc
2 lj
10 ml
[.75 2.25 ] 0 dsh
true sadj
59.7272 252.269 mo
59.7272 19.7687 li
1 /0 /CSD get_res sepcs
.224609 sep
@
72.3791 252.269 mo
72.3791 19.7687 li
@
81.3557 252.269 mo
81.3557 19.7687 li
@
88.319 252.269 mo
88.319 19.7687 li
@
94.0076 252.269 mo
94.0076 19.7687 li
@
98.8186 252.269 mo
98.8186 19.7687 li
@
102.985 252.269 mo
102.985 19.7687 li
@
106.66 252.269 mo
106.66 19.7687 li
@
109.948 252.269 mo
109.948 19.7687 li
@
131.576 252.269 mo
131.576 19.7687 li
@
144.229 252.269 mo
144.229 19.7687 li
@
153.205 252.269 mo
153.205 19.7687 li
@
160.169 252.269 mo
160.169 19.7687 li
@
165.857 252.269 mo
165.857 19.7687 li
@
170.667 252.269 mo
170.667 19.7687 li
@
174.834 252.269 mo
174.834 19.7687 li
@
178.509 252.269 mo
178.509 19.7687 li
@
181.797 252.269 mo
181.797 19.7687 li
@
203.426 252.269 mo
203.426 19.7687 li
@
216.077 252.269 mo
216.077 19.7687 li
@
225.054 252.269 mo
225.054 19.7687 li
@
232.017 252.269 mo
232.017 19.7687 li
@
237.707 252.269 mo
237.707 19.7687 li
@
242.516 252.269 mo
242.516 19.7687 li
@
246.683 252.269 mo
246.683 19.7687 li
@
250.358 252.269 mo
250.358 19.7687 li
@
275.275 252.269 mo
275.275 19.7687 li
@
287.926 252.269 mo
287.926 19.7687 li
@
296.903 252.269 mo
296.903 19.7687 li
@
303.866 252.269 mo
303.866 19.7687 li
@
309.555 252.269 mo
309.555 19.7687 li
@
314.365 252.269 mo
314.365 19.7687 li
@
318.532 252.269 mo
318.532 19.7687 li
@
322.208 252.269 mo
322.208 19.7687 li
@
325.495 252.269 mo
325.495 19.7687 li
@
347.124 252.269 mo
347.124 19.7687 li
@
359.776 252.269 mo
359.776 19.7687 li
@
368.753 252.269 mo
368.753 19.7687 li
@
375.715 252.269 mo
375.715 19.7687 li
@
381.404 252.269 mo
381.404 19.7687 li
@
386.215 252.269 mo
386.215 19.7687 li
@
390.381 252.269 mo
390.381 19.7687 li
@
394.057 252.269 mo
394.057 19.7687 li
@
1 lj
[] 0 dsh
109.948 252.269 mo
109.948 19.7687 li
1 /0 /CSD get_res sepcs
.126953 sep
@
253.646 252.269 mo
253.646 19.7687 li
@
397.344 252.269 mo
397.344 19.7687 li
@
397.344 252.269 mo
48.5936 252.269 li
@
397.344 226.436 mo
48.5936 226.436 li
@
397.344 200.602 mo
48.5936 200.602 li
@
397.344 174.769 mo
48.5936 174.769 li
@
397.344 148.935 mo
48.5936 148.935 li
@
397.344 123.103 mo
48.5936 123.103 li
@
397.344 97.2687 mo
48.5936 97.2687 li
@
397.344 71.4357 mo
48.5936 71.4357 li
@
397.344 45.6017 mo
48.5936 45.6017 li
@
397.344 19.7687 mo
48.5936 19.7687 li
@
2 lc
48.5936 252.269 mo
397.344 252.269 li
1 /0 /CSD get_res sepcs
.851074 sep
@
48.5936 19.7687 mo
397.344 19.7687 li
@
109.948 252.269 mo
109.948 248.781 li
@
253.646 252.269 mo
253.646 248.781 li
@
397.344 252.269 mo
397.344 248.781 li
@
109.948 19.7687 mo
109.948 23.2557 li
@
253.646 19.7687 mo
253.646 23.2557 li
@
397.344 19.7687 mo
397.344 23.2557 li
@
59.7272 252.269 mo
59.7272 250.525 li
@
72.3791 252.269 mo
72.3791 250.525 li
@
81.3557 252.269 mo
81.3557 250.525 li
@
88.319 252.269 mo
88.319 250.525 li
@
94.0076 252.269 mo
94.0076 250.525 li
@
98.8186 252.269 mo
98.8186 250.525 li
@
102.985 252.269 mo
102.985 250.525 li
@
106.66 252.269 mo
106.66 250.525 li
@
109.948 252.269 mo
109.948 250.525 li
@
109.948 252.269 mo
109.948 250.525 li
@
131.576 252.269 mo
131.576 250.525 li
@
144.229 252.269 mo
144.229 250.525 li
@
153.205 252.269 mo
153.205 250.525 li
@
160.169 252.269 mo
160.169 250.525 li
@
165.857 252.269 mo
165.857 250.525 li
@
170.667 252.269 mo
170.667 250.525 li
@
174.834 252.269 mo
174.834 250.525 li
@
178.509 252.269 mo
178.509 250.525 li
@
181.797 252.269 mo
181.797 250.525 li
@
203.426 252.269 mo
203.426 250.525 li
@
216.077 252.269 mo
216.077 250.525 li
@
225.054 252.269 mo
225.054 250.525 li
@
232.017 252.269 mo
232.017 250.525 li
@
237.707 252.269 mo
237.707 250.525 li
@
242.516 252.269 mo
242.516 250.525 li
@
246.683 252.269 mo
246.683 250.525 li
@
250.358 252.269 mo
250.358 250.525 li
@
253.646 252.269 mo
253.646 250.525 li
@
275.275 252.269 mo
275.275 250.525 li
@
287.926 252.269 mo
287.926 250.525 li
@
296.903 252.269 mo
296.903 250.525 li
@
303.866 252.269 mo
303.866 250.525 li
@
309.555 252.269 mo
309.555 250.525 li
@
314.365 252.269 mo
314.365 250.525 li
@
318.532 252.269 mo
318.532 250.525 li
@
322.208 252.269 mo
322.208 250.525 li
@
325.495 252.269 mo
325.495 250.525 li
@
347.124 252.269 mo
347.124 250.525 li
@
359.776 252.269 mo
359.776 250.525 li
@
368.753 252.269 mo
368.753 250.525 li
@
375.715 252.269 mo
375.715 250.525 li
@
381.404 252.269 mo
381.404 250.525 li
@
386.215 252.269 mo
386.215 250.525 li
@
390.381 252.269 mo
390.381 250.525 li
@
394.057 252.269 mo
394.057 250.525 li
@
397.344 252.269 mo
397.344 250.525 li
@
59.7272 19.7687 mo
59.7272 21.5127 li
@
72.3791 19.7687 mo
72.3791 21.5127 li
@
81.3557 19.7687 mo
81.3557 21.5127 li
@
88.319 19.7687 mo
88.319 21.5127 li
@
94.0076 19.7687 mo
94.0076 21.5127 li
@
98.8186 19.7687 mo
98.8186 21.5127 li
@
102.985 19.7687 mo
102.985 21.5127 li
@
106.66 19.7687 mo
106.66 21.5127 li
@
109.948 19.7687 mo
109.948 21.5127 li
@
109.948 19.7687 mo
109.948 21.5127 li
@
131.576 19.7687 mo
131.576 21.5127 li
@
144.229 19.7687 mo
144.229 21.5127 li
@
153.205 19.7687 mo
153.205 21.5127 li
@
160.169 19.7687 mo
160.169 21.5127 li
@
165.857 19.7687 mo
165.857 21.5127 li
@
170.667 19.7687 mo
170.667 21.5127 li
@
174.834 19.7687 mo
174.834 21.5127 li
@
178.509 19.7687 mo
178.509 21.5127 li
@
181.797 19.7687 mo
181.797 21.5127 li
@
203.426 19.7687 mo
203.426 21.5127 li
@
216.077 19.7687 mo
216.077 21.5127 li
@
225.054 19.7687 mo
225.054 21.5127 li
@
232.017 19.7687 mo
232.017 21.5127 li
@
237.707 19.7687 mo
237.707 21.5127 li
@
242.516 19.7687 mo
242.516 21.5127 li
@
246.683 19.7687 mo
246.683 21.5127 li
@
250.358 19.7687 mo
250.358 21.5127 li
@
253.646 19.7687 mo
253.646 21.5127 li
@
275.275 19.7687 mo
275.275 21.5127 li
@
287.926 19.7687 mo
287.926 21.5127 li
@
296.903 19.7687 mo
296.903 21.5127 li
@
303.866 19.7687 mo
303.866 21.5127 li
@
309.555 19.7687 mo
309.555 21.5127 li
@
314.365 19.7687 mo
314.365 21.5127 li
@
318.532 19.7687 mo
318.532 21.5127 li
@
322.208 19.7687 mo
322.208 21.5127 li
@
325.495 19.7687 mo
325.495 21.5127 li
@
347.124 19.7687 mo
347.124 21.5127 li
@
359.776 19.7687 mo
359.776 21.5127 li
@
368.753 19.7687 mo
368.753 21.5127 li
@
375.715 19.7687 mo
375.715 21.5127 li
@
381.404 19.7687 mo
381.404 21.5127 li
@
386.215 19.7687 mo
386.215 21.5127 li
@
390.381 19.7687 mo
390.381 21.5127 li
@
394.057 19.7687 mo
394.057 21.5127 li
@
397.344 19.7687 mo
397.344 21.5127 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 65 /A put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5020902 def
/FontBBox {0 -218 859 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849A20715A30A1C8E20BA40A715C66C59D
FAA60C2> |-
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93B02DD2F28468DDCB1A3C4F86F48
E602E7C7194C181368A5716EB5792253727267A0374429827FD86C7FABB6E677
8ED0FC2796F1CFF756E02469F24A251C434955893E9F7666388B889F20AB9CA9
15C27E181E30FFC8DEE269B03878734391ECE2257AD2> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8EC555B4A7B773DEC8BB6D1EEA6615C00E66CA96DF653E47E06C2171CCF584F
9DFA9ABD37FD84B3D4F1ECF2A907E500304DE9F828B3D823F40AD41301FBB358
44C37D3215D325D86E3D5BDD66C6> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IZECWD+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut
/IZECWD+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/.notdef /four 12{/.notdef}rp /A 4{/.notdef}rp /F 11{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e 6{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t 139{/.notdef}rp]
IZECWD+Helvetica nf
IZECWD+Helvetica*1 [12 0 0 -12 0 0 ]msf
97.3436 271.769 mo
(10)
[6.672 0 ]xsh
IZECWD+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
113.094 265.769 mo
(-4)
[3.19673 0 ]xsh
IZECWD+Helvetica*1 [12 0 0 -12 0 0 ]msf
240.594 271.769 mo
(10)
[6.672 0 ]xsh
IZECWD+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
256.344 265.769 mo
(-2)
[3.19672 0 ]xsh
IZECWD+Helvetica*1 [12 0 0 -12 0 0 ]msf
386.094 271.769 mo
(10)
[6.672 0 ]xsh
IZECWD+Helvetica*1 [9.6 0 0 -9.6 0 0 ]msf
401.844 265.769 mo
(0)sh
IZECWD+Helvetica*1 [13.2 0 0 -13.2 0 0 ]msf
147.594 288.419 mo
(Fal)sh
165.928 288.419 mo
(se Acceptance R)sh
265.707 288.419 mo
(ate)sh
48.5936 252.269 mo
48.5936 19.7687 li
@
397.344 252.269 mo
397.344 19.7687 li
@
48.5936 252.269 mo
52.0811 252.269 li
@
48.5936 226.436 mo
52.0811 226.436 li
@
48.5936 200.602 mo
52.0811 200.602 li
@
48.5936 174.769 mo
52.0811 174.769 li
@
48.5936 148.935 mo
52.0811 148.935 li
@
48.5936 123.103 mo
52.0811 123.103 li
@
48.5936 97.2687 mo
52.0811 97.2687 li
@
48.5936 71.4357 mo
52.0811 71.4357 li
@
48.5936 45.6017 mo
52.0811 45.6017 li
@
48.5936 19.7687 mo
52.0811 19.7687 li
@
397.344 252.269 mo
393.857 252.269 li
@
397.344 226.436 mo
393.857 226.436 li
@
397.344 200.602 mo
393.857 200.602 li
@
397.344 174.769 mo
393.857 174.769 li
@
397.344 148.935 mo
393.857 148.935 li
@
397.344 123.103 mo
393.857 123.103 li
@
397.344 97.2687 mo
393.857 97.2687 li
@
397.344 71.4357 mo
393.857 71.4357 li
@
397.344 45.6017 mo
393.857 45.6017 li
@
397.344 19.7687 mo
393.857 19.7687 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
IZECWD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813112193D1142826B9EAAC4CD611BBB4F95760
32E7BB1CEE010488162FD1C301C6B71D8C78F5493178DBE747205064B08C74B8
726B52E358A409612C00A37D3B4D941793F359B3E475BDA3BD4B3868DD69F3F0
7261FF3C441AA69FD4> |-
/seven <1C60D8A8C9B7EF32570F064FE6F2197B9A9B4552AA750503D8376C03
AD26ABE9FFD8D44E1CF9D49EFA33A19355739672DC870D5B3102> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171A4DF84CA2B5DC1763E
AD8D5327FA792471080770C2A952DE234C82E937FF6F06B8DC5502E517DAD010
48EA369C68F50CEB8D4890C190D4826453DB2FA69E9B153A591D9773AB1C666B
B48F76AFEB8F668FC7931F530DDE5D77486CB2B0B7372318F615061D1C44AB23
4077545D8F20A6CDDA9838A386E7F5808C27F1B903689B66846190A97F4EDC89
9D8819804C87A1A60C2742926387B92B7C79BE2BD01C034498B73C43259C1C79
DD75AB76B50C7504CD347A6688CF7CD2B01E823B9BC7E06207809391337DFD> |-
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9CBCCBB748588C0
813CAE03731A28AF650C9E7EF28795313EB291C467EEA72058FEADCC32DE6A4D
D840A6F8146FCE30D5BCABF6B812CA08B536CAB29CE0B8E332FACFCEF05B58BF
31DC290E18E098E3F2041CC981BC10DF2AD559D10FDB46A94D4DF3DFB1ACC488
22B05B> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69F38475355DC87FE6F09EA2
B473E65B356517588F1CD4EF1A03FE0C354A3AD7E84141D7037001E355ABB43F
410AFF0DF867DE0D34519A04D189A6EBB6E818EC8695A108F616E6262CAC79AA
DD14AD49EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IZECWD+Helvetica /Encoding get
dup 46 /period put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 71 /G put
dup 105 /i put
dup 117 /u put
pop
%ADOEndSubsetFont
/IZECWD+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 
/two /.notdef /four /five /six /seven /eight /nine 
7{/.notdef}rp /A 4{/.notdef}rp /F /G 10{/.notdef}rp /R 14{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /.notdef /p 2{/.notdef}rp /s /t 
/u 138{/.notdef}rp]
IZECWD+Helvetica nf
IZECWD+Helvetica*1 [12 0 0 -12 0 0 ]msf
17.1936 256.394 mo
(0.55)sh
24.6936 230.561 mo
(0.6)sh
17.1936 204.727 mo
(0.65)sh
24.6936 178.894 mo
(0.7)sh
17.1936 153.061 mo
(0.75)sh
24.6936 127.227 mo
(0.8)sh
17.1936 101.394 mo
(0.85)sh
24.6936 75.5605 mo
(0.9)sh
17.1936 49.7269 mo
(0.95)sh
35.9436 23.8937 mo
(1)sh
IZECWD+Helvetica*1 [0 -13.2 -13.2 0 0 0 ]msf
10.4436 221.894 mo
(Genuine Acceptance Rate)
[-10.2696 -7.3392 -7.3392 -7.33919 -2.9304 -7.3392 -7.33919 -3.6696 -8.8045 -6.59999 -6.59999 -7.3392 
-7.3392 -3.66959 -7.3392 -7.3392 -6.60001 -7.33919 -3.6696 -9.5304 -7.3392 -3.6696 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: JAAAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /JAAAAA+Helvetica-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 79 /O put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/UniqueID 5020904 def
/FontBBox {0 -218 742 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 540 560 729 749 701 724] def
/StdHW [118] def
/StdVW [141] def
/StemSnapH [118 127] def
/StemSnapV [141 151] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1E4FFFDE1F32FAA37A10F75E41D32EA877BFB5D4C62
B5EEFA8ECAD59EF88401D574481D064892DE3DD151F7A55A8A67A56F183E25AD
99B1D0400E49A105B8251D09DD504D0F5E75DE503803F5A4274A48C1D3B564D8
1C0850CB4C47B2D1F7BBABC42B7D9A> |-
/O <1C60D8A8C9B6FF867671C7A8EA36377D3BBDCF7DC1944FEFD920A4E010C0
6A7B732BE9CCC40CED9AFA9E6EB298961372090FC3A7224D04A3CFAD432605FA
0D02A5562E7DBC0FFF3EE5634B21F423DBC77E39E4CCA743C85E8E64A64D46E4
B2B7ED8BE0C64E730F88CC96574ED049C145B71EE0C8E3088AE655D5D762B5> |-
/R <1C60D8A8C9B6079F1E495237382C714320959FF258CBD611619EE5282A1F
766EFEDBFB74F1D9040FCAF0BDCB8038F01668DCE21018CC6C18A3BE0CE28A24
64BC2A3AB9FA35A26E27DA971B39BDD577AC3254CB79370D5F5628ECDA0DDA7F
D6CA9FD80CEF6485548553F9E4297C2936F6D6F9B7EEA402DC5637E1DE60894F
8CF785C0CEA668832D572F6AD83959D76C686C00E38F9A6211A04EAE> |-
/a <1C60D8A8C9B7EF32A81682205E0185D7EB9D1C9B41590D7B4E23FBE44E4A
A7B30E4749969A8C22588CD0B28BCDB63A840276A69D723D4E6C645623B19B94
68748179DC145FC3D0ABAC2EE39036BC1FA994FA3FFA37AE469D130C49206C06
0371090F8FEAFD30515F9647A02DC12C5C75617C10F0241D49FE89931F5EA8D7
A3A2C0A5A9E9AC113D734AE03EC74E0DEA54FDCC6D9C89B0643CD42EB2DBAC0E
772862> |-
/c <1C60D8A8C9B7EF32A81682205E0185D7EB97E2E5ECD5A395E329D1E54A5D
66513462925F9DAA8216038BF99396B26814AB397BA5193E5283BD4C35AF4745
11ACBBE1CD6E85789EFA707ADB00FF855ED46EAEE71647F46A009AA1A7AD012D
3076> |-
/e <1C60D8A8C9B7EF32A817545464FBEE187E54133CFEF42C8D411B5D84004C
6CE6357473E2B643D3CE08AA1A42BBFB1F28CA26E22E411F5A7C8273040C4A44
EA0B9D82113808AC26DB28239FB7889E290867F8E4D61BA95992B5E022A054C0
3BBDF962DFAEF44EDE7EA21EAB727BE1674DADA315303A694B45> |-
/g <1C60D8A8C9B7D8BE1A33EE89001FA6EB7D6EDCB1364B23FC82FF0E61B24D
7E4A8CA79F40B05232C03E9D7B006602BFC9FD80928D82D66AA117C796135102
D9C22B3034C59DE4DE06768EB3537B0F70C1AFA5A21058CB0323AD1F223C9570
146F8AB7951C4C032059D965EA9107123EF65CF4615A8888AB2AB659F1E2AD69
FC0553C317C8D6FD6670> |-
/h <1C60D8A8C9B7D8BE6A40C97A9728C967BF5F8CC2D3C0DF8700E31030AB51
1210574C0B0DDADFDED8E1DA4BFF4316DF715653F26FCC8266322790D4BEE33F
BA9F58D0DBCF06D5A89EE4AC933041DC410AC17E9A24AA541F15EC454A92E0B8
51B9> |-
/i <1C60D8A8C9B854D08882A1CD48CE03C1D5CC5D23EF0D84B86A88B835239C
5621D560B94894CF6E36D2ACC4C13F13811184> |-
/n <1C60D8A8C9B7D8BE6A40C97A4965E728A61F43C388A863F7C9265BDDB200
299B4C204B13464A5EEB5283ECE018DF2077143BC157AEA1B5D875CF72F2E8E4
CCE622D56646621D7136A9B9C8CC6D01A36141651514FCA84C192E73D55E416E
8535CE5A821DA2CFA17AC5804977> |-
/p <1C60D8A8C9B7D8BE1A3394F7AD9ED306E3A9A717BC4DBD80AF254A86B765
6390A3D983CB80A3846AD2603335FD0DBD55114C3307B71EF22BD0E8379AAEC5
5A74C95AF2A5353017B6FA54C640683D9FD182CCFEF557D95B98DFA122595531
C6CAA493B475EF3E5D6CE7A94D0313FC> |-
/r <1C60D8A8C9B7361F7E31A31600503C2913DFBCA1D11AB6732E08F7E830EA
3FA2DD20CE89BBBD740C45C51218463C8BCBF681279434661233E865A11EA4D6
1EC2BE9B800205458E82C518F16869A3C203F3F2B2AE6D74> |-
/s <1C60D8A8C9B7EF32A816858DA2D8DD0B878448BC043BF441121225A15046
500B8A822B5383356F87D1B68C64DE897B4BDCDCC3BE0414BE8A4C96DFC9D87D
C93B429970DFC145E870AE0D909F3B63768C6C135E52B0C43608A509F83A39C7
6AF0A6FEC00FB3F7C0C9353DD4CA25B4F5FE2A33EACAECD57BF3B19A832D2BCD
3311D3DCCA6A90F7152885A37BDC611FA323EFD68B129E> |-
/t <1C60D8A8C9B81F2CB9D6B905E4E48C719AE44AF08B8EE22179EF5461093B
7D07A3D031B9E7EC9A37192CF13D030F9719CB5DB6502565F49B49E84351BBA2
E9582BE28F7ACFB9D551263225BEB6> |-
/v <1C60D8A8C9B7EF32570F064E8AD93413E18EC5E16EECD71BBD242D91D7D1
735DF8F3DD9F4032C90143C2182C5233> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IZECWE+Helvetica-Bold /JAAAAA+Helvetica-Bold findfont ct_VMDictPut
/IZECWE+Helvetica-Bold*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 11{/.notdef}rp /O 2{/.notdef}rp /R 
14{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n /.notdef /p /.notdef /r 
/s /t /.notdef /v 137{/.notdef}rp]
IZECWE+Helvetica-Bold nf
IZECWE+Helvetica-Bold*1 [13.2 0 0 -13.2 0 0 ]msf
92.8436 13.5437 mo
(Receiver Operating Characteristics)
[9.5304 7.3392 7.3392 7.3392 3.6696 7.3392 7.33919 5.1349 3.6696 10.2696 8.06511 7.33919 
5.1349 7.3392 4.39549 3.6696 8.06509 8.06509 3.66962 9.5304 8.06509 7.3392 5.13489 7.3392 
7.3392 4.39551 7.33917 5.13492 3.66959 7.3392 4.39551 3.66959 7.3392 0 ]xsh
0 lc
48.5522 241.655 mo
57.4038 228.248 li
70.0557 214.652 li
70.0557 176.582 li
82.7073 169.784 li
88.969 158.453 li
98.6476 147.123 li
102.553 139.418 li
106.024 131.26 li
111.985 121.29 li
113.314 116.304 li
115.811 110.865 li
116.989 104.521 li
120.277 96.3627 li
122.29 93.1897 li
127.652 90.0177 li
130.775 85.4847 li
136.834 82.3127 li
142.421 78.6867 li
143.919 76.4207 li
148.449 71.4357 li
152.03 68.7157 li
156.244 65.0907 li
159.367 62.8237 li
161.659 58.7457 li
164.557 54.6667 li
168.344 52.8537 li
168.787 51.4937 li
173.66 49.2277 li
176.701 48.3207 li
178.843 46.9617 li
182.87 46.9617 li
185.678 43.3357 li
190.852 41.9757 li
195.288 41.0707 li
199.747 40.6167 li
201.949 39.7107 li
205.122 39.2567 li
208.314 39.2567 li
211.434 38.3507 li
215.078 37.4437 li
217.889 36.5377 li
221.376 35.6307 li
224.66 35.6307 li
228.028 35.6307 li
231.305 35.1777 li
234.646 34.7257 li
237.567 34.7257 li
240.548 34.7257 li
243.449 33.8187 li
246.122 32.9117 li
248.822 31.0987 li
251.787 30.6457 li
254.396 30.1927 li
256.999 30.1927 li
259.736 30.1927 li
262.308 29.7387 li
264.887 29.7387 li
267.742 29.2867 li
270.367 29.2867 li
272.717 29.2867 li
274.909 29.2867 li
277.204 29.2867 li
279.569 28.8327 li
281.873 28.8327 li
284.183 28.3797 li
286.246 28.3797 li
288.287 28.3797 li
290.297 28.3797 li
292.236 27.9267 li
294.219 27.9267 li
296.207 27.4737 li
298.095 27.0207 li
300.05 27.0207 li
301.677 27.0207 li
303.414 26.5667 li
305.071 26.1137 li
306.821 26.1137 li
308.328 26.1137 li
309.957 26.1137 li
311.484 25.6607 li
312.994 25.6607 li
314.631 25.2067 li
316.226 24.7537 li
317.709 24.7537 li
319.126 24.3007 li
320.569 23.8477 li
321.964 23.8477 li
323.444 23.8477 li
324.751 23.8477 li
326.101 23.8477 li
327.457 23.8477 li
328.749 23.8477 li
330.016 23.3937 li
331.227 22.9417 li
332.396 22.9417 li
333.571 22.9417 li
334.679 22.9417 li
335.76 22.9417 li
336.905 22.9417 li
337.966 22.4887 li
339.023 22.0347 li
340.048 22.0347 li
341.08 22.0347 li
342.074 22.0347 li
343.096 22.0347 li
344.051 22.0347 li
344.99 22.0347 li
345.909 22.0347 li
346.844 22.0347 li
347.781 22.0347 li
348.702 22.0347 li
349.576 22.0347 li
350.452 22.0347 li
351.28 22.0347 li
352.121 22.0347 li
352.955 22.0347 li
353.764 22.0347 li
354.58 22.0347 li
355.364 22.0347 li
356.145 22.0347 li
356.868 22.0347 li
357.587 22.0347 li
358.265 22.0347 li
358.954 22.0347 li
359.635 22.0347 li
360.323 21.5817 li
360.988 21.5817 li
361.615 21.5817 li
362.237 21.5817 li
362.878 21.5817 li
363.497 21.5817 li
364.117 21.5817 li
364.708 21.5817 li
365.314 21.5817 li
365.849 21.1287 li
366.376 21.1287 li
366.913 21.1287 li
367.45 21.1287 li
367.968 21.1287 li
368.507 21.1287 li
369.002 21.1287 li
369.505 21.1287 li
370.009 21.1287 li
370.502 21.1287 li
370.992 21.1287 li
371.447 21.1287 li
371.899 21.1287 li
372.365 21.1287 li
372.805 21.1287 li
373.228 21.1287 li
373.667 21.1287 li
374.11 21.1287 li
374.519 21.1287 li
374.942 21.1287 li
375.332 21.1287 li
375.727 21.1287 li
376.105 21.1287 li
376.505 21.1287 li
376.904 21.1287 li
377.274 21.1287 li
377.639 21.1287 li
378.008 21.1287 li
378.355 21.1287 li
378.709 21.1287 li
379.045 21.1287 li
379.382 21.1287 li
379.699 21.1287 li
380.024 20.6757 li
380.337 20.6757 li
380.63 20.6757 li
380.941 20.6757 li
381.234 20.6757 li
381.532 20.6757 li
381.823 20.6757 li
382.105 20.6757 li
382.387 20.6757 li
382.648 20.6757 li
382.919 20.6757 li
383.202 20.6757 li
383.455 20.6757 li
383.72 20.6757 li
383.956 20.6757 li
384.212 20.6757 li
384.45 20.6757 li
384.69 20.6757 li
384.919 20.6757 li
385.15 20.6757 li
385.364 20.6757 li
385.608 20.6757 li
385.82 20.6757 li
386.017 20.6757 li
386.227 20.6757 li
386.426 20.6757 li
386.627 20.6757 li
386.84 20.6757 li
387.038 20.6757 li
387.235 20.6757 li
387.426 20.6757 li
387.608 20.6757 li
387.794 20.6757 li
387.984 20.6757 li
388.151 20.6757 li
388.321 20.6757 li
388.501 20.6757 li
388.674 20.6757 li
388.832 20.6757 li
389.006 20.6757 li
389.163 20.6757 li
389.326 20.6757 li
389.485 20.6757 li
389.634 20.6757 li
389.782 20.6757 li
389.926 20.6757 li
390.069 20.6757 li
390.215 20.6757 li
390.356 20.6757 li
390.493 20.6757 li
390.622 20.6757 li
390.749 20.6757 li
390.874 20.6757 li
391.006 20.6757 li
391.122 20.6757 li
391.248 20.6757 li
391.364 20.6757 li
391.475 20.6757 li
391.599 20.6757 li
391.709 20.6757 li
391.82 20.6757 li
391.927 20.6757 li
392.031 20.6757 li
392.14 20.6757 li
392.248 20.6757 li
392.354 20.6757 li
392.449 20.6757 li
392.551 20.6757 li
392.651 20.6757 li
392.74 20.6757 li
392.837 20.2217 li
392.932 20.2217 li
393.024 20.2217 li
393.112 20.2217 li
393.2 20.2217 li
393.29 20.2217 li
393.374 20.2217 li
393.456 20.2217 li
393.535 20.2217 li
393.619 20.2217 li
393.695 20.2217 li
393.776 20.2217 li
393.854 20.2217 li
393.923 20.2217 li
393.989 19.7687 li
394.058 19.7687 li
394.124 19.7687 li
394.193 19.7687 li
394.259 19.7687 li
394.319 19.7687 li
394.384 19.7687 li
394.448 19.7687 li
394.513 19.7687 li
394.566 19.7687 li
394.621 19.7687 li
394.682 19.7687 li
394.74 19.7687 li
394.796 19.7687 li
394.849 19.7687 li
394.905 19.7687 li
394.96 19.7687 li
395.008 19.7687 li
395.052 19.7687 li
395.099 19.7687 li
395.149 19.7687 li
395.197 19.7687 li
395.243 19.7687 li
395.288 19.7687 li
395.331 19.7687 li
395.379 19.7687 li
395.42 19.7687 li
395.465 19.7687 li
395.503 19.7687 li
395.546 19.7687 li
395.586 19.7687 li
395.624 19.7687 li
395.664 19.7687 li
395.706 19.7687 li
395.74 19.7687 li
395.774 19.7687 li
395.811 19.7687 li
395.845 19.7687 li
395.881 19.7687 li
395.915 19.7687 li
395.946 19.7687 li
395.978 19.7687 li
396.012 19.7687 li
396.044 19.7687 li
396.076 19.7687 li
396.107 19.7687 li
396.136 19.7687 li
396.161 19.7687 li
396.192 19.7687 li
396.221 19.7687 li
396.248 19.7687 li
396.272 19.7687 li
396.298 19.7687 li
396.324 19.7687 li
396.35 19.7687 li
396.375 19.7687 li
396.396 19.7687 li
396.419 19.7687 li
396.439 19.7687 li
396.46 19.7687 li
396.482 19.7687 li
396.503 19.7687 li
396.522 19.7687 li
396.543 19.7687 li
396.565 19.7687 li
396.587 19.7687 li
396.607 19.7687 li
396.627 19.7687 li
396.646 19.7687 li
396.662 19.7687 li
396.682 19.7687 li
396.698 19.7687 li
396.713 19.7687 li
396.728 19.7687 li
396.746 19.7687 li
396.762 19.7687 li
396.777 19.7687 li
396.79 19.7687 li
396.805 19.7687 li
396.817 19.7687 li
396.833 19.7687 li
396.848 19.7687 li
396.86 19.7687 li
396.871 19.7687 li
396.883 19.7687 li
396.896 19.7687 li
396.908 19.7687 li
396.92 19.7687 li
396.931 19.7687 li
396.94 19.7687 li
396.95 19.7687 li
396.961 19.7687 li
396.972 19.7687 li
396.983 19.7687 li
396.995 19.7687 li
397.003 19.7687 li
397.013 19.7687 li
397.021 19.7687 li
397.029 19.7687 li
397.039 19.7687 li
397.044 19.7687 li
397.053 19.7687 li
397.061 19.7687 li
397.069 19.7687 li
397.076 19.7687 li
397.085 19.7687 li
397.091 19.7687 li
397.099 19.7687 li
397.105 19.7687 li
397.112 19.7687 li
397.118 19.7687 li
397.126 19.7687 li
397.133 19.7687 li
397.139 19.7687 li
397.146 19.7687 li
397.153 19.7687 li
397.16 19.7687 li
397.162 19.7687 li
397.168 19.7687 li
397.174 19.7687 li
397.18 19.7687 li
397.183 19.7687 li
397.189 19.7687 li
397.192 19.7687 li
397.198 19.7687 li
397.202 19.7687 li
397.205 19.7687 li
397.209 19.7687 li
397.212 19.7687 li
397.214 19.7687 li
397.218 19.7687 li
397.222 19.7687 li
397.226 19.7687 li
397.228 19.7687 li
397.232 19.7687 li
397.235 19.7687 li
397.237 19.7687 li
397.24 19.7687 li
397.245 19.7687 li
397.248 19.7687 li
397.25 19.7687 li
397.252 19.7687 li
397.254 19.7687 li
397.257 19.7687 li
397.258 19.7687 li
397.261 19.7687 li
397.263 19.7687 li
397.264 19.7687 li
397.267 19.7687 li
397.268 19.7687 li
397.271 19.7687 li
397.273 19.7687 li
397.275 19.7687 li
397.276 19.7687 li
397.279 19.7687 li
397.28 19.7687 li
397.281 19.7687 li
397.282 19.7687 li
397.284 19.7687 li
397.285 19.7687 li
397.287 19.7687 li
397.288 19.7687 li
397.291 19.7687 li
397.292 19.7687 li
397.294 19.7687 li
397.295 19.7687 li
397.296 19.7687 li
397.298 19.7687 li
397.3 19.7687 li
397.301 19.7687 li
397.302 19.7687 li
397.303 19.7687 li
397.305 19.7687 li
397.306 19.7687 li
397.307 19.7687 li
397.309 19.7687 li
397.31 19.7687 li
397.312 19.7687 li
397.313 19.7687 li
397.314 19.7687 li
397.315 19.7687 li
397.316 19.7687 li
397.317 19.7687 li
397.318 19.7687 li
397.319 19.7687 li
397.32 19.7687 li
397.321 19.7687 li
397.322 19.7687 li
397.324 19.7687 li
397.325 19.7687 li
397.326 19.7687 li
397.327 19.7687 li
397.328 19.7687 li
397.329 19.7687 li
397.33 19.7687 li
397.331 19.7687 li
397.332 19.7687 li
397.333 19.7687 li
397.334 19.7687 li
397.335 19.7687 li
397.336 19.7687 li
397.337 19.7687 li
397.338 19.7687 li
397.339 19.7687 li
397.34 19.7687 li
397.341 19.7687 li
397.342 19.7687 li
397.343 19.7687 li
397.344 19.7687 li
/1 
[/DeviceCMYK] /CSA add_res
.265019 .809232 0 0 cmyk
@
0 lj
55.1538 230.498 mo
59.6538 230.498 li
59.6538 225.998 li
55.1538 225.998 li
cp
@
109.735 123.539 mo
114.235 123.539 li
114.235 119.039 li
109.735 119.039 li
cp
@
141.669 78.6707 mo
146.169 78.6707 li
146.169 74.1707 li
141.669 74.1707 li
cp
@
174.452 50.5717 mo
178.952 50.5717 li
178.952 46.0717 li
174.452 46.0717 li
cp
@
209.184 40.6007 mo
213.684 40.6007 li
213.684 36.1007 li
209.184 36.1007 li
cp
@
241.199 36.0687 mo
245.699 36.0687 li
245.699 31.5687 li
241.199 31.5687 li
cp
@
268.116 31.5367 mo
272.616 31.5367 li
272.616 27.0367 li
268.116 27.0367 li
cp
@
289.986 30.1767 mo
294.486 30.1767 li
294.486 25.6767 li
289.986 25.6767 li
cp
@
307.707 28.3637 mo
312.207 28.3637 li
312.207 23.8637 li
307.707 23.8637 li
cp
@
322.501 26.0977 mo
327.001 26.0977 li
327.001 21.5977 li
322.501 21.5977 li
cp
@
334.655 25.1917 mo
339.155 25.1917 li
339.155 20.6917 li
334.655 20.6917 li
cp
@
344.594 24.2847 mo
349.094 24.2847 li
349.094 19.7847 li
344.594 19.7847 li
cp
@
353.114 24.2847 mo
357.614 24.2847 li
357.614 19.7847 li
353.114 19.7847 li
cp
@
359.987 23.8317 mo
364.487 23.8317 li
364.487 19.3317 li
359.987 19.3317 li
cp
@
365.718 23.3787 mo
370.218 23.3787 li
370.218 18.8787 li
365.718 18.8787 li
cp
@
370.555 23.3787 mo
375.055 23.3787 li
375.055 18.8787 li
370.555 18.8787 li
cp
@
374.655 23.3787 mo
379.155 23.3787 li
379.155 18.8787 li
374.655 18.8787 li
cp
@
378.087 22.9247 mo
382.587 22.9247 li
382.587 18.4247 li
378.087 18.4247 li
cp
@
380.952 22.9247 mo
385.452 22.9247 li
385.452 18.4247 li
380.952 18.4247 li
cp
@
383.358 22.9247 mo
387.858 22.9247 li
387.858 18.4247 li
383.358 18.4247 li
cp
@
385.358 22.9247 mo
389.858 22.9247 li
389.858 18.4247 li
385.358 18.4247 li
cp
@
387.076 22.9247 mo
391.576 22.9247 li
391.576 18.4247 li
387.076 18.4247 li
cp
@
388.498 22.9247 mo
392.998 22.9247 li
392.998 18.4247 li
388.498 18.4247 li
cp
@
389.677 22.9247 mo
394.177 22.9247 li
394.177 18.4247 li
389.677 18.4247 li
cp
@
390.682 22.4717 mo
395.182 22.4717 li
395.182 17.9717 li
390.682 17.9717 li
cp
@
391.526 22.4717 mo
396.026 22.4717 li
396.026 17.9717 li
391.526 17.9717 li
cp
@
392.198 22.0187 mo
396.698 22.0187 li
396.698 17.5187 li
392.198 17.5187 li
cp
@
392.758 22.0187 mo
397.258 22.0187 li
397.258 17.5187 li
392.758 17.5187 li
cp
@
393.215 22.0187 mo
397.715 22.0187 li
397.715 17.5187 li
393.215 17.5187 li
cp
@
393.595 22.0187 mo
398.095 22.0187 li
398.095 17.5187 li
393.595 17.5187 li
cp
@
393.912 22.0187 mo
398.412 22.0187 li
398.412 17.5187 li
393.912 17.5187 li
cp
@
394.169 22.0187 mo
398.669 22.0187 li
398.669 17.5187 li
394.169 17.5187 li
cp
@
394.377 22.0187 mo
398.877 22.0187 li
398.877 17.5187 li
394.377 17.5187 li
cp
@
394.54 22.0187 mo
399.04 22.0187 li
399.04 17.5187 li
394.54 17.5187 li
cp
@
394.671 22.0187 mo
399.171 22.0187 li
399.171 17.5187 li
394.671 17.5187 li
cp
@
394.771 22.0187 mo
399.271 22.0187 li
399.271 17.5187 li
394.771 17.5187 li
cp
@
394.849 22.0187 mo
399.349 22.0187 li
399.349 17.5187 li
394.849 17.5187 li
cp
@
394.912 22.0187 mo
399.412 22.0187 li
399.412 17.5187 li
394.912 17.5187 li
cp
@
394.959 22.0187 mo
399.459 22.0187 li
399.459 17.5187 li
394.959 17.5187 li
cp
@
394.991 22.0187 mo
399.491 22.0187 li
399.491 17.5187 li
394.991 17.5187 li
cp
@
395.015 22.0187 mo
399.515 22.0187 li
399.515 17.5187 li
395.015 17.5187 li
cp
@
395.032 22.0187 mo
399.532 22.0187 li
399.532 17.5187 li
395.032 17.5187 li
cp
@
395.045 22.0187 mo
399.545 22.0187 li
399.545 17.5187 li
395.045 17.5187 li
cp
@
395.058 22.0187 mo
399.558 22.0187 li
399.558 17.5187 li
395.058 17.5187 li
cp
@
395.067 22.0187 mo
399.567 22.0187 li
399.567 17.5187 li
395.067 17.5187 li
cp
@
395.074 22.0187 mo
399.574 22.0187 li
399.574 17.5187 li
395.074 17.5187 li
cp
@
395.08 22.0187 mo
399.58 22.0187 li
399.58 17.5187 li
395.08 17.5187 li
cp
@
395.085 22.0187 mo
399.585 22.0187 li
399.585 17.5187 li
395.085 17.5187 li
cp
@
395.087 22.0187 mo
399.587 22.0187 li
399.587 17.5187 li
395.087 17.5187 li
cp
@
395.091 22.0187 mo
399.591 22.0187 li
399.591 17.5187 li
395.091 17.5187 li
cp
@
395.092 22.0187 mo
399.592 22.0187 li
399.592 17.5187 li
395.092 17.5187 li
cp
@
395.093 22.0187 mo
399.593 22.0187 li
399.593 17.5187 li
395.093 17.5187 li
cp
@
395.093 22.0187 mo
399.593 22.0187 li
399.593 17.5187 li
395.093 17.5187 li
cp
@
395.094 22.0187 mo
399.594 22.0187 li
399.594 17.5187 li
395.094 17.5187 li
cp
@
395.094 22.0187 mo
399.594 22.0187 li
399.594 17.5187 li
395.094 17.5187 li
cp
@
395.094 22.0187 mo
399.594 22.0187 li
399.594 17.5187 li
395.094 17.5187 li
cp
@
395.094 22.0187 mo
399.594 22.0187 li
399.594 17.5187 li
395.094 17.5187 li
cp
@
395.094 22.0187 mo
399.594 22.0187 li
399.594 17.5187 li
395.094 17.5187 li
cp
@
395.094 22.0187 mo
399.594 22.0187 li
399.594 17.5187 li
395.094 17.5187 li
cp
@
1 lj
48.5522 105.619 mo
64.367 103.614 li
91.6846 99.0807 li
107.624 98.6277 li
116.989 96.8157 li
125.087 93.1897 li
142.928 90.4707 li
149.282 89.1107 li
154.208 86.8447 li
161.933 85.4847 li
168.566 84.1257 li
174.767 82.7657 li
182.019 81.4057 li
186.311 80.0457 li
192.743 80.0457 li
196.487 78.2337 li
202.846 77.7807 li
206.921 76.8737 li
211.546 75.0607 li
216.204 74.1547 li
220.8 74.1547 li
224.586 74.1547 li
228.84 72.7957 li
233.202 72.7957 li
236.831 72.3417 li
240.26 70.5287 li
243.869 69.6227 li
247.316 67.8097 li
250.628 65.5437 li
253.81 64.1837 li
256.985 64.1837 li
260.339 62.3707 li
263.567 62.3707 li
266.173 61.4647 li
269.254 60.5577 li
272.097 58.2927 li
274.725 57.3857 li
277.333 57.3857 li
280.101 56.0257 li
282.883 55.1197 li
285.494 54.6667 li
288.01 53.3067 li
290.71 53.3067 li
293.399 52.8537 li
296.102 51.4937 li
298.397 50.5877 li
300.849 50.5877 li
303.214 50.5877 li
305.516 50.5877 li
307.853 49.6807 li
310.149 49.6807 li
312.206 49.2277 li
314.44 48.7737 li
316.523 48.7737 li
318.347 47.4147 li
320.355 46.5087 li
322.294 44.6957 li
324.195 43.7887 li
326.063 43.7887 li
327.844 43.3357 li
329.662 42.8827 li
331.362 42.4297 li
332.99 41.5237 li
334.739 41.0707 li
336.26 40.6167 li
337.811 40.1637 li
339.403 39.7107 li
340.898 39.2567 li
342.406 38.8037 li
343.862 38.8037 li
345.217 38.3507 li
346.525 38.3507 li
347.823 38.3507 li
349.049 36.0847 li
350.246 35.6307 li
351.485 34.7257 li
352.641 34.2717 li
353.812 33.8187 li
354.919 33.3657 li
356.002 33.3657 li
357.046 33.3657 li
358.069 33.3657 li
359.035 32.4587 li
360.022 32.4587 li
360.949 32.4587 li
361.852 32.0057 li
362.755 32.0057 li
363.62 31.0987 li
364.451 30.6457 li
365.303 30.6457 li
366.084 29.7387 li
366.887 29.7387 li
367.642 29.7387 li
368.369 28.8327 li
369.08 28.3797 li
369.784 28.3797 li
370.474 27.4737 li
371.161 27.4737 li
371.816 27.0207 li
372.438 27.0207 li
373.062 27.0207 li
373.646 27.0207 li
374.251 27.0207 li
374.839 27.0207 li
375.381 27.0207 li
375.932 27.0207 li
376.447 26.5667 li
376.932 26.5667 li
377.432 26.5667 li
377.91 26.1137 li
378.419 25.6607 li
378.888 25.6607 li
379.358 25.6607 li
379.774 25.2067 li
380.22 25.2067 li
380.643 25.2067 li
381.046 24.7537 li
381.446 24.3007 li
381.845 24.3007 li
382.214 24.3007 li
382.574 24.3007 li
382.933 24.3007 li
383.29 24.3007 li
383.63 23.8477 li
383.964 23.3937 li
384.285 22.9417 li
384.609 22.9417 li
384.91 22.9417 li
385.228 22.9417 li
385.528 22.9417 li
385.801 22.9417 li
386.09 22.9417 li
386.372 22.9417 li
386.632 22.9417 li
386.881 22.9417 li
387.146 22.4887 li
387.41 22.0347 li
387.649 22.0347 li
387.889 22.0347 li
388.135 22.0347 li
388.363 22.0347 li
388.581 21.5817 li
388.802 21.5817 li
389.009 21.5817 li
389.211 21.5817 li
389.406 21.5817 li
389.591 21.5817 li
389.772 21.1287 li
389.957 21.1287 li
390.124 21.1287 li
390.301 21.1287 li
390.481 21.1287 li
390.648 21.1287 li
390.807 21.1287 li
390.967 21.1287 li
391.116 21.1287 li
391.261 21.1287 li
391.403 21.1287 li
391.544 21.1287 li
391.683 21.1287 li
391.82 21.1287 li
391.958 21.1287 li
392.083 21.1287 li
392.203 20.6757 li
392.326 20.6757 li
392.446 20.6757 li
392.558 20.2217 li
392.665 20.2217 li
392.774 20.2217 li
392.881 20.2217 li
392.982 20.2217 li
393.094 20.2217 li
393.194 20.2217 li
393.296 20.2217 li
393.391 20.2217 li
393.485 20.2217 li
393.58 20.2217 li
393.67 20.2217 li
393.763 20.2217 li
393.851 19.7687 li
393.944 19.7687 li
394.028 19.7687 li
394.114 19.7687 li
394.188 19.7687 li
394.271 19.7687 li
394.344 19.7687 li
394.415 19.7687 li
394.489 19.7687 li
394.562 19.7687 li
394.633 19.7687 li
394.701 19.7687 li
394.767 19.7687 li
394.827 19.7687 li
394.892 19.7687 li
394.949 19.7687 li
395.008 19.7687 li
395.061 19.7687 li
395.119 19.7687 li
395.177 19.7687 li
395.228 19.7687 li
395.278 19.7687 li
395.332 19.7687 li
395.381 19.7687 li
395.431 19.7687 li
395.48 19.7687 li
395.525 19.7687 li
395.572 19.7687 li
395.613 19.7687 li
395.659 19.7687 li
395.699 19.7687 li
395.738 19.7687 li
395.778 19.7687 li
395.812 19.7687 li
395.856 19.7687 li
395.889 19.7687 li
395.926 19.7687 li
395.96 19.7687 li
395.992 19.7687 li
396.029 19.7687 li
396.064 19.7687 li
396.097 19.7687 li
396.128 19.7687 li
396.158 19.7687 li
396.185 19.7687 li
396.215 19.7687 li
396.24 19.7687 li
396.265 19.7687 li
396.291 19.7687 li
396.317 19.7687 li
396.346 19.7687 li
396.367 19.7687 li
396.388 19.7687 li
396.411 19.7687 li
396.436 19.7687 li
396.458 19.7687 li
396.48 19.7687 li
396.501 19.7687 li
396.521 19.7687 li
396.542 19.7687 li
396.56 19.7687 li
396.578 19.7687 li
396.596 19.7687 li
396.614 19.7687 li
396.632 19.7687 li
396.651 19.7687 li
396.667 19.7687 li
396.682 19.7687 li
396.698 19.7687 li
396.715 19.7687 li
396.729 19.7687 li
396.744 19.7687 li
396.759 19.7687 li
396.773 19.7687 li
396.783 19.7687 li
396.796 19.7687 li
396.81 19.7687 li
396.823 19.7687 li
396.834 19.7687 li
396.846 19.7687 li
396.859 19.7687 li
396.869 19.7687 li
396.88 19.7687 li
396.89 19.7687 li
396.901 19.7687 li
396.911 19.7687 li
396.922 19.7687 li
396.929 19.7687 li
396.941 19.7687 li
396.949 19.7687 li
396.958 19.7687 li
396.967 19.7687 li
396.976 19.7687 li
396.985 19.7687 li
396.994 19.7687 li
397.001 19.7687 li
397.007 19.7687 li
397.014 19.7687 li
397.023 19.7687 li
397.029 19.7687 li
397.036 19.7687 li
397.042 19.7687 li
397.049 19.7687 li
397.056 19.7687 li
397.064 19.7687 li
397.07 19.7687 li
397.076 19.7687 li
397.082 19.7687 li
397.088 19.7687 li
397.093 19.7687 li
397.098 19.7687 li
397.106 19.7687 li
397.11 19.7687 li
397.114 19.7687 li
397.12 19.7687 li
397.125 19.7687 li
397.131 19.7687 li
397.137 19.7687 li
397.142 19.7687 li
397.146 19.7687 li
397.15 19.7687 li
397.156 19.7687 li
397.16 19.7687 li
397.163 19.7687 li
397.167 19.7687 li
397.172 19.7687 li
397.176 19.7687 li
397.18 19.7687 li
397.184 19.7687 li
397.188 19.7687 li
397.192 19.7687 li
397.195 19.7687 li
397.198 19.7687 li
397.201 19.7687 li
397.205 19.7687 li
397.208 19.7687 li
397.211 19.7687 li
397.213 19.7687 li
397.215 19.7687 li
397.218 19.7687 li
397.221 19.7687 li
397.223 19.7687 li
397.226 19.7687 li
397.228 19.7687 li
397.231 19.7687 li
397.233 19.7687 li
397.236 19.7687 li
397.238 19.7687 li
397.24 19.7687 li
397.242 19.7687 li
397.244 19.7687 li
397.246 19.7687 li
397.249 19.7687 li
397.252 19.7687 li
397.254 19.7687 li
397.256 19.7687 li
397.258 19.7687 li
397.259 19.7687 li
397.262 19.7687 li
397.263 19.7687 li
397.264 19.7687 li
397.266 19.7687 li
397.268 19.7687 li
397.27 19.7687 li
397.272 19.7687 li
397.274 19.7687 li
397.275 19.7687 li
397.276 19.7687 li
397.278 19.7687 li
397.28 19.7687 li
397.281 19.7687 li
397.283 19.7687 li
397.284 19.7687 li
397.285 19.7687 li
397.286 19.7687 li
397.289 19.7687 li
397.291 19.7687 li
397.292 19.7687 li
397.293 19.7687 li
397.294 19.7687 li
397.297 19.7687 li
397.298 19.7687 li
397.3 19.7687 li
397.301 19.7687 li
397.302 19.7687 li
397.303 19.7687 li
397.304 19.7687 li
397.305 19.7687 li
397.307 19.7687 li
397.308 19.7687 li
397.309 19.7687 li
397.31 19.7687 li
397.311 19.7687 li
397.312 19.7687 li
397.314 19.7687 li
397.315 19.7687 li
397.316 19.7687 li
397.317 19.7687 li
397.319 19.7687 li
397.32 19.7687 li
397.321 19.7687 li
397.322 19.7687 li
397.324 19.7687 li
397.325 19.7687 li
397.326 19.7687 li
397.327 19.7687 li
397.328 19.7687 li
397.329 19.7687 li
397.33 19.7687 li
397.331 19.7687 li
397.332 19.7687 li
397.333 19.7687 li
397.334 19.7687 li
397.335 19.7687 li
397.336 19.7687 li
397.337 19.7687 li
397.338 19.7687 li
397.339 19.7687 li
397.34 19.7687 li
397.341 19.7687 li
397.342 19.7687 li
397.343 19.7687 li
397.344 19.7687 li
1 /0 /CSD get_res sepcs
1 sep
@
0 lj
107.624 95.6287 mo
107.624 101.629 li
@
186.311 77.0467 mo
186.311 83.0467 li
@
233.202 69.7947 mo
233.202 75.7947 li
@
266.173 58.4647 mo
266.173 64.4647 li
@
293.399 49.8537 mo
293.399 55.8537 li
@
316.523 45.7747 mo
316.523 51.7747 li
@
334.739 38.0697 mo
334.739 44.0697 li
@
349.049 33.0847 mo
349.049 39.0847 li
@
360.022 29.4587 mo
360.022 35.4587 li
@
368.369 25.8327 mo
368.369 31.8327 li
@
374.839 24.0207 mo
374.839 30.0207 li
@
379.774 22.2077 mo
379.774 28.2077 li
@
383.63 20.8477 mo
383.63 26.8477 li
@
386.632 19.9417 mo
386.632 25.9417 li
@
389.009 18.5817 mo
389.009 24.5817 li
@
390.807 18.1287 mo
390.807 24.1287 li
@
392.204 17.6747 mo
392.204 23.6747 li
@
393.296 17.2217 mo
393.296 23.2217 li
@
394.189 16.7687 mo
394.189 22.7687 li
@
394.891 16.7687 mo
394.891 22.7687 li
@
395.431 16.7687 mo
395.431 22.7687 li
@
395.856 16.7687 mo
395.856 22.7687 li
@
396.185 16.7687 mo
396.185 22.7687 li
@
396.436 16.7687 mo
396.436 22.7687 li
@
396.632 16.7687 mo
396.632 22.7687 li
@
396.783 16.7687 mo
396.783 22.7687 li
@
396.901 16.7687 mo
396.901 22.7687 li
@
396.994 16.7687 mo
396.994 22.7687 li
@
397.065 16.7687 mo
397.065 22.7687 li
@
397.12 16.7687 mo
397.12 22.7687 li
@
397.167 16.7687 mo
397.167 22.7687 li
@
397.205 16.7687 mo
397.205 22.7687 li
@
397.231 16.7687 mo
397.231 22.7687 li
@
397.254 16.7687 mo
397.254 22.7687 li
@
397.272 16.7687 mo
397.272 22.7687 li
@
397.285 16.7687 mo
397.285 22.7687 li
@
397.298 16.7687 mo
397.298 22.7687 li
@
397.308 16.7687 mo
397.308 22.7687 li
@
397.315 16.7687 mo
397.315 22.7687 li
@
397.32 16.7687 mo
397.32 22.7687 li
@
397.326 16.7687 mo
397.326 22.7687 li
@
397.331 16.7687 mo
397.331 22.7687 li
@
397.333 16.7687 mo
397.333 22.7687 li
@
397.336 16.7687 mo
397.336 22.7687 li
@
397.338 16.7687 mo
397.338 22.7687 li
@
397.34 16.7687 mo
397.34 22.7687 li
@
397.341 16.7687 mo
397.341 22.7687 li
@
397.342 16.7687 mo
397.342 22.7687 li
@
397.342 16.7687 mo
397.342 22.7687 li
@
397.343 16.7687 mo
397.343 22.7687 li
@
397.343 16.7687 mo
397.343 22.7687 li
@
397.343 16.7687 mo
397.343 22.7687 li
@
397.343 16.7687 mo
397.343 22.7687 li
@
397.344 16.7687 mo
397.344 22.7687 li
@
397.344 16.7687 mo
397.344 22.7687 li
@
397.344 16.7687 mo
397.344 22.7687 li
@
397.344 16.7687 mo
397.344 22.7687 li
@
397.344 16.7687 mo
397.344 22.7687 li
@
397.344 16.7687 mo
397.344 22.7687 li
@
1 lj
48.5522 45.6017 mo
57.4038 45.6017 li
57.4038 45.1487 li
64.367 43.7887 li
70.0557 43.7887 li
82.7073 43.7887 li
85.9952 42.8827 li
91.6846 41.9757 li
96.4946 41.5237 li
100.661 41.0707 li
102.553 40.6167 li
107.624 40.6167 li
109.147 40.1637 li
111.985 39.7107 li
113.314 38.8037 li
115.811 38.8037 li
122.29 38.8037 li
125.087 38.3507 li
127.652 37.4437 li
132.928 37.4437 li
135.586 36.9907 li
140.305 36.5377 li
140.847 36.0847 li
142.421 36.0847 li
145.349 35.1777 li
147.158 34.7257 li
148.868 34.2717 li
152.405 33.3657 li
154.902 32.9117 li
156.894 32.4587 li
158.155 32.4587 li
160.534 32.4587 li
163.01 31.5517 li
166.271 31.5517 li
168.787 31.5517 li
171.115 31.5517 li
172.315 31.5517 li
175.128 31.5517 li
176.701 31.5517 li
177.708 31.0987 li
181.292 31.0987 li
185.678 31.0987 li
188.137 31.0987 li
191.601 31.0987 li
193.944 31.0987 li
195.939 31.0987 li
198.67 31.0987 li
201.258 30.6457 li
204.569 30.6457 li
206.986 30.6457 li
209.765 30.1927 li
211.265 30.1927 li
213.806 30.1927 li
216.3 30.1927 li
219.226 30.1927 li
221.376 30.1927 li
223.501 29.7387 li
225.705 29.2867 li
228.061 29.2867 li
230.312 29.2867 li
232.009 29.2867 li
234.673 29.2867 li
236.557 29.2867 li
238.733 28.8327 li
240.985 28.3797 li
242.984 28.3797 li
244.978 28.3797 li
246.743 28.3797 li
248.516 28.3797 li
250.146 28.3797 li
251.894 28.3797 li
253.594 28.3797 li
255.846 28.3797 li
258.01 28.3797 li
260.233 28.3797 li
262.603 28.3797 li
264.765 28.3797 li
266.654 28.3797 li
268.633 27.9267 li
270.578 27.9267 li
272.281 27.9267 li
273.964 27.9267 li
275.432 27.9267 li
277.237 27.4737 li
278.809 27.0207 li
280.563 27.0207 li
282.397 27.0207 li
284.074 27.0207 li
285.525 27.0207 li
287.333 27.0207 li
288.939 27.0207 li
290.6 27.0207 li
292.024 27.0207 li
293.509 26.5667 li
294.948 26.5667 li
296.432 26.5667 li
297.851 26.1137 li
299.462 26.1137 li
300.903 26.1137 li
302.326 26.1137 li
303.799 26.1137 li
305.171 26.1137 li
306.617 26.1137 li
307.916 26.1137 li
309.126 25.6607 li
310.444 25.6607 li
311.796 25.6607 li
313.133 25.6607 li
314.441 25.6607 li
315.785 25.2067 li
316.99 25.2067 li
318.304 25.2067 li
319.588 25.2067 li
320.924 25.2067 li
322.232 25.2067 li
323.534 25.2067 li
324.818 24.7537 li
325.999 24.7537 li
327.163 24.7537 li
328.405 24.7537 li
329.605 24.7537 li
330.766 24.7537 li
331.846 24.7537 li
332.984 24.7537 li
334.037 24.7537 li
335.093 24.7537 li
336.202 24.7537 li
337.283 24.7537 li
338.283 24.7537 li
339.268 24.3007 li
340.232 24.3007 li
341.297 24.3007 li
342.367 24.3007 li
343.359 24.3007 li
344.343 24.3007 li
345.328 24.3007 li
346.282 24.3007 li
347.211 24.3007 li
348.169 24.3007 li
349.1 24.3007 li
350.076 24.3007 li
350.94 24.3007 li
351.804 24.3007 li
352.737 24.3007 li
353.632 24.3007 li
354.476 24.3007 li
355.315 24.3007 li
356.147 24.3007 li
356.957 23.8477 li
357.764 23.8477 li
358.528 23.3937 li
359.346 23.3937 li
360.125 23.3937 li
360.906 23.3937 li
361.686 23.3937 li
362.39 23.3937 li
363.101 23.3937 li
363.777 23.3937 li
364.487 23.3937 li
365.181 22.4887 li
365.87 22.4887 li
366.545 22.4887 li
367.217 22.4887 li
367.898 22.4887 li
368.524 22.4887 li
369.167 22.4887 li
369.808 22.4887 li
370.396 22.4887 li
370.99 22.4887 li
371.596 22.4887 li
372.176 22.4887 li
372.755 22.4887 li
373.335 22.4887 li
373.901 22.4887 li
374.463 22.4887 li
374.991 22.4887 li
375.52 22.4887 li
376.044 22.0347 li
376.579 22.0347 li
377.083 22.0347 li
377.571 22.0347 li
378.061 22.0347 li
378.51 22.0347 li
378.983 22.0347 li
379.444 22.0347 li
379.901 22.0347 li
380.342 22.0347 li
380.774 22.0347 li
381.192 22.0347 li
381.599 22.0347 li
382.002 22.0347 li
382.403 22.0347 li
382.805 22.0347 li
383.188 22.0347 li
383.558 22.0347 li
383.947 22.0347 li
384.313 22.0347 li
384.663 22.0347 li
385 22.0347 li
385.34 22.0347 li
385.679 22.0347 li
386.023 22.0347 li
386.345 22.0347 li
386.66 22.0347 li
386.959 22.0347 li
387.265 22.0347 li
387.559 22.0347 li
387.85 21.5817 li
388.131 21.5817 li
388.408 21.5817 li
388.679 21.5817 li
388.942 21.5817 li
389.195 21.5817 li
389.458 21.5817 li
389.707 21.5817 li
389.948 21.5817 li
390.18 21.5817 li
390.395 21.5817 li
390.612 21.5817 li
390.829 21.5817 li
391.042 21.1287 li
391.246 20.6757 li
391.435 20.6757 li
391.619 20.6757 li
391.806 20.6757 li
391.986 20.6757 li
392.163 20.6757 li
392.345 20.6757 li
392.519 20.6757 li
392.679 20.6757 li
392.835 20.2217 li
392.999 20.2217 li
393.158 20.2217 li
393.314 20.2217 li
393.451 20.2217 li
393.584 20.2217 li
393.733 20.2217 li
393.857 20.2217 li
393.986 20.2217 li
394.112 20.2217 li
394.226 19.7687 li
394.338 19.7687 li
394.451 19.7687 li
394.558 19.7687 li
394.66 19.7687 li
394.759 19.7687 li
394.86 19.7687 li
394.949 19.7687 li
395.045 19.7687 li
395.134 19.7687 li
395.228 19.7687 li
395.312 19.7687 li
395.393 19.7687 li
395.473 19.7687 li
395.549 19.7687 li
395.62 19.7687 li
395.691 19.7687 li
395.764 19.7687 li
395.826 19.7687 li
395.887 19.7687 li
395.947 19.7687 li
396 19.7687 li
396.049 19.7687 li
396.1 19.7687 li
396.151 19.7687 li
396.201 19.7687 li
396.251 19.7687 li
396.302 19.7687 li
396.344 19.7687 li
396.385 19.7687 li
396.425 19.7687 li
396.464 19.7687 li
396.501 19.7687 li
396.535 19.7687 li
396.569 19.7687 li
396.602 19.7687 li
396.634 19.7687 li
396.663 19.7687 li
396.694 19.7687 li
396.723 19.7687 li
396.751 19.7687 li
396.773 19.7687 li
396.794 19.7687 li
396.82 19.7687 li
396.844 19.7687 li
396.866 19.7687 li
396.885 19.7687 li
396.904 19.7687 li
396.922 19.7687 li
396.94 19.7687 li
396.96 19.7687 li
396.977 19.7687 li
396.995 19.7687 li
397.012 19.7687 li
397.028 19.7687 li
397.045 19.7687 li
397.06 19.7687 li
397.074 19.7687 li
397.087 19.7687 li
397.103 19.7687 li
397.115 19.7687 li
397.126 19.7687 li
397.138 19.7687 li
397.148 19.7687 li
397.157 19.7687 li
397.165 19.7687 li
397.175 19.7687 li
397.185 19.7687 li
397.193 19.7687 li
397.201 19.7687 li
397.208 19.7687 li
397.217 19.7687 li
397.222 19.7687 li
397.228 19.7687 li
397.234 19.7687 li
397.243 19.7687 li
397.249 19.7687 li
397.256 19.7687 li
397.26 19.7687 li
397.265 19.7687 li
397.269 19.7687 li
397.273 19.7687 li
397.277 19.7687 li
397.28 19.7687 li
397.283 19.7687 li
397.287 19.7687 li
397.292 19.7687 li
397.295 19.7687 li
397.298 19.7687 li
397.301 19.7687 li
397.302 19.7687 li
397.303 19.7687 li
397.307 19.7687 li
397.308 19.7687 li
397.31 19.7687 li
397.312 19.7687 li
397.314 19.7687 li
397.317 19.7687 li
397.319 19.7687 li
397.321 19.7687 li
397.322 19.7687 li
397.323 19.7687 li
397.324 19.7687 li
397.325 19.7687 li
397.327 19.7687 li
397.328 19.7687 li
397.329 19.7687 li
397.33 19.7687 li
397.331 19.7687 li
397.333 19.7687 li
397.334 19.7687 li
397.335 19.7687 li
397.336 19.7687 li
397.337 19.7687 li
397.338 19.7687 li
397.339 19.7687 li
397.34 19.7687 li
397.341 19.7687 li
397.342 19.7687 li
397.343 19.7687 li
397.344 19.7687 li
0 .990631 1 .000396735 cmyk
@
48.5522 152.747 mo
57.4038 152.562 li
57.4038 149.389 li
64.367 148.03 li
64.367 147.123 li
64.367 146.216 li
64.367 144.403 li
64.367 143.95 li
64.367 143.497 li
64.367 142.59 li
64.367 141.685 li
64.367 140.778 li
64.367 140.325 li
74.8663 139.871 li
88.969 139.871 li
88.969 138.965 li
88.969 137.152 li
94.1826 136.699 li
94.1826 135.792 li
94.1826 133.98 li
94.1826 132.62 li
98.6476 132.167 li
98.6476 131.713 li
106.024 131.26 li
110.599 130.353 li
110.599 128.994 li
113.314 127.181 li
119.219 125.822 li
122.29 125.368 li
124.182 125.368 li
125.965 124.462 li
127.652 124.462 li
131.51 124.462 li
136.216 122.649 li
137.44 122.649 li
139.752 121.743 li
141.381 121.743 li
142.928 119.476 li
145.349 118.117 li
147.594 118.117 li
148.868 116.758 li
150.092 116.304 li
151.27 115.398 li
153.139 113.131 li
154.208 113.131 li
157.214 113.131 li
159.068 113.131 li
159.367 111.772 li
159.663 110.412 li
160.819 109.506 li
162.744 109.053 li
164.05 109.053 li
165.548 108.146 li
166.977 107.24 li
167.895 106.333 li
169.006 104.974 li
171.52 104.067 li
172.705 103.161 li
173.09 103.161 li
173.66 103.161 li
175.837 101.801 li
177.209 100.441 li
179.002 99.5347 li
180.996 99.0807 li
182.87 99.0807 li
184.373 99.0807 li
186.561 98.1757 li
188.018 97.2687 li
188.722 97.2687 li
190.634 97.2687 li
191.601 96.3627 li
193.249 96.3627 li
193.944 96.3627 li
195.755 95.9087 li
197.466 94.5497 li
198.754 93.6427 li
200.867 93.6427 li
202.624 92.7367 li
204.638 91.3777 li
206.001 91.3777 li
206.986 90.9237 li
208.252 90.4707 li
209.647 90.4707 li
210.926 89.5637 li
212.263 89.1107 li
213.702 89.1107 li
214.676 88.2047 li
215.621 87.7507 li
216.917 87.7507 li
217.66 87.2977 li
218.83 87.2977 li
220.298 86.3917 li
221.417 84.5787 li
222.535 84.5787 li
223.196 84.1257 li
224.549 84.1257 li
225.42 83.6727 li
226.475 83.2187 li
227.362 82.7657 li
228.388 82.7657 li
229.254 82.3127 li
230.128 82.3127 li
231.098 81.8597 li
232.153 81.8597 li
232.809 81.8597 li
233.783 80.9527 li
234.911 80.0457 li
235.694 79.1397 li
236.707 79.1397 li
237.518 79.1397 li
238.096 78.2337 li
239.403 77.7807 li
240.103 77.3277 li
241.502 76.8737 li
242.533 75.9677 li
243.689 75.9677 li
244.766 75.5137 li
245.433 75.5137 li
246.27 75.5137 li
247.227 75.5137 li
248.208 75.0607 li
249.226 73.7007 li
250.227 73.7007 li
251.401 73.7007 li
252.23 73.2487 li
253.199 73.2487 li
254.112 72.7957 li
255.122 71.8887 li
255.873 71.8887 li
256.606 71.4357 li
257.374 70.0757 li
258.11 69.6227 li
259.171 69.1687 li
260.116 69.1687 li
261.089 68.2627 li
261.777 68.2627 li
262.571 68.2627 li
263.333 68.2627 li
264.192 67.3557 li
264.866 66.4507 li
265.625 65.9967 li
266.212 65.9967 li
267.081 65.9967 li
267.953 65.5437 li
268.758 64.1837 li
269.621 64.1837 li
270.23 64.1837 li
271.178 62.8237 li
271.952 62.8237 li
272.74 62.3707 li
273.737 61.4647 li
274.622 61.4647 li
275.418 60.5577 li
276.32 59.6517 li
277.156 59.6517 li
278.01 59.6517 li
278.744 59.6517 li
279.481 59.6517 li
280.255 59.6517 li
281.114 58.2927 li
281.815 58.2927 li
282.815 58.2927 li
283.545 57.8387 li
284.313 57.8387 li
285.047 56.9327 li
285.738 56.9327 li
286.374 56.4787 li
287.042 55.5727 li
288.014 54.2137 li
288.705 53.3067 li
289.499 52.8537 li
290.167 52.8537 li
290.768 51.9467 li
291.41 51.4937 li
292.08 50.5877 li
292.79 50.5877 li
293.565 49.6807 li
294.278 49.2277 li
295.021 48.7737 li
295.759 48.7737 li
296.395 48.7737 li
297.104 48.3207 li
297.749 48.3207 li
298.286 48.3207 li
298.972 48.3207 li
299.596 47.8687 li
300.119 47.4147 li
300.798 46.9617 li
301.537 46.9617 li
302.277 46.9617 li
302.887 46.9617 li
303.432 46.5087 li
304.033 45.6017 li
304.568 45.6017 li
305.193 45.1487 li
305.822 45.1487 li
306.428 45.1487 li
306.979 44.6957 li
307.581 44.2427 li
308.185 44.2427 li
308.804 43.7887 li
309.392 43.3357 li
310.035 43.3357 li
310.647 43.3357 li
311.188 43.3357 li
311.85 42.8827 li
312.425 42.8827 li
313.01 42.8827 li
313.634 42.8827 li
314.207 42.8827 li
314.825 42.8827 li
315.314 42.4297 li
315.871 41.9757 li
316.45 41.9757 li
317.026 41.9757 li
317.536 41.9757 li
318.06 41.5237 li
318.655 41.0707 li
319.165 41.0707 li
319.661 40.6167 li
320.185 40.1637 li
320.65 39.7107 li
321.244 39.7107 li
321.776 39.7107 li
322.285 39.7107 li
322.789 39.7107 li
323.258 39.2567 li
323.714 38.3507 li
324.289 37.4437 li
324.79 37.4437 li
325.258 37.4437 li
325.744 37.4437 li
326.183 36.9907 li
326.659 36.9907 li
327.167 36.9907 li
327.603 36.9907 li
328.047 36.5377 li
328.619 36.5377 li
329.059 36.5377 li
329.537 36.5377 li
329.96 36.0847 li
330.407 36.0847 li
330.869 36.0847 li
331.342 36.0847 li
331.793 36.0847 li
332.229 35.6307 li
332.657 35.6307 li
333.08 35.6307 li
333.497 35.1777 li
333.937 35.1777 li
334.343 35.1777 li
334.768 35.1777 li
335.236 35.1777 li
335.643 35.1777 li
336.022 35.1777 li
336.415 35.1777 li
336.797 34.7257 li
337.157 34.7257 li
337.559 34.2717 li
337.967 34.2717 li
338.4 34.2717 li
338.754 34.2717 li
339.155 34.2717 li
339.545 34.2717 li
339.906 33.3657 li
340.305 33.3657 li
340.69 33.3657 li
341.065 33.3657 li
341.471 33.3657 li
341.871 32.9117 li
342.246 32.4587 li
342.625 32.4587 li
342.985 32.4587 li
343.355 31.5517 li
343.736 31.5517 li
344.077 31.5517 li
344.447 31.5517 li
344.756 31.5517 li
345.092 31.0987 li
345.473 31.0987 li
345.796 30.6457 li
346.126 30.6457 li
346.438 30.1927 li
346.783 30.1927 li
347.113 30.1927 li
347.461 30.1927 li
347.776 30.1927 li
348.11 30.1927 li
348.438 30.1927 li
348.751 29.2867 li
349.048 29.2867 li
349.348 29.2867 li
349.676 29.2867 li
350.024 29.2867 li
350.333 29.2867 li
350.676 29.2867 li
351.001 29.2867 li
351.277 29.2867 li
351.578 28.8327 li
351.869 28.8327 li
352.168 28.8327 li
352.458 28.8327 li
352.748 28.8327 li
353.062 28.3797 li
353.365 28.3797 li
353.651 28.3797 li
353.948 28.3797 li
354.238 28.3797 li
354.504 27.9267 li
354.789 27.9267 li
355.073 27.9267 li
355.358 27.9267 li
355.677 27.9267 li
355.979 27.9267 li
356.246 27.4737 li
356.515 27.4737 li
356.807 27.0207 li
357.091 27.0207 li
357.344 27.0207 li
357.603 27.0207 li
357.859 27.0207 li
358.139 27.0207 li
358.382 26.5667 li
358.638 26.5667 li
358.889 26.5667 li
359.135 26.1137 li
359.387 26.1137 li
359.656 26.1137 li
359.905 26.1137 li
360.173 26.1137 li
360.414 26.1137 li
360.661 26.1137 li
360.901 26.1137 li
361.147 26.1137 li
361.394 26.1137 li
361.62 26.1137 li
361.87 26.1137 li
362.111 25.6607 li
362.364 25.2067 li
362.603 25.2067 li
362.828 25.2067 li
363.071 25.2067 li
363.296 25.2067 li
363.508 25.2067 li
363.755 25.2067 li
363.968 24.7537 li
364.196 24.3007 li
364.407 24.3007 li
364.63 24.3007 li
364.835 24.3007 li
365.035 24.3007 li
365.23 24.3007 li
365.423 24.3007 li
365.635 24.3007 li
365.821 24.3007 li
366.035 24.3007 li
366.236 24.3007 li
366.45 24.3007 li
366.636 24.3007 li
366.833 24.3007 li
367.022 24.3007 li
367.222 23.8477 li
367.426 23.8477 li
367.618 23.8477 li
367.814 23.8477 li
367.995 23.3937 li
368.174 23.3937 li
368.353 23.3937 li
368.531 23.3937 li
368.722 23.3937 li
368.901 23.3937 li
369.098 23.3937 li
369.274 23.3937 li
369.446 23.3937 li
369.625 23.3937 li
369.782 23.3937 li
369.944 23.3937 li
370.112 23.3937 li
370.278 22.9417 li
370.451 22.9417 li
370.625 22.9417 li
370.796 22.4887 li
370.96 22.4887 li
371.126 22.4887 li
371.29 22.4887 li
371.445 22.4887 li
371.605 22.4887 li
371.756 22.4887 li
371.923 22.4887 li
372.072 22.4887 li
372.22 22.4887 li
372.384 22.4887 li
372.538 22.4887 li
372.691 22.4887 li
372.837 22.4887 li
372.995 22.4887 li
373.142 22.4887 li
373.294 22.4887 li
373.439 22.4887 li
373.583 22.4887 li
373.724 22.4887 li
373.876 22.4887 li
374.026 22.4887 li
374.158 22.0347 li
374.304 22.0347 li
374.461 22.0347 li
374.596 22.0347 li
374.738 22.0347 li
374.873 22.0347 li
375.013 22.0347 li
375.142 22.0347 li
375.288 22.0347 li
375.414 22.0347 li
375.558 22.0347 li
375.7 22.0347 li
375.829 22.0347 li
375.959 22.0347 li
376.093 22.0347 li
376.204 22.0347 li
376.334 22.0347 li
376.456 22.0347 li
376.583 22.0347 li
376.713 22.0347 li
376.835 22.0347 li
376.949 22.0347 li
377.073 22.0347 li
377.201 22.0347 li
377.326 22.0347 li
377.441 22.0347 li
377.562 22.0347 li
377.678 22.0347 li
377.801 22.0347 li
377.915 22.0347 li
378.033 22.0347 li
378.156 22.0347 li
378.274 21.5817 li
378.392 21.5817 li
378.506 21.5817 li
378.618 21.5817 li
378.727 21.5817 li
378.851 21.5817 li
378.967 21.5817 li
379.074 21.5817 li
379.179 21.5817 li
379.288 21.5817 li
379.394 21.1287 li
379.501 21.1287 li
379.601 21.1287 li
379.712 21.1287 li
379.807 21.1287 li
379.918 21.1287 li
380.014 21.1287 li
380.124 21.1287 li
380.228 21.1287 li
380.333 21.1287 li
380.426 21.1287 li
380.528 21.1287 li
380.627 21.1287 li
380.728 21.1287 li
380.824 21.1287 li
380.923 21.1287 li
381.028 21.1287 li
381.129 21.1287 li
381.219 21.1287 li
381.313 21.1287 li
381.407 21.1287 li
381.493 21.1287 li
381.592 21.1287 li
381.682 21.1287 li
381.769 21.1287 li
381.869 21.1287 li
381.957 21.1287 li
382.05 21.1287 li
382.142 21.1287 li
382.249 21.1287 li
382.333 21.1287 li
382.432 21.1287 li
382.523 21.1287 li
382.62 21.1287 li
382.709 21.1287 li
382.794 21.1287 li
382.874 21.1287 li
382.96 21.1287 li
383.044 21.1287 li
383.137 21.1287 li
383.219 21.1287 li
383.297 21.1287 li
383.385 21.1287 li
383.468 21.1287 li
383.547 21.1287 li
383.641 21.1287 li
383.722 21.1287 li
383.814 21.1287 li
383.895 21.1287 li
383.976 21.1287 li
384.055 21.1287 li
384.135 21.1287 li
384.217 21.1287 li
384.302 21.1287 li
384.382 21.1287 li
384.454 21.1287 li
384.532 21.1287 li
384.614 21.1287 li
384.697 21.1287 li
384.769 21.1287 li
384.843 21.1287 li
384.915 21.1287 li
384.992 21.1287 li
385.066 21.1287 li
385.139 21.1287 li
385.214 21.1287 li
385.291 21.1287 li
385.369 21.1287 li
385.442 21.1287 li
385.514 21.1287 li
385.584 21.1287 li
385.66 21.1287 li
385.731 21.1287 li
385.81 21.1287 li
385.874 21.1287 li
385.942 21.1287 li
386.021 21.1287 li
386.094 21.1287 li
386.158 21.1287 li
386.227 21.1287 li
386.291 21.1287 li
386.36 21.1287 li
386.426 21.1287 li
386.501 21.1287 li
386.569 21.1287 li
386.641 21.1287 li
386.698 21.1287 li
386.762 21.1287 li
386.822 21.1287 li
386.885 21.1287 li
386.944 21.1287 li
387.005 21.1287 li
387.069 21.1287 li
387.135 21.1287 li
387.194 21.1287 li
387.254 21.1287 li
387.312 21.1287 li
387.374 21.1287 li
387.428 21.1287 li
387.493 21.1287 li
387.551 21.1287 li
387.614 21.1287 li
387.676 21.1287 li
387.733 21.1287 li
387.785 21.1287 li
387.836 21.1287 li
387.894 21.1287 li
387.955 21.1287 li
388.006 21.1287 li
388.06 21.1287 li
388.12 21.1287 li
388.171 21.1287 li
388.223 21.1287 li
388.281 21.1287 li
388.333 21.1287 li
388.389 21.1287 li
388.443 20.6757 li
388.5 20.6757 li
388.562 20.6757 li
388.617 20.6757 li
388.671 20.6757 li
388.724 20.6757 li
388.772 20.6757 li
388.819 20.6757 li
388.876 20.6757 li
388.929 20.6757 li
388.978 20.6757 li
389.027 20.6757 li
389.075 20.6757 li
389.125 20.6757 li
389.176 20.6757 li
389.223 20.6757 li
389.271 20.6757 li
389.317 20.6757 li
389.362 20.6757 li
389.408 20.6757 li
389.459 20.6757 li
389.505 20.6757 li
389.546 20.6757 li
389.597 20.6757 li
389.642 20.6757 li
389.687 20.6757 li
389.729 20.6757 li
389.776 20.6757 li
389.819 20.6757 li
389.865 20.6757 li
389.907 20.6757 li
389.949 20.6757 li
389.99 20.6757 li
390.032 20.6757 li
390.075 20.2217 li
390.118 20.2217 li
390.155 20.2217 li
390.195 20.2217 li
390.238 20.2217 li
390.275 20.2217 li
390.317 20.2217 li
390.36 20.2217 li
390.401 20.2217 li
390.447 20.2217 li
390.484 20.2217 li
390.521 20.2217 li
390.559 20.2217 li
390.6 20.2217 li
390.639 20.2217 li
390.679 20.2217 li
390.717 20.2217 li
390.76 20.2217 li
390.799 20.2217 li
390.838 20.2217 li
390.878 20.2217 li
390.91 20.2217 li
390.944 20.2217 li
390.984 20.2217 li
391.019 20.2217 li
391.057 20.2217 li
391.093 20.2217 li
391.127 20.2217 li
391.168 20.2217 li
391.201 20.2217 li
391.243 20.2217 li
391.279 20.2217 li
391.315 20.2217 li
391.35 20.2217 li
391.39 20.2217 li
391.422 20.2217 li
391.458 20.2217 li
391.493 20.2217 li
391.523 20.2217 li
391.561 20.2217 li
391.596 20.2217 li
391.633 20.2217 li
391.664 20.2217 li
391.699 20.2217 li
391.736 20.2217 li
391.774 20.2217 li
391.802 20.2217 li
391.829 20.2217 li
391.862 20.2217 li
391.892 20.2217 li
391.922 20.2217 li
391.952 20.2217 li
391.987 20.2217 li
392.021 20.2217 li
392.054 20.2217 li
392.086 20.2217 li
392.118 20.2217 li
392.157 20.2217 li
392.188 20.2217 li
392.22 20.2217 li
392.25 20.2217 li
392.282 20.2217 li
392.309 20.2217 li
392.339 20.2217 li
392.37 20.2217 li
392.399 20.2217 li
392.43 20.2217 li
392.463 20.2217 li
392.495 20.2217 li
392.523 20.2217 li
392.551 20.2217 li
392.579 20.2217 li
392.611 20.2217 li
392.635 20.2217 li
392.663 20.2217 li
392.692 20.2217 li
392.722 20.2217 li
392.749 20.2217 li
392.776 20.2217 li
392.806 20.2217 li
392.83 20.2217 li
392.855 20.2217 li
392.882 20.2217 li
392.908 20.2217 li
392.936 20.2217 li
392.961 20.2217 li
392.988 20.2217 li
393.014 20.2217 li
393.04 20.2217 li
393.067 20.2217 li
393.089 20.2217 li
393.116 20.2217 li
393.143 20.2217 li
393.169 20.2217 li
393.196 20.2217 li
393.219 20.2217 li
393.241 20.2217 li
393.264 20.2217 li
393.29 20.2217 li
393.313 20.2217 li
393.337 20.2217 li
393.362 20.2217 li
393.385 20.2217 li
393.412 20.2217 li
393.436 20.2217 li
393.462 20.2217 li
393.489 20.2217 li
393.514 20.2217 li
393.54 20.2217 li
393.565 20.2217 li
393.584 20.2217 li
393.608 20.2217 li
393.629 20.2217 li
393.653 20.2217 li
393.672 20.2217 li
393.695 20.2217 li
393.715 20.2217 li
393.737 20.2217 li
393.76 20.2217 li
393.786 20.2217 li
393.805 20.2217 li
393.825 20.2217 li
393.846 20.2217 li
393.865 20.2217 li
393.888 20.2217 li
393.908 20.2217 li
393.932 20.2217 li
393.949 20.2217 li
393.97 20.2217 li
393.993 20.2217 li
394.013 20.2217 li
394.034 20.2217 li
394.055 20.2217 li
394.076 20.2217 li
394.098 20.2217 li
394.118 20.2217 li
394.135 20.2217 li
394.156 20.2217 li
394.171 20.2217 li
394.19 20.2217 li
394.211 20.2217 li
394.232 20.2217 li
394.25 20.2217 li
394.273 20.2217 li
394.291 20.2217 li
394.31 20.2217 li
394.326 20.2217 li
394.344 20.2217 li
394.361 20.2217 li
394.382 20.2217 li
394.399 20.2217 li
394.415 20.2217 li
394.435 20.2217 li
394.451 20.2217 li
394.47 20.2217 li
394.487 20.2217 li
394.505 20.2217 li
394.523 20.2217 li
394.539 20.2217 li
394.558 20.2217 li
394.577 20.2217 li
394.594 20.2217 li
394.61 20.2217 li
394.626 20.2217 li
394.64 20.2217 li
394.658 20.2217 li
394.675 20.2217 li
394.69 20.2217 li
394.704 20.2217 li
394.724 20.2217 li
394.742 20.2217 li
394.76 20.2217 li
394.778 20.2217 li
394.792 20.2217 li
394.808 20.2217 li
394.82 20.2217 li
394.835 20.2217 li
394.853 20.2217 li
394.869 20.2217 li
394.887 20.2217 li
394.901 20.2217 li
394.917 20.2217 li
394.931 20.2217 li
394.945 20.2217 li
394.958 20.2217 li
394.975 20.2217 li
394.99 20.2217 li
395.003 20.2217 li
395.018 20.2217 li
395.035 20.2217 li
395.053 20.2217 li
395.068 20.2217 li
395.086 20.2217 li
395.101 20.2217 li
395.117 20.2217 li
395.132 20.2217 li
395.149 20.2217 li
395.16 20.2217 li
395.174 20.2217 li
395.19 20.2217 li
395.203 20.2217 li
395.215 20.2217 li
395.23 20.2217 li
395.242 20.2217 li
395.255 20.2217 li
395.269 20.2217 li
395.28 20.2217 li
395.295 20.2217 li
395.306 20.2217 li
395.322 20.2217 li
395.335 20.2217 li
395.351 20.2217 li
395.364 20.2217 li
395.377 20.2217 li
395.389 20.2217 li
395.403 20.2217 li
395.416 20.2217 li
395.428 20.2217 li
395.44 20.2217 li
395.455 20.2217 li
395.468 20.2217 li
395.48 20.2217 li
395.493 20.2217 li
395.506 20.2217 li
395.519 20.2217 li
395.53 20.2217 li
395.54 20.2217 li
395.554 20.2217 li
395.569 20.2217 li
395.578 20.2217 li
395.592 20.2217 li
395.605 20.2217 li
395.617 20.2217 li
395.63 20.2217 li
395.641 20.2217 li
395.652 20.2217 li
395.664 20.2217 li
395.674 20.2217 li
395.684 20.2217 li
395.694 20.2217 li
395.707 20.2217 li
395.718 20.2217 li
395.726 20.2217 li
395.737 20.2217 li
395.748 20.2217 li
395.758 20.2217 li
395.768 20.2217 li
395.78 20.2217 li
395.789 20.2217 li
395.802 20.2217 li
395.812 20.2217 li
395.819 20.2217 li
395.831 20.2217 li
395.841 20.2217 li
395.851 20.2217 li
395.859 20.2217 li
395.87 20.2217 li
395.881 20.2217 li
395.89 20.2217 li
395.901 20.2217 li
395.909 20.2217 li
395.922 20.2217 li
395.93 20.2217 li
395.938 20.2217 li
395.949 19.7687 li
395.957 19.7687 li
395.966 19.7687 li
395.978 19.7687 li
395.987 19.7687 li
395.996 19.7687 li
396.012 19.7687 li
396.023 19.7687 li
396.034 19.7687 li
396.042 19.7687 li
396.052 19.7687 li
396.061 19.7687 li
396.072 19.7687 li
396.08 19.7687 li
396.088 19.7687 li
396.097 19.7687 li
396.106 19.7687 li
396.113 19.7687 li
396.122 19.7687 li
396.134 19.7687 li
396.142 19.7687 li
396.151 19.7687 li
396.159 19.7687 li
396.169 19.7687 li
396.178 19.7687 li
396.186 19.7687 li
396.196 19.7687 li
396.203 19.7687 li
396.212 19.7687 li
396.221 19.7687 li
396.227 19.7687 li
396.234 19.7687 li
396.241 19.7687 li
396.248 19.7687 li
396.254 19.7687 li
396.262 19.7687 li
396.271 19.7687 li
396.278 19.7687 li
396.284 19.7687 li
396.292 19.7687 li
396.299 19.7687 li
396.308 19.7687 li
396.317 19.7687 li
396.323 19.7687 li
396.328 19.7687 li
396.338 19.7687 li
396.348 19.7687 li
396.355 19.7687 li
396.364 19.7687 li
396.368 19.7687 li
396.376 19.7687 li
396.383 19.7687 li
396.391 19.7687 li
396.398 19.7687 li
396.403 19.7687 li
396.411 19.7687 li
396.419 19.7687 li
396.425 19.7687 li
396.433 19.7687 li
396.442 19.7687 li
396.449 19.7687 li
396.455 19.7687 li
396.463 19.7687 li
396.469 19.7687 li
396.473 19.7687 li
396.48 19.7687 li
396.487 19.7687 li
396.493 19.7687 li
396.499 19.7687 li
396.505 19.7687 li
396.512 19.7687 li
396.517 19.7687 li
396.524 19.7687 li
396.53 19.7687 li
396.535 19.7687 li
396.542 19.7687 li
396.548 19.7687 li
396.554 19.7687 li
396.56 19.7687 li
396.565 19.7687 li
396.571 19.7687 li
396.578 19.7687 li
396.581 19.7687 li
396.587 19.7687 li
396.59 19.7687 li
396.595 19.7687 li
396.599 19.7687 li
396.605 19.7687 li
396.61 19.7687 li
396.616 19.7687 li
396.621 19.7687 li
396.627 19.7687 li
396.635 19.7687 li
396.64 19.7687 li
396.646 19.7687 li
396.652 19.7687 li
396.657 19.7687 li
396.663 19.7687 li
396.667 19.7687 li
396.674 19.7687 li
396.678 19.7687 li
396.683 19.7687 li
396.689 19.7687 li
396.695 19.7687 li
396.698 19.7687 li
396.702 19.7687 li
396.707 19.7687 li
396.712 19.7687 li
396.718 19.7687 li
396.723 19.7687 li
396.728 19.7687 li
396.732 19.7687 li
396.737 19.7687 li
396.742 19.7687 li
396.745 19.7687 li
396.748 19.7687 li
396.753 19.7687 li
396.758 19.7687 li
396.762 19.7687 li
396.768 19.7687 li
396.773 19.7687 li
396.776 19.7687 li
396.782 19.7687 li
396.786 19.7687 li
396.79 19.7687 li
396.794 19.7687 li
396.798 19.7687 li
396.803 19.7687 li
396.806 19.7687 li
396.811 19.7687 li
396.816 19.7687 li
396.821 19.7687 li
396.824 19.7687 li
396.827 19.7687 li
396.833 19.7687 li
396.836 19.7687 li
396.84 19.7687 li
396.845 19.7687 li
396.849 19.7687 li
396.852 19.7687 li
396.855 19.7687 li
396.859 19.7687 li
396.862 19.7687 li
396.865 19.7687 li
396.869 19.7687 li
396.872 19.7687 li
396.876 19.7687 li
396.881 19.7687 li
396.887 19.7687 li
396.891 19.7687 li
396.896 19.7687 li
396.899 19.7687 li
396.904 19.7687 li
396.908 19.7687 li
396.91 19.7687 li
396.914 19.7687 li
396.917 19.7687 li
396.922 19.7687 li
396.925 19.7687 li
396.929 19.7687 li
396.932 19.7687 li
396.936 19.7687 li
396.94 19.7687 li
396.943 19.7687 li
396.946 19.7687 li
396.949 19.7687 li
396.953 19.7687 li
396.955 19.7687 li
396.958 19.7687 li
396.962 19.7687 li
396.965 19.7687 li
396.968 19.7687 li
396.97 19.7687 li
396.972 19.7687 li
396.976 19.7687 li
396.978 19.7687 li
396.98 19.7687 li
396.984 19.7687 li
396.986 19.7687 li
396.992 19.7687 li
396.996 19.7687 li
397 19.7687 li
397.003 19.7687 li
397.006 19.7687 li
397.009 19.7687 li
397.011 19.7687 li
397.015 19.7687 li
397.017 19.7687 li
397.02 19.7687 li
397.021 19.7687 li
397.024 19.7687 li
397.026 19.7687 li
397.028 19.7687 li
397.03 19.7687 li
397.033 19.7687 li
397.036 19.7687 li
397.039 19.7687 li
397.042 19.7687 li
397.044 19.7687 li
397.046 19.7687 li
397.049 19.7687 li
397.051 19.7687 li
397.053 19.7687 li
397.056 19.7687 li
397.058 19.7687 li
397.061 19.7687 li
397.064 19.7687 li
397.067 19.7687 li
397.069 19.7687 li
397.072 19.7687 li
397.073 19.7687 li
397.076 19.7687 li
397.078 19.7687 li
397.081 19.7687 li
397.083 19.7687 li
397.085 19.7687 li
397.088 19.7687 li
397.09 19.7687 li
397.093 19.7687 li
397.095 19.7687 li
397.097 19.7687 li
397.099 19.7687 li
397.102 19.7687 li
397.105 19.7687 li
397.109 19.7687 li
397.112 19.7687 li
397.114 19.7687 li
397.117 19.7687 li
397.121 19.7687 li
397.123 19.7687 li
397.126 19.7687 li
397.128 19.7687 li
397.13 19.7687 li
397.133 19.7687 li
397.134 19.7687 li
397.135 19.7687 li
397.137 19.7687 li
397.139 19.7687 li
397.14 19.7687 li
397.143 19.7687 li
397.144 19.7687 li
397.146 19.7687 li
397.148 19.7687 li
397.15 19.7687 li
397.152 19.7687 li
397.154 19.7687 li
397.155 19.7687 li
397.157 19.7687 li
397.159 19.7687 li
397.16 19.7687 li
397.162 19.7687 li
397.164 19.7687 li
397.165 19.7687 li
397.167 19.7687 li
397.169 19.7687 li
397.17 19.7687 li
397.171 19.7687 li
397.173 19.7687 li
397.174 19.7687 li
397.175 19.7687 li
397.177 19.7687 li
397.179 19.7687 li
397.18 19.7687 li
397.182 19.7687 li
397.183 19.7687 li
397.185 19.7687 li
397.187 19.7687 li
397.189 19.7687 li
397.192 19.7687 li
397.193 19.7687 li
397.196 19.7687 li
397.197 19.7687 li
397.199 19.7687 li
397.2 19.7687 li
397.201 19.7687 li
397.203 19.7687 li
397.205 19.7687 li
397.208 19.7687 li
397.21 19.7687 li
397.212 19.7687 li
397.214 19.7687 li
397.215 19.7687 li
397.216 19.7687 li
397.217 19.7687 li
397.219 19.7687 li
397.222 19.7687 li
397.223 19.7687 li
397.225 19.7687 li
397.226 19.7687 li
397.228 19.7687 li
397.23 19.7687 li
397.231 19.7687 li
397.232 19.7687 li
397.233 19.7687 li
397.235 19.7687 li
397.236 19.7687 li
397.237 19.7687 li
397.238 19.7687 li
397.24 19.7687 li
397.243 19.7687 li
397.244 19.7687 li
397.246 19.7687 li
397.247 19.7687 li
397.248 19.7687 li
397.249 19.7687 li
397.251 19.7687 li
397.253 19.7687 li
397.254 19.7687 li
397.255 19.7687 li
397.256 19.7687 li
397.257 19.7687 li
397.258 19.7687 li
397.259 19.7687 li
397.26 19.7687 li
397.261 19.7687 li
397.262 19.7687 li
397.263 19.7687 li
397.264 19.7687 li
397.266 19.7687 li
397.267 19.7687 li
397.268 19.7687 li
397.27 19.7687 li
397.271 19.7687 li
397.272 19.7687 li
397.273 19.7687 li
397.274 19.7687 li
397.275 19.7687 li
397.276 19.7687 li
397.277 19.7687 li
397.278 19.7687 li
397.279 19.7687 li
397.28 19.7687 li
397.281 19.7687 li
397.282 19.7687 li
397.283 19.7687 li
397.284 19.7687 li
397.285 19.7687 li
397.287 19.7687 li
397.288 19.7687 li
397.289 19.7687 li
397.29 19.7687 li
397.291 19.7687 li
397.292 19.7687 li
397.293 19.7687 li
397.294 19.7687 li
397.295 19.7687 li
397.296 19.7687 li
397.297 19.7687 li
397.298 19.7687 li
397.299 19.7687 li
397.301 19.7687 li
397.302 19.7687 li
397.303 19.7687 li
397.304 19.7687 li
397.305 19.7687 li
397.306 19.7687 li
397.307 19.7687 li
397.308 19.7687 li
397.309 19.7687 li
397.31 19.7687 li
397.311 19.7687 li
397.312 19.7687 li
397.313 19.7687 li
397.314 19.7687 li
397.315 19.7687 li
397.316 19.7687 li
397.317 19.7687 li
397.318 19.7687 li
397.319 19.7687 li
397.32 19.7687 li
397.321 19.7687 li
397.322 19.7687 li
397.323 19.7687 li
397.324 19.7687 li
397.325 19.7687 li
397.326 19.7687 li
397.327 19.7687 li
397.328 19.7687 li
397.329 19.7687 li
397.33 19.7687 li
397.331 19.7687 li
397.332 19.7687 li
397.333 19.7687 li
397.334 19.7687 li
397.335 19.7687 li
397.336 19.7687 li
397.337 19.7687 li
397.338 19.7687 li
397.339 19.7687 li
397.34 19.7687 li
397.341 19.7687 li
397.342 19.7687 li
397.343 19.7687 li
397.344 19.7687 li
.895628 .7673 0 0 cmyk
@
0 lj
57.4038 149.562 mo
57.4038 155.562 li
54.4038 152.562 mo
60.4038 152.562 li
55.2827 150.44 mo
59.5249 154.682 li
55.2827 154.682 mo
59.5249 150.44 li
@
64.3666 139.59 mo
64.3666 145.59 li
61.3666 142.59 mo
67.3666 142.59 li
62.2456 140.47 mo
66.4877 144.712 li
62.2456 144.712 mo
66.4877 140.47 li
@
94.1816 132.792 mo
94.1816 138.792 li
91.1816 135.792 mo
97.1816 135.792 li
92.0616 133.671 mo
96.3026 137.914 li
92.0616 137.914 mo
96.3026 133.671 li
@
119.219 122.822 mo
119.219 128.822 li
116.219 125.822 mo
122.219 125.822 li
117.098 123.701 mo
121.34 127.942 li
117.098 127.942 mo
121.34 123.701 li
@
141.381 118.743 mo
141.381 124.743 li
138.381 121.743 mo
144.381 121.743 li
139.26 119.622 mo
143.502 123.864 li
139.26 123.864 mo
143.502 119.622 li
@
159.069 110.131 mo
159.069 116.131 li
156.069 113.131 mo
162.069 113.131 li
156.948 111.01 mo
161.19 115.253 li
156.948 115.253 mo
161.19 111.01 li
@
171.52 101.067 mo
171.52 107.067 li
168.52 104.067 mo
174.52 104.067 li
169.399 101.946 mo
173.641 106.188 li
169.399 106.188 mo
173.641 101.946 li
@
186.561 95.1747 mo
186.561 101.175 li
183.561 98.1747 mo
189.561 98.1747 li
184.44 96.0547 mo
188.682 100.296 li
184.44 100.296 mo
188.682 96.0547 li
@
200.867 90.6427 mo
200.867 96.6427 li
197.867 93.6427 mo
203.867 93.6427 li
198.746 91.5217 mo
202.988 95.7637 li
198.746 95.7637 mo
202.988 91.5217 li
@
214.676 85.2047 mo
214.676 91.2047 li
211.676 88.2047 mo
217.676 88.2047 li
212.556 86.0837 mo
216.798 90.3257 li
212.556 90.3257 mo
216.798 86.0837 li
@
225.42 80.6727 mo
225.42 86.6727 li
222.42 83.6727 mo
228.42 83.6727 li
223.299 81.5507 mo
227.541 85.7937 li
223.299 85.7937 mo
227.541 81.5507 li
@
234.911 77.0467 mo
234.911 83.0467 li
231.911 80.0467 mo
237.911 80.0467 li
232.79 77.9257 mo
237.032 82.1677 li
232.79 82.1677 mo
237.032 77.9257 li
@
244.767 72.5147 mo
244.767 78.5147 li
241.767 75.5147 mo
247.767 75.5147 li
242.646 73.3937 mo
246.888 77.6357 li
242.646 77.6357 mo
246.888 73.3937 li
@
254.112 69.7947 mo
254.112 75.7947 li
251.112 72.7947 mo
257.112 72.7947 li
251.99 70.6737 mo
256.233 74.9157 li
251.99 74.9157 mo
256.233 70.6737 li
@
262.571 65.2627 mo
262.571 71.2627 li
259.571 68.2627 mo
265.571 68.2627 li
260.449 66.1417 mo
264.692 70.3837 li
260.449 70.3837 mo
264.692 66.1417 li
@
270.23 61.1837 mo
270.23 67.1837 li
267.23 64.1837 mo
273.23 64.1837 li
268.11 62.0627 mo
272.351 66.3047 li
268.11 66.3047 mo
272.351 62.0627 li
@
278.744 56.6517 mo
278.744 62.6517 li
275.744 59.6517 mo
281.744 59.6517 li
276.623 57.5307 mo
280.865 61.7727 li
276.623 61.7727 mo
280.865 57.5307 li
@
286.374 53.4797 mo
286.374 59.4797 li
283.374 56.4797 mo
289.374 56.4797 li
284.253 54.3577 mo
288.495 58.6007 li
284.253 58.6007 mo
288.495 54.3577 li
@
293.565 46.6807 mo
293.565 52.6807 li
290.565 49.6807 mo
296.565 49.6807 li
291.444 47.5597 mo
295.686 51.8017 li
291.444 51.8017 mo
295.686 47.5597 li
@
300.119 44.4147 mo
300.119 50.4147 li
297.119 47.4147 mo
303.119 47.4147 li
297.998 45.2937 mo
302.24 49.5357 li
297.998 49.5357 mo
302.24 45.2937 li
@
306.429 42.1487 mo
306.429 48.1487 li
303.429 45.1487 mo
309.429 45.1487 li
304.308 43.0277 mo
308.549 47.2697 li
304.308 47.2697 mo
308.549 43.0277 li
@
312.425 39.8827 mo
312.425 45.8827 li
309.425 42.8827 mo
315.425 42.8827 li
310.304 40.7617 mo
314.546 45.0037 li
310.304 45.0037 mo
314.546 40.7617 li
@
318.06 38.5227 mo
318.06 44.5227 li
315.06 41.5227 mo
321.06 41.5227 li
315.939 39.4017 mo
320.181 43.6437 li
315.939 43.6437 mo
320.181 39.4017 li
@
323.257 36.2567 mo
323.257 42.2567 li
320.257 39.2567 mo
326.257 39.2567 li
321.136 37.1357 mo
325.378 41.3777 li
321.136 41.3777 mo
325.378 37.1357 li
@
328.047 33.5377 mo
328.047 39.5377 li
325.047 36.5377 mo
331.047 36.5377 li
325.926 34.4167 mo
330.168 38.6587 li
325.926 38.6587 mo
330.168 34.4167 li
@
332.657 32.6307 mo
332.657 38.6307 li
329.657 35.6307 mo
335.657 35.6307 li
330.536 33.5097 mo
334.778 37.7527 li
330.536 37.7527 mo
334.778 33.5097 li
@
336.798 31.7247 mo
336.798 37.7247 li
333.798 34.7247 mo
339.798 34.7247 li
334.676 32.6037 mo
338.918 36.8457 li
334.676 36.8457 mo
338.918 32.6037 li
@
340.69 30.3647 mo
340.69 36.3647 li
337.69 33.3647 mo
343.69 33.3647 li
338.569 31.2437 mo
342.811 35.4867 li
338.569 35.4867 mo
342.811 31.2437 li
@
344.447 28.5527 mo
344.447 34.5527 li
341.447 31.5527 mo
347.447 31.5527 li
342.326 29.4307 mo
346.568 33.6737 li
342.326 33.6737 mo
346.568 29.4307 li
@
347.776 27.1927 mo
347.776 33.1927 li
344.776 30.1927 mo
350.776 30.1927 li
345.655 28.0717 mo
349.897 32.3137 li
345.655 32.3137 mo
349.897 28.0717 li
@
351.001 26.2867 mo
351.001 32.2867 li
348.001 29.2867 mo
354.001 29.2867 li
348.88 27.1647 mo
353.123 31.4077 li
348.88 31.4077 mo
353.123 27.1647 li
@
353.948 25.3797 mo
353.948 31.3797 li
350.948 28.3797 mo
356.948 28.3797 li
351.827 26.2587 mo
356.069 30.5007 li
351.827 30.5007 mo
356.069 26.2587 li
@
356.807 24.0207 mo
356.807 30.0207 li
353.807 27.0207 mo
359.807 27.0207 li
354.686 24.8987 mo
358.928 29.1417 li
354.686 29.1417 mo
358.928 24.8987 li
@
359.387 23.1137 mo
359.387 29.1137 li
356.387 26.1137 mo
362.387 26.1137 li
357.266 23.9927 mo
361.508 28.2347 li
357.266 28.2347 mo
361.508 23.9927 li
@
361.869 23.1137 mo
361.869 29.1137 li
358.869 26.1137 mo
364.869 26.1137 li
359.748 23.9927 mo
363.99 28.2347 li
359.748 28.2347 mo
363.99 23.9927 li
@
364.196 21.3007 mo
364.196 27.3007 li
361.196 24.3007 mo
367.196 24.3007 li
362.075 22.1797 mo
366.317 26.4217 li
362.075 26.4217 mo
366.317 22.1797 li
@
366.237 21.3007 mo
366.237 27.3007 li
363.237 24.3007 mo
369.237 24.3007 li
364.115 22.1797 mo
368.358 26.4217 li
364.115 26.4217 mo
368.358 22.1797 li
@
368.174 20.3947 mo
368.174 26.3947 li
365.174 23.3947 mo
371.174 23.3947 li
366.053 21.2737 mo
370.295 25.5157 li
366.053 25.5157 mo
370.295 21.2737 li
@
369.943 20.3947 mo
369.943 26.3947 li
366.943 23.3947 mo
372.943 23.3947 li
367.823 21.2737 mo
372.064 25.5157 li
367.823 25.5157 mo
372.064 21.2737 li
@
371.605 19.4877 mo
371.605 25.4877 li
368.605 22.4877 mo
374.605 22.4877 li
369.484 20.3667 mo
373.726 24.6087 li
369.484 24.6087 mo
373.726 20.3667 li
@
373.142 19.4877 mo
373.142 25.4877 li
370.142 22.4877 mo
376.142 22.4877 li
371.022 20.3667 mo
375.264 24.6087 li
371.022 24.6087 mo
375.264 20.3667 li
@
374.597 19.0347 mo
374.597 25.0347 li
371.597 22.0347 mo
377.597 22.0347 li
372.476 19.9137 mo
376.718 24.1557 li
372.476 24.1557 mo
376.718 19.9137 li
@
375.959 19.0347 mo
375.959 25.0347 li
372.959 22.0347 mo
378.959 22.0347 li
373.838 19.9137 mo
378.08 24.1557 li
373.838 24.1557 mo
378.08 19.9137 li
@
377.201 19.0347 mo
377.201 25.0347 li
374.201 22.0347 mo
380.201 22.0347 li
375.08 19.9137 mo
379.323 24.1557 li
375.08 24.1557 mo
379.323 19.9137 li
@
378.392 18.5817 mo
378.392 24.5817 li
375.392 21.5817 mo
381.392 21.5817 li
376.271 19.4607 mo
380.513 23.7027 li
376.271 23.7027 mo
380.513 19.4607 li
@
379.501 18.1287 mo
379.501 24.1287 li
376.501 21.1287 mo
382.501 21.1287 li
377.38 19.0077 mo
381.622 23.2487 li
377.38 23.2487 mo
381.622 19.0077 li
@
380.528 18.1287 mo
380.528 24.1287 li
377.528 21.1287 mo
383.528 21.1287 li
378.407 19.0077 mo
382.649 23.2487 li
378.407 23.2487 mo
382.649 19.0077 li
@
381.493 18.1287 mo
381.493 24.1287 li
378.493 21.1287 mo
384.493 21.1287 li
379.372 19.0077 mo
383.614 23.2487 li
379.372 23.2487 mo
383.614 19.0077 li
@
382.432 18.1287 mo
382.432 24.1287 li
379.432 21.1287 mo
385.432 21.1287 li
380.31 19.0077 mo
384.553 23.2487 li
380.31 23.2487 mo
384.553 19.0077 li
@
383.298 18.1287 mo
383.298 24.1287 li
380.298 21.1287 mo
386.298 21.1287 li
381.176 19.0077 mo
385.419 23.2487 li
381.176 23.2487 mo
385.419 19.0077 li
@
384.135 18.1287 mo
384.135 24.1287 li
381.135 21.1287 mo
387.135 21.1287 li
382.014 19.0077 mo
386.256 23.2487 li
382.014 23.2487 mo
386.256 19.0077 li
@
384.915 18.1287 mo
384.915 24.1287 li
381.915 21.1287 mo
387.915 21.1287 li
382.794 19.0077 mo
387.036 23.2487 li
382.794 23.2487 mo
387.036 19.0077 li
@
385.659 18.1287 mo
385.659 24.1287 li
382.659 21.1287 mo
388.659 21.1287 li
383.539 19.0077 mo
387.78 23.2487 li
383.539 23.2487 mo
387.78 19.0077 li
@
386.36 18.1287 mo
386.36 24.1287 li
383.36 21.1287 mo
389.36 21.1287 li
384.239 19.0077 mo
388.481 23.2487 li
384.239 23.2487 mo
388.481 19.0077 li
@
387.005 18.1287 mo
387.005 24.1287 li
384.005 21.1287 mo
390.005 21.1287 li
384.884 19.0077 mo
389.126 23.2487 li
384.884 23.2487 mo
389.126 19.0077 li
@
387.614 18.1287 mo
387.614 24.1287 li
384.614 21.1287 mo
390.614 21.1287 li
385.492 19.0077 mo
389.735 23.2487 li
385.492 23.2487 mo
389.735 19.0077 li
@
388.171 18.1287 mo
388.171 24.1287 li
385.171 21.1287 mo
391.171 21.1287 li
386.05 19.0077 mo
390.292 23.2487 li
386.05 23.2487 mo
390.292 19.0077 li
@
388.724 17.6747 mo
388.724 23.6747 li
385.724 20.6747 mo
391.724 20.6747 li
386.603 18.5547 mo
390.845 22.7957 li
386.603 22.7957 mo
390.845 18.5547 li
@
389.223 17.6747 mo
389.223 23.6747 li
386.223 20.6747 mo
392.223 20.6747 li
387.102 18.5547 mo
391.344 22.7957 li
387.102 22.7957 mo
391.344 18.5547 li
@
389.686 17.6747 mo
389.686 23.6747 li
386.686 20.6747 mo
392.686 20.6747 li
387.565 18.5547 mo
391.807 22.7957 li
387.565 22.7957 mo
391.807 18.5547 li
@
390.118 17.2217 mo
390.118 23.2217 li
387.118 20.2217 mo
393.118 20.2217 li
387.997 18.1007 mo
392.239 22.3427 li
387.997 22.3427 mo
392.239 18.1007 li
@
390.521 17.2217 mo
390.521 23.2217 li
387.521 20.2217 mo
393.521 20.2217 li
388.4 18.1007 mo
392.642 22.3427 li
388.4 22.3427 mo
392.642 18.1007 li
@
390.909 17.2217 mo
390.909 23.2217 li
387.909 20.2217 mo
393.909 20.2217 li
388.789 18.1007 mo
393.03 22.3427 li
388.789 22.3427 mo
393.03 18.1007 li
@
391.279 17.2217 mo
391.279 23.2217 li
388.279 20.2217 mo
394.279 20.2217 li
389.158 18.1007 mo
393.4 22.3427 li
389.158 22.3427 mo
393.4 18.1007 li
@
391.633 17.2217 mo
391.633 23.2217 li
388.633 20.2217 mo
394.633 20.2217 li
389.512 18.1007 mo
393.754 22.3427 li
389.512 22.3427 mo
393.754 18.1007 li
@
391.953 17.2217 mo
391.953 23.2217 li
388.953 20.2217 mo
394.953 20.2217 li
389.832 18.1007 mo
394.073 22.3427 li
389.832 22.3427 mo
394.073 18.1007 li
@
392.282 17.2217 mo
392.282 23.2217 li
389.282 20.2217 mo
395.282 20.2217 li
390.161 18.1007 mo
394.403 22.3427 li
390.161 22.3427 mo
394.403 18.1007 li
@
392.58 17.2217 mo
392.58 23.2217 li
389.58 20.2217 mo
395.58 20.2217 li
390.458 18.1007 mo
394.7 22.3427 li
390.458 22.3427 mo
394.7 18.1007 li
@
392.855 17.2217 mo
392.855 23.2217 li
389.855 20.2217 mo
395.855 20.2217 li
390.733 18.1007 mo
394.975 22.3427 li
390.733 22.3427 mo
394.975 18.1007 li
@
393.116 17.2217 mo
393.116 23.2217 li
390.116 20.2217 mo
396.116 20.2217 li
390.995 18.1007 mo
395.237 22.3427 li
390.995 22.3427 mo
395.237 18.1007 li
@
393.361 17.2217 mo
393.361 23.2217 li
390.361 20.2217 mo
396.361 20.2217 li
391.24 18.1007 mo
395.482 22.3427 li
391.24 22.3427 mo
395.482 18.1007 li
@
393.607 17.2217 mo
393.607 23.2217 li
390.607 20.2217 mo
396.607 20.2217 li
391.486 18.1007 mo
395.728 22.3427 li
391.486 22.3427 mo
395.728 18.1007 li
@
393.825 17.2217 mo
393.825 23.2217 li
390.825 20.2217 mo
396.825 20.2217 li
391.704 18.1007 mo
395.946 22.3427 li
391.704 22.3427 mo
395.946 18.1007 li
@
394.035 17.2217 mo
394.035 23.2217 li
391.035 20.2217 mo
397.035 20.2217 li
391.914 18.1007 mo
396.155 22.3427 li
391.914 22.3427 mo
396.155 18.1007 li
@
394.232 17.2217 mo
394.232 23.2217 li
391.232 20.2217 mo
397.232 20.2217 li
392.111 18.1007 mo
396.353 22.3427 li
392.111 22.3427 mo
396.353 18.1007 li
@
394.415 17.2217 mo
394.415 23.2217 li
391.415 20.2217 mo
397.415 20.2217 li
392.294 18.1007 mo
396.536 22.3427 li
392.294 22.3427 mo
396.536 18.1007 li
@
394.594 17.2217 mo
394.594 23.2217 li
391.594 20.2217 mo
397.594 20.2217 li
392.473 18.1007 mo
396.715 22.3427 li
392.473 22.3427 mo
396.715 18.1007 li
@
394.76 17.2217 mo
394.76 23.2217 li
391.76 20.2217 mo
397.76 20.2217 li
392.639 18.1007 mo
396.881 22.3427 li
392.639 22.3427 mo
396.881 18.1007 li
@
394.917 17.2217 mo
394.917 23.2217 li
391.917 20.2217 mo
397.917 20.2217 li
392.796 18.1007 mo
397.038 22.3427 li
392.796 22.3427 mo
397.038 18.1007 li
@
395.067 17.2217 mo
395.067 23.2217 li
392.067 20.2217 mo
398.067 20.2217 li
392.946 18.1007 mo
397.189 22.3427 li
392.946 22.3427 mo
397.189 18.1007 li
@
395.216 17.2217 mo
395.216 23.2217 li
392.216 20.2217 mo
398.216 20.2217 li
393.095 18.1007 mo
397.337 22.3427 li
393.095 22.3427 mo
397.337 18.1007 li
@
395.351 17.2217 mo
395.351 23.2217 li
392.351 20.2217 mo
398.351 20.2217 li
393.23 18.1007 mo
397.471 22.3427 li
393.23 22.3427 mo
397.471 18.1007 li
@
395.48 17.2217 mo
395.48 23.2217 li
392.48 20.2217 mo
398.48 20.2217 li
393.359 18.1007 mo
397.601 22.3427 li
393.359 22.3427 mo
397.601 18.1007 li
@
395.605 17.2217 mo
395.605 23.2217 li
392.605 20.2217 mo
398.605 20.2217 li
393.484 18.1007 mo
397.726 22.3427 li
393.484 22.3427 mo
397.726 18.1007 li
@
395.718 17.2217 mo
395.718 23.2217 li
392.718 20.2217 mo
398.718 20.2217 li
393.597 18.1007 mo
397.839 22.3427 li
393.597 22.3427 mo
397.839 18.1007 li
@
395.82 17.2217 mo
395.82 23.2217 li
392.82 20.2217 mo
398.82 20.2217 li
393.699 18.1007 mo
397.94 22.3427 li
393.699 22.3427 mo
397.94 18.1007 li
@
395.922 17.2217 mo
395.922 23.2217 li
392.922 20.2217 mo
398.922 20.2217 li
393.801 18.1007 mo
398.043 22.3427 li
393.801 22.3427 mo
398.043 18.1007 li
@
396.023 16.7687 mo
396.023 22.7687 li
393.023 19.7687 mo
399.023 19.7687 li
393.901 17.6477 mo
398.143 21.8897 li
393.901 21.8897 mo
398.143 17.6477 li
@
396.114 16.7687 mo
396.114 22.7687 li
393.114 19.7687 mo
399.114 19.7687 li
393.992 17.6477 mo
398.235 21.8897 li
393.992 21.8897 mo
398.235 17.6477 li
@
396.203 16.7687 mo
396.203 22.7687 li
393.203 19.7687 mo
399.203 19.7687 li
394.082 17.6477 mo
398.324 21.8897 li
394.082 21.8897 mo
398.324 17.6477 li
@
396.277 16.7687 mo
396.277 22.7687 li
393.277 19.7687 mo
399.277 19.7687 li
394.156 17.6477 mo
398.398 21.8897 li
394.156 21.8897 mo
398.398 17.6477 li
@
396.355 16.7687 mo
396.355 22.7687 li
393.355 19.7687 mo
399.355 19.7687 li
394.234 17.6477 mo
398.476 21.8897 li
394.234 21.8897 mo
398.476 17.6477 li
@
396.425 16.7687 mo
396.425 22.7687 li
393.425 19.7687 mo
399.425 19.7687 li
394.304 17.6477 mo
398.546 21.8897 li
394.304 21.8897 mo
398.546 17.6477 li
@
396.493 16.7687 mo
396.493 22.7687 li
393.493 19.7687 mo
399.493 19.7687 li
394.372 17.6477 mo
398.614 21.8897 li
394.372 21.8897 mo
398.614 17.6477 li
@
396.555 16.7687 mo
396.555 22.7687 li
393.555 19.7687 mo
399.555 19.7687 li
394.433 17.6477 mo
398.676 21.8897 li
394.433 21.8897 mo
398.676 17.6477 li
@
396.605 16.7687 mo
396.605 22.7687 li
393.605 19.7687 mo
399.605 19.7687 li
394.484 17.6477 mo
398.726 21.8897 li
394.484 21.8897 mo
398.726 17.6477 li
@
396.663 16.7687 mo
396.663 22.7687 li
393.663 19.7687 mo
399.663 19.7687 li
394.542 17.6477 mo
398.784 21.8897 li
394.542 21.8897 mo
398.784 17.6477 li
@
396.712 16.7687 mo
396.712 22.7687 li
393.712 19.7687 mo
399.712 19.7687 li
394.591 17.6477 mo
398.833 21.8897 li
394.591 21.8897 mo
398.833 17.6477 li
@
396.758 16.7687 mo
396.758 22.7687 li
393.758 19.7687 mo
399.758 19.7687 li
394.637 17.6477 mo
398.88 21.8897 li
394.637 21.8897 mo
398.88 17.6477 li
@
396.803 16.7687 mo
396.803 22.7687 li
393.803 19.7687 mo
399.803 19.7687 li
394.682 17.6477 mo
398.924 21.8897 li
394.682 21.8897 mo
398.924 17.6477 li
@
396.845 16.7687 mo
396.845 22.7687 li
393.845 19.7687 mo
399.845 19.7687 li
394.724 17.6477 mo
398.966 21.8897 li
394.724 21.8897 mo
398.966 17.6477 li
@
396.882 16.7687 mo
396.882 22.7687 li
393.882 19.7687 mo
399.882 19.7687 li
394.76 17.6477 mo
399.003 21.8897 li
394.76 21.8897 mo
399.003 17.6477 li
@
396.922 16.7687 mo
396.922 22.7687 li
393.922 19.7687 mo
399.922 19.7687 li
394.801 17.6477 mo
399.043 21.8897 li
394.801 21.8897 mo
399.043 17.6477 li
@
396.955 16.7687 mo
396.955 22.7687 li
393.955 19.7687 mo
399.955 19.7687 li
394.834 17.6477 mo
399.076 21.8897 li
394.834 21.8897 mo
399.076 17.6477 li
@
396.984 16.7687 mo
396.984 22.7687 li
393.984 19.7687 mo
399.984 19.7687 li
394.863 17.6477 mo
399.105 21.8897 li
394.863 21.8897 mo
399.105 17.6477 li
@
397.017 16.7687 mo
397.017 22.7687 li
394.017 19.7687 mo
400.017 19.7687 li
394.896 17.6477 mo
399.138 21.8897 li
394.896 21.8897 mo
399.138 17.6477 li
@
397.042 16.7687 mo
397.042 22.7687 li
394.042 19.7687 mo
400.042 19.7687 li
394.921 17.6477 mo
399.163 21.8897 li
394.921 21.8897 mo
399.163 17.6477 li
@
397.067 16.7687 mo
397.067 22.7687 li
394.067 19.7687 mo
400.067 19.7687 li
394.946 17.6477 mo
399.188 21.8897 li
394.946 21.8897 mo
399.188 17.6477 li
@
397.09 16.7687 mo
397.09 22.7687 li
394.09 19.7687 mo
400.09 19.7687 li
394.969 17.6477 mo
399.211 21.8897 li
394.969 21.8897 mo
399.211 17.6477 li
@
397.118 16.7687 mo
397.118 22.7687 li
394.118 19.7687 mo
400.118 19.7687 li
394.997 17.6477 mo
399.239 21.8897 li
394.997 21.8897 mo
399.239 17.6477 li
@
397.139 16.7687 mo
397.139 22.7687 li
394.139 19.7687 mo
400.139 19.7687 li
395.017 17.6477 mo
399.259 21.8897 li
395.017 21.8897 mo
399.259 17.6477 li
@
397.157 16.7687 mo
397.157 22.7687 li
394.157 19.7687 mo
400.157 19.7687 li
395.036 17.6477 mo
399.278 21.8897 li
395.036 21.8897 mo
399.278 17.6477 li
@
397.173 16.7687 mo
397.173 22.7687 li
394.173 19.7687 mo
400.173 19.7687 li
395.052 17.6477 mo
399.294 21.8897 li
395.052 21.8897 mo
399.294 17.6477 li
@
397.189 16.7687 mo
397.189 22.7687 li
394.189 19.7687 mo
400.189 19.7687 li
395.068 17.6477 mo
399.31 21.8897 li
395.068 21.8897 mo
399.31 17.6477 li
@
397.207 16.7687 mo
397.207 22.7687 li
394.207 19.7687 mo
400.207 19.7687 li
395.086 17.6477 mo
399.328 21.8897 li
395.086 21.8897 mo
399.328 17.6477 li
@
397.219 16.7687 mo
397.219 22.7687 li
394.219 19.7687 mo
400.219 19.7687 li
395.098 17.6477 mo
399.34 21.8897 li
395.098 21.8897 mo
399.34 17.6477 li
@
397.233 16.7687 mo
397.233 22.7687 li
394.233 19.7687 mo
400.233 19.7687 li
395.112 17.6477 mo
399.354 21.8897 li
395.112 21.8897 mo
399.354 17.6477 li
@
397.246 16.7687 mo
397.246 22.7687 li
394.246 19.7687 mo
400.246 19.7687 li
395.124 17.6477 mo
399.367 21.8897 li
395.124 21.8897 mo
399.367 17.6477 li
@
397.253 16.7687 mo
397.253 22.7687 li
394.253 19.7687 mo
400.253 19.7687 li
395.132 17.6477 mo
399.374 21.8897 li
395.132 21.8897 mo
399.374 17.6477 li
@
397.262 16.7687 mo
397.262 22.7687 li
394.262 19.7687 mo
400.262 19.7687 li
395.14 17.6477 mo
399.383 21.8897 li
395.14 21.8897 mo
399.383 17.6477 li
@
397.271 16.7687 mo
397.271 22.7687 li
394.271 19.7687 mo
400.271 19.7687 li
395.149 17.6477 mo
399.391 21.8897 li
395.149 21.8897 mo
399.391 17.6477 li
@
397.277 16.7687 mo
397.277 22.7687 li
394.277 19.7687 mo
400.277 19.7687 li
395.156 17.6477 mo
399.398 21.8897 li
395.156 21.8897 mo
399.398 17.6477 li
@
397.283 16.7687 mo
397.283 22.7687 li
394.283 19.7687 mo
400.283 19.7687 li
395.162 17.6477 mo
399.405 21.8897 li
395.162 21.8897 mo
399.405 17.6477 li
@
397.29 16.7687 mo
397.29 22.7687 li
394.29 19.7687 mo
400.29 19.7687 li
395.169 17.6477 mo
399.411 21.8897 li
395.169 21.8897 mo
399.411 17.6477 li
@
397.296 16.7687 mo
397.296 22.7687 li
394.296 19.7687 mo
400.296 19.7687 li
395.175 17.6477 mo
399.417 21.8897 li
395.175 21.8897 mo
399.417 17.6477 li
@
397.3 16.7687 mo
397.3 22.7687 li
394.3 19.7687 mo
400.3 19.7687 li
395.18 17.6477 mo
399.421 21.8897 li
395.18 21.8897 mo
399.421 17.6477 li
@
397.303 16.7687 mo
397.303 22.7687 li
394.303 19.7687 mo
400.303 19.7687 li
395.182 17.6477 mo
399.424 21.8897 li
395.182 21.8897 mo
399.424 17.6477 li
@
397.308 16.7687 mo
397.308 22.7687 li
394.308 19.7687 mo
400.308 19.7687 li
395.187 17.6477 mo
399.428 21.8897 li
395.187 21.8897 mo
399.428 17.6477 li
@
397.312 16.7687 mo
397.312 22.7687 li
394.312 19.7687 mo
400.312 19.7687 li
395.19 17.6477 mo
399.433 21.8897 li
395.19 21.8897 mo
399.433 17.6477 li
@
397.316 16.7687 mo
397.316 22.7687 li
394.316 19.7687 mo
400.316 19.7687 li
395.195 17.6477 mo
399.437 21.8897 li
395.195 21.8897 mo
399.437 17.6477 li
@
397.318 16.7687 mo
397.318 22.7687 li
394.318 19.7687 mo
400.318 19.7687 li
395.197 17.6477 mo
399.439 21.8897 li
395.197 21.8897 mo
399.439 17.6477 li
@
397.321 16.7687 mo
397.321 22.7687 li
394.321 19.7687 mo
400.321 19.7687 li
395.199 17.6477 mo
399.442 21.8897 li
395.199 21.8897 mo
399.442 17.6477 li
@
397.323 16.7687 mo
397.323 22.7687 li
394.323 19.7687 mo
400.323 19.7687 li
395.202 17.6477 mo
399.444 21.8897 li
395.202 21.8897 mo
399.444 17.6477 li
@
397.325 16.7687 mo
397.325 22.7687 li
394.325 19.7687 mo
400.325 19.7687 li
395.204 17.6477 mo
399.446 21.8897 li
395.204 21.8897 mo
399.446 17.6477 li
@
397.328 16.7687 mo
397.328 22.7687 li
394.328 19.7687 mo
400.328 19.7687 li
395.207 17.6477 mo
399.449 21.8897 li
395.207 21.8897 mo
399.449 17.6477 li
@
397.329 16.7687 mo
397.329 22.7687 li
394.329 19.7687 mo
400.329 19.7687 li
395.208 17.6477 mo
399.45 21.8897 li
395.208 21.8897 mo
399.45 17.6477 li
@
397.331 16.7687 mo
397.331 22.7687 li
394.331 19.7687 mo
400.331 19.7687 li
395.21 17.6477 mo
399.452 21.8897 li
395.21 21.8897 mo
399.452 17.6477 li
@
397.333 16.7687 mo
397.333 22.7687 li
394.333 19.7687 mo
400.333 19.7687 li
395.212 17.6477 mo
399.454 21.8897 li
395.212 21.8897 mo
399.454 17.6477 li
@
397.336 16.7687 mo
397.336 22.7687 li
394.336 19.7687 mo
400.336 19.7687 li
395.215 17.6477 mo
399.457 21.8897 li
395.215 21.8897 mo
399.457 17.6477 li
@
397.337 16.7687 mo
397.337 22.7687 li
394.337 19.7687 mo
400.337 19.7687 li
395.215 17.6477 mo
399.458 21.8897 li
395.215 21.8897 mo
399.458 17.6477 li
@
397.338 16.7687 mo
397.338 22.7687 li
394.338 19.7687 mo
400.338 19.7687 li
395.217 17.6477 mo
399.459 21.8897 li
395.217 21.8897 mo
399.459 17.6477 li
@
397.339 16.7687 mo
397.339 22.7687 li
394.339 19.7687 mo
400.339 19.7687 li
395.217 17.6477 mo
399.46 21.8897 li
395.217 21.8897 mo
399.46 17.6477 li
@
397.34 16.7687 mo
397.34 22.7687 li
394.34 19.7687 mo
400.34 19.7687 li
395.219 17.6477 mo
399.461 21.8897 li
395.219 21.8897 mo
399.461 17.6477 li
@
397.34 16.7687 mo
397.34 22.7687 li
394.34 19.7687 mo
400.34 19.7687 li
395.219 17.6477 mo
399.462 21.8897 li
395.219 21.8897 mo
399.462 17.6477 li
@
397.341 16.7687 mo
397.341 22.7687 li
394.341 19.7687 mo
400.341 19.7687 li
395.22 17.6477 mo
399.462 21.8897 li
395.22 21.8897 mo
399.462 17.6477 li
@
397.342 16.7687 mo
397.342 22.7687 li
394.342 19.7687 mo
400.342 19.7687 li
395.221 17.6477 mo
399.463 21.8897 li
395.221 21.8897 mo
399.463 17.6477 li
@
397.342 16.7687 mo
397.342 22.7687 li
394.342 19.7687 mo
400.342 19.7687 li
395.221 17.6477 mo
399.463 21.8897 li
395.221 21.8897 mo
399.463 17.6477 li
@
397.342 16.7687 mo
397.342 22.7687 li
394.342 19.7687 mo
400.342 19.7687 li
395.221 17.6477 mo
399.463 21.8897 li
395.221 21.8897 mo
399.463 17.6477 li
@
397.342 16.7687 mo
397.342 22.7687 li
394.342 19.7687 mo
400.342 19.7687 li
395.221 17.6477 mo
399.463 21.8897 li
395.221 21.8897 mo
399.463 17.6477 li
@
397.342 16.7687 mo
397.342 22.7687 li
394.342 19.7687 mo
400.342 19.7687 li
395.221 17.6477 mo
399.463 21.8897 li
395.221 21.8897 mo
399.463 17.6477 li
@
397.343 16.7687 mo
397.343 22.7687 li
394.343 19.7687 mo
400.343 19.7687 li
395.222 17.6477 mo
399.464 21.8897 li
395.222 21.8897 mo
399.464 17.6477 li
@
397.343 16.7687 mo
397.343 22.7687 li
394.343 19.7687 mo
400.343 19.7687 li
395.222 17.6477 mo
399.464 21.8897 li
395.222 21.8897 mo
399.464 17.6477 li
@
397.343 16.7687 mo
397.343 22.7687 li
394.343 19.7687 mo
400.343 19.7687 li
395.222 17.6477 mo
399.464 21.8897 li
395.222 21.8897 mo
399.464 17.6477 li
@
397.343 16.7687 mo
397.343 22.7687 li
394.343 19.7687 mo
400.343 19.7687 li
395.223 17.6477 mo
399.464 21.8897 li
395.223 21.8897 mo
399.464 17.6477 li
@
397.343 16.7687 mo
397.343 22.7687 li
394.343 19.7687 mo
400.343 19.7687 li
395.223 17.6477 mo
399.464 21.8897 li
395.223 21.8897 mo
399.464 17.6477 li
@
397.343 16.7687 mo
397.343 22.7687 li
394.343 19.7687 mo
400.343 19.7687 li
395.223 17.6477 mo
399.464 21.8897 li
395.223 21.8897 mo
399.464 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
397.344 16.7687 mo
397.344 22.7687 li
394.344 19.7687 mo
400.344 19.7687 li
395.223 17.6477 mo
399.465 21.8897 li
395.223 21.8897 mo
399.465 17.6477 li
@
62.0936 244.019 mo
389.094 244.019 li
389.094 156.269 li
62.0936 156.269 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
IZECWD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B59F85688E183C5350FA64965DF8F034A795DEE0DB22
3F1412A593EFDDCE7644454EE3F5AFDE2C79301DD4703C071572A481375DB8E6
D38D7971231FD44BC804772365644FEF7D3DA6758C16DBFDEB5CA6DCBB4DA93B
AB76DD5B27EE0C41EDF1B286BB69CABE8BB277132E2D4BFFC521780B994E6AC7
010110CE506311AC136847124562095ADB1286D8714C5D8ED46C6B98D2719F17
17B84A588540D684F8DD1791B760DC05BC5ED9FD5C7D870B393C959CCB9E> |-
/colon <1C60D8A8C9B854D088EEB7EF3C13811E8EB967C5CB98F731671C3720
3AFF4867191A0B47F0BA607F38> |-
/semicolon <1C60D8A8C9B854D088EEB7EF3C13811E8FEA82347743FE434018
B4317D41147A1016FAE7DE78373F0935AA21BA3C5554383A18268ED14CAA70DD
2D12> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/N <1C60D8A8C9B6079F1E49523970A7CE614BC1CB2AC135B49A6B33564AFCCA
E69F17C685A8629597666C835EDDD27239AEF884B91696774A2A> |-
/S <1C60D8A8C9B64EDF77D7EC0546C6DE4C531E1C5BE973B418A5C3A6670C5B
61F03E729C4EE49FAAE8566EF7513CABDB7B25985EB5B5918EFD38ADD67173B1
E97A3E92F3A138EAC1DA4675B3CA4653A5DB14092F89F79F9AEE2434FC353F36
DC89C2C75CDB64472D17DCFFE6B51D66D133C183BCCD261A16E57C765010C97B
7BBAC0AD483057F900CCF804A5859EF25F455471A44B955452B199> |-
/V <1C60D8A8C9B64EDF88209F74DE48C31924050FF0040AA5A034E0BA481252
B18875F38C0C76ED1A659C37AD61> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
/f <1C60D8A8C9B854D08882A1CDE4CC8CF82C721397EF3C1B7F275F9E0F93B7
3057EE87F13D1A76347F24278F0AAB6C40024DD0CC30E14D035B17B8421125C0
8D6E5ECF0FD989FD11DB950870FC66> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IZECWD+Helvetica /Encoding get
dup 37 /percent put
dup 58 /colon put
dup 59 /semicolon put
dup 69 /E put
dup 78 /N put
dup 83 /S put
dup 86 /V put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 102 /f put
pop
%ADOEndSubsetFont
/IZECWD+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /.notdef /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 6{/.notdef}rp /N 3{/.notdef}rp /R /S 2{/.notdef}rp 
/V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef 
/c /.notdef /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /.notdef /p 2{/.notdef}rp /s /t /u 
138{/.notdef}rp]
IZECWD+Helvetica nf
IZECWD+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
97.3436 174.218 mo
(EfficientNetV2-S [17]; EER: 1.84%)
[11.3393 4.72605 4.72605 3.77405 8.50011 3.77405 9.4521 9.4521 4.72606 12.2741 9.4521 4.72606 
11.3393 9.4521 5.66095 11.3393 4.72604 4.72606 9.4521 9.45209 4.72607 4.72604 4.72604 11.3393 
11.3392 12.2742 4.72604 4.72604 9.45212 4.72604 9.45212 9.45212 0 ]xsh
1 lj
65.0936 168.218 mo
95.0936 168.218 li
.265019 .809232 0 0 cmyk
@
0 lj
77.8436 170.468 mo
82.3436 170.468 li
82.3436 165.968 li
77.8436 165.968 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
IZECWD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/K <1C60D8A8C9B64EDF88209F74DE48C33B4B0B93D0D9C0FD0B4C3ED394623E
3A80B45D329FC06BB55248F78872AA55981B9FC8E5ADA631A9747A6CEB10FCCD
65D75EFC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IZECWD+Helvetica /Encoding get
dup 75 /K put
pop
%ADOEndSubsetFont
/IZECWD+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /.notdef /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 3{/.notdef}rp /R 
/S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /.notdef /n /.notdef /p 2{/.notdef}rp /s 
/t /u 138{/.notdef}rp]
IZECWD+Helvetica nf
IZECWD+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
97.3436 195.502 mo
(FKNet [8]; EER: 5.74%)
[10.387 11.3393 12.2741 9.45212 4.72604 4.72606 4.72606 9.4521 4.72606 4.72604 4.72604 11.3393 
11.3393 12.2741 4.72607 4.72604 9.4521 4.72606 9.45209 9.45215 0 ]xsh
1 lj
65.0936 189.502 mo
95.0936 189.502 li
@
0 lj
80.0936 186.502 mo
80.0936 192.501 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
IZECWD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6FF86765B1780566DC60977E8F5E0E0E559AD0F2F30B72691
EE57D5DBE6F0F93089673747ADDB5A930EEB08C782F7E5ECE280F031DF7B2C88
219DAED7660E00D4C7CEAA128F70372A143D1D40AF3FBF099462CCA2816767C1
E13E1B42223B7099AF0FC017FC> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC19B8DCE165977F6AAF76E3029E2
2FE3CE779FD06B0953DEB844022554A1520A59CA70C9868583B567F3BC27D216
1CCF83FEFCB107A9A4CD2BBD2BD86309EE60086B488954FC5EFB5DDDF6DFC361
A4431D76AF6F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IZECWD+Helvetica /Encoding get
dup 79 /O put
dup 114 /r put
pop
%ADOEndSubsetFont
/IZECWD+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /.notdef /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A 3{/.notdef}rp /E 
/F /G 3{/.notdef}rp /K 2{/.notdef}rp /N /O 2{/.notdef}rp 
/R /S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 
3{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n /.notdef /p /.notdef 
/r /s /t /u 138{/.notdef}rp]
IZECWD+Helvetica nf
IZECWD+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
97.3436 216.786 mo
(Ours; E)sh
154.974 216.786 mo
(ER: 1.60%)
[11.3392 12.2742 4.72604 4.72606 9.4521 4.72606 9.4521 9.45212 0 ]xsh
1 lj
65.0936 210.786 mo
95.0936 210.786 li
0 .990631 1 .000396735 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
IZECWD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B6079FE1CE316282F0E84E7EAE56817E527B1A2FBA7D6E6E3E
84761CC128BB54A99A2A93B5D172E1531D29A45A5EC52E28A860DB78AEF5044D
D841ADA187A0971E5C6028FECC99F95A89CDEF60FF9739318C6CDCFD940AFB97
77EC1EB041B6AC82C7B827BCFC6CB4C10A94B6280806B13F83> |-
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/v <1C60D8A8C9B7A73DC54C6E6FD58E3FF02EC0039EA78A08B0B838392D2447
0C9B580A1092E3692A4C20563FB5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IZECWD+Helvetica /Encoding get
dup 67 /C put
dup 68 /D put
dup 111 /o put
dup 118 /v put
pop
%ADOEndSubsetFont
/IZECWD+Helvetica*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef 
/zero /one /two /.notdef /four /five /six /seven 
/eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C 
/D /E /F /G 3{/.notdef}rp /K 2{/.notdef}rp /N 
/O 2{/.notdef}rp /R /S 2{/.notdef}rp /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e 
/f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /s /t /u /v 137{/.notdef}rp]
IZECWD+Helvetica nf
IZECWD+Helvetica*1 [17.0002 0 0 -17.0002 0 0 ]msf
97.3436 238.07 mo
(DefConvNet [45]; EER: 5.01%)
[12.2741 9.45211 4.72604 12.2742 9.4521 9.45212 8.50009 12.2741 9.45212 4.72604 4.72606 4.72606 
9.4521 9.4521 4.72606 4.72606 4.72604 11.3393 11.3393 12.2741 4.72604 4.72607 9.45209 4.72607 
9.45209 9.45212 0 ]xsh
65.0936 232.07 mo
95.0936 232.07 li
.895628 .7673 0 0 cmyk
@
0 lj
80.0936 229.07 mo
80.0936 235.07 li
77.0936 232.07 mo
83.0936 232.07 li
77.9725 229.949 mo
82.2147 234.191 li
77.9725 234.191 mo
82.2147 229.949 li
@
62.0936 244.019 mo
389.094 244.019 li
389.094 156.269 li
62.0936 156.269 li
cp
1 /0 /CSD get_res sepcs
.851074 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/IZECWE+Helvetica-Bold*1 uf
/IZECWE+Helvetica-Bold uf
/JAAAAA+Helvetica-Bold uf
/IZECWD+Helvetica*1 uf
/IZECWD+Helvetica uf
/HAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
